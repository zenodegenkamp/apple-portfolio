(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["cloudinary-video-player"] = factory();
	else
		root["cloudinary-video-player"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./components/component-utils.js":
/*!***************************************!*\
  !*** ./components/component-utils.js ***!
  \***************************************/
/***/ ((module) => {

var hide = function hide(el) {
  el.style.display = 'none';
};
var show = function show(el) {
  el.style.display = '';
};
var setText = function setText(el, text) {
  if (!text || text.length <= 0) {
    el.innerText = '';
    hide(el);
    return;
  }
  el.innerText = text;
  show(el);
};
module.exports = {
  hide: hide,
  show: show,
  setText: setText
};

/***/ }),

/***/ "./components/index.js":
/*!*****************************!*\
  !*** ./components/index.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "JumpBackButton": () => (/* reexport safe */ _jumpButtons_jump_10_minus__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "JumpForwardButton": () => (/* reexport safe */ _jumpButtons_jump_10_plus__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   "LogoButton": () => (/* reexport safe */ _logoButton_logo_button__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   "PlaylistPanel": () => (/* reexport safe */ _playlist_panel_playlist_panel__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   "ProgressControlEventsBlocker": () => (/* reexport safe */ _progress_control_events_blocker_progress_control_events_blocker__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   "RecommendationsOverlay": () => (/* reexport safe */ _recommendations_overlay__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   "ShoppablePanel": () => (/* reexport safe */ _shoppable_bar_panel_shoppable_panel__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   "TitleBar": () => (/* reexport safe */ _title_bar_title_bar__WEBPACK_IMPORTED_MODULE_7__["default"])
/* harmony export */ });
/* harmony import */ var _jumpButtons_jump_10_plus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jumpButtons/jump-10-plus */ "./components/jumpButtons/jump-10-plus.js");
/* harmony import */ var _jumpButtons_jump_10_minus__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jumpButtons/jump-10-minus */ "./components/jumpButtons/jump-10-minus.js");
/* harmony import */ var _logoButton_logo_button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./logoButton/logo-button */ "./components/logoButton/logo-button.js");
/* harmony import */ var _playlist_panel_playlist_panel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./playlist/panel/playlist-panel */ "./components/playlist/panel/playlist-panel.js");
/* harmony import */ var _progress_control_events_blocker_progress_control_events_blocker__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./progress-control-events-blocker/progress-control-events-blocker */ "./components/progress-control-events-blocker/progress-control-events-blocker.js");
/* harmony import */ var _recommendations_overlay__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./recommendations-overlay */ "./components/recommendations-overlay/index.js");
/* harmony import */ var _shoppable_bar_panel_shoppable_panel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./shoppable-bar/panel/shoppable-panel */ "./components/shoppable-bar/panel/shoppable-panel.js");
/* harmony import */ var _title_bar_title_bar__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./title-bar/title-bar */ "./components/title-bar/title-bar.js");
/* harmony import */ var assets_styles_components_triangle_volume_bar_scss__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! assets/styles/components/triangle-volume-bar.scss */ "./assets/styles/components/triangle-volume-bar.scss");











/***/ }),

/***/ "./components/interaction-area/interaction-area.const.js":
/*!***************************************************************!*\
  !*** ./components/interaction-area/interaction-area.const.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CLOSE_INTERACTION_AREA_LAYOUT_DELAY": () => (/* binding */ CLOSE_INTERACTION_AREA_LAYOUT_DELAY),
/* harmony export */   "DEFAULT_INTERACTION_ARE_TRANSITION": () => (/* binding */ DEFAULT_INTERACTION_ARE_TRANSITION),
/* harmony export */   "INTERACTION_AREAS_CONTAINER_CLASS_NAME": () => (/* binding */ INTERACTION_AREAS_CONTAINER_CLASS_NAME),
/* harmony export */   "INTERACTION_AREAS_PREFIX": () => (/* binding */ INTERACTION_AREAS_PREFIX),
/* harmony export */   "INTERACTION_AREAS_TEMPLATE": () => (/* binding */ INTERACTION_AREAS_TEMPLATE),
/* harmony export */   "INTERACTION_AREAS_THEME": () => (/* binding */ INTERACTION_AREAS_THEME),
/* harmony export */   "INTERACTION_AREA_HAND_ICON": () => (/* binding */ INTERACTION_AREA_HAND_ICON),
/* harmony export */   "INTERACTION_AREA_LAYOUT_LOCAL_STORAGE_NAME": () => (/* binding */ INTERACTION_AREA_LAYOUT_LOCAL_STORAGE_NAME),
/* harmony export */   "TEMPLATE_INTERACTION_AREAS_VTT": () => (/* binding */ TEMPLATE_INTERACTION_AREAS_VTT)
/* harmony export */ });
var _TEMPLATE_INTERACTION;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var INTERACTION_AREA_LAYOUT_LOCAL_STORAGE_NAME = 'cld-ia-layout-state';
var INTERACTION_AREAS_PREFIX = 'vp-ia';
var INTERACTION_AREAS_CONTAINER_CLASS_NAME = 'interaction-areas-container';
var INTERACTION_AREAS_TEMPLATE = {
  PORTRAIT: 'portrait',
  LANDSCAPE: 'landscape',
  All: 'all',
  CENTER: 'center'
};
var INTERACTION_AREAS_THEME = {
  PULSING: 'pulsing',
  SHADOWED: 'shadowed'
};
var TEMPLATE_INTERACTION_AREAS_VTT = (_TEMPLATE_INTERACTION = {}, _defineProperty(_TEMPLATE_INTERACTION, INTERACTION_AREAS_TEMPLATE.PORTRAIT, 'https://res.cloudinary.com/prod/raw/upload/v1623772481/video-player/vtts/portrait.vtt'), _defineProperty(_TEMPLATE_INTERACTION, INTERACTION_AREAS_TEMPLATE.LANDSCAPE, 'https://res.cloudinary.com/prod/raw/upload/v1623772303/video-player/vtts/landscape.vtt'), _defineProperty(_TEMPLATE_INTERACTION, INTERACTION_AREAS_TEMPLATE.All, 'https://res.cloudinary.com/prod/raw/upload/v1623250266/video-player/vtts/all.vtt'), _defineProperty(_TEMPLATE_INTERACTION, INTERACTION_AREAS_TEMPLATE.CENTER, 'https://res.cloudinary.com/prod/raw/upload/v1623250265/video-player/vtts/center.vtt'), _TEMPLATE_INTERACTION);
var INTERACTION_AREA_HAND_ICON = 'https://res.cloudinary.com/prod/image/upload/v1626764643/video-player/interaction-area-hand.svg';
var CLOSE_INTERACTION_AREA_LAYOUT_DELAY = 4500;
var DEFAULT_INTERACTION_ARE_TRANSITION = 250;

/***/ }),

/***/ "./components/jumpButtons/jump-10-minus.js":
/*!*************************************************!*\
  !*** ./components/jumpButtons/jump-10-minus.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ClickableComponent = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('ClickableComponent');
var JumpBackButton = /*#__PURE__*/function (_ClickableComponent) {
  _inherits(JumpBackButton, _ClickableComponent);
  var _super = _createSuper(JumpBackButton);
  function JumpBackButton() {
    _classCallCheck(this, JumpBackButton);
    return _super.apply(this, arguments);
  }
  _createClass(JumpBackButton, [{
    key: "handleClick",
    value: function handleClick(event) {
      _get(_getPrototypeOf(JumpBackButton.prototype), "handleClick", this).call(this, event);
      this.player().currentTime(this.player().currentTime() - 10);
    }
  }, {
    key: "createEl",
    value: function createEl() {
      return video_js__WEBPACK_IMPORTED_MODULE_0___default().dom.createEl('button', {
        className: 'vjs-control vjs-icon-skip-10-min vjs-button'
      });
    }
  }]);
  return JumpBackButton;
}(ClickableComponent);
video_js__WEBPACK_IMPORTED_MODULE_0___default().registerComponent('JumpBackButton', JumpBackButton);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (JumpBackButton);

/***/ }),

/***/ "./components/jumpButtons/jump-10-plus.js":
/*!************************************************!*\
  !*** ./components/jumpButtons/jump-10-plus.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ClickableComponent = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('ClickableComponent');
var JumpForwardButton = /*#__PURE__*/function (_ClickableComponent) {
  _inherits(JumpForwardButton, _ClickableComponent);
  var _super = _createSuper(JumpForwardButton);
  function JumpForwardButton() {
    _classCallCheck(this, JumpForwardButton);
    return _super.apply(this, arguments);
  }
  _createClass(JumpForwardButton, [{
    key: "handleClick",
    value: function handleClick(event) {
      _get(_getPrototypeOf(JumpForwardButton.prototype), "handleClick", this).call(this, event);
      this.player().currentTime(this.player().currentTime() + 10);
    }
  }, {
    key: "createEl",
    value: function createEl() {
      return video_js__WEBPACK_IMPORTED_MODULE_0___default().dom.createEl('button', {
        className: 'vjs-control vjs-icon-skip-10-plus vjs-button'
      });
    }
  }]);
  return JumpForwardButton;
}(ClickableComponent);
video_js__WEBPACK_IMPORTED_MODULE_0___default().registerComponent('JumpForwardButton', JumpForwardButton);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (JumpForwardButton);

/***/ }),

/***/ "./components/logoButton/logo-button.const.js":
/*!****************************************************!*\
  !*** ./components/logoButton/logo-button.const.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DARK_BG_ICON": () => (/* binding */ DARK_BG_ICON),
/* harmony export */   "LIGHT_BG_ICON": () => (/* binding */ LIGHT_BG_ICON)
/* harmony export */ });
var LIGHT_BG_ICON = 'https://res.cloudinary.com/cloudinary-marketing/image/upload/v1597164189/creative_source/Logo/Cloud%20Glyph/cloudinary_cloud_glyph_regular.svg';
var DARK_BG_ICON = 'https://res.cloudinary.com/cloudinary-marketing/image/upload/v1597164191/creative_source/Logo/Cloud%20Glyph/cloudinary_cloud_glyph_white.svg';

/***/ }),

/***/ "./components/logoButton/logo-button.js":
/*!**********************************************!*\
  !*** ./components/logoButton/logo-button.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _logo_button_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logo-button.scss */ "./components/logoButton/logo-button.scss");
/* harmony import */ var _logo_button_const__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./logo-button.const */ "./components/logoButton/logo-button.const.js");
/* harmony import */ var _video_player_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../video-player.utils */ "./video-player.utils.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }





// support VJS5 & VJS6 at the same time
var ClickableComponent = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('ClickableComponent');
var LogoButton = /*#__PURE__*/function (_ClickableComponent) {
  _inherits(LogoButton, _ClickableComponent);
  var _super = _createSuper(LogoButton);
  function LogoButton() {
    _classCallCheck(this, LogoButton);
    return _super.apply(this, arguments);
  }
  _createClass(LogoButton, [{
    key: "createEl",
    value: function createEl() {
      var opts = this.options_.playerOptions;
      var display = opts.showLogo ? 'block' : 'none';
      var _isLight = (0,_video_player_utils__WEBPACK_IMPORTED_MODULE_3__.isLight)(opts) ? _logo_button_const__WEBPACK_IMPORTED_MODULE_2__.LIGHT_BG_ICON : _logo_button_const__WEBPACK_IMPORTED_MODULE_2__.DARK_BG_ICON;
      var bgIcon = opts.logoImageUrl ? opts.logoImageUrl : _isLight;
      return video_js__WEBPACK_IMPORTED_MODULE_0___default().dom.createEl('a', {}, {
        "class": 'vjs-control vjs-cloudinary-button vjs-button',
        href: opts.logoOnclickUrl,
        target: '_blank',
        style: "display: ".concat(display, "; background-image: url(").concat(bgIcon, ")"),
        'aria-label': 'Logo link'
      });
    }
  }]);
  return LogoButton;
}(ClickableComponent);
video_js__WEBPACK_IMPORTED_MODULE_0___default().registerComponent('logoButton', LogoButton);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LogoButton);

/***/ }),

/***/ "./components/playlist/components/playlist-button.js":
/*!***********************************************************!*\
  !*** ./components/playlist/components/playlist-button.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


// Get the ClickableComponent base class from Video.js
var ClickableComponent = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('ClickableComponent');

// Create a common class for playlist buttons
var PlaylistButton = /*#__PURE__*/function (_ClickableComponent) {
  _inherits(PlaylistButton, _ClickableComponent);
  var _super = _createSuper(PlaylistButton);
  function PlaylistButton(player, options) {
    var _this;
    _classCallCheck(this, PlaylistButton);
    // It is important to invoke the superclass before anything else,
    // to get all the features of components out of the box!
    _this = _super.call(this, player, options);
    var type = options.type;
    if (!type && type !== 'previous' && type !== 'next') {
      throw new Error('Type must be either \'previous\' or \'next\'');
    }
    return _this;
  }

  // The `createEl` function of a component creates its DOM element.
  _createClass(PlaylistButton, [{
    key: "createEl",
    value: function createEl() {
      var type = this.options_.type;
      var typeCssClass = "vjs-icon-play-".concat(type);
      return video_js__WEBPACK_IMPORTED_MODULE_0___default().dom.createEl('button', {
        // Prefixing classes of elements within a player with "vjs-"
        // is a convention used in Video.js.
        className: "vjs-control vjs-playlist-button vjs-button ".concat(typeCssClass)
      });
    }
  }]);
  return PlaylistButton;
}(ClickableComponent);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PlaylistButton);

/***/ }),

/***/ "./components/playlist/components/playlist-next-button.js":
/*!****************************************************************!*\
  !*** ./components/playlist/components/playlist-next-button.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _playlist_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playlist-button */ "./components/playlist/components/playlist-button.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_1__);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var PlaylistNextButton = /*#__PURE__*/function (_PlaylistButton) {
  _inherits(PlaylistNextButton, _PlaylistButton);
  var _super = _createSuper(PlaylistNextButton);
  function PlaylistNextButton(player) {
    _classCallCheck(this, PlaylistNextButton);
    return _super.call(this, player, {
      type: 'next'
    });
  }
  _createClass(PlaylistNextButton, [{
    key: "handleClick",
    value: function handleClick(event) {
      event.stopPropagation();
      _get(_getPrototypeOf(PlaylistNextButton.prototype), "handleClick", this).call(this, event);
      this.player().cloudinary.playlist().playNext();
    }
  }]);
  return PlaylistNextButton;
}(_playlist_button__WEBPACK_IMPORTED_MODULE_0__["default"]);
video_js__WEBPACK_IMPORTED_MODULE_1___default().registerComponent('PlaylistNextButton', PlaylistNextButton);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PlaylistNextButton);

/***/ }),

/***/ "./components/playlist/components/playlist-previous-button.js":
/*!********************************************************************!*\
  !*** ./components/playlist/components/playlist-previous-button.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _playlist_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playlist-button */ "./components/playlist/components/playlist-button.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_1__);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var PlaylistPreviousButton = /*#__PURE__*/function (_PlaylistButton) {
  _inherits(PlaylistPreviousButton, _PlaylistButton);
  var _super = _createSuper(PlaylistPreviousButton);
  function PlaylistPreviousButton(player) {
    _classCallCheck(this, PlaylistPreviousButton);
    return _super.call(this, player, {
      type: 'previous'
    });
  }
  _createClass(PlaylistPreviousButton, [{
    key: "handleClick",
    value: function handleClick(event) {
      _get(_getPrototypeOf(PlaylistPreviousButton.prototype), "handleClick", this).call(this, event);
      this.player().cloudinary.playlist().playPrevious();
    }
  }]);
  return PlaylistPreviousButton;
}(_playlist_button__WEBPACK_IMPORTED_MODULE_0__["default"]);
video_js__WEBPACK_IMPORTED_MODULE_1___default().registerComponent('PlaylistPreviousButton', PlaylistPreviousButton);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PlaylistPreviousButton);

/***/ }),

/***/ "./components/playlist/components/playlist.js":
/*!****************************************************!*\
  !*** ./components/playlist/components/playlist.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PlaylistNextButton": () => (/* reexport safe */ _playlist_next_button__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   "PlaylistPreviousButton": () => (/* reexport safe */ _playlist_previous_button__WEBPACK_IMPORTED_MODULE_1__["default"])
/* harmony export */ });
/* harmony import */ var _playlist_next_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playlist-next-button */ "./components/playlist/components/playlist-next-button.js");
/* harmony import */ var _playlist_previous_button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./playlist-previous-button */ "./components/playlist/components/playlist-previous-button.js");
/* harmony import */ var _playlist_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./playlist.scss */ "./components/playlist/components/playlist.scss");





/***/ }),

/***/ "./components/playlist/components/upcoming-video-overlay.js":
/*!******************************************************************!*\
  !*** ./components/playlist/components/upcoming-video-overlay.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _upcoming_video_overlay_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./upcoming-video-overlay.scss */ "./components/playlist/components/upcoming-video-overlay.scss");
/* harmony import */ var _utils_consts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/consts */ "./utils/consts.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }




// support VJS5 & VJS6 at the same time
var dom = (video_js__WEBPACK_IMPORTED_MODULE_0___default().dom) || (video_js__WEBPACK_IMPORTED_MODULE_0___default());
var Component = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('Component');
var ClickableComponent = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('ClickableComponent');
var UpcomingVideoOverlay = /*#__PURE__*/function (_ClickableComponent) {
  _inherits(UpcomingVideoOverlay, _ClickableComponent);
  var _super = _createSuper(UpcomingVideoOverlay);
  function UpcomingVideoOverlay(player) {
    var _this;
    _classCallCheck(this, UpcomingVideoOverlay);
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this, player].concat(args));
    _defineProperty(_assertThisInitialized(_this), "_hide", function () {
      _this.removeClass(UpcomingVideoOverlay.VJS_UPCOMING_VIDEO_SHOW);
    });
    _defineProperty(_assertThisInitialized(_this), "_onPlaylistItemChange", function (_, event) {
      _this._hide();
      _this._disableTransition(function () {
        if (event.next) {
          _this.setItem(event.next);
        }
      });
    });
    _defineProperty(_assertThisInitialized(_this), "_show", function () {
      var ima = _this.player().ima;
      var adsManager = ima === 'object' && ima.getAdsManager();
      if (adsManager) {
        if (!adsManager.getCurrentAd() || adsManager.getCurrentAd().isLinear()) {
          _this.addClass(UpcomingVideoOverlay.VJS_UPCOMING_VIDEO_SHOW);
        }
      } else {
        _this.addClass(UpcomingVideoOverlay.VJS_UPCOMING_VIDEO_SHOW);
      }
    });
    _this._setEvents(player);
    return _this;
  }
  _createClass(UpcomingVideoOverlay, [{
    key: "_setEvents",
    value: function _setEvents(player) {
      player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_2__.PLAYER_EVENT.UP_COMING_VIDEO_SHOW, this._show);
      player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_2__.PLAYER_EVENT.UP_COMING_VIDEO_HIDE, this._hide);
      player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_2__.PLAYER_EVENT.PLAYLIST_ITEM_CHANGED, this._onPlaylistItemChange);
    }
  }, {
    key: "_disableTransition",
    value: function _disableTransition(block) {
      this.addClass(UpcomingVideoOverlay.DISABLE_TRANSITION_CLASS);
      block();
      this.removeClass(UpcomingVideoOverlay.DISABLE_TRANSITION_CLASS);
    }
  }, {
    key: "setTitle",
    value: function setTitle(source) {
      var title = this.getChild('upcomingVideoOverlayContent').getChild('upcomingVideoOverlayBar').getChild('upcomingVideoOverlayTitle');
      title.setContent(source.info().title || source.publicId());
    }
  }, {
    key: "setItem",
    value: function setItem(source) {
      this._source = source;
      var maxWidth = parseInt(window.getComputedStyle(this.el(), null).getPropertyValue('max-width'), 10);
      var maxHeight = Math.round(maxWidth * (9 / 16.0));
      var transformation = {
        crop: 'pad',
        background: 'auto:predominant',
        width: maxWidth,
        height: maxHeight
      };
      var content = this.getChild('upcomingVideoOverlayContent');
      this.setTitle(source);
      content.el().style.backgroundImage = "url(".concat(this._source.poster().url({
        transformation: transformation
      }), ")");
    }
  }, {
    key: "handleClick",
    value: function handleClick() {
      _get(_getPrototypeOf(UpcomingVideoOverlay.prototype), "handleClick", this).call(this, event);
      this.player().cloudinary.playlist().playNext();
    }
  }, {
    key: "createEl",
    value: function createEl() {
      return _get(_getPrototypeOf(UpcomingVideoOverlay.prototype), "createEl", this).call(this, 'div', {
        className: 'vjs-upcoming-video'
      });
    }
  }]);
  return UpcomingVideoOverlay;
}(ClickableComponent);
_defineProperty(UpcomingVideoOverlay, "DISABLE_TRANSITION_CLASS", 'disable-transition');
_defineProperty(UpcomingVideoOverlay, "VJS_UPCOMING_VIDEO_SHOW", 'vjs-upcoming-video-show');
var UpcomingVideoOverlayContent = /*#__PURE__*/function (_Component) {
  _inherits(UpcomingVideoOverlayContent, _Component);
  var _super2 = _createSuper(UpcomingVideoOverlayContent);
  function UpcomingVideoOverlayContent() {
    _classCallCheck(this, UpcomingVideoOverlayContent);
    return _super2.apply(this, arguments);
  }
  _createClass(UpcomingVideoOverlayContent, [{
    key: "createEl",
    value: function createEl() {
      // Content wraps image and bar
      return _get(_getPrototypeOf(UpcomingVideoOverlayContent.prototype), "createEl", this).call(this, 'div', {
        className: 'upcoming-video-overlay aspect-ratio-content'
      });
    }
  }]);
  return UpcomingVideoOverlayContent;
}(Component);
var UpcomingVideoOverlayTitle = /*#__PURE__*/function (_Component2) {
  _inherits(UpcomingVideoOverlayTitle, _Component2);
  var _super3 = _createSuper(UpcomingVideoOverlayTitle);
  function UpcomingVideoOverlayTitle() {
    _classCallCheck(this, UpcomingVideoOverlayTitle);
    return _super3.apply(this, arguments);
  }
  _createClass(UpcomingVideoOverlayTitle, [{
    key: "setContent",
    value: function setContent(title) {
      this._contentSpan.innerText = title;
    }
  }, {
    key: "createEl",
    value: function createEl() {
      var el = _get(_getPrototypeOf(UpcomingVideoOverlayTitle.prototype), "createEl", this).call(this, 'div', {
        className: 'vjs-control vjs-upcoming-video-title'
      });
      var container = dom.createEl('div', {
        className: 'vjs-upcoming-video-title-display',
        innerHTML: '<span class="vjs-control-text">Next up</span>Next up: '
      });
      this._contentSpan = dom.createEl('span', {
        className: 'vjs-upcoming-video-title-display-label'
      });
      container.appendChild(this._contentSpan);
      el.appendChild(container);
      return el;
    }
  }]);
  return UpcomingVideoOverlayTitle;
}(Component);
var UpcomingVideoOverlayBar = /*#__PURE__*/function (_Component3) {
  _inherits(UpcomingVideoOverlayBar, _Component3);
  var _super4 = _createSuper(UpcomingVideoOverlayBar);
  function UpcomingVideoOverlayBar() {
    _classCallCheck(this, UpcomingVideoOverlayBar);
    return _super4.apply(this, arguments);
  }
  _createClass(UpcomingVideoOverlayBar, [{
    key: "createEl",
    value: function createEl() {
      return _get(_getPrototypeOf(UpcomingVideoOverlayBar.prototype), "createEl", this).call(this, 'div', {
        className: 'vjs-upcoming-video-bar'
      });
    }
  }]);
  return UpcomingVideoOverlayBar;
}(Component);
UpcomingVideoOverlay.prototype.options_ = {
  children: ['upcomingVideoOverlayContent']
};
video_js__WEBPACK_IMPORTED_MODULE_0___default().registerComponent('upcomingVideoOverlay', UpcomingVideoOverlay);
UpcomingVideoOverlayContent.prototype.options_ = {
  children: ['upcomingVideoOverlayBar']
};
video_js__WEBPACK_IMPORTED_MODULE_0___default().registerComponent('upcomingVideoOverlayContent', UpcomingVideoOverlayContent);
UpcomingVideoOverlayBar.prototype.options_ = {
  children: ['upcomingVideoOverlayTitle', 'playlistNextButton']
};
video_js__WEBPACK_IMPORTED_MODULE_0___default().registerComponent('upcomingVideoOverlayBar', UpcomingVideoOverlayBar);
video_js__WEBPACK_IMPORTED_MODULE_0___default().registerComponent('upcomingVideoOverlayTitle', UpcomingVideoOverlayTitle);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (UpcomingVideoOverlay);

/***/ }),

/***/ "./components/playlist/layout/playlist-layout-custom.js":
/*!**************************************************************!*\
  !*** ./components/playlist/layout/playlist-layout-custom.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _playlist_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playlist-layout */ "./components/playlist/layout/playlist-layout.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var PlaylistLayoutCustom = /*#__PURE__*/function (_PlaylistLayout) {
  _inherits(PlaylistLayoutCustom, _PlaylistLayout);
  var _super = _createSuper(PlaylistLayoutCustom);
  function PlaylistLayoutCustom() {
    _classCallCheck(this, PlaylistLayoutCustom);
    return _super.apply(this, arguments);
  }
  _createClass(PlaylistLayoutCustom, [{
    key: "getCls",
    value: function getCls() {
      var cls = _get(_getPrototypeOf(PlaylistLayoutCustom.prototype), "getCls", this).call(this);
      cls.push('cld-plw-custom');
      return cls;
    }
  }, {
    key: "createEl",
    value: function createEl() {
      var el = _get(_getPrototypeOf(PlaylistLayoutCustom.prototype), "createEl", this).call(this);
      this.options_.renderTo.appendChild(el);
      return el;
    }
  }]);
  return PlaylistLayoutCustom;
}(_playlist_layout__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PlaylistLayoutCustom);

/***/ }),

/***/ "./components/playlist/layout/playlist-layout-horizontal.js":
/*!******************************************************************!*\
  !*** ./components/playlist/layout/playlist-layout-horizontal.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _playlist_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playlist-layout */ "./components/playlist/layout/playlist-layout.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var PlaylistLayoutHorizontal = /*#__PURE__*/function (_PlaylistLayout) {
  _inherits(PlaylistLayoutHorizontal, _PlaylistLayout);
  var _super = _createSuper(PlaylistLayoutHorizontal);
  function PlaylistLayoutHorizontal(player, options) {
    _classCallCheck(this, PlaylistLayoutHorizontal);
    options.wrap = true;
    return _super.call(this, player, options);
  }
  _createClass(PlaylistLayoutHorizontal, [{
    key: "getCls",
    value: function getCls() {
      var cls = _get(_getPrototypeOf(PlaylistLayoutHorizontal.prototype), "getCls", this).call(this);
      cls.push('cld-plw-horizontal');
      return cls;
    }
  }]);
  return PlaylistLayoutHorizontal;
}(_playlist_layout__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PlaylistLayoutHorizontal);

/***/ }),

/***/ "./components/playlist/layout/playlist-layout-vertical.js":
/*!****************************************************************!*\
  !*** ./components/playlist/layout/playlist-layout-vertical.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _playlist_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playlist-layout */ "./components/playlist/layout/playlist-layout.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var PlaylistLayoutVertical = /*#__PURE__*/function (_PlaylistLayout) {
  _inherits(PlaylistLayoutVertical, _PlaylistLayout);
  var _super = _createSuper(PlaylistLayoutVertical);
  function PlaylistLayoutVertical(player, options) {
    _classCallCheck(this, PlaylistLayoutVertical);
    options.wrap = true;
    return _super.call(this, player, options);
  }
  _createClass(PlaylistLayoutVertical, [{
    key: "getCls",
    value: function getCls() {
      var cls = _get(_getPrototypeOf(PlaylistLayoutVertical.prototype), "getCls", this).call(this);
      cls.push('cld-plw-vertical');
      return cls;
    }
  }]);
  return PlaylistLayoutVertical;
}(_playlist_layout__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PlaylistLayoutVertical);

/***/ }),

/***/ "./components/playlist/layout/playlist-layout.js":
/*!*******************************************************!*\
  !*** ./components/playlist/layout/playlist-layout.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/dom */ "./utils/dom.js");
/* harmony import */ var _utils_css_prefix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/css-prefix */ "./utils/css-prefix.js");
/* harmony import */ var _utils_consts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/consts */ "./utils/consts.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }




var dom = (video_js__WEBPACK_IMPORTED_MODULE_0___default().dom) || (video_js__WEBPACK_IMPORTED_MODULE_0___default());
var Component = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('Component');
var OPTIONS_DEFAULT = {
  wrap: false
};
var PlaylistLayout = /*#__PURE__*/function (_Component) {
  _inherits(PlaylistLayout, _Component);
  var _super = _createSuper(PlaylistLayout);
  function PlaylistLayout(player, options) {
    var _thisSuper, _this;
    _classCallCheck(this, PlaylistLayout);
    var layoutOptions = _objectSpread(_objectSpread({}, OPTIONS_DEFAULT), options);
    _this = _super.call(this, player, layoutOptions);
    _this.player_ = player;
    var fluidHandler = function fluidHandler(e, fluid) {
      _this.options_.fluid = fluid;
      _this.removeCls();
      _this.setCls();
    };
    var wrapVideoWithLayout = function wrapVideoWithLayout() {
      var el = _this.el();
      _this.videoWrap_ = dom.createEl('div', {
        className: 'cld-plw-col-player'
      });
      _this.contentEl_ = _this.contentEl_ = dom.createEl('div', {
        className: 'cld-plw-col-list'
      });
      (0,_utils_dom__WEBPACK_IMPORTED_MODULE_1__.wrap)(_this.player().el(), el);
      el.appendChild(_this.videoWrap_);
      el.appendChild(_this.contentEl_);
      (0,_utils_dom__WEBPACK_IMPORTED_MODULE_1__.wrap)(_this.player().el(), _this.videoWrap_);
    };
    if (layoutOptions.wrap) {
      wrapVideoWithLayout();
    }
    player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.FLUID, fluidHandler);
    _this.addChild(_utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.PLAYLIST_PANEL, _this.options_);
    _this.setCls();
    _this.dispose = function () {
      _this.removeLayout();
      _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(PlaylistLayout.prototype)), "dispose", _thisSuper).call(_thisSuper);
      player.off(_utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.FLUID, fluidHandler);
    };
    return _this;
  }
  _createClass(PlaylistLayout, [{
    key: "getCls",
    value: function getCls() {
      var cls = ['cld-video-player', 'cld-plw-layout'];
      cls.push((0,_utils_css_prefix__WEBPACK_IMPORTED_MODULE_2__.skinClassPrefix)(this.player()));
      cls.push((0,_utils_css_prefix__WEBPACK_IMPORTED_MODULE_2__.playerClassPrefix)(this.player()));
      if (this.options_.fluid) {
        cls.push('cld-plw-layout-fluid');
      }
      return cls;
    }
  }, {
    key: "setCls",
    value: function setCls() {
      var _this2 = this;
      this.removeClass((0,_utils_css_prefix__WEBPACK_IMPORTED_MODULE_2__.skinClassPrefix)(this.player()));
      this.getCls().forEach(function (cls) {
        _this2.addClass(cls);
      });
    }
  }, {
    key: "removeCls",
    value: function removeCls() {
      var _this3 = this;
      this.getCls().forEach(function (cls) {
        _this3.removeClass(cls);
      });
    }
  }, {
    key: "update",
    value: function update(optionToChange, options) {
      this.options(options);
      this.removeChild('PlaylistPanel');
      this.addChild('PlaylistPanel', this.options_);
      this.trigger('playlistlayoutupdate');
    }
  }, {
    key: "removeLayout",
    value: function removeLayout() {
      var parentElem = this.el().parentElement;
      if (parentElem) {
        parentElem.appendChild(this.player().el());
      }
    }
  }, {
    key: "createEl",
    value: function createEl() {
      var el = _get(_getPrototypeOf(PlaylistLayout.prototype), "createEl", this).call(this, 'div');

      // Apply font styles on wrapper div.
      el.style.fontFamily = this.player().el().style.fontFamily;
      return el;
    }
  }]);
  return PlaylistLayout;
}(Component);
video_js__WEBPACK_IMPORTED_MODULE_0___default().registerComponent('playlistLayout', PlaylistLayout);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PlaylistLayout);

/***/ }),

/***/ "./components/playlist/panel/playlist-panel-item.js":
/*!**********************************************************!*\
  !*** ./components/playlist/panel/playlist-panel-item.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _thumbnail_thumbnail__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../thumbnail/thumbnail */ "./components/playlist/thumbnail/thumbnail.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var dom = (video_js__WEBPACK_IMPORTED_MODULE_0___default().dom) || (video_js__WEBPACK_IMPORTED_MODULE_0___default());
var DEFAULT_OPTIONS = {
  source: null,
  next: false
};
var PlaylistPanelItem = /*#__PURE__*/function (_Thumbnail) {
  _inherits(PlaylistPanelItem, _Thumbnail);
  var _super = _createSuper(PlaylistPanelItem);
  function PlaylistPanelItem(player, initOptions) {
    _classCallCheck(this, PlaylistPanelItem);
    var options = video_js__WEBPACK_IMPORTED_MODULE_0___default().mergeOptions(DEFAULT_OPTIONS, initOptions);
    return _super.call(this, player, options);
  }
  _createClass(PlaylistPanelItem, [{
    key: "handleClick",
    value: function handleClick(event) {
      _get(_getPrototypeOf(PlaylistPanelItem.prototype), "handleClick", this).call(this, event);
      this.play();
    }
  }, {
    key: "play",
    value: function play() {
      var item = this.getItem();
      var list = this.player().cloudinary.playlist().list();
      var index = list.indexOf(item);
      if (index === -1) {
        throw new Error('Invalid playlist item...');
      }
      this.player().cloudinary.playlist().playAtIndex(index);
    }
  }, {
    key: "isCurrent",
    value: function isCurrent() {
      return this.options_.current;
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return _get(_getPrototypeOf(PlaylistPanelItem.prototype), "getTitle", this).call(this);
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return _get(_getPrototypeOf(PlaylistPanelItem.prototype), "getDuration", this).call(this);
    }
  }, {
    key: "createEl",
    value: function createEl() {
      var el = _get(_getPrototypeOf(PlaylistPanelItem.prototype), "createEl", this).call(this);
      el.classList.add('cld-plw-panel-item');
      var info = dom.createEl('div', {
        className: 'cld-plw-item-info-wrap'
      });
      var titleWrap = dom.createEl('div', {
        className: 'cld-plw-item-title'
      });
      if (this.isCurrent()) {
        el.classList.add('cld-plw-panel-item-active');
        var currEl = dom.createEl('span', {
          className: 'cld-plw-item-title-curr'
        }, {}, 'Now Playing: ');
        titleWrap.appendChild(currEl);
      }
      var title = dom.createEl('span', {
        className: 'cld-plw-item-title'
      }, {}, this.getTitle());
      titleWrap.appendChild(title);
      var duration = dom.createEl('div', {
        className: 'cld-plw-item-duration'
      }, {}, this.getDuration());
      info.appendChild(titleWrap);
      info.appendChild(duration);
      if (el) {
        el.appendChild(info);
      }
      el.appendChild(info);
      return el;
    }
  }]);
  return PlaylistPanelItem;
}(_thumbnail_thumbnail__WEBPACK_IMPORTED_MODULE_1__["default"]);
video_js__WEBPACK_IMPORTED_MODULE_0___default().registerComponent('playlistPanelItem', PlaylistPanelItem);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PlaylistPanelItem);

/***/ }),

/***/ "./components/playlist/panel/playlist-panel.js":
/*!*****************************************************!*\
  !*** ./components/playlist/panel/playlist-panel.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var assets_styles_components_playlist_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! assets/styles/components/playlist.scss */ "./assets/styles/components/playlist.scss");
/* harmony import */ var _playlist_panel_item__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./playlist-panel-item */ "./components/playlist/panel/playlist-panel-item.js");
/* harmony import */ var _utils_consts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/consts */ "./utils/consts.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }




var Component = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('Component');
var PlaylistPanel = /*#__PURE__*/function (_Component) {
  _inherits(PlaylistPanel, _Component);
  var _super = _createSuper(PlaylistPanel);
  function PlaylistPanel(player) {
    var _thisSuper, _this;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, PlaylistPanel);
    _this = _super.call(this, player, options);
    var itemChangeHandler = function itemChangeHandler() {
      _this.render();
    };
    player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.PLAYLIST_ITEM_CHANGED, itemChangeHandler);
    _this.render();
    _this.dispose = function () {
      _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(PlaylistPanel.prototype)), "dispose", _thisSuper).call(_thisSuper);
      player.off(_utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.PLAYLIST_ITEM_CHANGED, itemChangeHandler);
    };
    return _this;
  }
  _createClass(PlaylistPanel, [{
    key: "createEl",
    value: function createEl() {
      var el = _get(_getPrototypeOf(PlaylistPanel.prototype), "createEl", this).call(this);
      el.classList.add('cld-plw-panel');
      return el;
    }
  }, {
    key: "removeAll",
    value: function removeAll() {
      var children = this.children();
      for (var i = children.length - 1; i >= 0; --i) {
        this.removeChild(children[i]);
      }
    }
  }, {
    key: "getItems",
    value: function getItems() {
      var playlist = this.player().cloudinary.playlist();
      var repeat = playlist._repeat;
      if (this.options_.showAll) {
        return playlist.list();
      }
      var items = [];
      var numOfItems = this.options_.total;
      var index = playlist.currentIndex();
      var source = playlist.list()[index];
      items.push(source);
      while (items.length < numOfItems) {
        index = playlist.nextIndex(index);
        if (index === -1) {
          if (!repeat && items.length > 0) {
            break;
          }
          index = 0;
        }
        source = playlist.list()[index];
        items.push(source);
      }
      return items;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var items = this.getItems();
      this.removeAll();
      items.forEach(function (source, index) {
        var playlistItem = new _playlist_panel_item__WEBPACK_IMPORTED_MODULE_2__["default"](_this2.player(), video_js__WEBPACK_IMPORTED_MODULE_0___default().mergeOptions(_this2.options_, {
          item: source,
          next: index === 1,
          current: index === 0
        }));
        _this2.addChild(playlistItem);
      });
    }
  }]);
  return PlaylistPanel;
}(Component);
video_js__WEBPACK_IMPORTED_MODULE_0___default().registerComponent('playlistPanel', PlaylistPanel);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PlaylistPanel);

/***/ }),

/***/ "./components/playlist/playlist-widget.js":
/*!************************************************!*\
  !*** ./components/playlist/playlist-widget.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _layout_playlist_layout_horizontal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./layout/playlist-layout-horizontal */ "./components/playlist/layout/playlist-layout-horizontal.js");
/* harmony import */ var _layout_playlist_layout_vertical__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./layout/playlist-layout-vertical */ "./components/playlist/layout/playlist-layout-vertical.js");
/* harmony import */ var _layout_playlist_layout_custom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./layout/playlist-layout-custom */ "./components/playlist/layout/playlist-layout-custom.js");
/* harmony import */ var _playlist_const__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./playlist.const */ "./components/playlist/playlist.const.js");
/* harmony import */ var _utils_consts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/consts */ "./utils/consts.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }






var modifyOptions = function modifyOptions(player, opt) {
  var options = _objectSpread(_objectSpread({}, _playlist_const__WEBPACK_IMPORTED_MODULE_4__.PLAYLIST_DEFAULTS_OPTIONS), opt);
  if (options.show && typeof options.selector === 'string') {
    options.useDefaultLayout = false;
    options.useCustomLayout = true;
    options.renderTo = document.querySelector(options.selector);
    options.showAll = true;
    if (!options.renderTo.length === 0) {
      throw new Error("Couldn't find element(s) by selector '".concat(options.selector, "' for playlist"));
    }
  }
  if (options.show && !options.selector) {
    options.useDefaultLayout = true;
    options.useCustomLayout = false;
  }
  options.direction = options.direction.toLowerCase() === 'horizontal' ? 'horizontal' : 'vertical';
  options.skin = player.options_.skin;
  return options;
};
var PlaylistWidget = /*#__PURE__*/function () {
  function PlaylistWidget(player) {
    var _this = this;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, PlaylistWidget);
    options = modifyOptions(player, options);
    this.options_ = options;
    this.player_ = player;
    this.render();
    var fluidHandler = function fluidHandler(e, fluid) {
      _this.options_.fluid = fluid;
    };
    player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_5__.PLAYER_EVENT.FLUID, fluidHandler);
    this.options = function (options) {
      if (!options) {
        return _this.options_;
      }
      _this.options_ = video_js__WEBPACK_IMPORTED_MODULE_0___default().mergeOptions(_this.options_, options);
      player.trigger('playlistwidgetoption', _this.options_.playlistWidget);
      return _this.options_;
    };
    this.dispose = function () {
      _this.layout_.dispose();
      player.off(_utils_consts__WEBPACK_IMPORTED_MODULE_5__.PLAYER_EVENT.FLUID, fluidHandler);
    };
  }
  _createClass(PlaylistWidget, [{
    key: "render",
    value: function render() {
      if (this.options_.useDefaultLayout) {
        if (this.options_.direction === 'horizontal') {
          this.layout_ = new _layout_playlist_layout_horizontal__WEBPACK_IMPORTED_MODULE_1__["default"](this.player_, this.options_);
        } else {
          this.layout_ = new _layout_playlist_layout_vertical__WEBPACK_IMPORTED_MODULE_2__["default"](this.player_, this.options_);
        }
      }
      if (this.options_.useCustomLayout) {
        this.layout_ = new _layout_playlist_layout_custom__WEBPACK_IMPORTED_MODULE_3__["default"](this.player_, this.options_);
      }
    }
  }, {
    key: "getLayout",
    value: function getLayout() {
      return this.layout_;
    }
  }, {
    key: "update",
    value: function update(optionName, optionValue) {
      this.options(optionValue);
      if (optionName === 'direction') {
        this.layout_.removeLayout();
        this.layout_.dispose();
        this.render();
      } else {
        this.layout_.update(optionName, this.options_);
      }
    }
  }, {
    key: "setSkin",
    value: function setSkin() {
      this.layout_.setCls();
    }
  }, {
    key: "total",
    value: function total() {
      var totalNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _playlist_const__WEBPACK_IMPORTED_MODULE_4__.PLAYLIST_DEFAULTS_OPTIONS.total;
      var total = parseInt(totalNumber, 10);
      if (total !== this.options_.total && typeof total === 'number' && total > 0) {
        this.update('total', {
          total: total
        });
      }
      return this;
    }
  }, {
    key: "direction",
    value: function direction() {
      var _direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _playlist_const__WEBPACK_IMPORTED_MODULE_4__.PLAYLIST_DEFAULTS_OPTIONS.direction;
      if (_direction === 'horizontal' || _direction === 'vertical') {
        this.update('direction', {
          direction: _direction
        });
      }
      return this;
    }
  }]);
  return PlaylistWidget;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PlaylistWidget);

/***/ }),

/***/ "./components/playlist/playlist.const.js":
/*!***********************************************!*\
  !*** ./components/playlist/playlist.const.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_AUTO_ADVANCE": () => (/* binding */ DEFAULT_AUTO_ADVANCE),
/* harmony export */   "DEFAULT_PRESENT_UPCOMING": () => (/* binding */ DEFAULT_PRESENT_UPCOMING),
/* harmony export */   "PLAYLIST_DEFAULTS_OPTIONS": () => (/* binding */ PLAYLIST_DEFAULTS_OPTIONS),
/* harmony export */   "UPCOMING_VIDEO_TRANSITION": () => (/* binding */ UPCOMING_VIDEO_TRANSITION)
/* harmony export */ });
var DEFAULT_AUTO_ADVANCE = 0;
var DEFAULT_PRESENT_UPCOMING = 10;
var UPCOMING_VIDEO_TRANSITION = 1;
var PLAYLIST_DEFAULTS_OPTIONS = {
  fluid: false,
  show: true,
  direction: 'vertical',
  total: 4,
  selector: false,
  renderTo: []
};

/***/ }),

/***/ "./components/playlist/playlist.js":
/*!*****************************************!*\
  !*** ./components/playlist/playlist.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var plugins_cloudinary_models_video_source_video_source__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! plugins/cloudinary/models/video-source/video-source */ "./plugins/cloudinary/models/video-source/video-source.js");
/* harmony import */ var utils_type_inference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/type-inference */ "./utils/type-inference.js");
/* harmony import */ var components_playlist_components_upcoming_video_overlay__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! components/playlist/components/upcoming-video-overlay */ "./components/playlist/components/upcoming-video-overlay.js");
/* harmony import */ var components_playlist_components_playlist__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! components/playlist/components/playlist */ "./components/playlist/components/playlist.js");
/* harmony import */ var _playlist_const__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./playlist.const */ "./components/playlist/playlist.const.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }





var Playlist = /*#__PURE__*/function () {
  function Playlist(context) {
    var _this = this;
    var sources = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$repeat = _ref.repeat,
      repeat = _ref$repeat === void 0 ? false : _ref$repeat,
      _ref$autoAdvance = _ref.autoAdvance,
      autoAdvance = _ref$autoAdvance === void 0 ? false : _ref$autoAdvance,
      _ref$presentUpcoming = _ref.presentUpcoming,
      presentUpcoming = _ref$presentUpcoming === void 0 ? false : _ref$presentUpcoming;
    _classCallCheck(this, Playlist);
    this._context = context;
    this._sources = [];
    this._defaultRecResolverCache = {};
    this._currentIndex = null;
    this._recommendationsHandler = null;
    this._autoAdvance = null;
    this._presentUpcoming = null;
    this.resetState = function () {
      _this.repeat(repeat);
      _this.autoAdvance(autoAdvance);
      _this.presentUpcoming(presentUpcoming);
    };
    sources.forEach(function (source) {
      return _this.enqueue(source);
    });
    this.resetState();
  }
  _createClass(Playlist, [{
    key: "list",
    value: function list() {
      return this._sources;
    }
  }, {
    key: "player",
    value: function player() {
      return this._context.player;
    }
  }, {
    key: "presentUpcoming",
    value: function presentUpcoming(delay) {
      this._presentUpcoming = this._presentUpcoming || {};
      if (delay === undefined) {
        return this._presentUpcoming.delay;
      }
      if (delay === true) {
        delay = _playlist_const__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_PRESENT_UPCOMING;
      } else if (delay === false) {
        delay = false;
      } else if (!(0,utils_type_inference__WEBPACK_IMPORTED_MODULE_1__.isInteger)(delay) || delay < 0) {
        throw new Error('presentUpcoming \'delay\' must be either a boolean or a positive integer.');
      }
      this._presentUpcoming.delay = delay;
      this._setupPresentUpcoming();
      return this._presentUpcoming.delay;
    }
  }, {
    key: "autoAdvance",
    value: function autoAdvance(delay) {
      this._autoAdvance = this._autoAdvance || {};
      if (delay === undefined) {
        return this._autoAdvance.delay;
      }
      if (delay === true) {
        delay = _playlist_const__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_AUTO_ADVANCE;
      } else if (delay === false) {
        delay = false;
      } else if (!(0,utils_type_inference__WEBPACK_IMPORTED_MODULE_1__.isInteger)(delay) || delay < 0) {
        throw new Error('Auto advance \'delay\' must be either a boolean or a positive integer.');
      }
      this._autoAdvance.delay = delay;
      this._setupAutoAdvance();
      return this._autoAdvance.delay;
    }
  }, {
    key: "_setupAutoAdvance",
    value: function _setupAutoAdvance() {
      var _this2 = this;
      this._resetAutoAdvance();
      var delay = this._autoAdvance.delay;
      if (delay === false) {
        return;
      }
      var trigger = function trigger() {
        if (_this2.player().ended()) {
          _this2._autoAdvance.timeout = setTimeout(function () {
            _this2.playNext();
          }, delay * 1000);
        }
      };
      this._autoAdvance = {
        delay: delay,
        trigger: trigger
      };
      this._context.on('ended', this._autoAdvance.trigger);
    }
  }, {
    key: "dispose",
    value: function dispose() {
      this._resetAutoAdvance();
      this._resetPresentUpcoming();
      this._resetRecommendations();
    }
  }, {
    key: "_resetPresentUpcoming",
    value: function _resetPresentUpcoming() {
      this.player().trigger('upcomingvideohide');
      if (!this._presentUpcoming) {
        this._presentUpcoming = {};
      }
      if (this._presentUpcoming.trigger) {
        this._context.off('timeupdate', this._presentUpcoming.trigger);
      }
      this._presentUpcoming.trigger = null;
      this._presentUpcoming.showTriggered = false;
    }
  }, {
    key: "_setupPresentUpcoming",
    value: function _setupPresentUpcoming() {
      var _this3 = this;
      this._resetPresentUpcoming();
      var delay = this._presentUpcoming.delay;
      if (delay === false) {
        return;
      }
      this._presentUpcoming.trigger = function () {
        var currentTime = _this3.player().currentTime();
        var duration = _this3.player().duration();
        var remainingTime = duration - currentTime;
        if (remainingTime < _playlist_const__WEBPACK_IMPORTED_MODULE_4__.UPCOMING_VIDEO_TRANSITION + 0.5) {
          if (_this3._presentUpcoming.showTriggered) {
            _this3.player().trigger('upcomingvideohide');
            _this3._presentUpcoming.showTriggered = false;
          }
        } else if (remainingTime <= _this3._presentUpcoming.delay && !_this3._presentUpcoming.showTriggered && !_this3.player().loop()) {
          _this3.player().trigger('upcomingvideoshow');
          _this3._presentUpcoming.showTriggered = true;
        } else if (_this3._presentUpcoming.showTriggered && (remainingTime > _this3._presentUpcoming.delay || _this3.player().loop())) {
          _this3.player().trigger('upcomingvideohide');
          _this3._presentUpcoming.showTriggered = false;
        }
      };
      this._context.on('timeupdate', this._presentUpcoming.trigger);
    }
  }, {
    key: "_resetAutoAdvance",
    value: function _resetAutoAdvance() {
      if (!this._autoAdvance) {
        this._autoAdvance = {};
      }
      if (this._autoAdvance.timeout) {
        clearTimeout(this._autoAdvance.timeout);
      }
      if (this._autoAdvance.trigger) {
        this._context.off('ended', this._autoAdvance.trigger);
      }
      this._autoAdvance.timeout = null;
      this._autoAdvance.trigger = null;
    }
  }, {
    key: "_resetRecommendations",
    value: function _resetRecommendations() {
      if (this._recommendationsHandler) {
        this._context.off('ended', this._recommendationsHandler);
      }
    }
  }, {
    key: "_refreshRecommendations",
    value: function _refreshRecommendations() {
      var _this4 = this;
      this._resetRecommendations();
      this._recommendationsHandler = function () {
        if (_this4.autoAdvance() === false && _this4._context.autoShowRecommendations()) {
          _this4.player().trigger('recommendationsshow');
        }
      };
      this._context.on('ended', this._recommendationsHandler);
    }
  }, {
    key: "_refreshTextTracks",
    value: function _refreshTextTracks() {
      this.player().trigger('refreshTextTracks', this.currentSource().textTracks());
    }
  }, {
    key: "_recommendationItemBuilder",
    value: function _recommendationItemBuilder(source) {
      var _this5 = this;
      var defaultResolver = this._defaultRecResolverCache[source.objectId];
      if (source.recommendations() && (!defaultResolver || source.recommendations() !== defaultResolver)) {
        return;
      }
      return function (source) {
        return {
          source: source,
          action: function action() {
            return _this5.playItem(source);
          }
        };
      };
    }
  }, {
    key: "currentIndex",
    value: function currentIndex(index) {
      if (index === undefined) {
        return this._currentIndex;
      }
      if (index >= this.length() || index < 0) {
        throw new Error('Invalid playlist index.');
      }
      this._currentIndex = index;
      var current = this.currentSource();
      var itemBuilder = this._recommendationItemBuilder(current);
      if (!current.recommendations()) {
        current.recommendations(this._defaultRecommendationsResolver(current));
      }
      this._context.source(current, {
        recommendationOptions: {
          disableAutoShow: true,
          itemBuilder: itemBuilder
        }
      });
      var eventData = {
        playlist: this,
        current: current,
        next: this.next()
      };
      this.player().trigger('playlistitemchanged', eventData);
      this._refreshRecommendations();
      this._refreshTextTracks();
      return current;
    }
  }, {
    key: "_defaultRecommendationsResolver",
    value: function _defaultRecommendationsResolver(source) {
      var _this6 = this;
      var defaultResolver = this._defaultRecResolverCache[source.objectId];
      if (defaultResolver) {
        return defaultResolver;
      }
      this._defaultRecResolverCache[source.objectId] = function () {
        var index = _this6.list().indexOf(source);
        var items = [];
        var numOfItems = Math.min(4, _this6.length() - 1);
        while (items.length < numOfItems) {
          index = _this6.nextIndex(index);
          if (index === -1) {
            break;
          }
          var _source = _this6.list()[index];
          items.push(_source);
        }
        return items;
      };
      return this._defaultRecResolverCache[source.objectId];
    }
  }, {
    key: "buildSource",
    value: function buildSource(source) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this._context.buildSource(source, options);
    }
  }, {
    key: "enqueue",
    value: function enqueue(source) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var src = source instanceof plugins_cloudinary_models_video_source_video_source__WEBPACK_IMPORTED_MODULE_0__["default"] ? source : this.buildSource(source, options);
      this._sources.push(src);
      return src;
    }
  }, {
    key: "playItem",
    value: function playItem(item) {
      var index = this.list().indexOf(item);
      if (index === -1) {
        throw new Error('Invalid playlist item.');
      }
      this.playAtIndex(index);
    }
  }, {
    key: "playAtIndex",
    value: function playAtIndex(index) {
      this.currentIndex(index);
      this.player().play();
      return this.currentSource();
    }
  }, {
    key: "currentSource",
    value: function currentSource() {
      return this.list()[this.currentIndex()];
    }
  }, {
    key: "removeAt",
    value: function removeAt(index) {
      if (index >= this.length() || index < 0) {
        throw new Error('Invalid playlist index.');
      }
      this._sources.splice(index, 1);
      return this;
    }
  }, {
    key: "repeat",
    value: function repeat(_repeat) {
      if (_repeat === undefined) {
        return this._repeat;
      }
      this._repeat = !!_repeat;
      return this._repeat;
    }
  }, {
    key: "first",
    value: function first() {
      return this.list()[0];
    }
  }, {
    key: "last",
    value: function last() {
      return this.list()[this.length() - 1];
    }
  }, {
    key: "next",
    value: function next() {
      var nextIndex = this.nextIndex();
      if (nextIndex === -1) {
        return null;
      }
      return this.list()[nextIndex];
    }
  }, {
    key: "nextIndex",
    value: function nextIndex(index) {
      index = index !== undefined ? index : this.currentIndex();
      if (index >= this.length() || index < 0) {
        throw new Error('Invalid playlist index.');
      }
      var isLast = index === this.length() - 1;
      var nextIndex = index + 1;
      if (isLast) {
        if (this.repeat()) {
          nextIndex = 0;
        } else {
          return -1;
        }
      }
      return nextIndex;
    }
  }, {
    key: "previousIndex",
    value: function previousIndex() {
      if (this.isFirst()) {
        return -1;
      }
      return this.currentIndex() - 1;
    }
  }, {
    key: "playFirst",
    value: function playFirst() {
      return this.playAtIndex(0);
    }
  }, {
    key: "playLast",
    value: function playLast() {
      var lastIndex = this.list().length - 1;
      return this.playAtIndex(lastIndex);
    }
  }, {
    key: "isLast",
    value: function isLast() {
      return this.currentIndex() >= this.length() - 1;
    }
  }, {
    key: "isFirst",
    value: function isFirst() {
      return this.currentIndex() === 0;
    }
  }, {
    key: "length",
    value: function length() {
      return this.list().length;
    }
  }, {
    key: "playNext",
    value: function playNext() {
      var nextIndex = this.nextIndex();
      if (nextIndex === -1) {
        return null;
      }
      return this.playAtIndex(nextIndex);
    }
  }, {
    key: "playPrevious",
    value: function playPrevious() {
      var previousIndex = this.previousIndex();
      if (previousIndex === -1) {
        return null;
      }
      return this.playAtIndex(previousIndex);
    }
  }]);
  return Playlist;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Playlist);

/***/ }),

/***/ "./components/playlist/thumbnail/thumbnail.js":
/*!****************************************************!*\
  !*** ./components/playlist/thumbnail/thumbnail.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _assets_styles_components_thumbnail_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../assets/styles/components/thumbnail.scss */ "./assets/styles/components/thumbnail.scss");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



// Get the ClickableComponent base class from Video.js
var ClickableComponent = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('ClickableComponent');
var THUMB_DEFAULT_WIDTH = 300;
var DEFAULT_OPTIONS = {
  item: null,
  transformation: {
    width: THUMB_DEFAULT_WIDTH,
    aspect_ratio: '16:9',
    crop: 'pad',
    background: 'black'
  }
};
var Thumbnail = /*#__PURE__*/function (_ClickableComponent) {
  _inherits(Thumbnail, _ClickableComponent);
  var _super = _createSuper(Thumbnail);
  function Thumbnail(player, initOptions) {
    _classCallCheck(this, Thumbnail);
    var options = video_js__WEBPACK_IMPORTED_MODULE_0___default().mergeOptions(DEFAULT_OPTIONS, initOptions);
    return _super.call(this, player, options);
  }
  _createClass(Thumbnail, [{
    key: "getItem",
    value: function getItem() {
      return this.options_.item;
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.getItem().info().title;
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return ' '; // this.getItem().info().title;
    }
  }, {
    key: "getThumbnail",
    value: function getThumbnail() {
      return this.getItem().poster().url({
        transformation: this.options_.transformation
      });
    }
  }, {
    key: "handleClick",
    value: function handleClick(e) {
      e.preventDefault();
    }
  }, {
    key: "createControlTextEl",
    value: function createControlTextEl() {
      return;
    }
  }, {
    key: "createEl",
    value: function createEl() {
      var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'a';
      var el = _get(_getPrototypeOf(Thumbnail.prototype), "createEl", this).call(this, tag, {
        className: 'cld-thumbnail',
        href: '#'
      });
      var img = _get(_getPrototypeOf(Thumbnail.prototype), "createEl", this).call(this, 'img', {
        className: 'cld-thumbnail-img',
        src: this.getThumbnail()
      });
      el.appendChild(img);
      el.style.backgroundImage = "url('".concat(this.getThumbnail(), "')");
      return el;
    }
  }]);
  return Thumbnail;
}(ClickableComponent);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Thumbnail);

/***/ }),

/***/ "./components/progress-control-events-blocker/progress-control-events-blocker.js":
/*!***************************************************************************************!*\
  !*** ./components/progress-control-events-blocker/progress-control-events-blocker.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Component = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('Component');
var ProgressControlEventsBlocker = /*#__PURE__*/function (_Component) {
  _inherits(ProgressControlEventsBlocker, _Component);
  var _super = _createSuper(ProgressControlEventsBlocker);
  function ProgressControlEventsBlocker(player) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, ProgressControlEventsBlocker);
    return _super.call(this, player, options);
  }
  _createClass(ProgressControlEventsBlocker, [{
    key: "createEl",
    value: function createEl() {
      return _get(_getPrototypeOf(ProgressControlEventsBlocker.prototype), "createEl", this).call(this, 'div', {
        className: 'vjs-progress-control-events-blocker'
      });
    }
  }]);
  return ProgressControlEventsBlocker;
}(Component);
video_js__WEBPACK_IMPORTED_MODULE_0___default().registerComponent('progressControlEventsBlocker', ProgressControlEventsBlocker);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ProgressControlEventsBlocker);

/***/ }),

/***/ "./components/recommendations-overlay/index.js":
/*!*****************************************************!*\
  !*** ./components/recommendations-overlay/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _recommendations_overlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./recommendations-overlay */ "./components/recommendations-overlay/recommendations-overlay.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_recommendations_overlay__WEBPACK_IMPORTED_MODULE_0__["default"]);

/***/ }),

/***/ "./components/recommendations-overlay/recommendations-overlay-content.js":
/*!*******************************************************************************!*\
  !*** ./components/recommendations-overlay/recommendations-overlay-content.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _recommendations_overlay_primary_item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./recommendations-overlay-primary-item */ "./components/recommendations-overlay/recommendations-overlay-primary-item.js");
/* harmony import */ var _recommendations_overlay_secondary_items_container__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./recommendations-overlay-secondary-items-container */ "./components/recommendations-overlay/recommendations-overlay-secondary-items-container.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var Component = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('Component');
var RecommendationsOverlayContent = /*#__PURE__*/function (_Component) {
  _inherits(RecommendationsOverlayContent, _Component);
  var _super = _createSuper(RecommendationsOverlayContent);
  function RecommendationsOverlayContent(player) {
    var _this;
    _classCallCheck(this, RecommendationsOverlayContent);
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this, player].concat(args));
    _this._content = new AspectRatioContent(player);
    _this.addChild(_this._content);
    return _this;
  }
  _createClass(RecommendationsOverlayContent, [{
    key: "setItems",
    value: function setItems(primary) {
      var _this$_content;
      for (var _len2 = arguments.length, secondary = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        secondary[_key2 - 1] = arguments[_key2];
      }
      (_this$_content = this._content).setItems.apply(_this$_content, [primary].concat(secondary));
    }
  }, {
    key: "clearItems",
    value: function clearItems() {
      this._content._primary.clearItem();
      this._content._secondaryContainer.clearItems();
    }
  }, {
    key: "createEl",
    value: function createEl() {
      return _get(_getPrototypeOf(RecommendationsOverlayContent.prototype), "createEl", this).call(this, 'div', {
        className: 'vjs-recommendations-overlay-content'
      });
    }
  }]);
  return RecommendationsOverlayContent;
}(Component);
var AspectRatioContent = /*#__PURE__*/function (_Component2) {
  _inherits(AspectRatioContent, _Component2);
  var _super2 = _createSuper(AspectRatioContent);
  function AspectRatioContent(player) {
    var _this2;
    _classCallCheck(this, AspectRatioContent);
    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }
    _this2 = _super2.call.apply(_super2, [this, player].concat(args));
    _this2._primary = new _recommendations_overlay_primary_item__WEBPACK_IMPORTED_MODULE_1__["default"](player);
    _this2._secondaryContainer = new _recommendations_overlay_secondary_items_container__WEBPACK_IMPORTED_MODULE_2__["default"](player);
    _this2.addChild(_this2._primary);
    _this2.addChild(_this2._secondaryContainer);
    return _this2;
  }
  _createClass(AspectRatioContent, [{
    key: "setItems",
    value: function setItems(primary) {
      var _this$_secondaryConta;
      this._primary.setItem(primary);
      for (var _len4 = arguments.length, secondary = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        secondary[_key4 - 1] = arguments[_key4];
      }
      (_this$_secondaryConta = this._secondaryContainer).setItems.apply(_this$_secondaryConta, secondary);
    }
  }, {
    key: "createEl",
    value: function createEl() {
      return _get(_getPrototypeOf(AspectRatioContent.prototype), "createEl", this).call(this, 'div', {
        className: 'aspect-ratio-content'
      });
    }
  }]);
  return AspectRatioContent;
}(Component);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RecommendationsOverlayContent);

/***/ }),

/***/ "./components/recommendations-overlay/recommendations-overlay-hide-button.js":
/*!***********************************************************************************!*\
  !*** ./components/recommendations-overlay/recommendations-overlay-hide-button.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ClickableComponent = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('ClickableComponent');
var RecommendationOverlayHideButton = /*#__PURE__*/function (_ClickableComponent) {
  _inherits(RecommendationOverlayHideButton, _ClickableComponent);
  var _super = _createSuper(RecommendationOverlayHideButton);
  function RecommendationOverlayHideButton() {
    _classCallCheck(this, RecommendationOverlayHideButton);
    return _super.apply(this, arguments);
  }
  _createClass(RecommendationOverlayHideButton, [{
    key: "createEl",
    value: function createEl() {
      return _get(_getPrototypeOf(RecommendationOverlayHideButton.prototype), "createEl", this).call(this, 'span', {
        className: 'vjs-recommendations-overlay-hide vjs-icon-close'
      });
    }
  }, {
    key: "handleClick",
    value: function handleClick() {
      this.options_.clickHandler();
    }
  }]);
  return RecommendationOverlayHideButton;
}(ClickableComponent);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RecommendationOverlayHideButton);

/***/ }),

/***/ "./components/recommendations-overlay/recommendations-overlay-item.js":
/*!****************************************************************************!*\
  !*** ./components/recommendations-overlay/recommendations-overlay-item.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ClickableComponent = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('ClickableComponent');
var RecommendationsOverlayItem = /*#__PURE__*/function (_ClickableComponent) {
  _inherits(RecommendationsOverlayItem, _ClickableComponent);
  var _super = _createSuper(RecommendationsOverlayItem);
  function RecommendationsOverlayItem() {
    _classCallCheck(this, RecommendationsOverlayItem);
    return _super.apply(this, arguments);
  }
  _createClass(RecommendationsOverlayItem, [{
    key: "setItem",
    value: function setItem(item) {
      var action = item.action,
        source = item.source;
      this.source = source;
      var info = source.info();
      this.setTitle(info.title || source.publicId());
      this.setPoster(this.source.poster().url({
        transformation: {
          aspect_ratio: '16:9',
          crop: 'pad',
          background: 'black'
        }
      }));
      this.setAction(action);
    }
  }, {
    key: "setTitle",
    value: function setTitle(text) {
      this.title.innerText = text;
    }
  }, {
    key: "setAction",
    value: function setAction(action) {
      this.action = action;
    }
  }, {
    key: "handleClick",
    value: function handleClick() {
      _get(_getPrototypeOf(RecommendationsOverlayItem.prototype), "handleClick", this).call(this);
      this.player().trigger('recommendationshide');
      this.action();
    }
  }]);
  return RecommendationsOverlayItem;
}(ClickableComponent);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RecommendationsOverlayItem);

/***/ }),

/***/ "./components/recommendations-overlay/recommendations-overlay-primary-item.js":
/*!************************************************************************************!*\
  !*** ./components/recommendations-overlay/recommendations-overlay-primary-item.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _recommendations_overlay_item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./recommendations-overlay-item */ "./components/recommendations-overlay/recommendations-overlay-item.js");
/* harmony import */ var _component_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../component-utils */ "./components/component-utils.js");
/* harmony import */ var _component_utils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_component_utils__WEBPACK_IMPORTED_MODULE_2__);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }




// support VJS5 & VJS6 at the same time
var dom = (video_js__WEBPACK_IMPORTED_MODULE_0___default().dom) || (video_js__WEBPACK_IMPORTED_MODULE_0___default());
var RecommendationsOverlayPrimaryItem = /*#__PURE__*/function (_RecommendationsOverl) {
  _inherits(RecommendationsOverlayPrimaryItem, _RecommendationsOverl);
  var _super = _createSuper(RecommendationsOverlayPrimaryItem);
  function RecommendationsOverlayPrimaryItem() {
    _classCallCheck(this, RecommendationsOverlayPrimaryItem);
    return _super.apply(this, arguments);
  }
  _createClass(RecommendationsOverlayPrimaryItem, [{
    key: "setItem",
    value: function setItem(item) {
      _get(_getPrototypeOf(RecommendationsOverlayPrimaryItem.prototype), "setItem", this).call(this, item);
      var info = this.source.info();
      this.setTitle(info.title);
      this.setSubtitle(info.subtitle);
      if (info.description) {
        var descLength = 300;
        var description = info.description.length > descLength ? info.description.substring(0, descLength) + '...' : info.description;
        this.setDescription(description);
      }
    }
  }, {
    key: "setPoster",
    value: function setPoster(url) {
      this.poster.style.backgroundImage = "url('".concat(url, "')");
    }
  }, {
    key: "setTitle",
    value: function setTitle(text) {
      _component_utils__WEBPACK_IMPORTED_MODULE_2___default().setText(this.title, text);
      this.setAriaCheck(this.title, !!text);
    }
  }, {
    key: "setSubtitle",
    value: function setSubtitle(text) {
      _component_utils__WEBPACK_IMPORTED_MODULE_2___default().setText(this.subtitle, text);
      this.setAriaCheck(this.subtitle, !!text);
    }
  }, {
    key: "setDescription",
    value: function setDescription(text) {
      _component_utils__WEBPACK_IMPORTED_MODULE_2___default().setText(this.description, text);
      this.setAriaCheck(this.description, !!text);
    }
  }, {
    key: "setAriaCheck",
    value: function setAriaCheck(element) {
      var active = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      if (active) {
        element.removeAttribute('aria-hidden');
      } else {
        element.setAttribute('aria-hidden', 'true');
      }
    }
  }, {
    key: "clearItem",
    value: function clearItem() {
      this.setTitle('');
      this.setSubtitle('');
      this.setDescription('');
      this.poster.style.backgroundImage = null;
    }
  }, {
    key: "createEl",
    value: function createEl() {
      var el = _get(_getPrototypeOf(RecommendationsOverlayPrimaryItem.prototype), "createEl", this).call(this, 'div', {
        className: 'vjs-recommendations-overlay-item vjs-recommendations-overlay-item-primary'
      });
      this.poster = dom.createEl('div', {
        className: 'vjs-recommendations-overlay-item-primary-image'
      });
      this.title = dom.createEl('h2');
      this.setAriaCheck(this.title, false);
      this.title.innerHTML = '';
      this.subtitle = dom.createEl('h3');
      this.setAriaCheck(this.subtitle, false);
      this.subtitle.innerHTML = '';
      this.description = dom.createEl('p');
      this.setAriaCheck(this.description, false);
      this.description.innerHTML = '';
      this.content = dom.createEl('div', {
        className: 'vjs-recommendations-overlay-item-info vjs-recommendations-overlay-item-primary-content'
      });
      this.content.appendChild(this.title);
      this.content.appendChild(this.subtitle);
      this.content.appendChild(this.description);
      el.appendChild(this.poster);
      el.appendChild(this.content);
      return el;
    }
  }]);
  return RecommendationsOverlayPrimaryItem;
}(_recommendations_overlay_item__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RecommendationsOverlayPrimaryItem);

/***/ }),

/***/ "./components/recommendations-overlay/recommendations-overlay-secondary-item.js":
/*!**************************************************************************************!*\
  !*** ./components/recommendations-overlay/recommendations-overlay-secondary-item.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _recommendations_overlay_item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./recommendations-overlay-item */ "./components/recommendations-overlay/recommendations-overlay-item.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



// support VJS5 & VJS6 at the same time
var dom = (video_js__WEBPACK_IMPORTED_MODULE_0___default().dom) || (video_js__WEBPACK_IMPORTED_MODULE_0___default());
var RecommendationsOverlaySecondaryItem = /*#__PURE__*/function (_RecommendationsOverl) {
  _inherits(RecommendationsOverlaySecondaryItem, _RecommendationsOverl);
  var _super = _createSuper(RecommendationsOverlaySecondaryItem);
  function RecommendationsOverlaySecondaryItem() {
    _classCallCheck(this, RecommendationsOverlaySecondaryItem);
    return _super.apply(this, arguments);
  }
  _createClass(RecommendationsOverlaySecondaryItem, [{
    key: "setItem",
    value: function setItem(item) {
      _get(_getPrototypeOf(RecommendationsOverlaySecondaryItem.prototype), "setItem", this).call(this, item);
      this.setDuration('');
    }
  }, {
    key: "setPoster",
    value: function setPoster(url) {
      this.el().style.backgroundImage = "url('".concat(url, "')");
    }
  }, {
    key: "setDuration",
    value: function setDuration(text) {
      this.duration.innerText = text;
    }
  }, {
    key: "createEl",
    value: function createEl() {
      var el = _get(_getPrototypeOf(RecommendationsOverlaySecondaryItem.prototype), "createEl", this).call(this, 'div', {
        className: 'vjs-recommendations-overlay-item vjs-recommendations-overlay-item-secondary'
      });
      this.title = dom.createEl('span', {
        className: 'vjs-recommendations-overlay-item-secondary-title'
      });
      this.title.innerHTML = '';
      this.duration = dom.createEl('span', {
        className: 'vjs-recommendations-overlay-item-secondary-duration'
      });
      this.duration.innerHTML = '';
      var caption = dom.createEl('div', {
        className: 'vjs-recommendations-overlay-item-info'
      });
      caption.appendChild(this.title);
      caption.appendChild(this.duration);
      el.appendChild(caption);
      return el;
    }
  }, {
    key: "handleClick",
    value: function handleClick() {
      _get(_getPrototypeOf(RecommendationsOverlaySecondaryItem.prototype), "handleClick", this).call(this);
      this.action();
    }
  }]);
  return RecommendationsOverlaySecondaryItem;
}(_recommendations_overlay_item__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RecommendationsOverlaySecondaryItem);

/***/ }),

/***/ "./components/recommendations-overlay/recommendations-overlay-secondary-items-container.js":
/*!*************************************************************************************************!*\
  !*** ./components/recommendations-overlay/recommendations-overlay-secondary-items-container.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _recommendations_overlay_secondary_item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./recommendations-overlay-secondary-item */ "./components/recommendations-overlay/recommendations-overlay-secondary-item.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var Component = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('Component');
var RecommendationsOverlaySecondaryItemsContainer = /*#__PURE__*/function (_Component) {
  _inherits(RecommendationsOverlaySecondaryItemsContainer, _Component);
  var _super = _createSuper(RecommendationsOverlaySecondaryItemsContainer);
  function RecommendationsOverlaySecondaryItemsContainer() {
    _classCallCheck(this, RecommendationsOverlaySecondaryItemsContainer);
    return _super.apply(this, arguments);
  }
  _createClass(RecommendationsOverlaySecondaryItemsContainer, [{
    key: "setItems",
    value: function setItems() {
      var _this = this;
      for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
        items[_key] = arguments[_key];
      }
      this.clearItems();
      if (!items) {
        return;
      }
      items.forEach(function (item) {
        var component = new _recommendations_overlay_secondary_item__WEBPACK_IMPORTED_MODULE_1__["default"](_this.player());
        component.setItem(item);
        _this.addChild(component);
      });
    }
  }, {
    key: "clearItems",
    value: function clearItems() {
      var _this2 = this;
      this.children().forEach(function () {
        _this2.removeChild(_this2.children()[0]);
      });
    }
  }, {
    key: "createEl",
    value: function createEl() {
      return _get(_getPrototypeOf(RecommendationsOverlaySecondaryItemsContainer.prototype), "createEl", this).call(this, 'div', {
        className: 'vjs-recommendations-overlay-item-secondary-container'
      });
    }
  }]);
  return RecommendationsOverlaySecondaryItemsContainer;
}(Component);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RecommendationsOverlaySecondaryItemsContainer);

/***/ }),

/***/ "./components/recommendations-overlay/recommendations-overlay.js":
/*!***********************************************************************!*\
  !*** ./components/recommendations-overlay/recommendations-overlay.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _recommendations_overlay_content__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./recommendations-overlay-content */ "./components/recommendations-overlay/recommendations-overlay-content.js");
/* harmony import */ var _recommendations_overlay_hide_button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./recommendations-overlay-hide-button */ "./components/recommendations-overlay/recommendations-overlay-hide-button.js");
/* harmony import */ var _recommendations_overlay_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./recommendations-overlay.scss */ "./components/recommendations-overlay/recommendations-overlay.scss");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }




var MAXIMUM_ITEMS = 4;
var Component = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('Component');

// TODO: Use Video.js's ModalDialog instead. It handles clicking block logic.
var RecommendationsOverlay = /*#__PURE__*/function (_Component) {
  _inherits(RecommendationsOverlay, _Component);
  var _super = _createSuper(RecommendationsOverlay);
  function RecommendationsOverlay(player, options) {
    var _this;
    _classCallCheck(this, RecommendationsOverlay);
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this, player].concat(args));
    _this._content = new _recommendations_overlay_content__WEBPACK_IMPORTED_MODULE_1__["default"](player);
    _this.addChild(_this._content);
    _this.addChild(_construct(_recommendations_overlay_hide_button__WEBPACK_IMPORTED_MODULE_2__["default"], [player, {
      clickHandler: function clickHandler() {
        _this.close();
      }
    }].concat(args)));
    _this.setEvents(player);
    _this.doNotOpen = false;
    return _this;
  }
  _createClass(RecommendationsOverlay, [{
    key: "setEvents",
    value: function setEvents(player) {
      var _this2 = this;
      this.on(player, 'recommendationschanged', function (_, eventData) {
        _this2.setItems.apply(_this2, _toConsumableArray(eventData.items));
      });
      this.on(player, 'recommendationsnoshow', this.setDoNotOpen);
      this.on(player, 'recommendationsshow', this.open);
      this.on(player, 'recommendationshide', this.close);
      this.on(player, 'cldsourcechanged', function () {
        _this2.clearItems();
        _this2.close();
      });
    }
  }, {
    key: "setDoNotOpen",
    value: function setDoNotOpen() {
      this.doNotOpen = true;
    }
  }, {
    key: "open",
    value: function open() {
      if (!this.doNotOpen) {
        // Only show controls on close if they were visible from the first place
        this._showControlsOnClose = this.player().controls();
        this.player().controls(false);
        this.el().style.visibility = 'visible';
      }
    }
  }, {
    key: "clearItems",
    value: function clearItems() {
      this._content.clearItems();
    }
  }, {
    key: "close",
    value: function close() {
      this.el().style.visibility = 'hidden';
      if (this._showControlsOnClose) {
        this.player().controls(true);
      }
    }
  }, {
    key: "createEl",
    value: function createEl() {
      var recommendationsOverlayClass = 'vjs-recommendations-overlay';
      var el = _get(_getPrototypeOf(RecommendationsOverlay.prototype), "createEl", this).call(this, 'div', {
        className: recommendationsOverlayClass
      });
      video_js__WEBPACK_IMPORTED_MODULE_0___default().dom.addClass(el, recommendationsOverlayClass);
      return el;
    }
  }, {
    key: "setItems",
    value: function setItems(primary) {
      var _this$_content;
      for (var _len2 = arguments.length, secondary = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        secondary[_key2 - 1] = arguments[_key2];
      }
      this.doNotOpen = false;
      secondary = secondary.slice(0, MAXIMUM_ITEMS - 1);
      (_this$_content = this._content).setItems.apply(_this$_content, [primary].concat(_toConsumableArray(secondary)));
    }
  }, {
    key: "handleClick",
    value: function handleClick() {
      this.stopPropagation();
    }
  }, {
    key: "dispose",
    value: function dispose() {
      _get(_getPrototypeOf(RecommendationsOverlay.prototype), "dispose", this).call(this);
    }
  }]);
  return RecommendationsOverlay;
}(Component);
video_js__WEBPACK_IMPORTED_MODULE_0___default().registerComponent('recommendationsOverlay', RecommendationsOverlay);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RecommendationsOverlay);

/***/ }),

/***/ "./components/shoppable-bar/panel/shoppable-panel-item.js":
/*!****************************************************************!*\
  !*** ./components/shoppable-bar/panel/shoppable-panel-item.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var utils_matches__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/matches */ "./utils/matches.js");
/* harmony import */ var _plugins_cloudinary_models_image_source__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../plugins/cloudinary/models/image-source */ "./plugins/cloudinary/models/image-source.js");
/* harmony import */ var _shoppable_widget_const__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shoppable-widget.const */ "./components/shoppable-bar/shoppable-widget.const.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var ClickableComponent = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('ClickableComponent');
var dom = (video_js__WEBPACK_IMPORTED_MODULE_0___default().dom) || (video_js__WEBPACK_IMPORTED_MODULE_0___default());


var widthTransformation = {
  width: 132
};
var ShoppablePanelItem = /*#__PURE__*/function (_ClickableComponent) {
  _inherits(ShoppablePanelItem, _ClickableComponent);
  var _super = _createSuper(ShoppablePanelItem);
  function ShoppablePanelItem(player, initOptions) {
    var _this;
    _classCallCheck(this, ShoppablePanelItem);
    _this = _super.call(this, player, initOptions);
    _this.options_ = initOptions;
    _this.isDragged = false;
    return _this;
  }
  _createClass(ShoppablePanelItem, [{
    key: "handleClick",
    value: function handleClick(event) {
      event.preventDefault();
      event.stopPropagation();
      if (!(0,utils_matches__WEBPACK_IMPORTED_MODULE_1__.elMatches)(this.el_, ".dragged .".concat(_shoppable_widget_const__WEBPACK_IMPORTED_MODULE_3__.CLD_SPBL_ITEM))) {
        // Prevent click event if dragged
        this.options_.clickHandler(event);
      }
      this.isDragged = false;
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.options_.conf.title;
    }
  }, {
    key: "createEl",
    value: function createEl() {
      var el = _get(_getPrototypeOf(ShoppablePanelItem.prototype), "createEl", this).call(this, 'a', {
        className: "".concat(_shoppable_widget_const__WEBPACK_IMPORTED_MODULE_3__.CLD_SPBL_ITEM, " base-color-bg accent-color-text"),
        href: '#'
      });
      el.setAttribute('data-product-id', this.options_.conf.productId || '');
      el.setAttribute('data-product-name', this.options_.conf.productName || '');
      if (this.options_.conf.onHover) {
        addOnHover(el, this.options_.conf.onHover, this.options_.item.cloudinaryConfig());
      }
      if (this.options_.conf.onClick) {
        addOnClick(el, this.options_.conf.onClick);
      }
      var img = _get(_getPrototypeOf(ShoppablePanelItem.prototype), "createEl", this).call(this, 'img', {
        className: _shoppable_widget_const__WEBPACK_IMPORTED_MODULE_3__.CLD_SPBL_IMAGE
      }, {
        src: this.options_.item.url(widthTransformation)
      });
      el.appendChild(img);
      if (this.getTitle()) {
        var info = dom.createEl('div', {
          className: 'cld-spbl-item-info base-color-semi-bg text-color-text'
        });
        var title = dom.createEl('span', {
          className: 'cld-spbl-item-title'
        }, {}, this.getTitle());
        info.appendChild(title);
        el.appendChild(info);
      }
      return el;
    }
  }]);
  return ShoppablePanelItem;
}(ClickableComponent);
var addOnHover = function addOnHover(el, conf, cldConf) {
  el.setAttribute('data-hover-action', conf.action);
  if (conf.action === _shoppable_widget_const__WEBPACK_IMPORTED_MODULE_3__.SHOPPABLE_HOVER_ACTIONS.OVERLAY) {
    var overlayText = dom.createEl('span', {
      className: 'cld-spbl-overlay-text base-color-text'
    }, {}, conf.args);
    var overlay = dom.createEl('span', {
      className: 'cld-spbl-overlay text-color-semi-bg base-color-text'
    }, {
      title: conf.args
    }, overlayText);
    el.appendChild(overlay);
  } else {
    var switchImgSource = new _plugins_cloudinary_models_image_source__WEBPACK_IMPORTED_MODULE_2__["default"](conf.args.publicId, {
      cloudinaryConfig: cldConf,
      transformation: conf.args.transformation
    });
    var hoverImg = dom.createEl('img', {
      className: "".concat(_shoppable_widget_const__WEBPACK_IMPORTED_MODULE_3__.CLD_SPBL_IMAGE, " cld-spbl-hover-img")
    }, {
      src: switchImgSource.url(widthTransformation)
    });
    el.appendChild(hoverImg);
  }
};
var addOnClick = function addOnClick(el, conf) {
  el.setAttribute('data-click-action', conf.action);
  el.setAttribute('data-pause', conf.pause);
  if (conf.action === _shoppable_widget_const__WEBPACK_IMPORTED_MODULE_3__.SHOPPABLE_CLICK_ACTIONS.SEEk) {
    el.setAttribute('data-seek', conf.args.time);
  } else if (conf.action === _shoppable_widget_const__WEBPACK_IMPORTED_MODULE_3__.SHOPPABLE_CLICK_ACTIONS.GO_TO) {
    el.setAttribute('data-goto-url', conf.args.url);
  }
};
video_js__WEBPACK_IMPORTED_MODULE_0___default().registerComponent('shoppablePanelItem', ShoppablePanelItem);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ShoppablePanelItem);

/***/ }),

/***/ "./components/shoppable-bar/panel/shoppable-panel.js":
/*!***********************************************************!*\
  !*** ./components/shoppable-bar/panel/shoppable-panel.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var utils_assign__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/assign */ "./utils/assign.js");
/* harmony import */ var utils_throttle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/throttle */ "./utils/throttle.js");
/* harmony import */ var utils_time__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! utils/time */ "./utils/time.js");
/* harmony import */ var assets_styles_components_playlist_scss__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! assets/styles/components/playlist.scss */ "./assets/styles/components/playlist.scss");
/* harmony import */ var _shoppable_panel_item__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./shoppable-panel-item */ "./components/shoppable-bar/panel/shoppable-panel-item.js");
/* harmony import */ var _plugins_cloudinary_models_image_source__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../plugins/cloudinary/models/image-source */ "./plugins/cloudinary/models/image-source.js");
/* harmony import */ var _shoppable_widget_const__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../shoppable-widget.const */ "./components/shoppable-bar/shoppable-widget.const.js");
/* harmony import */ var _utils_consts__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../utils/consts */ "./utils/consts.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }









var Component = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('Component');
var ShoppablePanel = /*#__PURE__*/function (_Component) {
  _inherits(ShoppablePanel, _Component);
  var _super = _createSuper(ShoppablePanel);
  function ShoppablePanel(player) {
    var _thisSuper, _this;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, ShoppablePanel);
    _this = _super.call(this, player, options);
    _this.options = options;
    var itemChangeHandler = function itemChangeHandler() {
      _this.render();
    };
    player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_8__.PLAYER_EVENT.SHOPPABLE_ITEM_CHANGED, itemChangeHandler);
    _this.render();
    _this.dispose = function () {
      _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(ShoppablePanel.prototype)), "dispose", _thisSuper).call(_thisSuper);
      player.off(_utils_consts__WEBPACK_IMPORTED_MODULE_8__.PLAYER_EVENT.SHOPPABLE_ITEM_CHANGED, itemChangeHandler);
    };
    return _this;
  }
  _createClass(ShoppablePanel, [{
    key: "createEl",
    value: function createEl() {
      var el = _get(_getPrototypeOf(ShoppablePanel.prototype), "createEl", this).call(this);
      [_shoppable_widget_const__WEBPACK_IMPORTED_MODULE_7__.CLD_SPBL_PANEL_CLASS, 'base-color-bg'].map(function (cls) {
        return el.classList.add(cls);
      });
      return el;
    }
  }, {
    key: "removeAll",
    value: function removeAll() {
      var childrens = this.children();
      for (var i = childrens.length - 1; i >= 0; --i) {
        this.removeChild(childrens[i]);
      }
    }
  }, {
    key: "getItems",
    value: function getItems() {
      var _this2 = this;
      var cloudinaryConfig = this.player_.cloudinary.cloudinaryConfig();
      return this.options.products.map(function (product) {
        if (product.onHover && _typeof(product.onHover.args) === 'object') {
          product.onHover.args.transformation = (0,utils_assign__WEBPACK_IMPORTED_MODULE_1__.assign)({}, _this2.options.transformation, product.onHover.args.transformation);
        }
        var conf = {
          productId: product.productId,
          productName: product.productName,
          title: product.title,
          onHover: product.onHover,
          onClick: product.onClick,
          startTime: product.startTime,
          endTime: product.endTime
        };
        var imageSource = new _plugins_cloudinary_models_image_source__WEBPACK_IMPORTED_MODULE_6__["default"](product.publicId, {
          cloudinaryConfig: cloudinaryConfig,
          transformation: (0,utils_assign__WEBPACK_IMPORTED_MODULE_1__.assign)({}, _this2.options.transformation, product.transformation)
        });
        return {
          imageSrc: imageSource,
          conf: conf
        };
      });
    }
  }, {
    key: "scrollToActiveItem",
    value: function scrollToActiveItem() {
      var activeItems = this.el_.getElementsByClassName('active');
      if (activeItems.length > 0) {
        var toScroll = activeItems[0].offsetTop - 12;
        // Test for native scrollTo support (IE will fail)
        if ('scrollBehavior' in document.documentElement.style) {
          this.el_.scrollTo({
            top: toScroll,
            behavior: 'smooth'
          });
        } else {
          this.el_.scrollTop = toScroll;
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;
      this.removeAll();
      var items = this.getItems();
      var throttledScrollToActiveItem = (0,utils_throttle__WEBPACK_IMPORTED_MODULE_2__.throttle)(function () {
        return _this3.scrollToActiveItem();
      }, 1000);
      items.forEach(function (item, index) {
        var shoppablePanelItem = new _shoppable_panel_item__WEBPACK_IMPORTED_MODULE_5__["default"](_this3.player(), {
          item: item.imageSrc,
          conf: item.conf,
          next: index === 1,
          current: index === 0,
          clickHandler: function clickHandler(e) {
            var target = e.currentTarget || e.target;
            var evName = _this3.player_.ended() ? 'productClickPost' : 'productClick';
            _this3.player_.trigger(evName, {
              productId: target.dataset.productId,
              productName: target.dataset.productName
            });

            // Go to URL, or seek video (set currentTime)
            if (target.dataset.clickAction === _shoppable_widget_const__WEBPACK_IMPORTED_MODULE_7__.SHOPPABLE_CLICK_ACTIONS.GO_TO) {
              window.open(target.dataset.gotoUrl, '_blank');
            } else if (target.dataset.clickAction === _shoppable_widget_const__WEBPACK_IMPORTED_MODULE_7__.SHOPPABLE_CLICK_ACTIONS.SEEk) {
              var gotoSecs = (0,utils_time__WEBPACK_IMPORTED_MODULE_3__.parseTime)(target.dataset.seek);
              if (gotoSecs !== null) {
                _this3.player_.addClass('vjs-has-started'); // Hide the poster image
                if (_this3.player_.postModal) {
                  _this3.player_.postModal.close();
                }
                _this3.player_.currentTime(gotoSecs);
                // Close products side-panel
                _this3.player_.removeClass(_shoppable_widget_const__WEBPACK_IMPORTED_MODULE_7__.SHOPPABLE_PANEL_VISIBLE_CLASS);
                _this3.player_.addClass(_shoppable_widget_const__WEBPACK_IMPORTED_MODULE_7__.SHOPPABLE_PANEL_HIDDEN_CLASS);
                _this3.player_.addClass(_shoppable_widget_const__WEBPACK_IMPORTED_MODULE_7__.SHOPPABLE_PRODUCTS_OVERLAY_CLASS);
                // Wait for the time update and show the tooltips
                _this3.player_.one('seeked', function () {
                  return _this3.player_.trigger('showProductsOverlay');
                });
              }
            }

            // pause - true (default), false, or number of seconds
            if (target.dataset.pause !== 'false') {
              _this3.player_.pause();
              if ((0,utils_time__WEBPACK_IMPORTED_MODULE_3__.parseTime)(target.dataset.pause)) {
                setTimeout(function () {
                  _this3.player_.play();
                }, (0,utils_time__WEBPACK_IMPORTED_MODULE_3__.parseTime)(target.dataset.pause) * 1000);
              }
            }
          }
        });
        shoppablePanelItem.on('mouseover', function (e) {
          var target = e.currentTarget || e.target;
          var evName = _this3.player_.ended() ? 'productHoverPost' : 'productHover';
          _this3.player_.trigger(evName, {
            productId: target.dataset.productId,
            productName: target.dataset.productName
          });
        });
        if (typeof item.conf.startTime !== 'undefined' && typeof item.conf.endTime !== 'undefined') {
          _this3.player_.on(_utils_consts__WEBPACK_IMPORTED_MODULE_8__.PLAYER_EVENT.TIME_UPDATE, function () {
            var time = _this3.player_.currentTime();
            if (time >= item.conf.startTime && time < item.conf.endTime) {
              shoppablePanelItem.el_.classList.add('active');
              throttledScrollToActiveItem();
            } else if (shoppablePanelItem.el_.classList.contains('active')) {
              shoppablePanelItem.el_.classList.remove('active');
            }
          });
        }
        _this3.addChild(shoppablePanelItem);
      });
    }
  }]);
  return ShoppablePanel;
}(Component);
video_js__WEBPACK_IMPORTED_MODULE_0___default().registerComponent('shoppablePanel', ShoppablePanel);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ShoppablePanel);

/***/ }),

/***/ "./components/shoppable-bar/shoppable-widget.const.js":
/*!************************************************************!*\
  !*** ./components/shoppable-bar/shoppable-widget.const.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CLD_SPBL_IMAGE": () => (/* binding */ CLD_SPBL_IMAGE),
/* harmony export */   "CLD_SPBL_INNER_BAR": () => (/* binding */ CLD_SPBL_INNER_BAR),
/* harmony export */   "CLD_SPBL_ITEM": () => (/* binding */ CLD_SPBL_ITEM),
/* harmony export */   "CLD_SPBL_PANEL_CLASS": () => (/* binding */ CLD_SPBL_PANEL_CLASS),
/* harmony export */   "CLD_SPBL_TOGGLE_CLASS": () => (/* binding */ CLD_SPBL_TOGGLE_CLASS),
/* harmony export */   "CLD_SPBL_TOGGLE_CUSTOM_ICON_CLASS": () => (/* binding */ CLD_SPBL_TOGGLE_CUSTOM_ICON_CLASS),
/* harmony export */   "CLD_SPBL_TOGGLE_ICON_CLASS": () => (/* binding */ CLD_SPBL_TOGGLE_ICON_CLASS),
/* harmony export */   "CLOSE_ICON_CLASS": () => (/* binding */ CLOSE_ICON_CLASS),
/* harmony export */   "ICON_CART_CLASS": () => (/* binding */ ICON_CART_CLASS),
/* harmony export */   "SHOPPABLE_ANIMATION_CLASS": () => (/* binding */ SHOPPABLE_ANIMATION_CLASS),
/* harmony export */   "SHOPPABLE_CLICK_ACTIONS": () => (/* binding */ SHOPPABLE_CLICK_ACTIONS),
/* harmony export */   "SHOPPABLE_HOVER_ACTIONS": () => (/* binding */ SHOPPABLE_HOVER_ACTIONS),
/* harmony export */   "SHOPPABLE_PANEL_HIDDEN_CLASS": () => (/* binding */ SHOPPABLE_PANEL_HIDDEN_CLASS),
/* harmony export */   "SHOPPABLE_PANEL_VISIBLE_CLASS": () => (/* binding */ SHOPPABLE_PANEL_VISIBLE_CLASS),
/* harmony export */   "SHOPPABLE_PRODUCTS_OVERLAY_CLASS": () => (/* binding */ SHOPPABLE_PRODUCTS_OVERLAY_CLASS),
/* harmony export */   "SHOPPABLE_WIDGET_OPTIONS_DEFAULTS": () => (/* binding */ SHOPPABLE_WIDGET_OPTIONS_DEFAULTS)
/* harmony export */ });
var SHOPPABLE_WIDGET_OPTIONS_DEFAULTS = {
  location: 'right',
  toggleIcon: '',
  width: '20%',
  startState: 'openOnPlay',
  autoClose: 2,
  transformation: {
    quality: 'auto',
    width: 'auto',
    fetch_format: 'auto',
    crop: 'scale'
  },
  products: [],
  showPostPlayOverlay: false
};
var SHOPPABLE_CLICK_ACTIONS = {
  GO_TO: 'goto',
  SEEk: 'seek'
};
var SHOPPABLE_HOVER_ACTIONS = {
  OVERLAY: 'overlay'
};
var SHOPPABLE_PANEL_VISIBLE_CLASS = 'shoppable-panel-visible';
var SHOPPABLE_PANEL_HIDDEN_CLASS = 'shoppable-panel-hidden';
var SHOPPABLE_PRODUCTS_OVERLAY_CLASS = 'shoppable-products-overlay';
var CLD_SPBL_PANEL_CLASS = 'cld-spbl-panel';
var CLD_SPBL_TOGGLE_CLASS = 'cld-spbl-toggle';
var CLD_SPBL_TOGGLE_ICON_CLASS = 'cld-spbl-toggle-icon';
var CLD_SPBL_INNER_BAR = 'cld-spbl-bar-inner';
var CLD_SPBL_TOGGLE_CUSTOM_ICON_CLASS = 'cld-spbl-toggle-custom-icon';
var ICON_CART_CLASS = 'vjs-icon-cart';
var CLOSE_ICON_CLASS = 'vjs-icon-close';
var SHOPPABLE_ANIMATION_CLASS = 'animate';
var CLD_SPBL_ITEM = 'cld-spbl-item';
var CLD_SPBL_IMAGE = 'cld-spbl-img';

/***/ }),

/***/ "./components/title-bar/title-bar.js":
/*!*******************************************!*\
  !*** ./components/title-bar/title-bar.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var assets_styles_components_title_bar_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! assets/styles/components/title-bar.scss */ "./assets/styles/components/title-bar.scss");
/* harmony import */ var _component_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../component-utils */ "./components/component-utils.js");
/* harmony import */ var _component_utils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_component_utils__WEBPACK_IMPORTED_MODULE_2__);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }




// support VJS5 & VJS6 at the same time
var dom = (video_js__WEBPACK_IMPORTED_MODULE_0___default().dom) || (video_js__WEBPACK_IMPORTED_MODULE_0___default());
var Component = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('Component');
var TitleBar = /*#__PURE__*/function (_Component) {
  _inherits(TitleBar, _Component);
  var _super = _createSuper(TitleBar);
  function TitleBar(player) {
    var _this;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, TitleBar);
    _this = _super.call(this, player, options);
    _this.on(player, 'cldsourcechanged', function (_, _ref) {
      var source = _ref.source;
      return _this.setItem(source);
    });
    return _this;
  }
  _createClass(TitleBar, [{
    key: "setItem",
    value: function setItem(source) {
      if (!source) {
        this.setTitle('');
        this.setSubtitle('');
        return;
      }
      var info = source.info();
      this.setTitle(info.title);
      this.setSubtitle(info.subtitle);
    }
  }, {
    key: "setTitle",
    value: function setTitle(text) {
      _component_utils__WEBPACK_IMPORTED_MODULE_2___default().setText(this.titleEl, text);
      this.refresh();
      return text;
    }
  }, {
    key: "setSubtitle",
    value: function setSubtitle(text) {
      _component_utils__WEBPACK_IMPORTED_MODULE_2___default().setText(this.subtitleEl, text);
      this.refresh();
      return text;
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var _this2 = this;
      var titleValue = function titleValue() {
        return _this2.titleEl.innerText;
      };
      var subtitleValue = function subtitleValue() {
        return _this2.subtitleEl.innerText;
      };
      if (!titleValue() && !subtitleValue()) {
        this.hide();
        return;
      }
      this.show();
    }
  }, {
    key: "createEl",
    value: function createEl() {
      this.titleEl = dom.createEl('div', {
        className: 'vjs-title-bar-title'
      });
      this.subtitleEl = dom.createEl('div', {
        className: 'vjs-title-bar-subtitle'
      });
      var el = _get(_getPrototypeOf(TitleBar.prototype), "createEl", this).call(this, 'div', {
        append: this.titleEl,
        className: 'vjs-title-bar'
      });
      el.appendChild(this.titleEl);
      el.appendChild(this.subtitleEl);
      return el;
    }
  }]);
  return TitleBar;
}(Component);
video_js__WEBPACK_IMPORTED_MODULE_0___default().registerComponent('titleBar', TitleBar);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TitleBar);

/***/ }),

/***/ "./config/defaults.js":
/*!****************************!*\
  !*** ./config/defaults.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _plugins_context_menu_contextMenuContent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../plugins/context-menu/contextMenuContent */ "./plugins/context-menu/contextMenuContent.js");
/* harmony import */ var _video_player_const__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../video-player.const */ "./video-player.const.js");



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  logoOnclickUrl: 'https://cloudinary.com/',
  showLogo: true,
  showJumpControls: false,
  playsinline: (video_js__WEBPACK_IMPORTED_MODULE_0___default().browser.IS_IOS),
  skin: 'dark',
  controls: false,
  controlBar: {
    'pictureInPictureToggle': false
  },
  seekThumbnails: true,
  aiHighlightsGraph: false,
  preload: _video_player_const__WEBPACK_IMPORTED_MODULE_2__.PRELOAD.AUTO,
  textTrackSettings: false,
  loop: false,
  muted: false,
  posterOptions: {},
  sourceTypes: ['webm/vp9', 'mp4/h265', 'mp4'],
  contextMenu: {
    content: _plugins_context_menu_contextMenuContent__WEBPACK_IMPORTED_MODULE_1__["default"]
  },
  floatingWhenNotVisible: _video_player_const__WEBPACK_IMPORTED_MODULE_2__.FLOATING_TO.NONE,
  hideContextMenu: false,
  analytics: false,
  cloudinaryAnalytics: true,
  playedEventPercents: [25, 50, 75, 100]
});

/***/ }),

/***/ "./extended-events.js":
/*!****************************!*\
  !*** ./extended-events.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "normalizeEventsParam": () => (/* binding */ normalizeEventsParam)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ "../node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var utils_assign__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/assign */ "./utils/assign.js");
/* harmony import */ var utils_type_inference__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! utils/type-inference */ "./utils/type-inference.js");
/* harmony import */ var _utils_consts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/consts */ "./utils/consts.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }





var EVENT_DEFAULTS = {
  percentsplayed: {
    percents: [25, 50, 75, 100]
  }
};
var DEFAULT_EVENTS = [_utils_consts__WEBPACK_IMPORTED_MODULE_4__.PLAYER_EVENT.PERCENTS_PLAYED, _utils_consts__WEBPACK_IMPORTED_MODULE_4__.PLAYER_EVENT.PAUSE_NO_SEEK, _utils_consts__WEBPACK_IMPORTED_MODULE_4__.PLAYER_EVENT.SEEK, _utils_consts__WEBPACK_IMPORTED_MODULE_4__.PLAYER_EVENT.MUTE, _utils_consts__WEBPACK_IMPORTED_MODULE_4__.PLAYER_EVENT.UNMUTE, _utils_consts__WEBPACK_IMPORTED_MODULE_4__.PLAYER_EVENT.QUALITY_CHANGED];
var DEFAULT_OPTIONS = {
  events: DEFAULT_EVENTS
};

// Emits the following additional events:
// percentsplayed, timeplayed, pausenoseek, seek, mute, unmute
var ExtendedEvents = /*#__PURE__*/function (_EventEmitter) {
  _inherits(ExtendedEvents, _EventEmitter);
  var _super = _createSuper(ExtendedEvents);
  function ExtendedEvents(player) {
    var _this;
    var initOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, ExtendedEvents);
    _this = _super.call(this);
    _this.player = player;
    var options = video_js__WEBPACK_IMPORTED_MODULE_0___default().mergeOptions(DEFAULT_OPTIONS, initOptions);
    var _muteData = {
      lastState: undefined
    };
    var _seekStart = 0;
    var _seekEnd = 0;
    var _seeking = false;
    var _percentsTracked = [];
    var _timesTracked = [];
    var _currentSource = null;
    var _ended = false;
    var volumechange = function volumechange(event) {
      if (_this.player.muted() && _muteData.lastState !== 'muted') {
        _muteData.lastState = 'muted';
        _this.emit(_utils_consts__WEBPACK_IMPORTED_MODULE_4__.PLAYER_EVENT.MUTE, event);
      } else if (!_this.player.muted() && _muteData.lastState !== 'unmuted') {
        _muteData.lastState = 'unmuted';
        _this.emit(_utils_consts__WEBPACK_IMPORTED_MODULE_4__.PLAYER_EVENT.UNMUTE, event);
      }
    };
    var timeupdate = function timeupdate(event) {
      var currentTime = _this.player.currentTime();
      var duration = _this.player.duration();
      var _emit = function _emit(type, data) {
        data.originalType = 'timeupdate';
        _this.emit(type, event, data);
      };
      if (_this.events.percentsplayed) {
        _this.events.percentsplayed.percents.forEach(function (percent) {
          if (playedAtPercentage(currentTime, duration, percent) && _percentsTracked.indexOf(percent) === -1) {
            _percentsTracked.push(percent);
            _emit(_utils_consts__WEBPACK_IMPORTED_MODULE_4__.PLAYER_EVENT.PERCENTS_PLAYED, {
              percent: percent
            });
          }
        });
      }
      if (_this.events.timeplayed) {
        var timeplayed = _this.events.timeplayed;
        var times = timeplayed.interval ? [Math.floor(currentTime / timeplayed.interval) * timeplayed.interval] : timeplayed.times;
        times.forEach(function (time) {
          if (playedAtTime(currentTime, time) && _timesTracked.indexOf(time) === -1) {
            _timesTracked.push(time);
            _emit(_utils_consts__WEBPACK_IMPORTED_MODULE_4__.PLAYER_EVENT.TIME_PLAYED, {
              time: time
            });
          }
        });
      }
      if (_this.events.seek) {
        _seekStart = _seekEnd;
        _seekEnd = currentTime;
        if (Math.abs(_seekStart - _seekEnd) > 1) {
          _seeking = true;

          // should empty  _timesTracked array on seek, needed for 'timeplayed' event
          resetPerVideoState();
          _emit(_utils_consts__WEBPACK_IMPORTED_MODULE_4__.PLAYER_EVENT.SEEK, {
            seekStart: _seekStart,
            seekEnd: _seekEnd
          });
        }
      }
    };
    var pause = function pause(event) {
      var currentTime = Math.round(_this.player.currentTime());
      var duration = Math.round(_this.player.duration());
      if (currentTime !== duration && !_seeking) {
        _this.emit(_utils_consts__WEBPACK_IMPORTED_MODULE_4__.PLAYER_EVENT.PAUSE_NO_SEEK, event);
      }
    };
    var play = function play() {
      _seeking = false;
    };
    var replay = function replay() {
      if (_ended) {
        _this.player.trigger('replay');
        _ended = false;
      }
    };
    var loadedmetadata = function loadedmetadata() {
      if (_this.player.currentSource().src !== _currentSource) {
        resetPerVideoState();
        _currentSource = _this.player.currentSource().src;
      }
    };
    var adaptiveEvents = function adaptiveEvents(event) {
      var ee = _assertThisInitialized(_this);
      var tracks = _this.player.textTracks();
      var segmentMetadataTrack = null;
      for (var i = 0; i < tracks.length; i++) {
        if (tracks[i].label === 'segment-metadata') {
          segmentMetadataTrack = tracks[i];
        }
      }
      var previousResolution = null;
      if (segmentMetadataTrack) {
        segmentMetadataTrack.on('cuechange', function () {
          var activeCue = segmentMetadataTrack.activeCues[0];
          if (activeCue) {
            var currentRes = activeCue.value.resolution;
            if (previousResolution !== currentRes) {
              var data = {
                from: previousResolution,
                to: currentRes
              };
              ee.emit(_utils_consts__WEBPACK_IMPORTED_MODULE_4__.PLAYER_EVENT.QUALITY_CHANGED, event, data);
            }
            previousResolution = currentRes;
          }
        });
      }
    };
    var resetState = function resetState() {
      _muteData = {
        lastState: undefined
      };
      _seekStart = _seekEnd = 0;
      _seeking = false;
      resetPerVideoState();
    };
    var resetPerVideoState = function resetPerVideoState() {
      _percentsTracked = [];
      _timesTracked = [];
    };
    var ended = function ended() {
      _ended = true;
    };
    _this.events = normalizeEventsParam(options.events, EVENT_DEFAULTS);
    resetState();
    _this.player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_4__.PLAYER_EVENT.PLAY, replay.bind(_assertThisInitialized(_this)));
    _this.player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_4__.PLAYER_EVENT.ENDED, ended.bind(_assertThisInitialized(_this)));
    if (_this.events.percentsplayed || _this.events.timeplayed || _this.events.seek || _this.events.totaltimeplayed) {
      _this.player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_4__.PLAYER_EVENT.TIME_UPDATE, timeupdate.bind(_assertThisInitialized(_this)));
    }
    if (_this.events.mute || _this.events.unmute) {
      _this.player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_4__.PLAYER_EVENT.VOLUME_CHANGE, volumechange.bind(_assertThisInitialized(_this)));
    }
    if (_this.events.pausenoseek) {
      _this.player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_4__.PLAYER_EVENT.PAUSE, pause.bind(_assertThisInitialized(_this)));
      _this.player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_4__.PLAYER_EVENT.PLAY, play.bind(_assertThisInitialized(_this)));
    }
    _this.player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_4__.PLAYER_EVENT.LOADED_METADATA, loadedmetadata.bind(_assertThisInitialized(_this)));
    _this.player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_4__.PLAYER_EVENT.LOADED_DATA, adaptiveEvents.bind(_assertThisInitialized(_this)));
    return _this;
  }
  return _createClass(ExtendedEvents);
}((events__WEBPACK_IMPORTED_MODULE_1___default()));
var normalizeEventsParam = function normalizeEventsParam(events, defaults) {
  var normalized = events;
  if (events.constructor.name === 'Array') {
    normalized = events.reduce(function (agg, item) {
      var eventDefaults = defaults[item] || {};
      if ((0,utils_type_inference__WEBPACK_IMPORTED_MODULE_3__.isPlainObject)(item)) {
        agg[item.type] = (0,utils_assign__WEBPACK_IMPORTED_MODULE_2__.assign)({}, eventDefaults, item);
      } else {
        agg[item] = eventDefaults;
      }
      return agg;
    }, {});
  }
  return normalized;
};
var playedAtPercentage = function playedAtPercentage(currentTime, duration, percentageCheckpoint) {
  var graceRangeSeconds = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.5;
  var checkPoint = duration * percentageCheckpoint / 100;
  return playedAtTime(currentTime, checkPoint, graceRangeSeconds);
};
var playedAtTime = function playedAtTime(currentTime, checkpoint) {
  var graceRangeSeconds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.5;
  return currentTime <= checkpoint + graceRangeSeconds && currentTime >= checkpoint - graceRangeSeconds;
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ExtendedEvents);

/***/ }),

/***/ "./mixins/eventable.js":
/*!*****************************!*\
  !*** ./mixins/eventable.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var Eventable = function Eventable(superclass) {
  return /*#__PURE__*/function (_superclass) {
    _inherits(_class, _superclass);
    var _super = _createSuper(_class);
    function _class() {
      var _this;
      _classCallCheck(this, _class);
      _this = _super.call(this);
      var eventable = {
        data: {},
        handlers: {}
      };
      _this.on = function () {
        var _this$videojs;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var lastIndex = args.length - 1;
        var func = args[lastIndex];
        eventable.handlers[func] = function (event) {
          event.Player = _assertThisInitialized(_this);
          for (var _len2 = arguments.length, _args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            _args[_key2 - 1] = arguments[_key2];
          }
          func.apply(void 0, [event].concat(_args));
        };
        args[lastIndex] = eventable.handlers[func];
        return (_this$videojs = _this.videojs).on.apply(_this$videojs, args);
      };
      _this.one = function () {
        var _this$videojs2;
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        var lastIndex = args.length - 1;
        var func = args[lastIndex];
        eventable.handlers[func] = function (event) {
          event.Player = _assertThisInitialized(_this);
          for (var _len4 = arguments.length, _args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
            _args[_key4 - 1] = arguments[_key4];
          }
          func.apply(void 0, [event].concat(_args));
          delete eventable.handlers[func];
        };
        args[lastIndex] = eventable.handlers[func];
        return (_this$videojs2 = _this.videojs).one.apply(_this$videojs2, args);
      };
      _this.off = function () {
        var _this$videojs3;
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }
        var lastIndex = args.length - 1;
        var func = args[lastIndex];
        args[lastIndex] = eventable.handlers[func];
        var res = (_this$videojs3 = _this.videojs).off.apply(_this$videojs3, args);
        delete eventable.handlers[func];
        return res;
      };
      _this.trigger = function () {
        var _this$videojs4;
        (_this$videojs4 = _this.videojs).trigger.apply(_this$videojs4, arguments);
      };
      return _this;
    }
    return _createClass(_class);
  }(superclass);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Eventable);

/***/ }),

/***/ "./mixins/playlistable.js":
/*!********************************!*\
  !*** ./mixins/playlistable.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var components_playlist_playlist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! components/playlist/playlist */ "./components/playlist/playlist.js");
/* harmony import */ var utils_slicing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/slicing */ "./utils/slicing.js");
/* harmony import */ var utils_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/api */ "./utils/api.js");
/* harmony import */ var utils_assign__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! utils/assign */ "./utils/assign.js");
/* harmony import */ var _plugins_cloudinary_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../plugins/cloudinary/common */ "./plugins/cloudinary/common.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }





var LIST_BY_TAG_PARAMS = {
  format: 'json',
  resource_type: 'video',
  type: 'list'
};
var Playlistable = function Playlistable(superclass) {
  return /*#__PURE__*/function (_superclass) {
    _inherits(_class, _superclass);
    var _super = _createSuper(_class);
    function _class(player) {
      var _this;
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      _classCallCheck(this, _class);
      _this = _super.call(this);
      var _chainTarget = (0,utils_slicing__WEBPACK_IMPORTED_MODULE_1__.sliceProperties)(options, 'chainTarget').chainTarget;
      var _playlist = null;
      var _playlistDisposer = null;
      _this.playlist = function (sources) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        if (sources === undefined) {
          return _playlist;
        }
        if (_this.playlist()) {
          _this.disposePlaylist();
        }
        createPlaylist(sources, options);
        player.trigger('playlistcreated');
        return _chainTarget;
      };
      _this.disposePlaylist = function () {
        player.removeClass('vjs-playlist');
        var playlist = _this.playlist();
        _playlist = undefined;
        playlist.dispose();
        _this.off('cldsourcechanged', _playlistDisposer);
      };
      var createPlaylist = function createPlaylist(sources, options) {
        if (sources instanceof components_playlist_playlist__WEBPACK_IMPORTED_MODULE_0__["default"]) {
          _playlist = sources;
          _playlist.resetState();
          _playlist.currentIndex(_playlist.currentIndex());
        } else {
          _playlist = new components_playlist_playlist__WEBPACK_IMPORTED_MODULE_0__["default"](_assertThisInitialized(_this), sources, options);
          _playlist.currentIndex(0);
        }
        _playlistDisposer = addSourceChangedListener();
        player.addClass('vjs-playlist');
      };
      var addSourceChangedListener = function addSourceChangedListener() {
        var disposer = function disposer() {
          if (_this.playlist() && !_this.playlist().currentSource().contains(_this.player.currentSource())) {
            _this.disposePlaylist();
          }
        };
        _this.on('cldsourcechanged', disposer);
        return disposer;
      };
      return _this;
    }
    _createClass(_class, [{
      key: "playlistByTag",
      value: function playlistByTag(tag) {
        var _this2 = this;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return this.sourcesByTag(tag, options).then(function (sources) {
          return _this2.playlist(sources, options);
        });
      }
    }, {
      key: "sourcesByTag",
      value: function sourcesByTag(tag) {
        var _this3 = this;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var url = (0,_plugins_cloudinary_common__WEBPACK_IMPORTED_MODULE_4__.getCloudinaryUrl)(tag, (0,_plugins_cloudinary_common__WEBPACK_IMPORTED_MODULE_4__.extendCloudinaryConfig)(this.cloudinaryConfig(), LIST_BY_TAG_PARAMS));
        return fetch(url).then(function (result) {
          return result.json();
        }).then(function (json) {
          var resources = (0,utils_api__WEBPACK_IMPORTED_MODULE_2__.normalizeJsonResponse)(json.resources);
          if (options.sorter) {
            resources.sort(options.sorter);
          }
          var sources = resources.map(function (resource) {
            var sourceParams = options.sourceParams || {};
            if (typeof sourceParams === 'function') {
              sourceParams = sourceParams(resource);
            }
            var info = resource.context && resource.context.custom || {};
            var source = (0,utils_assign__WEBPACK_IMPORTED_MODULE_3__.assign)({
              info: info
            }, sourceParams, {
              publicId: resource.publicId
            });
            return _this3.buildSource(source);
          });
          return sources;
        });
      }
    }]);
    return _class;
  }(superclass);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Playlistable);

/***/ }),

/***/ "./plugins/aiHighlightsGraph/index.js":
/*!********************************************!*\
  !*** ./plugins/aiHighlightsGraph/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _aiHighlightsGraph_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./aiHighlightsGraph.scss */ "./plugins/aiHighlightsGraph/aiHighlightsGraph.scss");



// Default options for the plugin.
var defaults = {};

/**
 * Function to invoke when the player is ready.
 *
 * @function onPlayerReady
 * @param    {Player} player
 *           A Video.js player object.
 *
 * @param    {Object} [options={}]
 *           A plain object containing options for the plugin.
 */
var onPlayerReady = function onPlayerReady(player, options) {
  player.addClass('vjs-ai-highlights-graph');
  player.aiHighlightsGraph = new HighlightsGraphPlugin(player, options);
};

/**
 * A video.js plugin.
 *
 * In the plugin function, the value of `this` is a video.js `Player`
 * instance. You cannot rely on the player being in a "ready" state here,
 * depending on how the plugin is invoked. This may or may not be important
 * to you; if not, remove the wait for "ready"!
 *
 * @function aiHighlightsGraph
 * @param    {Object} [options={}]
 *           An object of options left to the plugin author to define.
 */
function aiHighlightsGraph(options) {
  var _this = this;
  this.ready(function () {
    onPlayerReady(_this, video_js__WEBPACK_IMPORTED_MODULE_0___default().mergeOptions(defaults, options));
  });
}

/**
 * HighlightsGraphPlugin class.
 *
 * This class performs all functions related to displaying the AI highlights graph.
 */
var HighlightsGraphPlugin = function () {
  /**
   * Plugin class constructor, called by videojs on
   * ready event.
   *
   * @function  constructor
   * @param    {Player} player
   *           A Video.js player object.
   *
   * @param    {Object} [options={}]
   *           A plain object containing options for the plugin.
   */
  function HighlightsGraphPlugin(player, options) {
    this.player = player;
    this.options = options;
    this.initializeHighlightsGraph();
    this.registeredEvents = {};
    return this;
  }
  HighlightsGraphPlugin.prototype.src = function src(source) {
    this.resetPlugin();
    this.options.src = source;
    this.initializeHighlightsGraph();
  };
  HighlightsGraphPlugin.prototype.detach = function detach() {
    this.resetPlugin();
  };
  HighlightsGraphPlugin.prototype.resetPlugin = function resetPlugin() {
    if (this.graphHolder) {
      this.graphHolder.parentNode.removeChild(this.graphHolder);
    }
    delete this.progressBar;
    delete this.graphHolder;
    delete this.lastStyle;
  };

  /**
   * Bootstrap the plugin.
   */
  HighlightsGraphPlugin.prototype.initializeHighlightsGraph = function initializeHighlightsGraph() {
    var _this2 = this;
    if (!this.options.src) {
      return;
    }
    fetch(this.options.src).then(function (res) {
      return res.json();
    }).then(function (res) {
      _this2.setupHighlightsGraphElement();
      if (_this2.graphHolder) {
        _this2.createHighlightsGraph(res);
      }
    });
  };
  HighlightsGraphPlugin.prototype.setupHighlightsGraphElement = function setupHighlightsGraphElement() {
    var mouseDisplay = this.player.$('.vjs-mouse-display');
    this.progressBar = this.player.$('.vjs-progress-control');
    if (!this.progressBar) {
      return;
    }
    var graphHolder = this.player.$('.vjs-highlights-graph-display') || document.createElement('div');
    graphHolder.setAttribute('class', 'vjs-highlights-graph-display');
    this.progressBar.appendChild(graphHolder);
    this.graphHolder = graphHolder;
    if (mouseDisplay) {
      mouseDisplay.classList.add('vjs-hidden');
    }
  };

  /**
   * Function to create the SVG path element
   */
  HighlightsGraphPlugin.prototype.createPath = function createPath(dataArray, containerWidth, containerHeight) {
    // Calculate the x and y coordinates for each point
    var stepX = containerWidth / (dataArray.length - 1);
    var points = dataArray.map(function (value, index) {
      return {
        x: index * stepX,
        y: containerHeight - value * containerHeight
      };
    });

    // Create a smooth line path
    var path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    path.setAttribute('fill', 'lightblue');

    // Generate the smooth line path data
    var d = "M ".concat(points[0].x, ",").concat(points[0].y);
    for (var i = 0; i < points.length - 1; i++) {
      var xc = (points[i].x + points[i + 1].x) / 2;
      var yc = (points[i].y + points[i + 1].y) / 2;
      d += " Q ".concat(points[i].x, ",").concat(points[i].y, " ").concat(xc, ",").concat(yc);
    }
    d += " Q ".concat(points[points.length - 1].x, ",").concat(points[points.length - 1].y, " ").concat(points[points.length - 1].x, ",").concat(points[points.length - 1].y);

    // Close the path to fill the region under the line
    d += " L ".concat(points[points.length - 1].x, ",").concat(containerHeight, " L ").concat(points[0].x, ",").concat(containerHeight, " Z");
    path.setAttribute('d', d);
    return path;
  };
  HighlightsGraphPlugin.prototype.createHighlightsGraph = function createHighlightsGraph(info) {
    var data = info.data;
    var svgWidth = 600;
    var svgHeight = 20;
    var svg = this.player.$('.vjs-highlights-graph-display > svg') || document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.setAttribute('viewBox', "0 0 ".concat(svgWidth, " ").concat(svgHeight));
    svg.setAttribute('preserveAspectRatio', 'none');
    svg.setAttribute('width', svgWidth);
    svg.setAttribute('height', svgHeight);
    svg.innerHTML = '';
    var path = this.createPath(data, svgWidth, svgHeight);
    svg.appendChild(path);
    this.graphHolder.appendChild(svg);
  };
  return HighlightsGraphPlugin;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (aiHighlightsGraph);

/***/ }),

/***/ "./plugins/analytics/index.js":
/*!************************************!*\
  !*** ./plugins/analytics/index.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var utils_slicing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/slicing */ "./utils/slicing.js");
/* harmony import */ var extended_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! extended-events */ "./extended-events.js");
/* harmony import */ var _utils_consts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/consts */ "./utils/consts.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }




var DEFAULT_EVENTS = [_utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.PLAY, _utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.PAUSE, _utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.ENDED, _utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.VOLUME_CHANGE, _utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.RESIZE, _utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.ERROR, _utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.FULL_SCREEN_CHANGE, _utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.START, _utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.VIDEO_LOAD, _utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.PERCENTS_PLAYED, _utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.SEEK, _utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.PLAYER_LOAD];
var EVENT_DEFAULTS = {
  percentsplayed: {
    percents: [25, 50, 75, 100]
  }
};
var DEFAULT_OPTIONS = {
  events: DEFAULT_EVENTS,
  category: 'Video',
  defaultLabel: function defaultLabel(player) {
    return player.cloudinary && player.cloudinary.currentPublicId() || player.currentSource().src;
  }
};
var AnalyticsPlugin = /*#__PURE__*/function () {
  function AnalyticsPlugin(player) {
    var initOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, AnalyticsPlugin);
    this.player = player;
    this.options = video_js__WEBPACK_IMPORTED_MODULE_0___default().mergeOptions(DEFAULT_OPTIONS, initOptions);
    this.events = (0,extended_events__WEBPACK_IMPORTED_MODULE_2__.normalizeEventsParam)(this.options.events, EVENT_DEFAULTS);
    var extendedEvents = (0,utils_slicing__WEBPACK_IMPORTED_MODULE_1__.sliceProperties)(this.events, _utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.PERCENTS_PLAYED, _utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.TIME_PLAYED, _utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.PAUSE, _utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.SEEK);
    if (extendedEvents.pause) {
      delete extendedEvents.pause;
      extendedEvents.pausenoseek = {};
    }
    this._extendedEvents = new extended_events__WEBPACK_IMPORTED_MODULE_2__["default"](player, {
      events: extendedEvents
    });
    this._currentSource = null;
    this._startTracked = null;
    this._endTracked = null;
    this.resetState();
  }
  _createClass(AnalyticsPlugin, [{
    key: "init",
    value: function init() {
      var _this = this;
      var playerLoad = function playerLoad() {
        _this.track({
          action: 'Player Load',
          label: window.location.href,
          nonInteraction: true
        });
      };
      var play = function play() {
        _this.track({
          action: 'Play'
        });
      };
      var start = function start() {
        if (_this._startTracked) {
          _this.track({
            action: 'Start'
          });
          _this._startTracked = true;
        }
      };
      var pause = function pause() {
        _this.track({
          action: 'Pause'
        });
      };
      var ended = function ended() {
        if (!_this._endTracked) {
          _this.track({
            action: 'Ended',
            nonInteraction: true
          });
          _this._endTracked = true;
        }
      };
      var error = function error() {
        _this.track({
          action: 'Error',
          nonInteraction: true
        });
      };
      var volumechange = function volumechange() {
        var value = _this.player.muted() ? 0 : _this.player.volume();
        _this.track({
          action: 'Volume Change',
          value: value
        });
      };
      var resize = function resize() {
        var action = "Resize - ".concat(_this.player.width(), "x").concat(_this.player.height(), "}");
        _this.track({
          action: action
        });
      };
      var fullscreenchange = function fullscreenchange() {
        var action = _this.player.isFullscreen() ? 'Enter Fullscreen' : 'Exit Fullscreen';
        _this.track({
          action: action
        });
      };
      var percentsPlayed = function percentsPlayed(event, data) {
        var percent = data.percent;
        _this.track({
          action: "".concat(percent, " Percents Played"),
          nonInteraction: true
        });
      };
      var timePlayed = function timePlayed(event, data) {
        var time = data.time;
        _this.track({
          action: "".concat(time, " Seconds Played"),
          value: time,
          nonInteraction: true
        });
      };
      var seek = function seek(event, data) {
        var seekStart = data.seekStart,
          seekEnd = data.seekEnd;
        _this.track({
          action: 'Seek Start',
          value: seekStart
        });
        _this.track({
          action: 'Seek End',
          value: seekEnd
        });
      };
      var shoppableProductHover = function shoppableProductHover(event, data) {
        _this.track({
          action: 'productHover',
          label: data.productName
        });
      };
      var shoppableProductClick = function shoppableProductClick(event, data) {
        _this.track({
          action: 'productClick',
          label: data.productName
        });
      };
      var shoppableBarMax = function shoppableBarMax() {
        _this.track({
          action: 'shoppableBar',
          label: 'opened'
        });
      };
      var shoppableBarMin = function shoppableBarMin() {
        _this.track({
          action: 'shoppableBar',
          label: 'closed'
        });
      };
      var shoppableReplay = function shoppableReplay() {
        _this.track({
          action: 'replay'
        });
      };
      var shoppableProductClickPost = function shoppableProductClickPost(event, data) {
        _this.track({
          action: 'productClickPostPlay',
          label: data.productName
        });
      };
      var shoppableProductHoverPost = function shoppableProductHoverPost(event, data) {
        _this.track({
          action: 'productHoverPostPlay',
          label: data.productName
        });
      };
      if (this.events.shoppable) {
        this.player.on('productHover', shoppableProductHover.bind(this));
        this.player.on('productClick', shoppableProductClick.bind(this));
        this.player.on('productHoverPost', shoppableProductHoverPost.bind(this));
        this.player.on('productClickPost', shoppableProductClickPost.bind(this));
        this.player.on('productBarMin', shoppableBarMin.bind(this));
        this.player.on('productBarMax', shoppableBarMax.bind(this));
        this.player.on('replay', shoppableReplay.bind(this));
      }
      if (this.events.play) {
        this.player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.PLAY, play.bind(this));
      }
      if (this.events.ended) {
        this.player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.ENDED, ended.bind(this));
      }
      if (this.events.volumechange) {
        this.player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.VOLUME_CHANGE, volumechange.bind(this));
      }
      if (this.events.resize) {
        this.player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.RESIZE, resize.bind(this));
      }
      if (this.events.error) {
        this.player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.ERROR, error.bind(this));
      }
      if (this.events.start) {
        this.player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.PLAYING, start.bind(this));
      }
      if (this.events.fullscreenchange) {
        this.player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.FULL_SCREEN_CHANGE, fullscreenchange.bind(this));
      }
      if (this.events.percentsplayed) {
        this._extendedEvents.on(_utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.PERCENTS_PLAYED, percentsPlayed.bind(this));
      }
      if (this.events.timeplayed) {
        this._extendedEvents.on(_utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.TIME_PLAYED, timePlayed.bind(this));
      }
      if (this.events.pause) {
        this._extendedEvents.on(_utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.PAUSE_NO_SEEK, pause.bind(this));
      }
      if (this.events.seek) {
        this._extendedEvents.on(_utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.SEEK, seek.bind(this));
      }
      if (this.events.playerload) {
        playerLoad();
      }
      this.player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_3__.PLAYER_EVENT.LOADED_METADATA, this.loadedmetadata.bind(this));
    }
  }, {
    key: "track",
    value: function track(_ref) {
      var action = _ref.action,
        label = _ref.label,
        _ref$value = _ref.value,
        value = _ref$value === void 0 ? null : _ref$value,
        _ref$nonInteraction = _ref.nonInteraction,
        nonInteraction = _ref$nonInteraction === void 0 ? false : _ref$nonInteraction;
      var eventData = {
        eventCategory: this.options.category,
        eventAction: action,
        eventLabel: label || this.options.defaultLabel(this.player),
        eventValue: value || Math.round(this.player.currentTime()),
        nonInteraction: nonInteraction
      };
      window.ga('send', 'event', eventData);
    }
  }, {
    key: "videoload",
    value: function videoload() {
      this.track({
        action: 'Video Load',
        nonInteraction: true
      });
    }
  }, {
    key: "resetState",
    value: function resetState() {
      this._currentSource = '';
      this._startTracked = false;
      this._endTracked = false;
    }
  }, {
    key: "loadedmetadata",
    value: function loadedmetadata() {
      var src = this.player.currentSource().src;
      if (src !== this._currentSource) {
        this.resetState();
        this._currentSource = src;
        if (this.events.videoload) {
          this.videoload();
        }
      }
    }
  }]);
  return AnalyticsPlugin;
}();
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  new AnalyticsPlugin(this, opts).init();
}

/***/ }),

/***/ "./plugins/autoplay-on-scroll/index.js":
/*!*********************************************!*\
  !*** ./plugins/autoplay-on-scroll/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var utils_positioning__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! utils/positioning */ "./utils/positioning.js");
/* harmony import */ var utils_slicing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/slicing */ "./utils/slicing.js");
/* harmony import */ var utils_assign__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/assign */ "./utils/assign.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var defaults = {
  fraction: 0.5,
  isMuted: true
};
var AutoplayOnScrollPlugin = /*#__PURE__*/_createClass(function AutoplayOnScrollPlugin(player) {
  var _this = this;
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  _classCallCheck(this, AutoplayOnScrollPlugin);
  opts = (0,utils_assign__WEBPACK_IMPORTED_MODULE_2__.assign)({}, defaults, opts);
  this.player = player;
  var _options = (0,utils_slicing__WEBPACK_IMPORTED_MODULE_1__.sliceProperties)(opts, 'fraction');
  var _pausedByScroll = false;
  var _playedByScroll = false;
  var _pauseHandler = null;
  var _playHandler = null;
  this.init = function () {
    registerEventHandlers();
    checkViewportState();
  };
  var clearEventHandlers = function clearEventHandlers() {
    window.removeEventListener('DOMContentLoaded', checkViewportState, false);
    window.removeEventListener('load', checkViewportState, false);
    window.removeEventListener('scroll', checkViewportState, false);
    window.removeEventListener('resize', checkViewportState, false);
    _this.player.off('pause', _pauseHandler);
    _this.player.off('play', _playHandler);
  };
  var pause = function pause() {
    _pausedByScroll = true;
    _playedByScroll = false;
    _this.player.pause();
  };
  var play = function play() {
    _pausedByScroll = false;
    _playedByScroll = true;
    _this.player.play();
  };
  var checkViewportState = function checkViewportState() {
    var visible = (0,utils_positioning__WEBPACK_IMPORTED_MODULE_0__.isElementInViewport)(_this.player.el(), {
      fraction: _options.fraction
    });
    if (visible) {
      if (_this.player.paused()) {
        play();
      }
    } else if (!_this.player.paused() && !_this.player.activePlugins_.floatingPlayer) {
      pause();
    }
  };
  var registerEventHandlers = function registerEventHandlers() {
    // TODO: find a better replacement for 'pause' since it's being triggered
    // by 'buffering' as well.
    _pauseHandler = function _pauseHandler() {
      if (!_this.player.waiting && !_pausedByScroll) {
        clearEventHandlers();
      }
    };
    _playHandler = function _playHandler() {
      if (!_playedByScroll) {
        clearEventHandlers();
      }
    };
    window.addEventListener('DOMContentLoaded', checkViewportState, false);
    window.addEventListener('load', checkViewportState, false);
    window.addEventListener('scroll', checkViewportState, false);
    window.addEventListener('resize', checkViewportState, false);
    _this.player.on('pause', _pauseHandler);
    _this.player.on('play', _playHandler);
  };
});
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  new AutoplayOnScrollPlugin(this, opts).init();
}

/***/ }),

/***/ "./plugins/cloudinary-analytics/index.js":
/*!***********************************************!*\
  !*** ./plugins/cloudinary-analytics/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var cloudinary_video_analytics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cloudinary-video-analytics */ "../node_modules/cloudinary-video-analytics/dist/main.js");
/* harmony import */ var cloudinary_video_analytics__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cloudinary_video_analytics__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_consts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/consts */ "./utils/consts.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var CloudinaryAnalytics = /*#__PURE__*/function () {
  function CloudinaryAnalytics(player) {
    var _this = this;
    _classCallCheck(this, CloudinaryAnalytics);
    _defineProperty(this, "getMetadata", function () {
      return {
        cloudName: _this.player.cloudinary.cloudinaryConfig().cloud_name,
        publicId: _this.player.cloudinary.currentPublicId()
      };
    });
    this.player = player;
    this.cloudinaryAnalytics = cloudinary_video_analytics__WEBPACK_IMPORTED_MODULE_0___default()(this.player.videoElement);
  }
  _createClass(CloudinaryAnalytics, [{
    key: "init",
    value: function init() {
      var _this2 = this;
      this.player.on(_utils_consts__WEBPACK_IMPORTED_MODULE_1__.PLAYER_EVENT.SOURCE_CHANGED, function () {
        var metadata = _this2.getMetadata();
        if (metadata.cloudName && metadata.publicId) {
          _this2.cloudinaryAnalytics.startManuallyNewVideoTracking(metadata);
        }
      });
    }
  }]);
  return CloudinaryAnalytics;
}();
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  new CloudinaryAnalytics(this, opts).init();
}

/***/ }),

/***/ "./plugins/cloudinary/common.js":
/*!**************************************!*\
  !*** ./plugins/cloudinary/common.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ERROR_CODE": () => (/* binding */ ERROR_CODE),
/* harmony export */   "VIDEO_CODEC": () => (/* binding */ VIDEO_CODEC),
/* harmony export */   "cloudinaryErrorsConverter": () => (/* binding */ cloudinaryErrorsConverter),
/* harmony export */   "codecShorthandTrans": () => (/* binding */ codecShorthandTrans),
/* harmony export */   "codecToSrcTransformation": () => (/* binding */ codecToSrcTransformation),
/* harmony export */   "extendCloudinaryConfig": () => (/* binding */ extendCloudinaryConfig),
/* harmony export */   "getCloudinaryUrl": () => (/* binding */ getCloudinaryUrl),
/* harmony export */   "h264avcToString": () => (/* binding */ h264avcToString),
/* harmony export */   "isRawUrl": () => (/* binding */ isRawUrl),
/* harmony export */   "isSrcEqual": () => (/* binding */ isSrcEqual),
/* harmony export */   "mergeTransformations": () => (/* binding */ mergeTransformations),
/* harmony export */   "normalizeOptions": () => (/* binding */ normalizeOptions)
/* harmony export */ });
/* harmony import */ var utils_assign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! utils/assign */ "./utils/assign.js");
/* harmony import */ var utils_slicing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/slicing */ "./utils/slicing.js");
/* harmony import */ var utils_type_inference__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/type-inference */ "./utils/type-inference.js");
/* harmony import */ var _models_video_source_video_source_const__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./models/video-source/video-source.const */ "./plugins/cloudinary/models/video-source/video-source.const.js");
/* harmony import */ var _cloudinary_url_gen_backwards_createCloudinaryLegacyURL__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @cloudinary/url-gen/backwards/createCloudinaryLegacyURL */ "../node_modules/@cloudinary/url-gen/backwards/createCloudinaryLegacyURL.js");
/* harmony import */ var _cloudinary_url_gen_backwards_transformation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @cloudinary/url-gen/backwards/transformation */ "../node_modules/@cloudinary/url-gen/backwards/transformation.js");
/* harmony import */ var _utils_object__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/object */ "./utils/object.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }







var normalizeOptions = function normalizeOptions(publicId, options) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
    _ref$tolerateMissingI = _ref.tolerateMissingId,
    tolerateMissingId = _ref$tolerateMissingI === void 0 ? false : _ref$tolerateMissingI;
  if ((0,utils_type_inference__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(publicId)) {
    var _options = (0,utils_assign__WEBPACK_IMPORTED_MODULE_0__.assign)({}, publicId);
    publicId = (0,utils_slicing__WEBPACK_IMPORTED_MODULE_1__.sliceAndUnsetProperties)(_options, 'publicId').publicId;
    if (!(0,utils_type_inference__WEBPACK_IMPORTED_MODULE_2__.isString)(publicId) && !tolerateMissingId) {
      throw new Error('Source is missing \'publicId\'.');
    }
    if (options) {
      options = (0,utils_assign__WEBPACK_IMPORTED_MODULE_0__.assign)({}, _options, options);
    }
  }
  return {
    publicId: publicId,
    options: options
  };
};
var isRawUrl = function isRawUrl(publicId) {
  return _models_video_source_video_source_const__WEBPACK_IMPORTED_MODULE_3__.URL_PATTERN.test(publicId);
};
var isSrcEqual = function isSrcEqual(source1, source2) {
  var src1 = source1;
  var src2 = source2;
  if (_typeof(source1) === 'object') {
    src1 = source1.src;
  }
  if (_typeof(source2) === 'object') {
    src2 = source2.src;
  }
  if (/^\/\//.test(src1)) {
    src2 = src2.slice(src2.indexOf('//'));
  }
  if (/^\/\//.test(src2)) {
    src1 = src1.slice(src1.indexOf('//'));
  }
  return src1 === src2;
};
var extendCloudinaryConfig = function extendCloudinaryConfig(currentConfig, newConfig) {
  return Object.assign(currentConfig, newConfig);
};
var getCloudinaryUrl = function getCloudinaryUrl(publicId, transformation) {
  return (0,_cloudinary_url_gen_backwards_createCloudinaryLegacyURL__WEBPACK_IMPORTED_MODULE_5__.createCloudinaryLegacyURL)(publicId, (0,_utils_object__WEBPACK_IMPORTED_MODULE_4__.omit)(transformation, ['chainTarget']));
};
var isTransformationInstance = function isTransformationInstance(transformation) {
  return transformation.constructor.name === 'Transformation' && transformation.toOptions;
};
var mergeTransformations = function mergeTransformations(initTransformation1, transformation2) {
  var transformation1 = isTransformationInstance(initTransformation1) ? initTransformation1.toOptions() : initTransformation1;
  return new _cloudinary_url_gen_backwards_transformation__WEBPACK_IMPORTED_MODULE_6__["default"](transformation1).fromOptions(transformation2).toOptions();
};
var ERROR_CODE = {
  NO_SUPPORTED_MEDIA: 6,
  CUSTOM: 10,
  UNKNOWN_CUSTOMER: 11,
  RESOURCE_NOT_FOUND: 12,
  PRIVATE_RESOURCE: 13,
  UNAUTHENTICATED: 14
};
var cloudinaryErrorsConverter = function cloudinaryErrorsConverter(_ref2) {
  var errorMsg = _ref2.errorMsg,
    publicId = _ref2.publicId,
    cloudName = _ref2.cloudName,
    statusCode = _ref2.statusCode;
  var msg = 'Video cannot be played';
  var error = {
    code: ERROR_CODE.CUSTOM,
    message: "".concat(msg).concat(errorMsg ? '- ' + errorMsg : ''),
    statusCode: statusCode
  };
  var err = errorMsg.toLowerCase();
  if (err.startsWith('unknown customer')) {
    error.code = ERROR_CODE.UNKNOWN_CUSTOMER;
    error.message = "".concat(msg, " Unknown cloud-name ").concat(cloudName);
  }
  if (err.startsWith('resource not found')) {
    error.code = ERROR_CODE.RESOURCE_NOT_FOUND;
    error.message = "".concat(msg, " Public ID ").concat(publicId, " not found");
  }
  if (err.startsWith('private resource')) {
    error.code = ERROR_CODE.PRIVATE_RESOURCE;
    error.message = "".concat(msg, " Private video");
  }
  if (err.startsWith('unauthenticated access')) {
    error.message = "".concat(msg, " Requires authentication");
    error.code = ERROR_CODE.UNAUTHENTICATED;
  }
  return error;
};
var codecShorthandTrans = function codecShorthandTrans(_short) {
  var transTable = {
    h265: 'hev1.1.6.L93.B0',
    vp9: 'vp09.00.50.08',
    h264: 'avc1.42E01E'
  };
  return transTable[_short] ? transTable[_short] : _short;
};
var ISOAVC_MAP = {
  'avc1': 'h264',
  'avc2': 'h264',
  'svc1': 'Scalable Video Coding',
  'mvc1': 'Multiview Video Coding',
  'mvc2': 'Multiview Video Coding'
};
var PROFILE = {
  '0': 'No',
  //  0             - *** when profile=RCDO and level=0 - "RCDO"  - RCDO bitstream MUST obey to all the constraints of the Baseline profile
  '42': 'baseline',
  // 66 in-decimal
  '4d': 'main',
  // 77 in-decimal
  '58': 'extended',
  // 88 in-decimal
  '64': 'high',
  // 100 in-decimal
  '6e': 'high 10',
  // 110 in-decimal
  '7a': 'high 4:2:2',
  // 122 in-decimal
  'f4': 'high 4:4:4',
  // 244 in-decimal
  '2c': 'CAVLC 4:4:4',
  // 44 in-decimal

  // profiles for SVC - Scalable Video Coding extension to H.264
  '53': 'Scalable Baseline',
  // 83 in-decimal
  '56': 'Scalable High',
  // 86 in-decimal

  // profiles for MVC - Multiview Video Coding extension to H.264
  '80': 'Stereo High',
  // 128 in-decimal
  '76': 'Multiview High',
  // 118 in-decimal
  '8a': 'Multiview Depth High' // 138 in-decimal
};

function avcotiToStr(s) {
  var REGEX = /([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/i;
  if (REGEX.test(s) === false) {
    throw new Error('error: please provide a 3-bytes hex-sequence for example: 42001e');
  }
  var matches = s.match(REGEX);
  matches.shift(); // kills first one (regex matchs entire string)

  var profile_idc = matches[0];
  profile_idc = PROFILE[profile_idc];
  profile_idc = typeof profile_idc === 'string' ? profile_idc : 'Unknown'; // explicit fix.

  // constraint_set_flags  = matches[1]; //maybe some other time..

  var level_idc = matches[2];
  level_idc = parseInt(level_idc, 16); // will give something like 30  (integer thirty)
  level_idc = String(level_idc).split('').join('.'); // will give something like "3.0"
  return "".concat(profile_idc, ":").concat(level_idc);
}
var h264avcToString = function h264avcToString(s) {
  var REGEX = /(avc1|avc2|svc1|mvc1|mvc2)\.([0-9a-f]{6})/i;
  if (REGEX.test('avc1.42001e') === false) {
    throw new Error('Codec string is not formatted according to H.264/AVC standards for example avc1.42001e (maybe an iOS friendly version...)');
  }
  var matches = s.match(REGEX);
  if (matches !== null) {
    matches.shift(); // first one is the entire-string.

    var vc_codec = ISOAVC_MAP[matches[0]];
    var avc_codec = typeof avc_codec === 'string' ? avc_codec : 'Unknown'; // explicit fix

    return vc_codec + ':' + avcotiToStr(matches[1]);
  }
  return s;
};
var VIDEO_CODEC = {
  VP9: 'vp9',
  HEV1: 'hev1',
  H265: 'h265',
  H264: 'h264'
};
var codecToSrcTransformation = function codecToSrcTransformation(codec) {
  if (!codec) {
    return {};
  }
  switch (codec) {
    case VIDEO_CODEC.VP9:
      return {
        video_codec: VIDEO_CODEC.VP9
      };
    case VIDEO_CODEC.HEV1:
      return {
        video_codec: VIDEO_CODEC.H265
      };
    case VIDEO_CODEC.H264:
      return {
        video_codec: "".concat(VIDEO_CODEC.H264, ":baseline:3.0")
      };
    default:
      return {
        video_codec: h264avcToString(codec)
      };
  }
};


/***/ }),

/***/ "./plugins/cloudinary/event-handler-registry.js":
/*!******************************************************!*\
  !*** ./plugins/cloudinary/event-handler-registry.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var utils_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! utils/find */ "./utils/find.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var EventHandlerRegistry = /*#__PURE__*/function () {
  function EventHandlerRegistry(emitter) {
    _classCallCheck(this, EventHandlerRegistry);
    this._emitter = emitter;
    this._eventHandlers = [];
  }
  _createClass(EventHandlerRegistry, [{
    key: "on",
    value: function on(type, handler) {
      this._eventHandlers.push({
        type: type,
        handler: handler
      });
      this._emitter.on(type, handler);
    }
  }, {
    key: "one",
    value: function one(type, handler) {
      var _this = this;
      var wrapper = function wrapper() {
        handler.apply(void 0, arguments);
        _this.off(type, handler);
      };
      this._eventHandlers.push({
        type: type,
        handler: handler,
        wrapper: wrapper
      });
      this._emitter.one(type, handler);
    }
  }, {
    key: "off",
    value: function off(type, handler) {
      var index = (0,utils_find__WEBPACK_IMPORTED_MODULE_0__.findIndex)(this._eventHandlers, function (event) {
        return event.type === type && event.handler === handler;
      });
      if (index === -1) {
        return;
      }
      var event = this._eventHandlers[index];
      this._emitter.off(type, event.wrapper || event.handler);
      this._eventHandlers.splice(index, 1);
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners() {
      var _this2 = this;
      this._eventHandlers.forEach(function (event) {
        _this2.off(event);
      });
    }
  }]);
  return EventHandlerRegistry;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EventHandlerRegistry);

/***/ }),

/***/ "./plugins/cloudinary/index.js":
/*!*************************************!*\
  !*** ./plugins/cloudinary/index.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CONSTRUCTOR_PARAMS": () => (/* binding */ CONSTRUCTOR_PARAMS),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var utils_mixin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/mixin */ "./utils/mixin.js");
/* harmony import */ var utils_apply_with_props__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/apply-with-props */ "./utils/apply-with-props.js");
/* harmony import */ var utils_slicing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! utils/slicing */ "./utils/slicing.js");
/* harmony import */ var utils_cloudinary__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! utils/cloudinary */ "./utils/cloudinary.js");
/* harmony import */ var utils_assign__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! utils/assign */ "./utils/assign.js");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./common */ "./plugins/cloudinary/common.js");
/* harmony import */ var mixins_playlistable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! mixins/playlistable */ "./mixins/playlistable.js");
/* harmony import */ var _models_video_source_video_source__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./models/video-source/video-source */ "./plugins/cloudinary/models/video-source/video-source.js");
/* harmony import */ var _event_handler_registry__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./event-handler-registry */ "./plugins/cloudinary/event-handler-registry.js");
/* harmony import */ var _models_audio_source_audio_source__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./models/audio-source/audio-source */ "./plugins/cloudinary/models/audio-source/audio-source.js");
/* harmony import */ var _utils_type_inference__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utils/type-inference */ "./utils/type-inference.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }












var DEFAULT_PARAMS = {
  transformation: {},
  sourceTypes: [],
  sourceTransformation: [],
  posterOptions: {}
};
var CONSTRUCTOR_PARAMS = ['cloudinaryConfig', 'transformation', 'sourceTypes', 'sourceTransformation', 'posterOptions', 'autoShowRecommendations'];
var CloudinaryContext = /*#__PURE__*/function (_mixin) {
  _inherits(CloudinaryContext, _mixin);
  var _super = _createSuper(CloudinaryContext);
  function CloudinaryContext(player) {
    var _this;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, CloudinaryContext);
    _this = _super.call(this, player, options);
    _this.player = player;
    options = (0,utils_assign__WEBPACK_IMPORTED_MODULE_5__.assign)({}, DEFAULT_PARAMS, options);
    var _source = null;
    var _sources = null;
    var _lastSource = null;
    var _lastPlaylist = null;
    var _posterOptions = null;
    var _cloudinaryConfig = null;
    var _transformation = null;
    var _sourceTypes = null;
    var _sourceTransformation = null;
    var _chainTarget = options.chainTarget;
    var _playerEvents = null;
    var _recommendations = null;
    var _autoShowRecommendations = false;
    _this.source = function (source) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      options = (0,utils_assign__WEBPACK_IMPORTED_MODULE_5__.assign)({}, options);
      if (!source) {
        return _source;
      }
      var src = null;
      if (source instanceof _models_video_source_video_source__WEBPACK_IMPORTED_MODULE_8__["default"]) {
        src = source;
      } else {
        var _normalizeOptions = (0,_common__WEBPACK_IMPORTED_MODULE_6__.normalizeOptions)(source, options),
          publicId = _normalizeOptions.publicId,
          _options = _normalizeOptions.options;
        src = _this.buildSource(publicId, _options);
      }
      if (src.recommendations()) {
        var recommendations = src.recommendations();
        var itemBuilder = null;
        var disableAutoShow = false;
        if (options.recommendationOptions) {
          var _sliceAndUnsetPropert = (0,utils_slicing__WEBPACK_IMPORTED_MODULE_3__.sliceAndUnsetProperties)(options.recommendationOptions, 'disableAutoShow', 'itemBuilder');
          disableAutoShow = _sliceAndUnsetPropert.disableAutoShow;
          itemBuilder = _sliceAndUnsetPropert.itemBuilder;
        }
        setRecommendations(recommendations, {
          disableAutoShow: disableAutoShow,
          itemBuilder: itemBuilder
        });
      } else {
        unsetRecommendations();
      }
      _source = src;
      if (!options.skipRefresh) {
        refresh();
      }
      _this.player.trigger('cldsourcechanged', {
        source: src
      });
      return _chainTarget;
    };
    _this.buildSource = function (publicId) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var builtSrc = null;
      var _normalizeOptions2 = (0,_common__WEBPACK_IMPORTED_MODULE_6__.normalizeOptions)(publicId, options);
      publicId = _normalizeOptions2.publicId;
      options = _normalizeOptions2.options;
      options.cloudinaryConfig = (0,_common__WEBPACK_IMPORTED_MODULE_6__.extendCloudinaryConfig)(_this.cloudinaryConfig(), options.cloudinaryConfig || {});
      options.transformation = (0,_common__WEBPACK_IMPORTED_MODULE_6__.mergeTransformations)(_this.transformation(), options.transformation || {});
      options.sourceTransformation = options.sourceTransformation || _this.sourceTransformation();
      options.sourceTypes = options.sourceTypes || _this.sourceTypes();
      options.poster = options.poster || posterOptionsForCurrent();
      options.queryParams = Object.assign(options.queryParams || {}, options.usageReport ? {
        _s: "vp-".concat("1.9.15")
      } : {});
      if (options.sourceTypes.indexOf('audio') > -1) {
        builtSrc = new _models_audio_source_audio_source__WEBPACK_IMPORTED_MODULE_10__["default"](publicId, options);
      } else {
        builtSrc = new _models_video_source_video_source__WEBPACK_IMPORTED_MODULE_8__["default"](publicId, options);
      }
      return builtSrc;
    };
    _this.posterOptions = function (options) {
      if (!options) {
        return _posterOptions;
      }
      _posterOptions = options;
      return _chainTarget;
    };
    _this.disablePoster = function (posterColor) {
      // https://docs.videojs.com/player.js.html#line3816
      _this.player.poster(' ');
      _this.player.posterImage.el().style.backgroundColor = posterColor;
    };
    _this.cloudinaryConfig = function (config) {
      if (!config) {
        return _cloudinaryConfig;
      }
      _cloudinaryConfig = config;
      return _chainTarget;
    };
    _this.transformation = function (trans) {
      if (!trans) {
        return _transformation;
      }
      _transformation = trans;
      return _chainTarget;
    };
    _this.sourceTypes = function (types) {
      if (!types) {
        return _sourceTypes;
      }
      _sourceTypes = types;
      return _chainTarget;
    };
    _this.getCurrentSources = function () {
      return _sources;
    };
    _this.sourceTransformation = function (trans) {
      if (!trans) {
        return _sourceTransformation;
      }
      _sourceTransformation = trans;
      return _chainTarget;
    };
    _this.on = function () {
      var _playerEvents2;
      return (_playerEvents2 = _playerEvents).on.apply(_playerEvents2, arguments);
    };
    _this.one = function () {
      var _playerEvents3;
      return (_playerEvents3 = _playerEvents).one.apply(_playerEvents3, arguments);
    };
    _this.off = function () {
      var _playerEvents4;
      return (_playerEvents4 = _playerEvents).off.apply(_playerEvents4, arguments);
    };
    _this.autoShowRecommendations = function (autoShow) {
      if (autoShow === undefined) {
        return _autoShowRecommendations;
      }
      _autoShowRecommendations = autoShow;
      return _chainTarget;
    };
    _this.dispose = function () {
      if (_this.playlist()) {
        _this.disposePlaylist();
      }
      unsetRecommendations();
      _source = undefined;
      _playerEvents.removeAllListeners();
    };
    var setRecommendations = function setRecommendations(recommendations, _ref) {
      var _ref$disableAutoShow = _ref.disableAutoShow,
        disableAutoShow = _ref$disableAutoShow === void 0 ? false : _ref$disableAutoShow,
        _ref$itemBuilder = _ref.itemBuilder,
        itemBuilder = _ref$itemBuilder === void 0 ? null : _ref$itemBuilder;
      unsetRecommendations();
      if (!Array.isArray(recommendations) && typeof recommendations !== 'function' && !recommendations.then) {
        throw new Error('"recommendations" must be either an array or a function');
      }
      _recommendations = {};
      itemBuilder = itemBuilder || function (source) {
        return {
          source: source instanceof _models_video_source_video_source__WEBPACK_IMPORTED_MODULE_8__["default"] ? source : _this.buildSource(source),
          action: function action() {
            return _this.source(source);
          }
        };
      };
      _recommendations.sourceChangedHandler = function () {
        var trigger = function trigger(sources) {
          if (typeof sources !== 'undefined' && sources.length > 0) {
            var items = sources.map(function (_source) {
              return itemBuilder(_source);
            });
            _this.player.trigger('recommendationschanged', {
              items: items
            });
          } else {
            _this.player.trigger('recommendationsnoshow');
          }
          _recommendations.sources = sources;
        };
        if ((0,_utils_type_inference__WEBPACK_IMPORTED_MODULE_11__.isFunction)(recommendations)) {
          trigger(recommendations());
        } else if (recommendations.then) {
          recommendations.then(trigger);
        } else {
          trigger(recommendations);
        }
      };
      _this.one('cldsourcechanged', _recommendations.sourceChangedHandler);
      _recommendations.endedHandler = function () {
        if (!disableAutoShow && _this.autoShowRecommendations()) {
          _this.player.trigger('recommendationsshow');
        }
      };
      _this.on('ended', _recommendations.endedHandler);
    };
    var unsetRecommendations = function unsetRecommendations() {
      if (_recommendations) {
        _this.off('cldsourcechanged', _recommendations.sourceChangedHandler);
        _this.off('ended', _recommendations.endedHandler);
        delete _recommendations.endedHandler;
        delete _recommendations.sourceChangedHandler;
      }
      _recommendations = null;
    };
    var refresh = function refresh() {
      var src = _this.source();
      var _this$player$cloudina = _this.player.cloudinary.posterOptions(),
        posterColor = _this$player$cloudina.posterColor;
      if (posterColor) {
        _this.disablePoster(posterColor);
      } else if (src.poster()) {
        _this.player.poster(src.poster().url());
      }
      _sources = src.generateSources().reduce(function (srcs, src) {
        if (src.isAdaptive) {
          var codec = src.type.split('; ')[1] || null;
          if (codec && 'MediaSource' in window) {
            var parts = src.type.split('; ');
            var typeStr = "video/mp4; ".concat(parts[1] || '');
            var canPlay = testCanPlayTypeAndTypeSupported(typeStr);
            if ((video_js__WEBPACK_IMPORTED_MODULE_0___default().browser.IS_ANY_SAFARI)) {
              // work around safari saying it cant play h265
              src.type = "".concat(parts[0], "; ").concat((0,_common__WEBPACK_IMPORTED_MODULE_6__.codecShorthandTrans)('h264'));
            }
            if (canPlay) {
              srcs.push(src);
            }
          } else {
            srcs.push(src);
          }
        } else {
          srcs.push(src);
        }
        return srcs;
      }, []);
      _this.player.src(_sources);
      _lastSource = src;
      _lastPlaylist = _this.playlist();
    };
    var testCanPlayTypeAndTypeSupported = function testCanPlayTypeAndTypeSupported(codec) {
      var v = document.createElement('video');
      return v.canPlayType(codec) || 'MediaSource' in window && MediaSource.isTypeSupported(codec);
    };
    var posterOptionsForCurrent = function posterOptionsForCurrent() {
      var opts = (0,utils_assign__WEBPACK_IMPORTED_MODULE_5__.assign)({}, _this.posterOptions());
      if (opts.transformation) {
        if ((opts.transformation.width || opts.transformation.height) && !opts.transformation.crop) {
          opts.transformation.crop = 'scale';
        }
      }
      opts.transformation = opts.transformation || {};

      // Set poster dimensions to player actual size.
      // (unless they were explicitly set via `posterOptions`)
      var playerEl = _this.player.el();
      if (playerEl && playerEl.clientWidth && playerEl.clientHeight && !(0,utils_cloudinary__WEBPACK_IMPORTED_MODULE_4__.isKeyInTransformation)(opts.transformation, 'width') && !(0,utils_cloudinary__WEBPACK_IMPORTED_MODULE_4__.isKeyInTransformation)(opts.transformation, 'height')) {
        var roundUp100 = function roundUp100(val) {
          return 100 * Math.ceil(val / 100);
        };
        opts.transformation = (0,_common__WEBPACK_IMPORTED_MODULE_6__.mergeTransformations)(opts.transformation, {
          width: roundUp100(playerEl.clientWidth),
          height: roundUp100(playerEl.clientHeight),
          crop: 'limit'
        });
      }
      return opts;
    };

    // Handle external (non-cloudinary plugin) source changes (e.g. by ad plugins)
    var syncState = function syncState(_, data) {
      var src = data.to;

      // When source is cloudinary's
      if (_lastSource && _lastSource.contains(src)) {
        // If plugin state doesn't have an active VideoSource
        if (!_this.source()) {
          // We might have been running a playlist, reset playlist's state.
          if (_lastPlaylist) {
            _this.playlist(_lastPlaylist);
          }
          // Rebuild last source state without calling vjs's 'src' and 'poster'
          _this.source(_lastSource, {
            skipRefresh: true
          });
        }
      } else {
        // Used by cloudinary-only components
        _this.player.trigger('cldsourcechanged', {});

        // When source isn't cloudinary's - reset the plugin's state.
        _this.dispose();
      }
    };
    _playerEvents = new _event_handler_registry__WEBPACK_IMPORTED_MODULE_9__["default"](_this.player);
    var constructorParams = utils_slicing__WEBPACK_IMPORTED_MODULE_3__.sliceAndUnsetProperties.apply(void 0, [options].concat(CONSTRUCTOR_PARAMS));
    (0,utils_apply_with_props__WEBPACK_IMPORTED_MODULE_2__.applyWithProps)(_assertThisInitialized(_this), constructorParams);
    _this.on('sourcechanged', syncState);
    return _this;
  }
  _createClass(CloudinaryContext, [{
    key: "currentSourceType",
    value: function currentSourceType() {
      return this.source().getType();
    }
  }, {
    key: "currentPublicId",
    value: function currentPublicId() {
      return this.source() && this.source().publicId();
    }
  }, {
    key: "currentPoster",
    value: function currentPoster() {
      return this.source() && this.source().poster();
    }
  }]);
  return CloudinaryContext;
}((0,utils_mixin__WEBPACK_IMPORTED_MODULE_1__.mixin)(mixins_playlistable__WEBPACK_IMPORTED_MODULE_7__["default"]));
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  options.chainTarget = options.chainTarget || this;
  this.cloudinary = new CloudinaryContext(this, options);
}

/***/ }),

/***/ "./plugins/cloudinary/models/audio-source/audio-source.const.js":
/*!**********************************************************************!*\
  !*** ./plugins/cloudinary/models/audio-source/audio-source.const.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AUDIO_SUFFIX_REMOVAL_PATTERN": () => (/* binding */ AUDIO_SUFFIX_REMOVAL_PATTERN),
/* harmony export */   "COMMON_AUDIO_FORMATS": () => (/* binding */ COMMON_AUDIO_FORMATS),
/* harmony export */   "DEFAULT_AUDIO_PARAMS": () => (/* binding */ DEFAULT_AUDIO_PARAMS),
/* harmony export */   "DEFAULT_POSTER_PARAMS": () => (/* binding */ DEFAULT_POSTER_PARAMS)
/* harmony export */ });
var DEFAULT_POSTER_PARAMS = {
  format: 'jpg',
  resource_type: 'video',
  transformation: {
    flags: 'waveform'
  }
};
var COMMON_AUDIO_FORMATS = ['mp3', 'ogg', 'wav', 'mp4'];
var AUDIO_SUFFIX_REMOVAL_PATTERN = RegExp("\\.(".concat(COMMON_AUDIO_FORMATS.join('|'), ")$$"));
var DEFAULT_AUDIO_PARAMS = {
  resource_type: 'video',
  type: 'upload',
  transformation: []
};

/***/ }),

/***/ "./plugins/cloudinary/models/audio-source/audio-source.js":
/*!****************************************************************!*\
  !*** ./plugins/cloudinary/models/audio-source/audio-source.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _video_source_video_source__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../video-source/video-source */ "./plugins/cloudinary/models/video-source/video-source.js");
/* harmony import */ var _image_source__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../image-source */ "./plugins/cloudinary/models/image-source.js");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common */ "./plugins/cloudinary/common.js");
/* harmony import */ var utils_slicing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! utils/slicing */ "./utils/slicing.js");
/* harmony import */ var utils_assign__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! utils/assign */ "./utils/assign.js");
/* harmony import */ var utils_querystring__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! utils/querystring */ "./utils/querystring.js");
/* harmony import */ var _audio_source_const__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./audio-source.const */ "./plugins/cloudinary/models/audio-source/audio-source.const.js");
/* harmony import */ var _utils_consts__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../utils/consts */ "./utils/consts.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }








var AudioSource = /*#__PURE__*/function (_VideoSource) {
  _inherits(AudioSource, _VideoSource);
  var _super = _createSuper(AudioSource);
  function AudioSource(publicId) {
    var _this;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, AudioSource);
    var _normalizeOptions = (0,_common__WEBPACK_IMPORTED_MODULE_2__.normalizeOptions)(publicId, options);
    publicId = _normalizeOptions.publicId;
    options = _normalizeOptions.options;
    publicId = publicId.replace(_audio_source_const__WEBPACK_IMPORTED_MODULE_6__.AUDIO_SUFFIX_REMOVAL_PATTERN, '');
    options = (0,utils_assign__WEBPACK_IMPORTED_MODULE_4__.assign)({}, _audio_source_const__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_AUDIO_PARAMS, options);
    var _sliceAndUnsetPropert = (0,utils_slicing__WEBPACK_IMPORTED_MODULE_3__.sliceAndUnsetProperties)(options, 'poster'),
      poster = _sliceAndUnsetPropert.poster;
    _this = _super.call(this, publicId, options);
    _this._poster = null;
    _this._type = _utils_consts__WEBPACK_IMPORTED_MODULE_7__.SOURCE_TYPE.AUDIO;
    _this.poster(poster);
    return _this;
  }
  _createClass(AudioSource, [{
    key: "getPoster",
    value: function getPoster() {
      return this._poster;
    }
  }, {
    key: "poster",
    value: function poster(publicId) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (!publicId) {
        return this._poster;
      }
      if (publicId instanceof _image_source__WEBPACK_IMPORTED_MODULE_1__["default"]) {
        this._poster = publicId;
        return this;
      }
      var _normalizeOptions2 = (0,_common__WEBPACK_IMPORTED_MODULE_2__.normalizeOptions)(publicId, options, {
        tolerateMissingId: true
      });
      publicId = _normalizeOptions2.publicId;
      options = _normalizeOptions2.options;
      if (!publicId) {
        publicId = this.publicId();
        options = (0,utils_assign__WEBPACK_IMPORTED_MODULE_4__.assign)({}, options, _audio_source_const__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_POSTER_PARAMS);
      }
      options.cloudinaryConfig = options.cloudinaryConfig || this.cloudinaryConfig();
      this._poster = new _image_source__WEBPACK_IMPORTED_MODULE_1__["default"](publicId, options);
      return this;
    }
  }, {
    key: "generateSources",
    value: function generateSources() {
      var _this2 = this;
      return this.sourceTypes().map(function (sourceType) {
        if (sourceType === 'audio') {
          var format = 'mp3';
          var opts = {};
          var srcTransformation = _this2.sourceTransformation()[sourceType] || [_this2.transformation()];
          if (srcTransformation) {
            opts.transformation = srcTransformation;
          }
          (0,utils_assign__WEBPACK_IMPORTED_MODULE_4__.assign)(opts, {
            resource_type: 'video',
            format: format
          });
          var queryString = _this2.queryParams() ? (0,utils_querystring__WEBPACK_IMPORTED_MODULE_5__.objectToQuerystring)(_this2.queryParams()) : '';
          var src = "".concat(_this2.config().url(_this2.publicId(), opts)).concat(queryString);
          var type = 'video/mp4';
          return {
            type: type,
            src: src,
            cldSrc: _this2,
            poster: _this2.getPoster().url()
          };
        } else {
          return null;
        }
      }, this);
    }
  }]);
  return AudioSource;
}(_video_source_video_source__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AudioSource);

/***/ }),

/***/ "./plugins/cloudinary/models/base-source.js":
/*!**************************************************!*\
  !*** ./plugins/cloudinary/models/base-source.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common */ "./plugins/cloudinary/common.js");
/* harmony import */ var utils_slicing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/slicing */ "./utils/slicing.js");
/* harmony import */ var utils_querystring__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/querystring */ "./utils/querystring.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



var BaseSource = /*#__PURE__*/function () {
  function BaseSource(initPublicId) {
    var _this = this;
    var initOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, BaseSource);
    _defineProperty(this, "_transformation", null);
    var _normalizeOptions = (0,_common__WEBPACK_IMPORTED_MODULE_0__.normalizeOptions)(initPublicId, initOptions),
      publicId = _normalizeOptions.publicId,
      options = _normalizeOptions.options;
    var _sliceAndUnsetPropert = (0,utils_slicing__WEBPACK_IMPORTED_MODULE_1__.sliceAndUnsetProperties)(options, 'cloudinaryConfig'),
      cloudinaryConfig = _sliceAndUnsetPropert.cloudinaryConfig;
    var _sliceAndUnsetPropert2 = (0,utils_slicing__WEBPACK_IMPORTED_MODULE_1__.sliceAndUnsetProperties)(options, 'transformation'),
      transformation = _sliceAndUnsetPropert2.transformation;
    var _sliceAndUnsetPropert3 = (0,utils_slicing__WEBPACK_IMPORTED_MODULE_1__.sliceAndUnsetProperties)(options, 'queryParams'),
      queryParams = _sliceAndUnsetPropert3.queryParams;
    if (!cloudinaryConfig) {
      throw new Error('Source is missing "cloudinaryConfig".');
    }
    this.publicId = function () {
      return publicId;
    };
    this.cloudinaryConfig = function () {
      return cloudinaryConfig;
    };
    this.resourceConfig = function () {
      return options;
    };
    this.queryParams = function () {
      return queryParams;
    };
    this.getType = function () {
      return _this._type;
    };
    this.transformation(transformation);
  }
  _createClass(BaseSource, [{
    key: "transformation",
    value: function transformation(_transformation) {
      if (_transformation) {
        this._transformation = _transformation;
      }
      return this._transformation;
    }
  }, {
    key: "config",
    value: function config() {
      var _this2 = this;
      var coreConfig = this.cloudinaryConfig();
      return {
        cloud_name: coreConfig.cloudName,
        url: function url(publicId, initTransformation) {
          if ((0,_common__WEBPACK_IMPORTED_MODULE_0__.isRawUrl)(publicId)) {
            return publicId;
          }
          var transformation = (0,_common__WEBPACK_IMPORTED_MODULE_0__.mergeTransformations)(_this2.resourceConfig(), initTransformation);
          return (0,_common__WEBPACK_IMPORTED_MODULE_0__.getCloudinaryUrl)(publicId, _objectSpread(_objectSpread({}, coreConfig), transformation));
        }
      };
    }
  }, {
    key: "url",
    value: function url() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        transformation = _ref.transformation;
      var url = this.config().url(this.publicId(), {
        transformation: transformation || this.transformation()
      });
      var queryString = this.queryParams() ? (0,utils_querystring__WEBPACK_IMPORTED_MODULE_2__.objectToQuerystring)(this.queryParams()) : '';
      return "".concat(url).concat(queryString);
    }
  }]);
  return BaseSource;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BaseSource);

/***/ }),

/***/ "./plugins/cloudinary/models/image-source.js":
/*!***************************************************!*\
  !*** ./plugins/cloudinary/models/image-source.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _base_source__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base-source */ "./plugins/cloudinary/models/base-source.js");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common */ "./plugins/cloudinary/common.js");
/* harmony import */ var utils_assign__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/assign */ "./utils/assign.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var COMMON_IMAGE_FORMATS = ['jpg', 'png', 'gif', 'webp'];
var IMAGE_SUFFIX_REMOVAL_PATTERN = RegExp("\\.(".concat(COMMON_IMAGE_FORMATS.join('|'), ")$$"));
var DEFAULT_IMAGE_PARAMS = {
  resource_type: 'image',
  type: 'upload',
  transformation: []
};
var ImageSource = /*#__PURE__*/function (_BaseSource) {
  _inherits(ImageSource, _BaseSource);
  var _super = _createSuper(ImageSource);
  function ImageSource(publicId) {
    var _this;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, ImageSource);
    var _normalizeOptions = (0,_common__WEBPACK_IMPORTED_MODULE_1__.normalizeOptions)(publicId, options);
    publicId = _normalizeOptions.publicId;
    options = _normalizeOptions.options;
    publicId = publicId.replace(IMAGE_SUFFIX_REMOVAL_PATTERN, '');
    options = (0,utils_assign__WEBPACK_IMPORTED_MODULE_2__.assign)({}, DEFAULT_IMAGE_PARAMS, options);
    _this = _super.call(this, publicId, options);
    _this._type = 'ImageSource';
    return _this;
  }
  return _createClass(ImageSource);
}(_base_source__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ImageSource);

/***/ }),

/***/ "./plugins/cloudinary/models/video-source/video-source.const.js":
/*!**********************************************************************!*\
  !*** ./plugins/cloudinary/models/video-source/video-source.const.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CONTAINER_MIME_TYPES": () => (/* binding */ CONTAINER_MIME_TYPES),
/* harmony export */   "DEFAULT_POSTER_PARAMS": () => (/* binding */ DEFAULT_POSTER_PARAMS),
/* harmony export */   "DEFAULT_VIDEO_PARAMS": () => (/* binding */ DEFAULT_VIDEO_PARAMS),
/* harmony export */   "FORMAT_MAPPINGS": () => (/* binding */ FORMAT_MAPPINGS),
/* harmony export */   "URL_PATTERN": () => (/* binding */ URL_PATTERN),
/* harmony export */   "VIDEO_SUFFIX_REMOVAL_PATTERN": () => (/* binding */ VIDEO_SUFFIX_REMOVAL_PATTERN)
/* harmony export */ });
var DEFAULT_POSTER_PARAMS = {
  format: 'jpg',
  resource_type: 'video'
};
var DEFAULT_VIDEO_SOURCE_TYPES = ['webm/vp9', 'mp4/h265', 'mp4'];
var DEFAULT_VIDEO_PARAMS = {
  resource_type: 'video',
  type: 'upload',
  transformation: [],
  sourceTransformation: {},
  sourceTypes: DEFAULT_VIDEO_SOURCE_TYPES,
  recommendations: null,
  info: {},
  interactionAreas: {}
};
var VIDEO_SUFFIX_REMOVAL_PATTERN = RegExp("\\.(".concat(DEFAULT_VIDEO_SOURCE_TYPES.join('|'), ")$$"));

// eslint-disable-next-line no-control-regex
var URL_PATTERN = RegExp('https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\+.~#?&/=]*)');
var CONTAINER_MIME_TYPES = {
  dash: ['application/dash+xml'],
  hls: ['application/x-mpegURL'],
  mpd: ['application/dash+xml'],
  m3u8: ['application/x-mpegURL']
};
var FORMAT_MAPPINGS = {
  hls: 'm3u8',
  dash: 'mpd'
};

/***/ }),

/***/ "./plugins/cloudinary/models/video-source/video-source.js":
/*!****************************************************************!*\
  !*** ./plugins/cloudinary/models/video-source/video-source.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _base_source__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base-source */ "./plugins/cloudinary/models/base-source.js");
/* harmony import */ var _image_source__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../image-source */ "./plugins/cloudinary/models/image-source.js");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common */ "./plugins/cloudinary/common.js");
/* harmony import */ var utils_slicing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! utils/slicing */ "./utils/slicing.js");
/* harmony import */ var utils_assign__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! utils/assign */ "./utils/assign.js");
/* harmony import */ var utils_querystring__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! utils/querystring */ "./utils/querystring.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _video_source_const__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./video-source.const */ "./plugins/cloudinary/models/video-source/video-source.const.js");
/* harmony import */ var _video_source_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./video-source.utils */ "./plugins/cloudinary/models/video-source/video-source.utils.js");
/* harmony import */ var _utils_array__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../utils/array */ "./utils/array.js");
/* harmony import */ var _utils_consts__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../utils/consts */ "./utils/consts.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }











var objectId = 0;
var generateId = function generateId() {
  return objectId++;
};
var VideoSource = /*#__PURE__*/function (_BaseSource) {
  _inherits(VideoSource, _BaseSource);
  var _super = _createSuper(VideoSource);
  function VideoSource(_publicId) {
    var _this;
    var initOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, VideoSource);
    var _isRawUrl = (0,_common__WEBPACK_IMPORTED_MODULE_2__.isRawUrl)(_publicId);
    var _normalizeOptions = (0,_common__WEBPACK_IMPORTED_MODULE_2__.normalizeOptions)(_publicId, initOptions),
      publicId = _normalizeOptions.publicId,
      options = _normalizeOptions.options;
    if (!_isRawUrl) {
      publicId = publicId.replace(_video_source_const__WEBPACK_IMPORTED_MODULE_7__.VIDEO_SUFFIX_REMOVAL_PATTERN, '');
    }
    options = (0,utils_assign__WEBPACK_IMPORTED_MODULE_4__.assign)({}, _video_source_const__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_VIDEO_PARAMS, options);
    if (!options.poster) {
      options.poster = (0,utils_assign__WEBPACK_IMPORTED_MODULE_4__.assign)({
        publicId: publicId
      }, _video_source_const__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_POSTER_PARAMS);
    }
    var _sliceAndUnsetPropert = (0,utils_slicing__WEBPACK_IMPORTED_MODULE_3__.sliceAndUnsetProperties)(options, 'poster', 'sourceTypes', 'sourceTransformation', 'info', 'recommendations', 'textTracks', 'withCredentials', 'interactionAreas'),
      poster = _sliceAndUnsetPropert.poster,
      sourceTypes = _sliceAndUnsetPropert.sourceTypes,
      sourceTransformation = _sliceAndUnsetPropert.sourceTransformation,
      info = _sliceAndUnsetPropert.info,
      recommendations = _sliceAndUnsetPropert.recommendations,
      textTracks = _sliceAndUnsetPropert.textTracks,
      withCredentials = _sliceAndUnsetPropert.withCredentials,
      interactionAreas = _sliceAndUnsetPropert.interactionAreas;
    _this = _super.call(this, publicId, options);
    _this._sourceTypes = null;
    _this._recommendations = null;
    _this._textTracks = null;
    _this._poster = null;
    _this._info = null;
    _this._sourceTransformation = null;
    _this._interactionAreas = null;
    _this._type = _utils_consts__WEBPACK_IMPORTED_MODULE_10__.SOURCE_TYPE.VIDEO;
    _this.isRawUrl = _isRawUrl;
    _this._rawTransformation = options.raw_transformation;
    _this.withCredentials = !!withCredentials;
    _this.getInitOptions = function () {
      return initOptions;
    };
    _this.poster(poster);
    _this.sourceTypes(sourceTypes);
    _this.sourceTransformation(sourceTransformation);
    _this.info(info);
    _this.interactionAreas(interactionAreas);
    _this.recommendations(recommendations);
    _this.textTracks(textTracks);
    _this.objectId = generateId();
    return _this;
  }
  _createClass(VideoSource, [{
    key: "textTracks",
    value: function textTracks(_textTracks) {
      if (_textTracks === undefined) {
        return this._textTracks;
      }
      this._textTracks = _textTracks;
      return this;
    }
  }, {
    key: "recommendations",
    value: function recommendations(recommends) {
      if (recommends === undefined) {
        return this._recommendations;
      }
      this._recommendations = recommends;
      return this;
    }
  }, {
    key: "sourceTypes",
    value: function sourceTypes(types) {
      if (!types) {
        return this._sourceTypes;
      }
      this._sourceTypes = types;
      return this;
    }
  }, {
    key: "info",
    value: function info(_info) {
      if (!_info) {
        return this._info;
      }
      this._info = _info;
      return this;
    }
  }, {
    key: "interactionAreas",
    value: function interactionAreas(_interactionAreas) {
      if (!_interactionAreas) {
        return this._interactionAreas;
      }
      this._interactionAreas = _interactionAreas;
      return this;
    }
  }, {
    key: "sourceTransformation",
    value: function sourceTransformation(trans) {
      if (!trans) {
        return this._sourceTransformation;
      }
      this._sourceTransformation = trans;
      return this;
    }
  }, {
    key: "poster",
    value: function poster(publicId) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (!publicId) {
        return this._poster;
      }
      if (publicId instanceof _image_source__WEBPACK_IMPORTED_MODULE_1__["default"]) {
        this._poster = publicId;
        return this;
      }
      var _normalizeOptions2 = (0,_common__WEBPACK_IMPORTED_MODULE_2__.normalizeOptions)(publicId, options, {
        tolerateMissingId: true
      });
      publicId = _normalizeOptions2.publicId;
      options = _normalizeOptions2.options;
      if (!publicId) {
        publicId = this.publicId();
        options = (0,utils_assign__WEBPACK_IMPORTED_MODULE_4__.assign)({}, options, _video_source_const__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_POSTER_PARAMS);
      }
      options.cloudinaryConfig = options.cloudinaryConfig || this.cloudinaryConfig();
      this._poster = new _image_source__WEBPACK_IMPORTED_MODULE_1__["default"](publicId, options);
      return this;
    }
  }, {
    key: "contains",
    value: function contains(source) {
      var sources = this.generateSources();
      return sources.some(function (_source) {
        return (0,_common__WEBPACK_IMPORTED_MODULE_2__.isSrcEqual)(_source, source);
      });
    }
  }, {
    key: "generateSources",
    value: function generateSources() {
      var _this2 = this;
      if (this.isRawUrl) {
        var type = this.sourceTypes().length > 1 ? null : this.sourceTypes()[0];
        return [this.generateRawSource(this.publicId(), type)];
      }
      var srcs = this.sourceTypes().map(function (sourceType) {
        var srcTransformation = _this2.sourceTransformation()[sourceType] || _this2.transformation();
        var format = (0,_video_source_utils__WEBPACK_IMPORTED_MODULE_8__.normalizeFormat)(sourceType);
        var isAdaptive = ['mpd', 'm3u8'].indexOf(format) !== -1;
        var opts = {};
        if (srcTransformation) {
          opts.transformation = (0,_utils_array__WEBPACK_IMPORTED_MODULE_9__.castArray)(srcTransformation);
        }
        (0,utils_assign__WEBPACK_IMPORTED_MODULE_4__.assign)(opts, {
          resource_type: 'video',
          format: format
        });
        var _formatToMimeTypeAndT = (0,_video_source_utils__WEBPACK_IMPORTED_MODULE_8__.formatToMimeTypeAndTransformation)(sourceType),
          _formatToMimeTypeAndT2 = _slicedToArray(_formatToMimeTypeAndT, 2),
          type = _formatToMimeTypeAndT2[0],
          codecTrans = _formatToMimeTypeAndT2[1];

        // If user's transformation include video_codec then don't add another video codec to transformation
        if (codecTrans && !(0,_video_source_utils__WEBPACK_IMPORTED_MODULE_8__.isCodecAlreadyExist)(opts.transformation, _this2._rawTransformation)) {
          opts.transformation = (0,_common__WEBPACK_IMPORTED_MODULE_2__.mergeTransformations)(opts.transformation, codecTrans);
        }
        if (opts.format === 'auto') {
          delete opts.format;
        }
        var queryString = _this2.queryParams() ? (0,utils_querystring__WEBPACK_IMPORTED_MODULE_5__.objectToQuerystring)(_this2.queryParams()) : '';
        var src = _this2.config().url(_this2.publicId(), opts);
        // if src is a url that already contains query params then replace '?' with '&'
        var params = src.indexOf('?') > -1 ? queryString.replace('?', '&') : queryString;
        return {
          type: type,
          src: src + params,
          cldSrc: _this2,
          isAdaptive: isAdaptive,
          withCredentials: _this2.withCredentials
        };
      });
      var isIe = typeof navigator !== 'undefined' && (/MSIE/.test(navigator.userAgent) || /Trident\//.test(navigator.appVersion));
      if (isIe) {
        return srcs.filter(function (s) {
          return s.type !== 'video/mp4; codec="hev1.1.6.L93.B0"';
        });
      } else if ((video_js__WEBPACK_IMPORTED_MODULE_6___default().browser.IS_ANY_SAFARI)) {
        // filter out dash on safari
        return srcs.filter(function (s) {
          return s.type.indexOf('application/dash+xml') === -1;
        });
      } else {
        return srcs;
      }
    }
  }, {
    key: "generateRawSource",
    value: function generateRawSource(url, type) {
      var t = type || url.split('.').pop();
      var isAdaptive = !!_video_source_const__WEBPACK_IMPORTED_MODULE_7__.CONTAINER_MIME_TYPES[t];
      if (isAdaptive) {
        type = _video_source_const__WEBPACK_IMPORTED_MODULE_7__.CONTAINER_MIME_TYPES[t][0];
      } else {
        type = type ? "video/".concat(type) : null;
      }
      return {
        type: type,
        src: url,
        cldSrc: this,
        isAdaptive: isAdaptive,
        withCredentials: this.withCredentials
      };
    }
  }, {
    key: "getInteractionAreas",
    value: function getInteractionAreas() {
      return this._interactionAreas;
    }
  }]);
  return VideoSource;
}(_base_source__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (VideoSource);

/***/ }),

/***/ "./plugins/cloudinary/models/video-source/video-source.utils.js":
/*!**********************************************************************!*\
  !*** ./plugins/cloudinary/models/video-source/video-source.utils.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "formatToMimeTypeAndTransformation": () => (/* binding */ formatToMimeTypeAndTransformation),
/* harmony export */   "isCodecAlreadyExist": () => (/* binding */ isCodecAlreadyExist),
/* harmony export */   "normalizeFormat": () => (/* binding */ normalizeFormat)
/* harmony export */ });
/* harmony import */ var _video_source_const__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./video-source.const */ "./plugins/cloudinary/models/video-source/video-source.const.js");
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common */ "./plugins/cloudinary/common.js");
/* harmony import */ var _utils_type_inference__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../utils/type-inference */ "./utils/type-inference.js");
/* harmony import */ var utils_cloudinary__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! utils/cloudinary */ "./utils/cloudinary.js");
/* harmony import */ var _utils_array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../utils/array */ "./utils/array.js");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }





function formatToMimeTypeAndTransformation(format) {
  var _format$toLowerCase$s = format.toLowerCase().split('\/'),
    _format$toLowerCase$s2 = _slicedToArray(_format$toLowerCase$s, 2),
    container = _format$toLowerCase$s2[0],
    codec = _format$toLowerCase$s2[1];
  var result = _video_source_const__WEBPACK_IMPORTED_MODULE_0__.CONTAINER_MIME_TYPES[container];
  var transformation = null;
  if (!result) {
    result = ["video/".concat(container), transformation];
  }
  if (codec) {
    transformation = (0,_common__WEBPACK_IMPORTED_MODULE_1__.codecToSrcTransformation)(codec);
    result = ["".concat(result[0], "; codecs=\"").concat((0,_common__WEBPACK_IMPORTED_MODULE_1__.codecShorthandTrans)(codec), "\""), transformation];
  }
  return result;
}
function normalizeFormat(format) {
  format = format.toLowerCase().split('\/').shift();
  var res = _video_source_const__WEBPACK_IMPORTED_MODULE_0__.FORMAT_MAPPINGS[format];
  if (!res) {
    res = format.split('\/').shift();
  }
  return res;
}
var isContainCodec = function isContainCodec(value) {
  return value && (0,_utils_array__WEBPACK_IMPORTED_MODULE_4__.some)(Object.values(_common__WEBPACK_IMPORTED_MODULE_1__.VIDEO_CODEC), function (codec) {
    return value.includes(codec);
  });
};
var hasCodecSrcTrans = function hasCodecSrcTrans(transformations) {
  return (0,_utils_array__WEBPACK_IMPORTED_MODULE_4__.some)(['video_codec', 'streaming_profile'], function (key) {
    return (0,utils_cloudinary__WEBPACK_IMPORTED_MODULE_3__.isKeyInTransformation)(transformations, key);
  });
};
var isCodecAlreadyExist = function isCodecAlreadyExist(transformations, rawTransformation) {
  if (!(transformations || rawTransformation)) {
    return false;
  }
  if (hasCodecSrcTrans(transformations)) {
    return true;
  }
  if ((0,_utils_type_inference__WEBPACK_IMPORTED_MODULE_2__.isString)(rawTransformation)) {
    return isContainCodec(rawTransformation);
  }
  return (0,_utils_array__WEBPACK_IMPORTED_MODULE_4__.some)(transformations, function (transformation) {
    return (0,_utils_array__WEBPACK_IMPORTED_MODULE_4__.some)(transformation, function (item) {
      return isContainCodec((0,_utils_type_inference__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(item) ? item.video_codec : item);
    });
  });
};

/***/ }),

/***/ "./plugins/colors/index.js":
/*!*********************************!*\
  !*** ./plugins/colors/index.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "getDefaultPlayerColor": () => (/* binding */ getDefaultPlayerColor)
/* harmony export */ });
/* harmony import */ var utils_assign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! utils/assign */ "./utils/assign.js");
/* harmony import */ var utils_css_prefix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/css-prefix */ "./utils/css-prefix.js");
/* harmony import */ var _video_player_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../video-player.utils */ "./video-player.utils.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var playerColors = "\n  .PLAYER-CLASS-PREFIX {\n    --color-accent: --accent-color;\n    --color-base: --base-color;\n    --color-text: --text-color;\n\n    color: --text-color;\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-time-tooltip,\n  .PLAYER-CLASS-PREFIX .vjs-mouse-display:after,\n  .PLAYER-CLASS-PREFIX .vjs-play-progress:after {\n    color: --base-color;\n    background-color: --text-color;\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-slider {\n    background-color: rgba(--accent-color, 0.3);\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-load-progress,\n  .PLAYER-CLASS-PREFIX .vjs-load-progress div {\n    background: rgba(--accent-color, 0.2);\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-volume-level,\n  .PLAYER-CLASS-PREFIX .vjs-play-progress {\n    background: --accent-color;\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-volume-vertical {\n    background-color: rgba(--base-color, 0.7);\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-volume-panel-horizontal .vjs-control:before {\n    border-color: transparent transparent rgba(--accent-color, 0.4) transparent;\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-volume-panel-horizontal .vjs-volume-level:before {\n    border-color: transparent transparent --accent-color transparent;\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-progress-control:before {\n    color: --base-color;\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-highlights-graph-display {\n    color: rgba(--text-color, 0.3);\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-title-bar {\n    color: --text-color;\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-recommendations-overlay {\n    color: --text-color;\n    background-color: rgba(--base-color, 0.4);\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-recommendations-overlay .vjs-recommendations-overlay-item {\n    box-shadow: 0 0.5em 1.2em 0px --base-color;\n    color: --text-color;\n    border: 1px solid --text-color !important;\n    position: relative;\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-recommendations-overlay .vjs-recommendations-overlay-item:active,\n  .PLAYER-CLASS-PREFIX .vjs-recommendations-overlay .vjs-recommendations-overlay-item:hover {\n    border: 1px solid --accent-color !important;\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-context-menu-ui .vjs-menu-content .vjs-menu-item:active,\n  .PLAYER-CLASS-PREFIX .vjs-context-menu-ui .vjs-menu-content .vjs-menu-item:hover {\n    color: --text-color;\n    background-color: --accent-color;\n  }\n\n  .PLAYER-CLASS-PREFIX.vjs-ad-playing .vjs-progress-control .vjs-play-progress {\n    background: --base-color;\n  }\n\n  .PLAYER-CLASS-PREFIX.cld-plw-layout {\n    background-color: --base-color;\n  }\n\n  .PLAYER-CLASS-PREFIX .cld-plw-item-info-wrap {\n    color: --text-color;\n  }\n\n  .PLAYER-CLASS-PREFIX .cld-plw-panel-item {\n    border-color: --text-color;\n  }\n\n  .PLAYER-CLASS-PREFIX .cld-video-player-floater-close polygon {\n    fill: --base-color;\n  }\n\n  .PLAYER-CLASS-PREFIX .cld-spbl-product-hotspot:after {\n    background: --base-color;\n    box-shadow: 0 0 0 4px --accent-color, 0 0 0 8px rgba(--text-color, 0.24);\n  }\n\n  .PLAYER-CLASS-PREFIX .cld-spbl-product-tooltip {\n    color: --base-color;\n    background: --text-color;\n  }\n\n  .PLAYER-CLASS-PREFIX .base-color-semi-bg {\n    background: rgba(--base-color, 0.7);\n  }\n\n  .PLAYER-CLASS-PREFIX .text-color-semi-bg {\n    background: rgba(--text-color, 0.7);\n  }\n\n  .PLAYER-CLASS-PREFIX .text-color-text {\n    color: --text-color;\n  }\n\n  .PLAYER-CLASS-PREFIX .base-color-text {\n    color: --base-color;\n  }\n\n  .PLAYER-CLASS-PREFIX .accent-color-text {\n    color: --accent-color;\n  }\n";
var darkOnlyColors = "\n\n  .PLAYER-CLASS-PREFIX.cld-video-player-skin-dark .base-color-bg,\n  .PLAYER-CLASS-PREFIX.cld-video-player-skin-dark .vjs-control-bar,\n  .PLAYER-CLASS-PREFIX.cld-video-player-skin-dark .vjs-big-play-button,\n  .PLAYER-CLASS-PREFIX.cld-video-player-skin-dark .vjs-menu-button\n  .vjs-menu-content {\n    background-color: rgba(--base-color, 0.4);\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-title-bar {\n    background-image: linear-gradient(rgba(--base-color, 0.4), rgba(255, 255, 255, 0) 100%);\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-recommendations-overlay .vjs-recommendations-overlay-item.vjs-recommendations-overlay-item-primary .vjs-recommendations-overlay-item-primary-content {\n    background-color: rgba(--base-color, 0.6);\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-recommendations-overlay .vjs-recommendations-overlay-item.vjs-recommendations-overlay-item-secondary div {\n    background: linear-gradient(to top, rgba(0, 0, 0, 0.7), transparent 80%);\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-upcoming-video {\n    border: 1px solid rgba(--text-color, 0.5);\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-upcoming-video .vjs-upcoming-video-bar {\n    background-color: rgba(--base-color, 0.6);\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-context-menu-ui .vjs-menu-content {\n    background-color: rgba(--base-color, 0.6);\n  }\n";
var lightOnlyColors = "\n  .PLAYER-CLASS-PREFIX .vjs-title-bar {\n    flex-direction: row;\n    justify-content: left;\n    height: 3.6em;\n    background: --base-color;\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-title-bar div {\n    width: auto;\n    padding: 0 inherit;\n    margin: 0;\n  }\n\n  .PLAYER-CLASS-PREFIX.cld-video-player-skin-light .base-color-bg,\n  .PLAYER-CLASS-PREFIX.cld-video-player-skin-light .vjs-control-bar,\n  .PLAYER-CLASS-PREFIX.cld-video-player-skin-light .vjs-big-play-button,\n  .PLAYER-CLASS-PREFIX.cld-video-player-skin-light .vjs-menu-button .vjs-menu-content {\n    background-color: --base-color;\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-recommendations-overlay .vjs-recommendations-overlay-item.vjs-recommendations-overlay-item-primary .vjs-recommendations-overlay-item-primary-content {\n    background-color: --base-color;\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-recommendations-overlay .vjs-recommendations-overlay-item.vjs-recommendations-overlay-item-primary:active .vjs-recommendations-overlay-item-primary-content,\n  .PLAYER-CLASS-PREFIX .vjs-recommendations-overlay .vjs-recommendations-overlay-item.vjs-recommendations-overlay-item-primary:hover .vjs-recommendations-overlay-item-primary-content {\n    color: --base-color;\n    background-color: rgba(--accent-color, 0.8);\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-recommendations-overlay .vjs-recommendations-overlay-item.vjs-recommendations-overlay-item-secondary:active div,\n  .PLAYER-CLASS-PREFIX .vjs-recommendations-overlay .vjs-recommendations-overlay-item.vjs-recommendations-overlay-item-secondary:hover div {\n    color: --base-color;\n    background-color: rgba(--accent-color, 0.8);\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-recommendations-overlay .vjs-recommendations-overlay-item.vjs-recommendations-overlay-item-secondary div {\n    background: --base-color;\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-upcoming-video {\n    border: 1px solid --text-color;\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-upcoming-video .vjs-upcoming-video-bar {\n    background-color: --base-color;\n  }\n\n  .PLAYER-CLASS-PREFIX .vjs-context-menu-ui .vjs-menu-content {\n    background-color: --base-color;\n  }\n\n  .PLAYER-CLASS-PREFIX .cld-plw-item-info-wrap {\n    color: --text-color;\n  }\n\n  @media only screen and (max-width: 768px) {\n    .PLAYER-CLASS-PREFIX.cld-plw-vertical .cld-plw-item-info-wrap {\n      color: --accent-color;\n    }\n  }\n";
var defaults = {
  colorsDark: {
    'base': '#000000',
    'accent': '#FF620C',
    'text': '#FFFFFF'
  },
  colorsLight: {
    'base': '#FFFFFF',
    'accent': '#0078FF',
    'text': '#0E2F5A'
  }
};
var getDefaultPlayerColor = function getDefaultPlayerColor(options) {
  return (0,_video_player_utils__WEBPACK_IMPORTED_MODULE_2__.isLight)(options) ? defaults.colorsLight : defaults.colorsDark;
};
var Colors = /*#__PURE__*/_createClass(function Colors(player) {
  var _this = this;
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  _classCallCheck(this, Colors);
  this.player = player;
  var skinDefaults = getDefaultPlayerColor(this.player.options_);
  opts.colors = (0,utils_assign__WEBPACK_IMPORTED_MODULE_0__.assign)({}, skinDefaults, opts.colors);
  this.init = function () {
    injectCSS(parseStyles(playerColors));
    if (_this.player.options_.skin === 'light') {
      injectCSS(parseStyles(lightOnlyColors));
    } else {
      injectCSS(parseStyles(darkOnlyColors));
    }
  };
  var injectCSS = function injectCSS(css) {
    var style = document.createElement('style');
    style.innerHTML = css;
    _this.player.el_.appendChild(style);
  };
  var hexToRgb = function hexToRgb(hex) {
    // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function (m, r, g, b) {
      return r + r + g + g + b + b;
    });

    // '#0080C0' to '0, 128, 192'
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? parseInt(result[1], 16) + ', ' + parseInt(result[2], 16) + ', ' + parseInt(result[3], 16) : null;
  };
  var parseStyles = function parseStyles(styles) {
    var parsed = styles
    // wrapper class
    .replace(/PLAYER\-CLASS\-PREFIX/g, (0,utils_css_prefix__WEBPACK_IMPORTED_MODULE_1__.playerClassPrefix)(_this.player))
    // rgba first
    .replace(/rgba\(\-\-base\-color/g, 'rgba(' + hexToRgb(opts.colors.base)).replace(/rgba\(\-\-accent\-color/g, 'rgba(' + hexToRgb(opts.colors.accent)).replace(/rgba\(\-\-text\-color/g, 'rgba(' + hexToRgb(opts.colors.text))
    // solid colors
    .replace(/\-\-base\-color/g, opts.colors.base).replace(/\-\-accent\-color/g, opts.colors.accent).replace(/\-\-text\-color/g, opts.colors.text);
    return parsed;
  };
});
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  new Colors(this, opts).init();
}

/***/ }),

/***/ "./plugins/context-menu/components/context-menu-item.js":
/*!**************************************************************!*\
  !*** ./plugins/context-menu/components/context-menu-item.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var utils_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/dom */ "./utils/dom.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var MenuItem = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('MenuItem');
var ContextMenuItem = /*#__PURE__*/function (_MenuItem) {
  _inherits(ContextMenuItem, _MenuItem);
  var _super = _createSuper(ContextMenuItem);
  function ContextMenuItem() {
    _classCallCheck(this, ContextMenuItem);
    return _super.apply(this, arguments);
  }
  _createClass(ContextMenuItem, [{
    key: "handleClick",
    value: function handleClick() {
      _get(_getPrototypeOf(ContextMenuItem.prototype), "handleClick", this).call(this);
      this.options_.listener();
    }
  }, {
    key: "createEl",
    value: function createEl() {
      var label = (0,utils_dom__WEBPACK_IMPORTED_MODULE_1__.createElement)('span', {
        "class": 'vjs-menu-item-text' + (this.options_["class"] ? " ".concat(this.options_["class"]) : '')
      });
      label.appendChild(document.createTextNode(this.localize(this.options_.label)));
      var el = (0,utils_dom__WEBPACK_IMPORTED_MODULE_1__.createElement)('li', {
        "class": 'vjs-menu-item',
        tabIndex: -1
      }, label);
      return el;
    }
  }]);
  return ContextMenuItem;
}(MenuItem);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ContextMenuItem);

/***/ }),

/***/ "./plugins/context-menu/components/context-menu.js":
/*!*********************************************************!*\
  !*** ./plugins/context-menu/components/context-menu.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _context_menu_item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./context-menu-item */ "./plugins/context-menu/components/context-menu-item.js");
/* harmony import */ var utils_positioning__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/positioning */ "./utils/positioning.js");
/* harmony import */ var utils_type_inference__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! utils/type-inference */ "./utils/type-inference.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }




var Menu = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('Menu');
var ContextMenu = /*#__PURE__*/function (_Menu) {
  _inherits(ContextMenu, _Menu);
  var _super = _createSuper(ContextMenu);
  function ContextMenu(player, options) {
    var _this;
    _classCallCheck(this, ContextMenu);
    _this = _super.call(this, player, options);

    // Each menu component has its own `dispose` method that can be
    // safely bound and unbound to events while maintaining its context.
    _this.dispose = video_js__WEBPACK_IMPORTED_MODULE_0___default().bind(_assertThisInitialized(_this), _this.dispose);
    options.content.forEach(function (c) {
      var fn = null;
      if ((0,utils_type_inference__WEBPACK_IMPORTED_MODULE_3__.isFunction)(c.listener)) {
        fn = c.listener;
      } else if (typeof c.href === 'string') {
        fn = function fn() {
          return window.open(c.href);
        };
      } else {
        fn = function fn() {
          return true;
        };
      }
      var that = _assertThisInitialized(_this);
      _this.addItem(new _context_menu_item__WEBPACK_IMPORTED_MODULE_1__["default"](player, {
        label: c.label,
        "class": c["class"],
        listener: video_js__WEBPACK_IMPORTED_MODULE_0___default().bind(player, function () {
          fn(this);
          window.setTimeout(function () {
            that.dispose();
          }, 1);
        })
      }));
    });
    return _this;
  }
  _createClass(ContextMenu, [{
    key: "setPosition",
    value: function setPosition(left, top) {
      (0,utils_positioning__WEBPACK_IMPORTED_MODULE_2__.setPosition)(this.el(), left, top);
    }
  }, {
    key: "createEl",
    value: function createEl() {
      var el = _get(_getPrototypeOf(ContextMenu.prototype), "createEl", this).call(this);
      video_js__WEBPACK_IMPORTED_MODULE_0___default().dom.addClass(el, 'vjs-context-menu-ui');
      if (this.options_.position) {
        var _this$options_$positi = this.options_.position,
          left = _this$options_$positi.left,
          top = _this$options_$positi.top;
        this.setPosition(left, top);
      }
      return el;
    }
  }]);
  return ContextMenu;
}(Menu);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ContextMenu);

/***/ }),

/***/ "./plugins/context-menu/contextMenuContent.js":
/*!****************************************************!*\
  !*** ./plugins/context-menu/contextMenuContent.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var contextMenuContent = function contextMenuContent(player) {
  var isLooping = player.loop();
  var isPaused = player.paused();
  var isMuted = player.muted();
  var isFullscreen = player.isFullscreen();
  var aboutMenuItem = {
    "class": 'player-version',
    label: 'Cloudinary Player v' + "1.9.15"
  };
  if (!player.controls()) {
    return [aboutMenuItem];
  }
  return [{
    label: isLooping ? 'Unloop' : 'Loop',
    listener: function listener() {
      player.loop(!isLooping);
    }
  }, {
    label: isPaused ? 'Play' : 'Pause',
    listener: function listener() {
      if (isPaused) {
        player.play();
      } else {
        player.pause();
      }
    }
  }, {
    label: isMuted ? 'Unmute' : 'Mute',
    listener: function listener() {
      player.muted(!isMuted);
    }
  }, {
    label: isFullscreen ? 'Exit Fullscreen' : 'Fullscreen',
    listener: function listener() {
      if (isFullscreen) {
        player.exitFullscreen();
      } else {
        player.requestFullscreen();
      }
    }
  }, aboutMenuItem];
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (contextMenuContent);

/***/ }),

/***/ "./plugins/context-menu/index.js":
/*!***************************************!*\
  !*** ./plugins/context-menu/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _videojs_contextmenu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./videojs-contextmenu */ "./plugins/context-menu/videojs-contextmenu.js");
/* harmony import */ var _context_menu_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./context-menu.scss */ "./plugins/context-menu/context-menu.scss");
/* harmony import */ var _components_context_menu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/context-menu */ "./plugins/context-menu/components/context-menu.js");
/* harmony import */ var utils_positioning__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! utils/positioning */ "./utils/positioning.js");
/* harmony import */ var utils_slicing__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! utils/slicing */ "./utils/slicing.js");
/* harmony import */ var utils_assign__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! utils/assign */ "./utils/assign.js");
/* harmony import */ var utils_type_inference__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! utils/type-inference */ "./utils/type-inference.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }








var defaults = {
  showNativeOnRecurringEvent: false
};
var ContextMenuPlugin = /*#__PURE__*/_createClass(function ContextMenuPlugin(player, initOpts) {
  var _this = this;
  _classCallCheck(this, ContextMenuPlugin);
  if (!Array.isArray(initOpts.content) && !(0,utils_type_inference__WEBPACK_IMPORTED_MODULE_7__.isFunction)(initOpts.content)) {
    throw new Error('"content" required');
  }
  var opts = (0,utils_assign__WEBPACK_IMPORTED_MODULE_6__.assign)({}, defaults, initOpts);
  this.player = player;
  var _options = (0,utils_slicing__WEBPACK_IMPORTED_MODULE_5__.sliceProperties)(opts, 'content', 'showNativeOnRecurringEvent');
  this.init = function () {
    // If we are not already providing "vjs-contextmenu" events, do so.
    _this.player.contextmenu();
    _this.player.on('vjs-contextmenu', onContextMenu);
    _this.player.ready(function () {
      return _this.player.addClass('vjs-context-menu');
    });
  };
  var getMenuPosition = function getMenuPosition(e) {
    // Calc menu size
    var menuEl = _this.menu.el();

    // Must append to element to get bounding rect
    menuEl.style.visibility = 'hidden';
    _this.player.el().appendChild(menuEl);
    var menuSize = menuEl.getBoundingClientRect();
    _this.player.el().removeChild(menuEl);
    menuEl.style.visibility = 'visible';
    var ptrPosition = (0,utils_positioning__WEBPACK_IMPORTED_MODULE_4__.getPointerPosition)(_this.player.el(), e);
    var playerSize = _this.player.el().getBoundingClientRect();
    var ptrTop = playerSize.height - playerSize.height * ptrPosition.y + 1;
    var ptrLeft = Math.round(playerSize.width * ptrPosition.x) + 1;
    var top = ptrTop;
    var left = ptrLeft;

    // Correct top when menu can't fit fully height-wise when pointer is at it's top left corner
    if (ptrTop + menuSize.height > playerSize.height) {
      var difference = ptrTop + menuSize.height - playerSize.height;
      top = difference > menuSize.height / 2 ? ptrTop - menuSize.height - 1 : playerSize.height - menuSize.height;
    }

    // Correct left where menu can't fit fully width-wise when pointer is at it's top left corner
    if (ptrLeft + menuSize.width > playerSize.width) {
      var _difference = ptrLeft + menuSize.width - playerSize.width;
      left = _difference > menuSize.width / 2 ? ptrLeft - menuSize.width - 1 : playerSize.width - menuSize.width;
    }

    // Correct top and left in cases that menu is positioned on the pointer
    if (top < ptrTop && left < ptrLeft) {
      top = ptrTop - menuSize.height - 1;
      left = ptrLeft - menuSize.width - 1;
    }

    // Make sure that we're still in bounds after the corrections.
    top = Math.max(0, top);
    left = Math.max(0, left);
    return {
      left: left,
      top: top
    };
  };
  var onContextMenu = function onContextMenu(e) {
    if (_this.menu) {
      _this.menu.dispose();
      if (_options.showNativeOnRecurringEvent) {
        // If this event happens while the custom menu is open, close it and do
        // nothing else. This will cause native contextmenu events to be intercepted
        // once again; so, the next time a contextmenu event is encountered, we'll
        // open the custom menu.
        return;
      }
    }

    // Stop canceling the native contextmenu event until further notice.
    if (_options.showNativeOnRecurringEvent) {
      _this.player.contextmenu.options.cancel = false;
    }
    e.preventDefault();

    // Allow dynamically setting the menu labels based on player
    var content = _options.content;
    if ((0,utils_type_inference__WEBPACK_IMPORTED_MODULE_7__.isFunction)(content)) {
      content = content(_this.player);
    }
    _this.menu = new _components_context_menu__WEBPACK_IMPORTED_MODULE_3__["default"](_this.player, {
      content: content
    });
    var _getMenuPosition = getMenuPosition(e),
      left = _getMenuPosition.left,
      top = _getMenuPosition.top;
    _this.menu.setPosition(left, top);

    // This is to handle a bug where firefox triggers both 'contextmenu' and 'click'
    // events on rightclick, causing menu to open and then immediately close.
    var clickHandler = function clickHandler(_e) {
      if (!(_e.type === 'click' && (_e.which === 3 || _e.button === 2))) {
        _this.menu.dispose();
      }
    };
    _this.menu.on('dispose', function () {
      // Begin canceling contextmenu events again, so subsequent events will
      // cause the custom menu to be displayed again.
      _this.player.contextmenu.options.cancel = true;
      _this.player.removeChild(_this.menu);
      video_js__WEBPACK_IMPORTED_MODULE_0___default().off(document, ['click', 'tap'], clickHandler);
      delete _this.menu;
    });
    _this.player.addChild(_this.menu);
    video_js__WEBPACK_IMPORTED_MODULE_0___default().on(document, ['click', 'tap'], clickHandler);
  };
});
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  new ContextMenuPlugin(this, opts).init();
}

/***/ }),

/***/ "./plugins/context-menu/videojs-contextmenu.js":
/*!*****************************************************!*\
  !*** ./plugins/context-menu/videojs-contextmenu.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/**
 * @module plugin
 */

var defaults = {
  cancel: true,
  sensitivity: 10,
  wait: 500,
  disabled: false
};
var EVENT_NAME = 'vjs-contextmenu';

/**
 * Abstracts a DOM standard event into a vjs-contextmenu event.
 *
 * @private
 * @param  {Player} player
 * @param  {Event} event
 *         A triggering, native event.
 * @return {Player}
 */
function sendAbstractedEvent(player, event) {
  if (player.contextmenu.options.disabled) {
    // videojs-contextmenu is disabled
    return player;
  }
  var abstracted = {
    target: player,
    type: EVENT_NAME
  };
  ['clientX', 'clientY', 'pageX', 'pageY', 'screenX', 'screenY'].forEach(function (k) {
    abstracted[k] = event[k];
  });
  return player.trigger(abstracted);
}

/**
 * Handles both touchcancel and touchend events.
 *
 * @private
 * @param  {Event} e
 */
function handleTouchEnd(e) {
  var current = this.contextmenu.current;
  if (!current) {
    return;
  }
  var wait = this.contextmenu.options.wait;
  if (e.type === 'touchend' && new Date().getTime() - current.time >= wait) {
    sendAbstractedEvent(this, e);
  }
  this.contextmenu.current = null;
}

/**
 * Handles touchmove events.
 *
 * @private
 * @param  {Event} e
 */
function handleTouchMove(e) {
  var current = this.contextmenu.current;
  if (!current) {
    return;
  }
  var touch = e.touches[0];
  var sensitivity = this.contextmenu.options.sensitivity;

  // Cancel the current touch if the pointer has moved in either direction
  // more than the sensitivity number of pixels.
  if (touch.screenX - current.screenX > sensitivity || touch.screenY - current.screenY > sensitivity) {
    this.contextmenu.current = null;
  }
}

/**
 * Handles touchstart events.
 *
 * @private
 * @param  {Event} e
 */
function handleTouchStart(e) {
  // We only care about the first touch point.
  if (this.contextmenu.current) {
    return;
  }
  var touch = e.touches[0];
  this.contextmenu.current = {
    screenX: touch.screenX,
    screenY: touch.screenY,
    time: new Date().getTime()
  };
}

/**
 * Handles contextmenu events.
 *
 * @private
 * @param  {Event} e
 */
function handleContextMenu(e) {
  if (this.contextmenu.options.cancel && !this.contextmenu.options.disabled) {
    e.preventDefault();
  }
  sendAbstractedEvent(this, e);

  // If we get a "contextmenu" event, we can rely on that going forward
  // because this client supports it; so, we can stop listening for
  // touch events.
  this.off(['touchcancel', 'touchend'], handleTouchEnd);
  this.off('touchmove', handleTouchMove);
  this.off('touchstart', handleTouchStart);
}

/**
 * A cross-device context menu implementation for video.js players.
 *
 * @param    {Object}  [options={}]
 * @param    {Boolean} [cancel=true]
 *           Whether or not to cancel the native "contextmenu" event when
 *           it is seen.
 *
 * @param    {Number} [sensitivity=10]
 *           The maximum number of pixels a finger can move because a touch
 *           is no longer considered to be "held".
 *
 * @param    {Number} [wait=500]
 *           The minimum number of milliseconds a touch must be "held" before
 *           it registers.
 */
function contextmenu(options) {
  var _this = this;
  this.contextmenu.options = video_js__WEBPACK_IMPORTED_MODULE_0___default().mergeOptions(defaults, options);
  this.on('contextmenu', handleContextMenu);
  this.on(['touchcancel', 'touchend'], handleTouchEnd);
  this.on('touchmove', handleTouchMove);
  this.on('touchstart', handleTouchStart);
  this.ready(function () {
    return _this.addClass(EVENT_NAME);
  });
}
video_js__WEBPACK_IMPORTED_MODULE_0___default().registerPlugin('contextmenu', contextmenu);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (contextmenu);

/***/ }),

/***/ "./plugins/floating-player/index.js":
/*!******************************************!*\
  !*** ./plugins/floating-player/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var utils_positioning__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! utils/positioning */ "./utils/positioning.js");
/* harmony import */ var utils_slicing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/slicing */ "./utils/slicing.js");
/* harmony import */ var utils_assign__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/assign */ "./utils/assign.js");
/* harmony import */ var _floating_player_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./floating-player.scss */ "./plugins/floating-player/floating-player.scss");
/* harmony import */ var _video_player_const__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../video-player.const */ "./video-player.const.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }





var defaults = {
  fraction: 0.5,
  collapsedWidth: 300,
  floatTo: 'right'
};
var FloatingPlayer = /*#__PURE__*/_createClass(function FloatingPlayer(player) {
  var _this = this;
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  _classCallCheck(this, FloatingPlayer);
  opts = (0,utils_assign__WEBPACK_IMPORTED_MODULE_2__.assign)({}, defaults, opts);
  // Handle non left-right values.
  if (opts.floatTo && opts.floatTo !== _video_player_const__WEBPACK_IMPORTED_MODULE_4__.FLOATING_TO.LEFT && opts.floatTo !== _video_player_const__WEBPACK_IMPORTED_MODULE_4__.FLOATING_TO.RIGHT) {
    opts.floatTo = defaults.floatTo;
  }
  this.player = player;
  var el = this.player.el();
  var _options = (0,utils_slicing__WEBPACK_IMPORTED_MODULE_1__.sliceProperties)(opts, 'fraction');
  var _floater = null;
  var _isFloated = false;
  var _isFloaterPositioned = false;
  this.init = function () {
    registerEventHandlers();
    if (_typeof(_this.player.ima) === 'object') {
      creatFloaterElement();
    }
  };
  var wrapInner = function wrapInner(parent) {
    var wrapper = document.createElement('div');
    parent.appendChild(wrapper);
    while (parent.firstChild !== wrapper) {
      wrapper.appendChild(parent.firstChild);
    }
    return wrapper;
  };
  var removeWindowEventHandlers = function removeWindowEventHandlers() {
    window.removeEventListener('DOMContentLoaded', checkViewportState, false);
    window.removeEventListener('load', checkViewportState, false);
    window.removeEventListener('scroll', checkViewportState, false);
    window.removeEventListener('resize', checkViewportState, false);
  };
  var addWindowEventHandlers = function addWindowEventHandlers() {
    window.addEventListener('DOMContentLoaded', checkViewportState, false);
    window.addEventListener('load', checkViewportState, false);
    window.addEventListener('scroll', checkViewportState, false);
    window.addEventListener('resize', checkViewportState, false);
  };
  var registerEventHandlers = function registerEventHandlers() {
    _this.player.on('play', checkViewportState);
    _this.player.on('play', addWindowEventHandlers);
    _this.player.on('dispose', removeWindowEventHandlers);
  };
  var positionFloater = function positionFloater() {
    var elRect = el.getBoundingClientRect();
    _floater.setAttribute('class', "cld-video-player-floater cld-video-player-floater-bottom-".concat(opts.floatTo));
    _floater.setAttribute('style', ['width: ' + opts.collapsedWidth + 'px;', 'top: ' + elRect.top + 'px;', 'left: ' + elRect.left + 'px;', 'right: ' + (document.documentElement.clientWidth - elRect.right) + 'px;', 'bottom: ' + (document.documentElement.clientHeight - elRect.bottom) + 'px;'].join(''));
    _isFloaterPositioned = true;
  };
  var creatFloaterElement = function creatFloaterElement() {
    var elRect = el.getBoundingClientRect();
    _floater = wrapInner(el);
    var inner = wrapInner(_floater);
    inner.setAttribute('class', 'cld-video-player-floater-inner');
    inner.setAttribute('style', 'padding-bottom: ' + 100 * elRect.height / elRect.width + '%;');
    var close = document.createElement('button');
    close.setAttribute('class', 'cld-video-player-floater-close');
    close.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 12 12"><polygon fill-rule="evenodd" points="370 7.41 368.59 6 364 10.59 359.41 6 358 7.41 362.59 12 358 16.59 359.41 18 364 13.41 368.59 18 370 16.59 365.41 12" transform="translate(-358 -6)"/></svg>';
    close.onclick = function () {
      unFloat();
      disable();
    };
    _floater.appendChild(close);
  };
  var setAdSize = function setAdSize() {
    var ima = _this.player.ima;
    if (ima && ima.adsActive) {
      var adsManager = ima.getAdsManager();
      adsManager.resize(_isFloated ? _floater.clientWidth : el.clientWidth, _isFloated ? _floater.clientHeight : el.clientHeight);
    }
  };
  var _float = function _float() {
    if (!_floater) {
      creatFloaterElement();
    }
    if (!_isFloaterPositioned) {
      positionFloater();
    }
    _isFloated = true;
    setTimeout(function () {
      _floater.classList.add('cld-video-player-floating');
      setAdSize();
    });
  };
  var unFloat = function unFloat() {
    _floater.classList.remove('cld-video-player-floating');
    _isFloated = false;
    setAdSize();
  };
  var disable = function disable() {
    removeWindowEventHandlers();
    _this.player.off('play', checkViewportState);
    _this.player.off('play', addWindowEventHandlers);
  };
  var checkViewportState = function checkViewportState() {
    var visible = (0,utils_positioning__WEBPACK_IMPORTED_MODULE_0__.isElementInViewport)(_this.player.el(), {
      fraction: _options.fraction
    });
    if (visible) {
      if (_isFloated) {
        unFloat();
      }
    } else if (!_isFloated) {
      _float();
    }
  };
});
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  new FloatingPlayer(this, opts).init();
}

/***/ }),

/***/ "./plugins/index.js":
/*!**************************!*\
  !*** ./plugins/index.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _autoplay_on_scroll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./autoplay-on-scroll */ "./plugins/autoplay-on-scroll/index.js");
/* harmony import */ var _floating_player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./floating-player */ "./plugins/floating-player/index.js");
/* harmony import */ var _colors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./colors */ "./plugins/colors/index.js");
/* harmony import */ var _context_menu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./context-menu */ "./plugins/context-menu/index.js");
/* harmony import */ var _cloudinary__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cloudinary */ "./plugins/cloudinary/index.js");
/* harmony import */ var _analytics__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./analytics */ "./plugins/analytics/index.js");
/* harmony import */ var _cloudinary_analytics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cloudinary-analytics */ "./plugins/cloudinary-analytics/index.js");
/* harmony import */ var _vtt_thumbnails__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./vtt-thumbnails */ "./plugins/vtt-thumbnails/index.js");
/* harmony import */ var _aiHighlightsGraph__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./aiHighlightsGraph */ "./plugins/aiHighlightsGraph/index.js");
// #if (!process.env.WEBPACK_BUILD_LIGHT)
// import dashPlugin from './dash';
// import imaPlugin from './ima';
// import interactive from './interactive-plugin';
// import './videojs-http-source-selector/plugin';
// #endif










var plugins = {
  autoplayOnScroll: _autoplay_on_scroll__WEBPACK_IMPORTED_MODULE_0__["default"],
  floatingPlayer: _floating_player__WEBPACK_IMPORTED_MODULE_1__["default"],
  colors: _colors__WEBPACK_IMPORTED_MODULE_2__["default"],
  contextMenu: _context_menu__WEBPACK_IMPORTED_MODULE_3__["default"],
  cloudinary: _cloudinary__WEBPACK_IMPORTED_MODULE_4__["default"],
  analytics: _analytics__WEBPACK_IMPORTED_MODULE_5__["default"],
  cloudinaryAnalytics: _cloudinary_analytics__WEBPACK_IMPORTED_MODULE_6__["default"],
  vttThumbnails: _vtt_thumbnails__WEBPACK_IMPORTED_MODULE_7__["default"],
  aiHighlightsGraph: _aiHighlightsGraph__WEBPACK_IMPORTED_MODULE_8__["default"]
  // #if (!process.env.WEBPACK_BUILD_LIGHT)
  //   interactive,
  //   dashPlugin,
  //   imaPlugin
  // #endif
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (plugins);

/***/ }),

/***/ "./plugins/vtt-thumbnails/index.js":
/*!*****************************************!*\
  !*** ./plugins/vtt-thumbnails/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _vtt_thumbnails_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vtt-thumbnails.scss */ "./plugins/vtt-thumbnails/vtt-thumbnails.scss");



// Default options for the plugin.
var defaults = {};

// Cache for image elements
var cache = {};

/**
 * Function to invoke when the player is ready.
 *
 * This is a great place for your plugin to initialize itself. When this
 * function is called, the player will have its DOM and child components
 * in place.
 *
 * @function onPlayerReady
 * @param    {Player} player
 *           A Video.js player object.
 *
 * @param    {Object} [options={}]
 *           A plain object containing options for the plugin.
 */
var onPlayerReady = function onPlayerReady(player, options) {
  player.addClass('vjs-vtt-thumbnails');
  player.vttThumbnails = new VttThumbnailsPlugin(player, options);
};

/**
 * A video.js plugin.
 *
 * In the plugin function, the value of `this` is a video.js `Player`
 * instance. You cannot rely on the player being in a "ready" state here,
 * depending on how the plugin is invoked. This may or may not be important
 * to you; if not, remove the wait for "ready"!
 *
 * @function vttThumbnails
 * @param    {Object} [options={}]
 *           An object of options left to the plugin author to define.
 */
var vttThumbnails = function vttThumbnails(options) {
  var _this = this;
  this.ready(function () {
    onPlayerReady(_this, video_js__WEBPACK_IMPORTED_MODULE_0___default().mergeOptions(defaults, options));
  });
};

/**
 * VTT Thumbnails class.
 *
 * This class performs all functions related to displaying the vtt
 * thumbnails.
 */
var VttThumbnailsPlugin = function () {
  /**
   * Plugin class constructor, called by videojs on
   * ready event.
   *
   * @function  constructor
   * @param    {Player} player
   *           A Video.js player object.
   *
   * @param    {Object} [options={}]
   *           A plain object containing options for the plugin.
   */
  function VttThumbnailsPlugin(player, options) {
    this.player = player;
    this.options = options;
    this.listenForDurationChange();
    this.initializeThumbnails();
    this.registeredEvents = {};
    return this;
  }
  VttThumbnailsPlugin.prototype.src = function src(source) {
    this.resetPlugin();
    this.options.src = source;
    this.initializeThumbnails();
  };
  VttThumbnailsPlugin.prototype.detach = function detach() {
    this.resetPlugin();
  };
  VttThumbnailsPlugin.prototype.resetPlugin = function resetPlugin() {
    if (this.thumbnailHolder) {
      this.thumbnailHolder.parentNode.removeChild(this.thumbnailHolder);
    }
    if (this.progressBar) {
      this.progressBar.removeEventListener('mouseenter', this.registeredEvents.progressBarMouseEnter);
      this.progressBar.removeEventListener('mouseleave', this.registeredEvents.progressBarMouseLeave);
      this.progressBar.removeEventListener('mousemove', this.registeredEvents.progressBarMouseMove);
    }
    delete this.registeredEvents.progressBarMouseEnter;
    delete this.registeredEvents.progressBarMouseLeave;
    delete this.registeredEvents.progressBarMouseMove;
    delete this.progressBar;
    delete this.vttData;
    delete this.thumbnailHolder;
    delete this.lastStyle;
  };
  VttThumbnailsPlugin.prototype.listenForDurationChange = function listenForDurationChange() {
    this.player.on('durationchange', function () {
      // ToDo
    });
  };

  /**
   * Bootstrap the plugin.
   */

  VttThumbnailsPlugin.prototype.initializeThumbnails = function initializeThumbnails() {
    var _this2 = this;
    if (!this.options.src) {
      return;
    }
    var baseUrl = this.getBaseUrl();
    var url = this.getFullyQualifiedUrl(this.options.src, baseUrl);
    this.getVttFile(url).then(function (data) {
      _this2.vttData = _this2.processVtt(data);
      _this2.setupThumbnailElement();
    });
  };

  /**
   * Builds a base URL should we require one.
   *
   * @returns {string}
   */

  VttThumbnailsPlugin.prototype.getBaseUrl = function getBaseUrl() {
    return [window.location.protocol, '//', window.location.hostname, window.location.port ? ':' + window.location.port : '', window.location.pathname].join('').split(/([^\/]*)$/gi).shift();
  };

  /**
   * Grabs the contents of the VTT file.
   *
   * @param url
   * @returns {Promise}
   */

  VttThumbnailsPlugin.prototype.getVttFile = function getVttFile(url) {
    var _this3 = this;
    return new Promise(function (resolve) {
      var req = new XMLHttpRequest();
      req.data = {
        resolve: resolve
      };
      req.addEventListener('load', _this3.vttFileLoaded);
      req.open('GET', url);
      req.send();
    });
  };

  /**
   * Callback for loaded VTT file.
   */

  VttThumbnailsPlugin.prototype.vttFileLoaded = function vttFileLoaded() {
    this.data.resolve(this.responseText);
  };
  VttThumbnailsPlugin.prototype.setupThumbnailElement = function setupThumbnailElement() {
    var _this4 = this;
    var mouseDisplay = this.player.$('.vjs-mouse-display');
    this.progressBar = this.player.$('.vjs-progress-control');
    var thumbHolder = this.player.$('.vjs-vtt-thumbnail-display') || document.createElement('div');
    thumbHolder.innerHTML = '';
    thumbHolder.setAttribute('class', 'vjs-vtt-thumbnail-display');
    this.progressBar.appendChild(thumbHolder);
    this.thumbnailHolder = thumbHolder;
    var timeHolder = document.createElement('div');
    timeHolder.setAttribute('class', 'vjs-vtt-time-display');
    this.thumbnailHolder.appendChild(timeHolder);
    this.timeHolder = timeHolder;
    if (mouseDisplay) {
      mouseDisplay.classList.add('vjs-hidden');
    }
    this.registeredEvents.progressBarMouseEnter = function () {
      return _this4.onBarMouseenter();
    };
    this.registeredEvents.progressBarMouseLeave = function () {
      return _this4.onBarMouseleave();
    };
    this.progressBar.addEventListener('mouseenter', this.registeredEvents.progressBarMouseEnter);
    this.progressBar.addEventListener('mouseleave', this.registeredEvents.progressBarMouseLeave);
  };
  VttThumbnailsPlugin.prototype.onBarMouseenter = function onBarMouseenter() {
    var _this5 = this;
    if (this.progressBar.offsetWidth < 400) {
      // Don't show in small players
      return;
    }
    this.mouseMoveCallback = function (e) {
      _this5.onBarMousemove(e);
    };
    this.registeredEvents.progressBarMouseMove = this.mouseMoveCallback;
    this.progressBar.addEventListener('mousemove', this.registeredEvents.progressBarMouseMove);
    this.showThumbnailHolder();
  };
  VttThumbnailsPlugin.prototype.onBarMouseleave = function onBarMouseleave() {
    if (this.registeredEvents.progressBarMouseMove) {
      this.progressBar.removeEventListener('mousemove', this.registeredEvents.progressBarMouseMove);
    }
    this.hideThumbnailHolder();
  };
  VttThumbnailsPlugin.prototype.getXCoord = function getXCoord(bar, mouseX) {
    var rect = bar.getBoundingClientRect();
    var docEl = document.documentElement;
    return mouseX - (rect.left + (window.pageXOffset || docEl.scrollLeft || 0));
  };
  VttThumbnailsPlugin.prototype.onBarMousemove = function onBarMousemove(event) {
    this.updateThumbnailStyle(video_js__WEBPACK_IMPORTED_MODULE_0___default().dom.getPointerPosition(this.progressBar, event).x, this.progressBar.offsetWidth);
  };
  VttThumbnailsPlugin.prototype.getStyleForTime = function getStyleForTime(time) {
    for (var i = 0; i < this.vttData.length; ++i) {
      var item = this.vttData[i];
      if (time >= item.start && time < item.end) {
        // Cache miss
        if (item.css.url && !cache[item.css.url]) {
          var image = new Image();
          image.src = item.css.url;
          cache[item.css.url] = image;
        }
        return item.css;
      }
    }
  };
  VttThumbnailsPlugin.prototype.showThumbnailHolder = function showThumbnailHolder() {
    this.thumbnailHolder.style.opacity = '1';
  };
  VttThumbnailsPlugin.prototype.hideThumbnailHolder = function hideThumbnailHolder() {
    this.thumbnailHolder.style.opacity = '0';
  };
  VttThumbnailsPlugin.prototype.updateThumbnailStyle = function updateThumbnailStyle(percent, width) {
    var duration = this.player.duration();
    var time = percent * duration;
    var currentStyle = this.getStyleForTime(time);
    if (!currentStyle) {
      return this.hideThumbnailHolder();
    }
    var xPos = percent * width;
    var thumbnailWidth = parseInt(currentStyle.width, 10);
    var halfthumbnailWidth = thumbnailWidth / 2;
    var marginRight = width - (xPos + halfthumbnailWidth);
    var marginLeft = xPos - halfthumbnailWidth;
    if (marginLeft > 0 && marginRight > 0) {
      this.thumbnailHolder.style.transform = 'translateX(' + (xPos - halfthumbnailWidth) + 'px)';
    } else if (marginLeft <= 0) {
      this.thumbnailHolder.style.transform = 'translateX(' + 0 + 'px)';
    } else if (marginRight <= 0) {
      this.thumbnailHolder.style.transform = 'translateX(' + (width - thumbnailWidth) + 'px)';
    }
    this.timeHolder.innerHTML = this.getTimestampFromSeconds(time);
    if (this.lastStyle && this.lastStyle === currentStyle) {
      return;
    }
    this.lastStyle = currentStyle;
    for (var style in currentStyle) {
      if (Object.prototype.hasOwnProperty.call(currentStyle, style)) {
        this.thumbnailHolder.style[style] = currentStyle[style];
      }
    }
  };
  VttThumbnailsPlugin.prototype.processVtt = function processVtt(data) {
    var _this6 = this;
    var processedVtts = [];
    var vttDefinitions = data.split(/[\r\n][\r\n]/i);
    vttDefinitions.forEach(function (vttDef) {
      if (vttDef.match(/([0-9]{2}:)?([0-9]{2}:)?[0-9]{2}(.[0-9]{3})?( ?--> ?)([0-9]{2}:)?([0-9]{2}:)?[0-9]{2}(.[0-9]{3})?[\r\n]{1}.*/gi)) {
        var vttDefSplit = vttDef.split(/[\r\n]/i);
        var vttTiming = vttDefSplit[0];
        var vttTimingSplit = vttTiming.split(/ ?--> ?/i);
        var vttTimeStart = vttTimingSplit[0];
        var vttTimeEnd = vttTimingSplit[1];
        var vttImageFullPath = vttDefSplit[1];
        var vttImageDef = vttImageFullPath.split('\/').pop();
        var vttCssDef = _this6.getVttCss(vttImageDef);
        processedVtts.push({
          start: _this6.getSecondsFromTimestamp(vttTimeStart),
          end: _this6.getSecondsFromTimestamp(vttTimeEnd),
          css: vttCssDef
        });
      }
    });
    return processedVtts;
  };
  VttThumbnailsPlugin.prototype.getFullyQualifiedUrl = function getFullyQualifiedUrl(path, base) {
    // ToDo: remove this? also remove trim?
    if (path.indexOf('//') >= 0) {
      // We have a fully qualified path.
      return path;
    } else if (base.indexOf('//') === 0) {
      // We don't have a fully qualified path, but need to
      // be careful with trimming.
      return [base.replace(/\/$/gi, ''), this.trim(path, '/')].join('/');
    } else if (base.indexOf('//') > 0) {
      // We don't have a fully qualified path, and should
      // trim both sides of base and path.
      return [this.trim(base, '/'), this.trim(path, '/')].join('/');
    }

    // If all else fails.
    return path;
  };
  VttThumbnailsPlugin.prototype.getPropsFromDef = function getPropsFromDef(def) {
    var imageDefSplit = def.split(/#xywh=/i);
    var imageUrl = imageDefSplit[0];
    var imageCoords = imageDefSplit[1];
    var splitCoords = imageCoords.match(/[0-9]+/gi);
    return {
      x: splitCoords[0],
      y: splitCoords[1],
      w: splitCoords[2],
      h: splitCoords[3],
      image: imageUrl
    };
  };
  VttThumbnailsPlugin.prototype.getVttCss = function getVttCss(vttImageDef) {
    var cssObj = {};

    // If there isn't a protocol, use the VTT source URL.
    var baseSplit = '';
    if (this.options.src.indexOf('//') >= 0) {
      baseSplit = this.options.src.split(/([^\/]*)$/gi).shift();
    } else {
      baseSplit = this.getBaseUrl() + this.options.src.split(/([^\/]*)$/gi).shift();
    }
    vttImageDef = this.getFullyQualifiedUrl(vttImageDef, baseSplit);
    if (!vttImageDef.match(/#xywh=/i)) {
      cssObj.background = 'url("' + vttImageDef + '")';
      return cssObj;
    }
    var imageProps = this.getPropsFromDef(vttImageDef);
    cssObj.background = 'url("' + imageProps.image + '") no-repeat -' + imageProps.x + 'px -' + imageProps.y + 'px';
    cssObj.width = imageProps.w + 'px';
    cssObj.height = imageProps.h + 'px';
    cssObj.url = imageProps.image;
    return cssObj;
  };
  VttThumbnailsPlugin.prototype.doconstructTimestamp = function doconstructTimestamp(timestamp) {
    var splitStampMilliseconds = timestamp.split('.');
    var timeParts = splitStampMilliseconds[0];
    var timePartsSplit = timeParts.split(':');
    return {
      milliseconds: parseInt(splitStampMilliseconds[1], 10) || 0,
      seconds: parseInt(timePartsSplit.pop(), 10) || 0,
      minutes: parseInt(timePartsSplit.pop(), 10) || 0,
      hours: parseInt(timePartsSplit.pop(), 10) || 0
    };
  };
  VttThumbnailsPlugin.prototype.getSecondsFromTimestamp = function getSecondsFromTimestamp(timestamp) {
    var timestampParts = this.doconstructTimestamp(timestamp);
    return parseInt(timestampParts.hours * (60 * 60) + timestampParts.minutes * 60 + timestampParts.seconds + timestampParts.milliseconds / 1000, 10);
  };
  VttThumbnailsPlugin.prototype.getTimestampFromSeconds = function getTimestampFromSeconds(totalSeconds) {
    var minutes = Math.floor(totalSeconds / 60);
    var seconds = Math.floor(totalSeconds % 60);
    if (seconds < 10) {
      seconds = '0' + seconds;
    }
    return minutes + ':' + seconds;
  };
  VttThumbnailsPlugin.prototype.trim = function trim(str, charlist) {
    var whitespace = [' ', '\n', '\r', '\t', '\f', '\x0b', '\xa0', "\u2000", "\u2001", "\u2002", "\u2003", "\u2004", "\u2005", "\u2006", "\u2007", "\u2008", "\u2009", "\u200A", "\u200B", "\u2028", "\u2029", "\u3000"].join('');
    var l = 0;
    var i = 0;
    str += '';
    if (charlist) {
      whitespace = (charlist + '').replace(/([[\]().?/*{}+$^:])/g, '$1');
    }
    l = str.length;
    for (i = 0; i < l; i++) {
      if (whitespace.indexOf(str.charAt(i)) === -1) {
        str = str.substring(i);
        break;
      }
    }
    l = str.length;
    for (i = l - 1; i >= 0; i--) {
      if (whitespace.indexOf(str.charAt(i)) === -1) {
        str = str.substring(0, i + 1);
        break;
      }
    }
    return whitespace.indexOf(str.charAt(0)) === -1 ? str : '';
  };
  return VttThumbnailsPlugin;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (vttThumbnails);

/***/ }),

/***/ "./utils/api.js":
/*!**********************!*\
  !*** ./utils/api.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "normalizeJsonResponse": () => (/* binding */ normalizeJsonResponse)
/* harmony export */ });
/* harmony import */ var utils_type_inference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! utils/type-inference */ "./utils/type-inference.js");
/* harmony import */ var utils_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/string */ "./utils/string.js");
/* harmony import */ var utils_time__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/time */ "./utils/time.js");



var TIME_FIELDS = ['created_at', 'updated_at'];
var normalizeJsonResponse = function normalizeJsonResponse(obj) {
  var agg = {};
  if ((0,utils_type_inference__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(obj)) {
    Object.keys(obj).reduce(function (agg, key) {
      var newKey = (0,utils_string__WEBPACK_IMPORTED_MODULE_1__.camelize)(key);
      if (TIME_FIELDS.indexOf(key) !== -1) {
        agg[newKey] = new Date((0,utils_time__WEBPACK_IMPORTED_MODULE_2__.parseISO8601)(obj[key]));
      } else {
        agg[newKey] = normalizeJsonResponse(obj[key]);
      }
      return agg;
    }, agg);
    return agg;
  } else if (Array.isArray(obj)) {
    return obj.map(function (item) {
      return normalizeJsonResponse(item);
    });
  } else {
    return obj;
  }
};


/***/ }),

/***/ "./utils/apply-with-props.js":
/*!***********************************!*\
  !*** ./utils/apply-with-props.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "applyWithProps": () => (/* binding */ applyWithProps)
/* harmony export */ });
/* harmony import */ var _assign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assign */ "./utils/assign.js");
/* harmony import */ var _type_inference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./type-inference */ "./utils/type-inference.js");


function applyWithProps(context, obj) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
    _ref$order = _ref.order,
    order = _ref$order === void 0 ? null : _ref$order;
  var _obj = obj;
  var apply = function apply(key) {
    var value = obj[key];
    if (value === undefined) {
      return;
    }
    if (context[key] && (0,_type_inference__WEBPACK_IMPORTED_MODULE_1__.isFunction)(context[key])) {
      context[key](value);
    }
  };
  if (order) {
    _obj = (0,_assign__WEBPACK_IMPORTED_MODULE_0__.assign)({}, obj);
    order.forEach(function (key) {
      apply(key);
      delete _obj[key];
    });
  }
  Object.keys(_obj).forEach(function (key) {
    apply(key);
  });
}


/***/ }),

/***/ "./utils/array.js":
/*!************************!*\
  !*** ./utils/array.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "castArray": () => (/* binding */ castArray),
/* harmony export */   "forEach": () => (/* binding */ forEach),
/* harmony export */   "map": () => (/* binding */ map),
/* harmony export */   "some": () => (/* binding */ some)
/* harmony export */ });
var castArray = function castArray(value) {
  return Array.isArray(value) ? value : [value];
};
var forEach = function forEach(value, callback) {
  if (Array.isArray(value) && value.length) {
    value.forEach(callback);
  }
};
var some = function some(value, callback) {
  if (Array.isArray(value) && value.length) {
    return value.some(callback);
  }
  return false;
};
var map = function map(value, callback) {
  if (Array.isArray(value) && value.length) {
    return value.map(callback);
  }
};

/***/ }),

/***/ "./utils/assign.js":
/*!*************************!*\
  !*** ./utils/assign.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assign": () => (/* binding */ assign)
/* harmony export */ });
/**
 * Object.assign-style object shallow merge/extend.
 *
 * @param  {Object} target
 * @param  {Object} ...sources
 * @return {Object}
 */
function assign(target) {
  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    sources[_key - 1] = arguments[_key];
  }
  if (Object.assign) {
    return Object.assign.apply(Object, [target].concat(sources));
  }
  sources.forEach(function (source) {
    if (!source) {
      return;
    }
    Object.keys(source).forEach(function (key) {
      var value = source[key];
      target[key] = value;
    });
  });
  return target;
}


/***/ }),

/***/ "./utils/attributes-normalizer.js":
/*!****************************************!*\
  !*** ./utils/attributes-normalizer.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "normalizeAttributes": () => (/* binding */ normalizeAttributes)
/* harmony export */ });
/* harmony import */ var _string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./string */ "./utils/string.js");

var CLD_ATTR_REGEX = /^(data-cld-)(\w+)/;
var normalizers = {};
function coerce(string) {
  var val = null;

  // Boolean
  if (string === '') {
    return true;
  }

  // Complex object
  try {
    val = JSON.parse(string);
  } catch (e) {
    // Continue execution in case str is not parsable
  }
  if (val) {
    return val;
  }

  // Number
  val = Number(string);
  if (val) {
    return val;
  }

  // TODO: Parse date?
  //
  return string;
}
var normalizeDefault = function normalizeDefault(value) {
  return coerce(value);
};
var normalizeAttributes = function normalizeAttributes(elem) {
  var obj = {};
  if (elem && elem.attributes && elem.attributes.length > 0) {
    var attrs = elem.attributes;
    for (var i = attrs.length - 1; i >= 0; i--) {
      var attrName = attrs[i].name;
      var attrVal = attrs[i].value;
      if (attrName.match(CLD_ATTR_REGEX)) {
        attrName = (0,_string__WEBPACK_IMPORTED_MODULE_0__.camelize)(attrName.replace(CLD_ATTR_REGEX, '$2'));
      }

      // check for known booleans
      // the matching element property will return a value for typeof
      // if (typeof elem[attrName] === 'boolean' || KNOWN_BOOLEANS[attrName]) {
      if (typeof elem[attrName] === 'boolean') {
        // the value of an included boolean attribute is typically an empty
        // string ('') which would equal false if we just check for a false value.
        // we also don't want support bad code like autoplay='false'
        attrVal = attrVal !== null;
      } else {
        var normalizer = normalizers[attrName] || normalizeDefault;
        attrVal = normalizer(attrVal);
      }
      obj[attrName] = attrVal;
    }
  }
  return obj;
};


/***/ }),

/***/ "./utils/cloudinary.js":
/*!*****************************!*\
  !*** ./utils/cloudinary.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "filterAndAddTextTracks": () => (/* binding */ filterAndAddTextTracks),
/* harmony export */   "handleCldError": () => (/* binding */ handleCldError),
/* harmony export */   "isKeyInTransformation": () => (/* binding */ isKeyInTransformation)
/* harmony export */ });
/* harmony import */ var _plugins_cloudinary_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../plugins/cloudinary/common */ "./plugins/cloudinary/common.js");
/* harmony import */ var utils_find__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/find */ "./utils/find.js");


var GET_ERROR_DEFAULT_REQUEST = {
  method: 'head'
};
var ERROR_WITH_GET_REQUEST = {
  method: 'get',
  credentials: 'include',
  headers: {
    'Content-Range': 'bytes=0-0'
  }
};
var getGoodSrcs = function getGoodSrcs(srcs, parsedUris) {
  return srcs.filter(function (s) {
    var origUrl = parseUri(s.src);
    return parsedUris.indexOf(origUrl.host + origUrl.path) !== -1 && s["try"] !== true;
  });
};
var getParsedUris = function getParsedUris(res) {
  return res.reduce(function (acc, r) {
    if (r.status >= 200 && r.status < 399 && r.url !== '') {
      var parsedUri = parseUri(r.url);
      acc.push(parsedUri.host + parsedUri.path);
    }
    return acc;
  }, []);
};
var setError = function setError(that, res) {
  that.videojs.error((0,_plugins_cloudinary_common__WEBPACK_IMPORTED_MODULE_0__.cloudinaryErrorsConverter)({
    errorMsg: res.headers.get('x-cld-error') || '',
    publicId: that.currentPublicId(),
    cloudName: that.cloudinaryConfig().cloud_name,
    error: res,
    statusCode: res.status
  }));
};
var setVideoSrc = function setVideoSrc(that, srcs) {
  console.log('Trying urls: ' + JSON.stringify(srcs));
  srcs.forEach(function (s) {
    s["try"] = true;
  });
  that.videojs.autoplay(that.videojs.autoplay() || that.playWasCalled);
  that.videojs.src(srcs);
};
var handleCldError = function handleCldError(that, options) {
  var opts = options.fetchErrorUsingGet ? ERROR_WITH_GET_REQUEST : GET_ERROR_DEFAULT_REQUEST;
  var srcs = that.videojs.cloudinary.getCurrentSources();
  if (srcs.length > 0) {
    Promise.all(srcs.map(function (s) {
      return fetch(s.src, opts);
    })).then(function (res) {
      var parsedUris = getParsedUris(res);
      var firstRes = res[0];
      if (!parsedUris.length) {
        setError(that, firstRes);
      } else {
        var goodSrcs = getGoodSrcs(srcs, parsedUris);
        if (goodSrcs && goodSrcs.length) {
          setVideoSrc(that, goodSrcs);
        } else {
          console.log('No urls left to try so stopping');
          that.videojs.error({
            code: _plugins_cloudinary_common__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODE.NO_SUPPORTED_MEDIA,
            message: 'No supported media sources',
            statusCode: res.status
          });
        }
      }
    })["catch"](function (error) {
      that.videojs.error({
        code: 7,
        message: error && error.message ? error.message : 'Failed to test sources'
      });
    });
  } else {
    that.videojs.error({
      code: _plugins_cloudinary_common__WEBPACK_IMPORTED_MODULE_0__.ERROR_CODE.NO_SUPPORTED_MEDIA,
      message: 'No supported media sources'
    });
  }
};

// for IE 11
function parseUri(str) {
  var o = {
    strictMode: false,
    key: ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'],
    q: {
      name: 'queryKey',
      parser: /(?:^|&)([^&=]*)=?([^&]*)/g
    },
    parser: {
      strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
      loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
    }
  };
  var m = o.parser[o.strictMode ? 'strict' : 'loose'].exec(str);
  var uri = {};
  var i = 14;
  while (i--) {
    uri[o.key[i]] = m[i] || '';
  }
  uri[o.q.name] = {};
  uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {
    if ($1) {
      uri[o.q.name][$1] = $2;
    }
  });
  return uri;
}

/**
 * Check if key exist in transformation
 * @param transformation
 * @param key
 * @returns true if key exists in transformation, false otherwise
 */
var isKeyInTransformation = function isKeyInTransformation(transformation, key) {
  if (!transformation || !key) {
    return false;
  }

  // transformation is an array so run this function for each item
  if (Array.isArray(transformation)) {
    return !!(0,utils_find__WEBPACK_IMPORTED_MODULE_1__.find)(transformation, function (t) {
      return isKeyInTransformation(t, key);
    });
  }

  // transformation is a Transformation object so use getValue() to check key
  if (transformation.getValue) {
    return !!transformation.getValue(key);
  }

  // transformation is an Object so just check for key existence in object
  return !!transformation[key];
};
var filterAndAddTextTracks = function filterAndAddTextTracks(tracks, videojs) {
  tracks.forEach(function (track) {
    fetch(track.src, GET_ERROR_DEFAULT_REQUEST).then(function (r) {
      if (r.status >= 200 && r.status <= 399) {
        videojs.addRemoteTextTrack(track, true);
      }
    });
  });
};


/***/ }),

/***/ "./utils/consts.js":
/*!*************************!*\
  !*** ./utils/consts.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PLAYER_EVENT": () => (/* binding */ PLAYER_EVENT),
/* harmony export */   "SOURCE_TYPE": () => (/* binding */ SOURCE_TYPE)
/* harmony export */ });
var PLAYER_EVENT = {
  PLAY: 'play',
  PLAYING: 'playing',
  PAUSE: 'pause',
  SEEK: 'seek',
  SEEKING: 'seeking',
  MUTE: 'mute',
  UNMUTE: 'unmute',
  PAUSE_NO_SEEK: 'pausenoseek',
  ERROR: 'error',
  TIME_UPDATE: 'timeupdate',
  RETRY_PLAYLIST: 'retryplaylist',
  CAN_PLAY_THROUGH: 'canplaythrough',
  CLD_SOURCE_CHANGED: 'cldsourcechanged',
  SOURCE_CHANGED: 'sourcechanged',
  LOADED_METADATA: 'loadedmetadata',
  LOADED_DATA: 'loadeddata',
  REFRESH_TEXT_TRACKS: 'refreshTextTracks',
  PLAYLIST_CREATED: 'playlistcreated',
  UP_COMING_VIDEO_SHOW: 'upcomingvideoshow',
  UP_COMING_VIDEO_HIDE: 'upcomingvideohide',
  PLAYLIST_ITEM_CHANGED: 'playlistitemchanged',
  VOLUME_CHANGE: 'volumechange',
  FLUID: 'fluid',
  PLAYLIST_PANEL: 'PlaylistPanel',
  ENDED: 'ended',
  RESIZE: 'resize',
  START: 'start',
  VIDEO_LOAD: 'videoload',
  PRODUCT_BAR_MIN: 'productBarMin',
  SHOW_PRODUCTS_OVERLAY: 'showProductsOverlay',
  SHOPPABLE_ITEM_CHANGED: 'shoppableitemchanged',
  FULL_SCREEN_CHANGE: 'fullscreenchange',
  PERCENTS_PLAYED: 'percentsplayed',
  TIME_PLAYED: 'timeplayed',
  PLAYER_LOAD: 'playerload',
  DISPOSE: 'dispose',
  QUALITY_CHANGED: 'qualitychanged'
};
var SOURCE_TYPE = {
  AUDIO: 'AudioSource',
  VIDEO: 'VideoSource'
};

/***/ }),

/***/ "./utils/css-prefix.js":
/*!*****************************!*\
  !*** ./utils/css-prefix.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CLASS_PREFIX": () => (/* binding */ CLASS_PREFIX),
/* harmony export */   "playerClassPrefix": () => (/* binding */ playerClassPrefix),
/* harmony export */   "setSkinClassPrefix": () => (/* binding */ setSkinClassPrefix),
/* harmony export */   "skinClass": () => (/* binding */ skinClass),
/* harmony export */   "skinClassPrefix": () => (/* binding */ skinClassPrefix)
/* harmony export */ });
/* harmony import */ var _string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./string */ "./utils/string.js");
/* harmony import */ var _config_defaults__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/defaults */ "./config/defaults.js");
/* harmony import */ var _find__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./find */ "./utils/find.js");



var CLASS_PREFIX = 'cld-video-player';
var SKIN_CLASS_PREFIX = "".concat(CLASS_PREFIX, "-skin-");
var playerClassPrefix = function playerClassPrefix(componentInstance) {
  return "".concat(CLASS_PREFIX, "-").concat(componentInstance.id_);
};
var skinClass = function skinClass(skin) {
  return "".concat(SKIN_CLASS_PREFIX).concat(skin);
};
var skinClassPrefix = function skinClassPrefix(componentInstance) {
  return (0,_find__WEBPACK_IMPORTED_MODULE_2__.find)(componentInstance.el().classList, function (cls) {
    return (0,_string__WEBPACK_IMPORTED_MODULE_0__.startsWith)(cls, SKIN_CLASS_PREFIX);
  });
};
var setSkinClassPrefix = function setSkinClassPrefix(componentInstance, name) {
  var currentSkinPrefix = skinClassPrefix(componentInstance);
  var skinName = name ? name.replace(SKIN_CLASS_PREFIX, '') : false;
  var newSkinPrefix = '';
  if (skinName) {
    // From html class
    newSkinPrefix = skinClass(skinName);
  } else if (componentInstance.options_.skin) {
    // From JS config
    newSkinPrefix = skinClass(componentInstance.options_.skin);
  } else {
    // Defult
    newSkinPrefix = skinClass(_config_defaults__WEBPACK_IMPORTED_MODULE_1__["default"].skin);
  }
  if (newSkinPrefix !== currentSkinPrefix) {
    if (currentSkinPrefix) {
      componentInstance.removeClass(currentSkinPrefix);
    }
    componentInstance.addClass(newSkinPrefix);
  }
  if (skinName && componentInstance.options_.skin !== skinName) {
    componentInstance.options_.skin = skinName;
  }
};


/***/ }),

/***/ "./utils/dom.js":
/*!**********************!*\
  !*** ./utils/dom.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addEventListener": () => (/* binding */ addEventListener),
/* harmony export */   "createElement": () => (/* binding */ createElement),
/* harmony export */   "elementsCreator": () => (/* binding */ elementsCreator),
/* harmony export */   "styleElement": () => (/* binding */ styleElement),
/* harmony export */   "wrap": () => (/* binding */ wrap)
/* harmony export */ });
/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./array */ "./utils/array.js");
/* harmony import */ var _type_inference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./type-inference */ "./utils/type-inference.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }


var wrap = function wrap(el, wrapper) {
  el.parentNode.insertBefore(wrapper, el);
  wrapper.appendChild(el);
  return wrapper;
};
var createElement = function createElement(elementName) {
  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var children = arguments.length > 2 ? arguments[2] : undefined;
  var element = document.createElement(elementName);
  for (var key in attributes) {
    if (Object.prototype.hasOwnProperty.call(attributes, key)) {
      element.setAttribute(key, attributes[key]);
    }
  }
  (0,_array__WEBPACK_IMPORTED_MODULE_0__.castArray)(children).forEach(function (child) {
    return appendChild(child, element);
  });
  return element;
};
var appendChild = function appendChild(child, element) {
  if ((0,_type_inference__WEBPACK_IMPORTED_MODULE_1__.isElement)(child)) {
    element.appendChild(child);
  } else if (child && _typeof(child) !== 'object') {
    var text = document.createTextNode(child);
    element.appendChild(text);
  }
};
var styleElement = function styleElement(element, style) {
  for (var key in style) {
    if (Object.prototype.hasOwnProperty.call(style, key)) {
      element.style[key] = style[key];
    }
  }
  return element;
};
var elementsCreator = function elementsCreator(item) {
  var children = Array.isArray(item.children) ? item.children.map(elementsCreator) : item.children;
  var element = (0,_type_inference__WEBPACK_IMPORTED_MODULE_1__.isElement)(item) ? item : createElement(item.tag, item.attr, children);
  if (item.onClick) {
    item.event = {
      name: 'click',
      callback: item.onClick
    };
  }
  if (item.event) {
    element.addEventListener(item.event.name, item.event.callback, false);
  }
  if (item.style) {
    styleElement(element, item.style);
  }
  return element;
};
var addEventListener = function addEventListener(element, name, cb) {
  element.addEventListener(name, cb, false);
  return function () {
    element.removeEventListener(name, cb, false);
  };
};


/***/ }),

/***/ "./utils/find.js":
/*!***********************!*\
  !*** ./utils/find.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "find": () => (/* binding */ find),
/* harmony export */   "findElementAndIndex": () => (/* binding */ findElementAndIndex),
/* harmony export */   "findIndex": () => (/* binding */ findIndex)
/* harmony export */ });
function find(list, callback) {
  if (Array.prototype.find && Array.isArray(list)) {
    return list.find(callback);
  }
  return findElementAndIndex(list, callback)[0];
}
function findIndex(list, callback) {
  if (Array.prototype.findIndex) {
    return list.findIndex(callback);
  }
  return findElementAndIndex(list, callback)[1];
}
function findElementAndIndex(list, callback) {
  for (var i = 0; i < list.length; i++) {
    var element = list[i];
    if (callback(element, i, list)) {
      return [element, i];
    }
  }
  return [undefined, -1];
}


/***/ }),

/***/ "./utils/fontFace.js":
/*!***************************!*\
  !*** ./utils/fontFace.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fontFace": () => (/* binding */ fontFace)
/* harmony export */ });
/* harmony import */ var webfontloader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webfontloader */ "../node_modules/webfontloader/webfontloader.js");
/* harmony import */ var webfontloader__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webfontloader__WEBPACK_IMPORTED_MODULE_0__);

var FONT_FAMILY = 'Fira Sans';
var fontFace = function fontFace(elem, options) {
  var fontFace = options.cloudinary.fontFace;

  // Default font-face is "Fira sans"
  if (typeof fontFace === 'undefined') {
    fontFace = FONT_FAMILY;
  }
  if (fontFace && fontFace !== 'inherit') {
    webfontloader__WEBPACK_IMPORTED_MODULE_0___default().load({
      google: {
        families: [fontFace]
      }
    });
    elem.style.fontFamily = fontFace;
  } else if (fontFace === 'inherit') {
    elem.style.fontFamily = 'inherit';
  }
};


/***/ }),

/***/ "./utils/get-analytics-player-options.js":
/*!***********************************************!*\
  !*** ./utils/get-analytics-player-options.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAnalyticsFromPlayerOptions": () => (/* binding */ getAnalyticsFromPlayerOptions)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var getCloudinaryOptions = function getCloudinaryOptions() {
  var cloudinaryOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return {
    sourceTypes: cloudinaryOptions.sourceTypes || null,
    autoShowRecommendations: cloudinaryOptions.autoShowRecommendations || null,
    fontFace: cloudinaryOptions.fontFace || null,
    posterOptionsPublicId: !!(cloudinaryOptions.posterOptions && cloudinaryOptions.posterOptions.publicId)
  };
};
var getSourceOptions = function getSourceOptions() {
  var sourceOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _objectSpread({
    shoppable: !!sourceOptions.shoppable,
    shoppableProductsLength: sourceOptions.shoppable && Array.isArray(sourceOptions.shoppable.products) ? sourceOptions.shoppable.products.length : 0
  }, sourceOptions.info ? {
    sourceInfoTitle: sourceOptions.info.title || null,
    sourceInfoSubtitle: sourceOptions.info.subtitle || null,
    sourceInfoDescription: sourceOptions.info.description || null
  } : {});
};
var getAdsOptions = function getAdsOptions() {
  var adsOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return {
    adsAdTagUrl: adsOptions.adTagUrl || null,
    adsShowCountdown: adsOptions.showCountdown || null,
    adsAdLabel: adsOptions.adLabel || null,
    adsLocale: adsOptions.locale || null,
    adsPrerollTimeout: adsOptions.prerollTimeout || null,
    adsPostrollTimeout: adsOptions.postrollTimeout || null,
    adsAdsInPlaylist: adsOptions.adsInPlaylist || null
  };
};
var getPlaylistWidgetOptions = function getPlaylistWidgetOptions() {
  var playlistWidgetOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return {
    playlistWidgetDirection: playlistWidgetOptions.direction || null,
    playlistWidgetTotal: playlistWidgetOptions.total || null
  };
};
var getAnalyticsFromPlayerOptions = function getAnalyticsFromPlayerOptions(playerOptions) {
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({
    showJumpControls: playerOptions.showJumpControls || null,
    seekThumbnails: playerOptions.seekThumbnails || null,
    aiHighlightsGraph: playerOptions.aiHighlightsGraph || null,
    floatingWhenNotVisible: playerOptions.floatingWhenNotVisible || null,
    hideContextMenu: playerOptions.hideContextMenu || null,
    analytics: playerOptions.analytics || null,
    cloudinaryAnalytics: playerOptions.cloudinaryAnalytics || null,
    playedEventPercents: playerOptions.playedEventPercents || null
  }, getCloudinaryOptions(playerOptions.cloudinary)), getSourceOptions(playerOptions.source)), getAdsOptions(playerOptions.ads)), getPlaylistWidgetOptions(playerOptions.playlistWidget));
};

/***/ }),

/***/ "./utils/groupBy.js":
/*!**************************!*\
  !*** ./utils/groupBy.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "groupBy": () => (/* binding */ groupBy)
/* harmony export */ });
var groupBy = function groupBy(collection, iteratee) {
  return collection.reduce(function (result, value, key) {
    key = iteratee(value);
    if (Object.prototype.hasOwnProperty.call(result, key)) {
      result[key].push(value);
    } else {
      result[key] = [value];
    }
    return result;
  }, {});
};


/***/ }),

/***/ "./utils/index.js":
/*!************************!*\
  !*** ./utils/index.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _assign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assign */ "./utils/assign.js");
/* harmony import */ var _slicing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./slicing */ "./utils/slicing.js");
/* harmony import */ var _positioning__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./positioning */ "./utils/positioning.js");
/* harmony import */ var _string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./string */ "./utils/string.js");
/* harmony import */ var _cloudinary__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cloudinary */ "./utils/cloudinary.js");
/* harmony import */ var _apply_with_props__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./apply-with-props */ "./utils/apply-with-props.js");
/* harmony import */ var _groupBy__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./groupBy */ "./utils/groupBy.js");
/* harmony import */ var _mixin__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./mixin */ "./utils/mixin.js");
/* harmony import */ var _fontFace__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./fontFace */ "./utils/fontFace.js");
/* harmony import */ var _playButton__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./playButton */ "./utils/playButton.js");
/* harmony import */ var _css_prefix__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./css-prefix */ "./utils/css-prefix.js");
/* harmony import */ var _attributes_normalizer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./attributes-normalizer */ "./utils/attributes-normalizer.js");












var Utils = _assign__WEBPACK_IMPORTED_MODULE_0__.assign({}, _assign__WEBPACK_IMPORTED_MODULE_0__, _slicing__WEBPACK_IMPORTED_MODULE_1__, _positioning__WEBPACK_IMPORTED_MODULE_2__, _string__WEBPACK_IMPORTED_MODULE_3__, _cloudinary__WEBPACK_IMPORTED_MODULE_4__, _fontFace__WEBPACK_IMPORTED_MODULE_8__, _playButton__WEBPACK_IMPORTED_MODULE_9__, _groupBy__WEBPACK_IMPORTED_MODULE_6__, _apply_with_props__WEBPACK_IMPORTED_MODULE_5__, _mixin__WEBPACK_IMPORTED_MODULE_7__, _css_prefix__WEBPACK_IMPORTED_MODULE_10__, _attributes_normalizer__WEBPACK_IMPORTED_MODULE_11__);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Utils);

/***/ }),

/***/ "./utils/matches.js":
/*!**************************!*\
  !*** ./utils/matches.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "elMatches": () => (/* binding */ elMatches)
/* harmony export */ });
// Test for matches()/
var elMatches = function elMatches(el, selector) {
  var p = Element.prototype;
  var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function (s) {
    return [].indexOf.call(document.querySelectorAll(s), this) !== -1;
  };
  return f.call(el, selector);
};


/***/ }),

/***/ "./utils/mixin.js":
/*!************************!*\
  !*** ./utils/mixin.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mixin": () => (/* binding */ mixin)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function mixin() {
  for (var _len = arguments.length, mixins = new Array(_len), _key = 0; _key < _len; _key++) {
    mixins[_key] = arguments[_key];
  }
  return mixins.reduce(function (c, mixin) {
    return mixin(c);
  }, /*#__PURE__*/_createClass(function Blank() {
    _classCallCheck(this, Blank);
  }));
}


/***/ }),

/***/ "./utils/object.js":
/*!*************************!*\
  !*** ./utils/object.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "convertKeysToSnakeCase": () => (/* binding */ convertKeysToSnakeCase),
/* harmony export */   "get": () => (/* binding */ get),
/* harmony export */   "omit": () => (/* binding */ omit),
/* harmony export */   "pick": () => (/* binding */ pick)
/* harmony export */ });
/* harmony import */ var lodash_snakeCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/snakeCase */ "../node_modules/lodash/snakeCase.js");
/* harmony import */ var lodash_snakeCase__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_snakeCase__WEBPACK_IMPORTED_MODULE_0__);
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }


/**
 * a nested value from an object
 * @param  {object} value -  a object you want to get a nested value from
 * @param  {string} path - path to the nested value, key separated by . (dots)
 * @param  {any} defaultValue - a default Value in case the value is not defined
 * @returns a nested value from an object / array
 */
var get = function get(value, path, defaultValue) {
  if (value && _typeof(value) === 'object') {
    var keysArray = path.split('.');
    var getValue = value;
    var _iterator = _createForOfIteratorHelper(keysArray),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var objectValue = _step.value;
        if (Object.prototype.hasOwnProperty.call(getValue, objectValue) && getValue[objectValue] !== undefined) {
          getValue = getValue[objectValue];
        } else {
          return defaultValue;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return getValue;
  }
  return defaultValue;
};
var pick = function pick(obj, keys) {
  return keys.reduce(function (acc, key) {
    var value = obj[key];
    if (value !== undefined) {
      acc[key] = value;
    }
    return acc;
  }, {});
};
var omit = function omit(obj, keys) {
  return Object.keys(obj).reduce(function (acc, key) {
    var value = obj[key];
    if (!keys.includes(key)) {
      acc[key] = value;
    }
    return acc;
  }, {});
};
var convertKeysToSnakeCase = function convertKeysToSnakeCase(obj) {
  var snakeCaseObj = {};
  for (var _i = 0, _Object$keys = Object.keys(obj); _i < _Object$keys.length; _i++) {
    var key = _Object$keys[_i];
    var snakeCaseKey = lodash_snakeCase__WEBPACK_IMPORTED_MODULE_0___default()(key);
    snakeCaseObj[snakeCaseKey] = obj[key];
  }
  return snakeCaseObj;
};

/***/ }),

/***/ "./utils/playButton.js":
/*!*****************************!*\
  !*** ./utils/playButton.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "playButton": () => (/* binding */ playButton)
/* harmony export */ });
var playButton = function playButton(elem, options) {
  if (options.bigPlayButton === 'init') {
    elem.classList.add('vjs-big-play-button-init-only');
    options.bigPlayButton = true;
  }
};


/***/ }),

/***/ "./utils/positioning.js":
/*!******************************!*\
  !*** ./utils/positioning.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getElementPosition": () => (/* binding */ getElementPosition),
/* harmony export */   "getPointerPosition": () => (/* binding */ getPointerPosition),
/* harmony export */   "isElementInViewport": () => (/* binding */ isElementInViewport),
/* harmony export */   "setPosition": () => (/* binding */ setPosition)
/* harmony export */ });
function getElementPosition(el) {
  var box = el.getBoundingClientRect();
  var body = document.body;
  var docEl = document.documentElement;
  var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;
  var scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;
  var clientTop = docEl.clientTop || body.clientTop || 0;
  var clientLeft = docEl.clientLeft || body.clientLeft || 0;
  var top = box.top + scrollTop - clientTop;
  var left = box.left + scrollLeft - clientLeft;
  return {
    top: Math.round(top),
    left: Math.round(left)
  };
}

/**
 * Get pointer position in element
 * Returns an object with x and y coordinates.
 * The base on the coordinates are the bottom left of the element.
 *
 * @function getPointerPosition
 * @param {Element} el Element on which to get the pointer position on
 * @param {Event} event Event object
 * @return {Object}
 *         This object will have x and y coordinates corresponding to the
 *         mouse position
 */
function getPointerPosition(el, event) {
  var position = {};
  var box = getElementPosition(el);
  var boxW = el.offsetWidth;
  var boxH = el.offsetHeight;
  var boxY = box.top;
  var boxX = box.left;
  var pageY = event.pageY;
  var pageX = event.pageX;
  if (event.changedTouches) {
    pageX = event.changedTouches[0].pageX;
    pageY = event.changedTouches[0].pageY;
  }
  position.y = Math.max(0, Math.min(1, (boxY - pageY + boxH) / boxH));
  position.x = Math.max(0, Math.min(1, (pageX - boxX) / boxW));
  return position;
}
function isElementInViewport(el, _ref) {
  var fraction = _ref.fraction;
  var topLeft = getElementPosition(el);
  var x = topLeft.left;
  var y = topLeft.top;
  var h = el.offsetHeight;
  var w = el.offsetWidth;
  var r = x + w;
  var b = y + h;
  var visibleX = Math.max(0, Math.min(w, window.pageXOffset + window.innerWidth - x, r - window.pageXOffset));
  var visibleY = Math.max(0, Math.min(w, window.pageYOffset + window.innerHeight - y, b - window.pageYOffset));
  var visible = visibleX * visibleY / (w * h);
  return visible > fraction;
}
function setPosition(el, left, top) {
  el.style.left = "".concat(left, "px");
  el.style.top = "".concat(top, "px");
}


/***/ }),

/***/ "./utils/querystring.js":
/*!******************************!*\
  !*** ./utils/querystring.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "objectToQuerystring": () => (/* binding */ objectToQuerystring)
/* harmony export */ });
var objectToQuerystring = function objectToQuerystring(obj) {
  var keys = Object.keys(obj);
  if (!keys.length) {
    return '';
  }
  var query = keys.map(function (key) {
    return "".concat(key, "=").concat(obj[key]);
  }).join('&');
  return "?".concat(query);
};


/***/ }),

/***/ "./utils/slicing.js":
/*!**************************!*\
  !*** ./utils/slicing.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sliceAndUnsetProperties": () => (/* binding */ sliceAndUnsetProperties),
/* harmony export */   "sliceProperties": () => (/* binding */ sliceProperties)
/* harmony export */ });
function _sliceProperties(obj, isUnset) {
  for (var _len = arguments.length, props = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    props[_key - 2] = arguments[_key];
  }
  return props.reduce(function (acc, prop) {
    if (Object.prototype.hasOwnProperty.call(obj, prop)) {
      acc[prop] = obj[prop];
      if (isUnset) {
        delete obj[prop];
      }
    }
    return acc;
  }, {});
}
function sliceProperties(obj) {
  for (var _len2 = arguments.length, props = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    props[_key2 - 1] = arguments[_key2];
  }
  return _sliceProperties.apply(void 0, [obj, false].concat(props));
}
function sliceAndUnsetProperties(obj) {
  for (var _len3 = arguments.length, props = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    props[_key3 - 1] = arguments[_key3];
  }
  return _sliceProperties.apply(void 0, [obj, true].concat(props));
}


/***/ }),

/***/ "./utils/string.js":
/*!*************************!*\
  !*** ./utils/string.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "camelize": () => (/* binding */ camelize),
/* harmony export */   "startsWith": () => (/* binding */ startsWith)
/* harmony export */ });
function camelize(str) {
  return str.replace(/[_.-](\w|$)/g, function (_, x) {
    return x.toUpperCase();
  });
}
function startsWith(str, searchStr, position) {
  if (String.prototype.startsWith) {
    return str.startsWith(searchStr, position);
  } else {
    var _position = _position || 0;
    return str.indexOf(searchStr, _position) === _position;
  }
}


/***/ }),

/***/ "./utils/throttle.js":
/*!***************************!*\
  !*** ./utils/throttle.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "throttle": () => (/* binding */ throttle)
/* harmony export */ });
/**
 * Wraps the given function, `fn`, with a new function that only invokes `fn`
 * at most once per every `wait` milliseconds.
 *
 * @function
 * @param    {Function} fn
 *           The function to be throttled.
 *
 * @param    {number}   wait
 *           The number of milliseconds by which to throttle.
 *
 * @return   {Function}
 */

function throttle(fn, wait) {
  var last = window.performance.now();
  var throttled = function throttled() {
    var now = window.performance.now();
    if (now - last >= wait) {
      fn.apply(void 0, arguments);
      last = now;
    }
  };
  return throttled;
}


/***/ }),

/***/ "./utils/time.js":
/*!***********************!*\
  !*** ./utils/time.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseISO8601": () => (/* binding */ parseISO8601),
/* harmony export */   "parseTime": () => (/* binding */ parseTime)
/* harmony export */ });
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
// https://github.com/csnover/js-iso8601/blob/master/iso8601.js
var numericKeys = [1, 4, 5, 6, 7, 10, 11];
var parseISO8601 = function parseISO8601(date) {
  var timestamp = 0;
  var struct = 0;
  var minutesOffset = 0;

  // ES5 §15.9.4.2 states that the string should attempt to be parsed as a Date Time String Format string
  // before falling back to any implementation-specific date parsing, so that’s what we do, even if native
  // implementations could be faster
  //              1 YYYY                2 MM       3 DD           4 HH    5 mm       6 ss        7 msec        8 Z 9 ±    10 tzHH    11 tzmm
  if (struct = /^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/.exec(date)) {
    // avoid NaN timestamps caused by “undefined” values being passed to Date.UTC
    for (var i = 0, k; k = numericKeys[i]; ++i) {
      struct[k] = +struct[k] || 0;
    }

    // allow undefined days and months
    struct[2] = (+struct[2] || 1) - 1;
    struct[3] = +struct[3] || 1;
    if (struct[8] !== 'Z' && struct[9] !== undefined) {
      minutesOffset = struct[10] * 60 + struct[11];
      if (struct[9] === '+') {
        minutesOffset = 0 - minutesOffset;
      }
    }
    timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
  } else {
    timestamp = NaN;
  }
  return timestamp;
};

// Convert time string i.e. '2:40' to seconds number (160)
// Also allows h:m:s format and mm:ss, m:s etc.
var parseTime = function parseTime(hms) {
  var _hms$split$reverse = hms.split(':').reverse(),
    _hms$split$reverse2 = _slicedToArray(_hms$split$reverse, 3),
    seconds = _hms$split$reverse2[0],
    minutes = _hms$split$reverse2[1],
    hours = _hms$split$reverse2[2];
  var sum = null;
  if (!isNaN(seconds)) {
    sum = (+hours || 0) * 60 * 60 + (+minutes || 0) * 60 + +seconds;
  }
  return sum;
};


/***/ }),

/***/ "./utils/type-inference.js":
/*!*********************************!*\
  !*** ./utils/type-inference.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isBoolean": () => (/* binding */ isBoolean),
/* harmony export */   "isElement": () => (/* binding */ isElement),
/* harmony export */   "isFunction": () => (/* binding */ isFunction),
/* harmony export */   "isInteger": () => (/* binding */ isInteger),
/* harmony export */   "isNumber": () => (/* binding */ isNumber),
/* harmony export */   "isPlainObject": () => (/* binding */ isPlainObject),
/* harmony export */   "isString": () => (/* binding */ isString),
/* harmony export */   "noop": () => (/* binding */ noop)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function isPlainObject(obj) {
  return obj !== null && _typeof(obj) === 'object' && Object.prototype.toString.call(obj) === '[object Object]';
}
function isString(obj) {
  return obj instanceof String || typeof obj === 'string';
}
function isNumber(data) {
  return data instanceof Number || typeof data === 'number';
}
function isInteger(data) {
  return typeof data === 'number' && data % 1 === 0;
}
function isBoolean(data) {
  return typeof data === 'boolean';
}
function isElement(value) {
  return value instanceof Element;
}
function isFunction(data) {
  return typeof data === 'function';
}
function noop() {
  return null;
}


/***/ }),

/***/ "./validators/validators-functions.js":
/*!********************************************!*\
  !*** ./validators/validators-functions.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getValidatorItem": () => (/* binding */ getValidatorItem),
/* harmony export */   "isValidConfig": () => (/* binding */ isValidConfig),
/* harmony export */   "isValueValid": () => (/* binding */ isValueValid)
/* harmony export */ });
/* harmony import */ var _utils_type_inference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/type-inference */ "./utils/type-inference.js");

var getValidatorItem = function getValidatorItem(validator) {
  return (0,_utils_type_inference__WEBPACK_IMPORTED_MODULE_0__.isFunction)(validator) ? validator() : validator;
};

/**
 * check if a value is valid or not
 * @param  {object | function} validator -  a config object
 * @param  {any} value
 * @param  {key} string
 * @returns boolean - using the validators to check if the value is a valid value or not
 */
var isValueValid = function isValueValid(validator, value, configPropertyName) {
  var validatorItem = getValidatorItem(validator);
  var isValid = validatorItem.value(value);
  if (!isValid) {
    console.error("cloudinary video player: ".concat(validatorItem.message(configPropertyName)));
  }
  return isValid;
};

/**
 * check if a configuration object is valid or not
 * @param  {object} config -  a config object
 * @param  {object} validators
 * @returns boolean - true is the configuration object is valid and false if it is not
 */
var isValidConfig = function isValidConfig(config, validators) {
  if ((0,_utils_type_inference__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(validators)) {
    for (var key in config) {
      if (Object.prototype.hasOwnProperty.call(validators, key)) {
        var configValue = config[key];
        var validatorValue = validators[key];
        var isObject = (0,_utils_type_inference__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(configValue);
        if (isObject && !isValidConfig(configValue, validatorValue)) {
          return false;
        } else if (!isObject && !isValueValid(validatorValue, configValue, key)) {
          return false;
        }
      }
    }
  }
  return true;
};

/***/ }),

/***/ "./validators/validators-types.js":
/*!****************************************!*\
  !*** ./validators/validators-types.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "validator": () => (/* binding */ validator)
/* harmony export */ });
/* harmony import */ var _utils_type_inference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/type-inference */ "./utils/type-inference.js");
/* harmony import */ var _validators_functions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./validators-functions */ "./validators/validators-functions.js");
/* harmony import */ var _utils_array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/array */ "./utils/array.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }



var getOptionsString = function getOptionsString(options) {
  return (0,_utils_type_inference__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(options) ? ":(".concat(Object.values(options).join('/'), ")") : '';
};
var arrayOfStringsValidator = function arrayOfStringsValidator() {
  return {
    value: function value(arr) {
      return Array.isArray(arr) && arr.every(_utils_type_inference__WEBPACK_IMPORTED_MODULE_0__.isString);
    },
    message: function message(key) {
      return "'".concat(key, "' should be an array of strings");
    }
  };
};
var arrayOfNumbersValidator = function arrayOfNumbersValidator() {
  return {
    value: function value(arr) {
      return Array.isArray(arr) && arr.every(_utils_type_inference__WEBPACK_IMPORTED_MODULE_0__.isNumber);
    },
    message: function message(key) {
      return "'".concat(key, "' should be an array of numbers");
    }
  };
};
var arrayOfObjectsValidator = function arrayOfObjectsValidator(options) {
  return {
    value: function value(arr) {
      return arr.every(function (item) {
        for (var key in item) {
          if (Object.prototype.hasOwnProperty.call(item, key)) {
            var value = item[key];
            var _validator = options[key];
            var isValid = _validator && (0,_validators_functions__WEBPACK_IMPORTED_MODULE_1__.isValueValid)(_validator(value), value, key);
            if (!isValid) {
              return false;
            }
          }
        }
        return true;
      });
    },
    message: function message() {
      return 'invalid array';
    }
  };
};
var orValidator = function orValidator() {
  for (var _len = arguments.length, validators = new Array(_len), _key = 0; _key < _len; _key++) {
    validators[_key] = arguments[_key];
  }
  return function () {
    return {
      value: function value(_value) {
        return (0,_utils_array__WEBPACK_IMPORTED_MODULE_2__.some)(validators, function (validator) {
          return (0,_validators_functions__WEBPACK_IMPORTED_MODULE_1__.getValidatorItem)(validator).value(_value);
        });
      },
      message: function message(configPropertyName) {
        return (0,_utils_array__WEBPACK_IMPORTED_MODULE_2__.map)(validators, function (validator) {
          return (0,_validators_functions__WEBPACK_IMPORTED_MODULE_1__.getValidatorItem)(validator).message(configPropertyName);
        }).join(' or ');
      }
    };
  };
};
var validator = {
  isString: function isString(options) {
    return {
      value: _utils_type_inference__WEBPACK_IMPORTED_MODULE_0__.isString,
      message: function message(key) {
        return "'".concat(key, "' should be a string").concat(getOptionsString(options));
      }
    };
  },
  isNumber: function isNumber(options) {
    return {
      value: _utils_type_inference__WEBPACK_IMPORTED_MODULE_0__.isNumber,
      message: function message(key) {
        return "'".concat(key, "' should be a number").concat(getOptionsString(options));
      }
    };
  },
  isBoolean: function isBoolean() {
    return {
      value: _utils_type_inference__WEBPACK_IMPORTED_MODULE_0__.isBoolean,
      message: function message(key) {
        return "'".concat(key, "' should be a boolean");
      }
    };
  },
  isFunction: function isFunction() {
    return {
      value: _utils_type_inference__WEBPACK_IMPORTED_MODULE_0__.isFunction,
      message: function message(key) {
        return "'".concat(key, "' should be a function");
      }
    };
  },
  isPlainObject: function isPlainObject() {
    return {
      value: _utils_type_inference__WEBPACK_IMPORTED_MODULE_0__.isPlainObject,
      message: function message(key) {
        return "'".concat(key, "' should be an object");
      }
    };
  },
  isObject: function isObject() {
    return {
      value: function value(_value2) {
        return _value2 && _typeof(_value2) === 'object';
      },
      message: function message(key) {
        return "'".concat(key, "' should be an object");
      }
    };
  },
  isArray: function isArray() {
    return {
      value: Array.isArray,
      message: function message(key) {
        return "'".concat(key, "' should be an array");
      }
    };
  },
  isArrayOfNumbers: arrayOfNumbersValidator,
  isArrayOfStrings: arrayOfStringsValidator,
  isArrayOfObjects: arrayOfObjectsValidator,
  or: orValidator
};

/***/ }),

/***/ "./validators/validators.js":
/*!**********************************!*\
  !*** ./validators/validators.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "playerValidators": () => (/* binding */ playerValidators),
/* harmony export */   "sourceValidators": () => (/* binding */ sourceValidators)
/* harmony export */ });
/* harmony import */ var _video_player_const__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../video-player.const */ "./video-player.const.js");
/* harmony import */ var _components_interaction_area_interaction_area_const__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/interaction-area/interaction-area.const */ "./components/interaction-area/interaction-area.const.js");
/* harmony import */ var _validators_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./validators-types */ "./validators/validators-types.js");



var playerValidators = {
  videojsOptions: {
    loop: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean,
    controls: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean,
    autoplay: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean,
    autoplayMode: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString(_video_player_const__WEBPACK_IMPORTED_MODULE_0__.AUTO_PLAY_MODE),
    bigPlayButton: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean,
    playbackRates: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isArray,
    showLogo: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean,
    logoImageUrl: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString,
    logoOnclickUrl: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString,
    videoJS: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isPlainObject,
    maxTries: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isNumber,
    muted: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean,
    playsinline: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean,
    videoTimeout: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isNumber,
    preload: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString,
    sourceTransformation: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isPlainObject,
    allowUsageReport: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean,
    interactionAreas: {
      theme: {
        template: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString(_components_interaction_area_interaction_area_const__WEBPACK_IMPORTED_MODULE_1__.INTERACTION_AREAS_THEME)
      },
      layout: {
        enable: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean,
        showAgain: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean
      }
    }
  },
  playerOptions: {
    queryParams: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isPlainObject,
    publicId: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString,
    fluid: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean,
    analytics: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean,
    cloudinaryAnalytics: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean,
    hideContextMenu: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean,
    playedEventPercents: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isArrayOfNumbers,
    showJumpControls: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean,
    seekThumbnails: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean,
    aiHighlightsGraph: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean,
    floatingWhenNotVisible: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString(_video_player_const__WEBPACK_IMPORTED_MODULE_0__.FLOATING_TO),
    playedEventTimes: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isArray,
    playlistWidget: {
      direction: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString,
      total: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isNumber
    },
    colors: {
      base: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString,
      accent: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString,
      text: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString
    },
    ads: {
      adTagUrl: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString,
      showCountdown: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean,
      adLabel: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString,
      locale: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString,
      prerollTimeout: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isNumber,
      postrollTimeout: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isNumber,
      adsInPlaylist: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString(_video_player_const__WEBPACK_IMPORTED_MODULE_0__.ADS_IN_PLAYLIST)
    },
    cloudinary: {
      autoShowRecommendations: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean,
      sourceTypes: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isArrayOfStrings,
      transformation: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isObject,
      fontFace: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString,
      posterOptions: {
        publicId: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString,
        transformation: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isObject
      }
    }
  }
};
var sourceValidators = {
  raw_transformation: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString,
  shoppable: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isPlainObject,
  withCredentials: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean,
  interactionAreas: {
    enable: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean,
    template: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.or(_validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString(_components_interaction_area_interaction_area_const__WEBPACK_IMPORTED_MODULE_1__.INTERACTION_AREAS_TEMPLATE), _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isArray),
    vttUrl: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString,
    onClick: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isFunction
  },
  textTracks: {
    captions: {
      label: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString,
      language: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString,
      "default": _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isBoolean,
      url: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString
    },
    subtitles: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isArrayOfObjects({
      label: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString,
      language: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString,
      url: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString
    })
  },
  info: {
    title: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString,
    subtitle: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString,
    description: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isString
  },
  cloudinary: {
    sourceTypes: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isArrayOfStrings,
    transformation: _validators_types__WEBPACK_IMPORTED_MODULE_2__.validator.isObject
  }
};

/***/ }),

/***/ "./video-player.const.js":
/*!*******************************!*\
  !*** ./video-player.const.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ADS_IN_PLAYLIST": () => (/* binding */ ADS_IN_PLAYLIST),
/* harmony export */   "AUTO_PLAY_MODE": () => (/* binding */ AUTO_PLAY_MODE),
/* harmony export */   "CLOUDINARY_CONFIG_PARAM": () => (/* binding */ CLOUDINARY_CONFIG_PARAM),
/* harmony export */   "CLOUDINARY_PARAMS": () => (/* binding */ CLOUDINARY_PARAMS),
/* harmony export */   "DEFAULT_HLS_OPTIONS": () => (/* binding */ DEFAULT_HLS_OPTIONS),
/* harmony export */   "FLOATING_TO": () => (/* binding */ FLOATING_TO),
/* harmony export */   "FLUID_CLASS_NAME": () => (/* binding */ FLUID_CLASS_NAME),
/* harmony export */   "PLAYER_PARAMS": () => (/* binding */ PLAYER_PARAMS),
/* harmony export */   "PRELOAD": () => (/* binding */ PRELOAD)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);

var CLOUDINARY_PARAMS = ['cloudinaryConfig', 'transformation', 'sourceTypes', 'sourceTransformation', 'posterOptions', 'autoShowRecommendations', 'fontFace', 'secure'];
var PLAYER_PARAMS = CLOUDINARY_PARAMS.concat(['publicId', 'source', 'autoplayMode', 'playedEventPercents', 'playedEventTimes', 'analytics', 'cloudinaryAnalytics', 'fluid', 'ima', 'playlistWidget', 'hideContextMenu', 'colors', 'floatingWhenNotVisible', 'ads', 'showJumpControls', 'textTracks', 'qualitySelector', 'fetchErrorUsingGet', 'withCredentials', 'seekThumbnails', 'aiHighlightsGraph', 'queryParams']);
var CLOUDINARY_CONFIG_PARAM = ['cloud_name', 'secure', 'private_cdn', 'secure_distribution', 'cdn_subdomain', 'secure_cdn_subdomain', 'cname', 'shorten', 'sign_url', 'api_secret', 'url_suffix', 'use_root_path', 'auth_token'];
var DEFAULT_HLS_OPTIONS = {
  html5: {
    handlePartialData: false,
    vhs: {
      overrideNative: (video_js__WEBPACK_IMPORTED_MODULE_0___default()) && (video_js__WEBPACK_IMPORTED_MODULE_0___default().browser) ? !(video_js__WEBPACK_IMPORTED_MODULE_0___default().browser.IS_IOS) && !(video_js__WEBPACK_IMPORTED_MODULE_0___default().browser.IS_SAFARI) : true
    }
  }
};
var FLUID_CLASS_NAME = 'cld-fluid';
var AUTO_PLAY_MODE = {
  ALWAYS: 'always',
  ON_SCROLL: 'on-scroll',
  NEVER: 'never'
};
var FLOATING_TO = {
  LEFT: 'left',
  RIGHT: 'right',
  NONE: 'none'
};
var ADS_IN_PLAYLIST = {
  FIRST_VIDEO: 'first-video',
  EVERY_VIDEO: 'every-video'
};
var PRELOAD = {
  AUTO: 'auto',
  METADATA: 'metadata',
  NONE: 'none'
};

/***/ }),

/***/ "./video-player.js":
/*!*************************!*\
  !*** ./video-player.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components */ "./components/index.js");
/* harmony import */ var _plugins__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./plugins */ "./plugins/index.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ "./utils/index.js");
/* harmony import */ var _config_defaults__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config/defaults */ "./config/defaults.js");
/* harmony import */ var _mixins_eventable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mixins/eventable */ "./mixins/eventable.js");
/* harmony import */ var _extended_events__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extended-events */ "./extended-events.js");
/* harmony import */ var _components_playlist_playlist_widget__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/playlist/playlist-widget */ "./components/playlist/playlist-widget.js");
/* harmony import */ var _plugins_cloudinary_models_video_source_video_source__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./plugins/cloudinary/models/video-source/video-source */ "./plugins/cloudinary/models/video-source/video-source.js");
/* harmony import */ var _utils_type_inference__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/type-inference */ "./utils/type-inference.js");
/* harmony import */ var _video_player_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./video-player.utils */ "./video-player.utils.js");
/* harmony import */ var _video_player_const__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./video-player.const */ "./video-player.const.js");
/* harmony import */ var _validators_validators_functions__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./validators/validators-functions */ "./validators/validators-functions.js");
/* harmony import */ var _validators_validators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./validators/validators */ "./validators/validators.js");
/* harmony import */ var _utils_object__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./utils/object */ "./utils/object.js");
/* harmony import */ var _utils_consts__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/consts */ "./utils/consts.js");
/* harmony import */ var _utils_get_analytics_player_options__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./utils/get-analytics-player-options */ "./utils/get-analytics-player-options.js");
/* harmony import */ var _plugins_cloudinary_common__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./plugins/cloudinary/common */ "./plugins/cloudinary/common.js");
function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }








// #if (!process.env.WEBPACK_BUILD_LIGHT)
// import qualitySelector from './components/qualitySelector/qualitySelector.js';
// #endif




// #if (!process.env.WEBPACK_BUILD_LIGHT)
// import { interactionAreaService } from './components/interaction-area/interaction-area.service';
// #endif






var INTERNAL_ANALYTICS_URL = 'https://analytics-api-s.cloudinary.com';

// Register all plugins
Object.keys(_plugins__WEBPACK_IMPORTED_MODULE_2__["default"]).forEach(function (key) {
  video_js__WEBPACK_IMPORTED_MODULE_0___default().registerPlugin(key, _plugins__WEBPACK_IMPORTED_MODULE_2__["default"][key]);
});
(0,_video_player_utils__WEBPACK_IMPORTED_MODULE_10__.overrideDefaultVideojsComponents)();
var _allowUsageReport = true;
var VideoPlayer = /*#__PURE__*/function (_Utils$mixin) {
  _inherits(VideoPlayer, _Utils$mixin);
  var _super = _createSuper(VideoPlayer);
  function VideoPlayer(elem, initOptions, ready) {
    var _this;
    _classCallCheck(this, VideoPlayer);
    _this = _super.call(this);
    _defineProperty(_assertThisInitialized(_this), "_clearTimeOut", function () {
      _this.videojs.clearTimeout(_this.reTryId);
    });
    _this._playlistWidget = null;
    _this.nbCalls = 0;
    _this.videoElement = (0,_video_player_utils__WEBPACK_IMPORTED_MODULE_10__.getResolveVideoElement)(elem);
    _this.options = (0,_video_player_utils__WEBPACK_IMPORTED_MODULE_10__.extractOptions)(_this.videoElement, initOptions);
    _this._videojsOptions = _this.options.videojsOptions;

    // Make sure to add 'video-js' class before creating videojs instance
    _this.videoElement.classList.add('video-js');

    // Handle WebFont loading
    _utils__WEBPACK_IMPORTED_MODULE_3__["default"].fontFace(_this.videoElement, _this.playerOptions);

    // Handle play button options
    _utils__WEBPACK_IMPORTED_MODULE_3__["default"].playButton(_this.videoElement, _this._videojsOptions);
    _this.videojs = video_js__WEBPACK_IMPORTED_MODULE_0___default()(_this.videoElement, _this._videojsOptions);

    // to do, should be change by isValidConfig
    _this._isPlayerConfigValid = true;
    (0,_validators_validators_functions__WEBPACK_IMPORTED_MODULE_12__.isValidConfig)(_this.options, _validators_validators__WEBPACK_IMPORTED_MODULE_13__.playerValidators);
    if (!_this._isPlayerConfigValid) {
      _this.videojs.error('invalid player configuration');
      return _possibleConstructorReturn(_this);
    }
    if (_this._videojsOptions.muted) {
      _this.videojs.volume(0.4);
    }
    if (_this.playerOptions.fluid) {
      _this.fluid(_this.playerOptions.fluid);
    }

    // #if (!process.env.WEBPACK_BUILD_LIGHT)
    //     this.interactionArea = interactionAreaService(this, this.playerOptions, this._videojsOptions);
    // #endif

    _this._setCssClasses();
    _this._initPlugins();
    _this._initPlaylistWidget();
    _this._initJumpButtons();
    _this._setVideoJsListeners(ready);
    _this._sendAnalytics(_this.playerOptions);
    return _this;
  }
  _createClass(VideoPlayer, [{
    key: "playerOptions",
    get: function get() {
      return this.options.playerOptions;
    }
  }, {
    key: "_sendAnalytics",
    value: function _sendAnalytics(options) {
      try {
        var analyticsData = (0,_utils_get_analytics_player_options__WEBPACK_IMPORTED_MODULE_16__.getAnalyticsFromPlayerOptions)(options);
        var qs = new URLSearchParams(analyticsData).toString();
        fetch("".concat(INTERNAL_ANALYTICS_URL, "/video_player_init?").concat(qs, "&vp_version=").concat("1.9.15"));
        // eslint-disable-next-line no-empty
      } catch (e) {}
    }
  }, {
    key: "_setVideoJsListeners",
    value: function _setVideoJsListeners(ready) {
      var _this2 = this;
      // Prevent flash of error message while lazy-loading plugins.
      video_js__WEBPACK_IMPORTED_MODULE_0___default().hook('beforeerror', function (player, err) {
        if (err && err.code === 3 && _this2.loadingLazyPlugins) {
          err = null;
        }
        return err;
      });
      this.videojs.on(_utils_consts__WEBPACK_IMPORTED_MODULE_15__.PLAYER_EVENT.ERROR, function () {
        var error = _this2.videojs.error();
        if (error) {
          var type = _this2._isPlayerConfigValid && _this2.videojs.cloudinary.currentSourceType();

          /*
           error codes :
             3 - media playback was aborted due to a corruption problem
             4 - media error, media source not supported
           */
          var isCorrupted = error.code === 3 && (video_js__WEBPACK_IMPORTED_MODULE_0___default().browser.IS_SAFARI);
          if ([isCorrupted, error.code === 4].includes(true) && [_utils_consts__WEBPACK_IMPORTED_MODULE_15__.SOURCE_TYPE.AUDIO, _utils_consts__WEBPACK_IMPORTED_MODULE_15__.SOURCE_TYPE.VIDEO].includes(type)) {
            _this2.videojs.error(null);
            _utils__WEBPACK_IMPORTED_MODULE_3__["default"].handleCldError(_this2, _this2.playerOptions);
          } else {
            _this2._clearTimeOut();
          }
        }
      });
      this.videojs.tech_.on(_utils_consts__WEBPACK_IMPORTED_MODULE_15__.PLAYER_EVENT.RETRY_PLAYLIST, function () {
        var mediaRequestsErrored = (0,_utils_object__WEBPACK_IMPORTED_MODULE_14__.get)(_this2.videojs, 'hls.stats.mediaRequestsErrored', 0);
        if (mediaRequestsErrored > 0) {
          _this2._clearTimeOut();
          _utils__WEBPACK_IMPORTED_MODULE_3__["default"].handleCldError(_this2, _this2.playerOptions);
        }
      });
      this.videojs.on(_utils_consts__WEBPACK_IMPORTED_MODULE_15__.PLAYER_EVENT.PLAY, this._clearTimeOut);
      this.videojs.on(_utils_consts__WEBPACK_IMPORTED_MODULE_15__.PLAYER_EVENT.CAN_PLAY_THROUGH, this._clearTimeOut);
      this.videojs.ready(function () {
        _this2._onReady();
        if (ready) {
          ready(_this2);
        }

        // #if (!process.env.WEBPACK_BUILD_LIGHT)
        //       this.interactionArea.init();
        // #endif
      });
    }
  }, {
    key: "_initPlugins",
    value: function _initPlugins() {
      // #if (!process.env.WEBPACK_BUILD_LIGHT)
      //     this._initIma();
      // #endif
      this._initAutoplay();
      this._initContextMenu();
      this._initPerSrcBehaviors();
      this._initCloudinary();
      this._initAnalytics();
      this._initCloudinaryAnalytics();
      this._initFloatingPlayer();
      this._initColors();
      this._initTextTracks();
      this._initHighlightsGraph();
      this._initSeekThumbs();
    }
  }, {
    key: "_initLazyPlugins",
    value: function () {
      var _initLazyPlugins2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              this.loadingLazyPlugins = true;
              _context.next = 3;
              return this._initDash(options);
            case 3:
              this.loadingLazyPlugins = false;
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function _initLazyPlugins(_x) {
        return _initLazyPlugins2.apply(this, arguments);
      }
      return _initLazyPlugins;
    }()
  }, {
    key: "_initDash",
    value: function () {
      var _initDash2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(options) {
        var isDashRequired;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              isDashRequired = options.sourceTypes && options.sourceTypes.some(function (s) {
                return s.includes('dash');
              });
              if (!(_plugins__WEBPACK_IMPORTED_MODULE_2__["default"].dashPlugin && isDashRequired)) {
                _context2.next = 4;
                break;
              }
              _context2.next = 4;
              return _plugins__WEBPACK_IMPORTED_MODULE_2__["default"].dashPlugin();
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function _initDash(_x2) {
        return _initDash2.apply(this, arguments);
      }
      return _initDash;
    }()
  }, {
    key: "_isFullScreen",
    value: function _isFullScreen() {
      return this.videojs.player().isFullscreen();
    }
  }, {
    key: "_initIma",
    value: function _initIma() {
      if (this.playerOptions.ads && Object.keys(this.playerOptions.ads).length !== 0) {
        _plugins__WEBPACK_IMPORTED_MODULE_2__["default"].imaPlugin(this.videojs, this.playerOptions);
      }
    }
  }, {
    key: "setTextTracks",
    value: function setTextTracks(conf) {
      // remove current text tracks
      var currentTracks = this.videojs.remoteTextTracks();
      if (currentTracks) {
        for (var i = currentTracks.tracks_.length - 1; i >= 0; i--) {
          this.videojs.removeRemoteTextTrack(currentTracks.tracks_[i]);
        }
      }
      if (conf) {
        var tracks = Object.keys(conf);
        var allTracks = [];
        for (var _i = 0, _tracks = tracks; _i < _tracks.length; _i++) {
          var track = _tracks[_i];
          if (Array.isArray(conf[track])) {
            var trks = conf[track];
            for (var _i2 = 0; _i2 < trks.length; _i2++) {
              allTracks.push(VideoPlayer.buildTextTrackObj(track, trks[_i2]));
            }
          } else {
            allTracks.push(VideoPlayer.buildTextTrackObj(track, conf[track]));
          }
        }
        _utils__WEBPACK_IMPORTED_MODULE_3__["default"].filterAndAddTextTracks(allTracks, this.videojs);
      }
    }
  }, {
    key: "_initSeekThumbs",
    value: function _initSeekThumbs() {
      var _this3 = this;
      if (this.playerOptions.seekThumbnails) {
        this.videojs.on(_utils_consts__WEBPACK_IMPORTED_MODULE_15__.PLAYER_EVENT.CLD_SOURCE_CHANGED, function (e, _ref) {
          var source = _ref.source;
          if (!source || source.getType() === _utils_consts__WEBPACK_IMPORTED_MODULE_15__.SOURCE_TYPE.AUDIO ||
          // Is Audio
          (0,_plugins_cloudinary_common__WEBPACK_IMPORTED_MODULE_17__.isRawUrl)(source.publicId()) ||
          // Is a raw url
          _this3.videojs.activePlugins_ && _this3.videojs.activePlugins_.vr // It's a VR (i.e. 360)
          ) {
            return;
          }
          var publicId = source.publicId();
          var transformation = _utils__WEBPACK_IMPORTED_MODULE_3__["default"].assign({}, source.transformation());
          if (transformation && transformation.streaming_profile) {
            delete transformation.streaming_profile;
          }
          transformation.flags = transformation.flags || [];
          transformation.flags.push('sprite');
          var vttSrc = source.config().url("".concat(publicId, ".vtt"), {
            transformation: transformation
          }).replace(/\.json$/, ''); // Handle playlist by tag

          // vttThumbnails must be called differently on init and on source update.
          (0,_utils_type_inference__WEBPACK_IMPORTED_MODULE_9__.isFunction)(_this3.videojs.vttThumbnails) ? _this3.videojs.vttThumbnails({
            src: vttSrc
          }) : _this3.videojs.vttThumbnails.src(vttSrc);
        });
      }
    }
  }, {
    key: "_initHighlightsGraph",
    value: function _initHighlightsGraph() {
      var _this4 = this;
      if (this.playerOptions.aiHighlightsGraph) {
        this.videojs.on(_utils_consts__WEBPACK_IMPORTED_MODULE_15__.PLAYER_EVENT.CLD_SOURCE_CHANGED, function (e, _ref2) {
          var source = _ref2.source;
          if (!source || source.getType() === _utils_consts__WEBPACK_IMPORTED_MODULE_15__.SOURCE_TYPE.AUDIO ||
          // Is Audio
          (0,_plugins_cloudinary_common__WEBPACK_IMPORTED_MODULE_17__.isRawUrl)(source.publicId()) // Is a raw url
          ) {
            return;
          }
          var publicId = source.publicId();

          // Keep video-length related transformations and remove the rest
          var inputTransformations = (0,_utils_object__WEBPACK_IMPORTED_MODULE_14__.pick)(source.transformation(), ['start_offset', 'end_offset', 'duration']);
          var transformation = _utils__WEBPACK_IMPORTED_MODULE_3__["default"].assign({}, inputTransformations);
          transformation.effect = 'preview';
          transformation.flags = transformation.flags || [];
          transformation.flags.push('getinfo');
          var aiHighlightsGraphSrc = source.config().url("".concat(publicId), {
            transformation: transformation
          }).replace(/\.json$/, ''); // Handle playlist by tag

          // Plugin is called differently on init and on source update.
          (0,_utils_type_inference__WEBPACK_IMPORTED_MODULE_9__.isFunction)(_this4.videojs.aiHighlightsGraph) ? _this4.videojs.aiHighlightsGraph({
            src: aiHighlightsGraphSrc
          }) : _this4.videojs.aiHighlightsGraph.src(aiHighlightsGraphSrc);
        });
      }
    }
  }, {
    key: "_initColors",
    value: function _initColors() {
      this.videojs.colors(this.playerOptions.colors ? {
        colors: this.playerOptions.colors
      } : {});
    }

    // #if (!process.env.WEBPACK_BUILD_LIGHT)
    //   _initQualitySelector() {
    //     if (this._videojsOptions.controlBar && this.playerOptions.qualitySelector !== false) {
    //       this.videojs.httpSourceSelector({ default: 'auto' });
    // 
    //       this.videojs.on(PLAYER_EVENT.LOADED_METADATA, () => {
    //         qualitySelector.init(this.videojs);
    //       });
    // 
    //       // Show only if more than one option available
    //       this.videojs.on(PLAYER_EVENT.LOADED_DATA, () => {
    //         qualitySelector.setVisibility(this.videojs);
    //       });
    //     }
    //   }
    // #endif
  }, {
    key: "_initTextTracks",
    value: function _initTextTracks() {
      var _this5 = this;
      this.videojs.on(_utils_consts__WEBPACK_IMPORTED_MODULE_15__.PLAYER_EVENT.REFRESH_TEXT_TRACKS, function (e, tracks) {
        _this5.setTextTracks(tracks);
      });
    }
  }, {
    key: "_initPerSrcBehaviors",
    value: function _initPerSrcBehaviors() {
      if (this.videojs.perSourceBehaviors) {
        this.videojs.perSourceBehaviors();
      }
    }
  }, {
    key: "_initJumpButtons",
    value: function _initJumpButtons() {
      if (!this.playerOptions.showJumpControls && this.videojs.controlBar) {
        this.videojs.controlBar.removeChild('JumpForwardButton');
        this.videojs.controlBar.removeChild('JumpBackButton');
      }
    }
  }, {
    key: "_initCloudinary",
    value: function _initCloudinary() {
      var cloudinaryConfig = this.playerOptions.cloudinary.cloudinaryConfig;
      cloudinaryConfig.chainTarget = this;
      if (cloudinaryConfig.secure !== false) {
        (0,_plugins_cloudinary_common__WEBPACK_IMPORTED_MODULE_17__.extendCloudinaryConfig)(cloudinaryConfig, {
          secure: true
        });
      }
      this.videojs.cloudinary(this.playerOptions.cloudinary);
    }
  }, {
    key: "_initAnalytics",
    value: function _initAnalytics() {
      var analyticsOpts = this.playerOptions.analytics;
      if (!window.ga && analyticsOpts) {
        console.error('Google Analytics script is missing');
        return;
      }
      if (analyticsOpts) {
        var opts = _typeof(analyticsOpts) === 'object' ? analyticsOpts : {};
        this.videojs.analytics(opts);
      }
    }
  }, {
    key: "_initCloudinaryAnalytics",
    value: function _initCloudinaryAnalytics() {
      var cloudinaryAnalyticsOptionEnabled = this.playerOptions.cloudinaryAnalytics;
      if (cloudinaryAnalyticsOptionEnabled) {
        this.videojs.videoElement = this.videoElement;
        this.videojs.cloudinaryAnalytics();
      }
    }
  }, {
    key: "reTryVideo",
    value: function reTryVideo(maxNumberOfCalls, timeout) {
      var _this6 = this;
      if (!this.isVideoReady()) {
        if (this.nbCalls < maxNumberOfCalls) {
          this.nbCalls++;
          this.reTryId = this.videojs.setTimeout(function () {
            return _this6.reTryVideo(maxNumberOfCalls, timeout);
          }, timeout);
        } else {
          var e = new Error('Video is not ready please try later');
          this.videojs.trigger('error', e);
        }
      }
    }
  }, {
    key: "isVideoReady",
    value: function isVideoReady() {
      var s = this.videojs.readyState();
      if (s >= (/iPad|iPhone|iPod/.test(navigator.userAgent) ? 1 : 4)) {
        this.nbCalls = 0;
        return true;
      }
      return false;
    }
  }, {
    key: "_initPlaylistWidget",
    value: function _initPlaylistWidget() {
      var _this7 = this;
      this.videojs.on(_utils_consts__WEBPACK_IMPORTED_MODULE_15__.PLAYER_EVENT.PLAYLIST_CREATED, function () {
        if (_this7._playlistWidget) {
          _this7._playlistWidget.dispose();
        }
        var plwOptions = _this7.playerOptions.playlistWidget;
        if ((0,_utils_type_inference__WEBPACK_IMPORTED_MODULE_9__.isPlainObject)(plwOptions)) {
          if (_this7.playerOptions.fluid) {
            plwOptions.fluid = true;
          }
          if (_this7.playerOptions.cloudinary.fontFace) {
            plwOptions.fontFace = _this7.playerOptions.cloudinary.fontFace;
          }
          _this7._playlistWidget = new _components_playlist_playlist_widget__WEBPACK_IMPORTED_MODULE_7__["default"](_this7.videojs, plwOptions);
        }
      });
    }
  }, {
    key: "playlistWidget",
    value: function playlistWidget(options) {
      if (!options && !this._playlistWidget) {
        return false;
      }
      if (!options && this._playlistWidget) {
        return this._playlistWidget;
      }
      if ((0,_utils_type_inference__WEBPACK_IMPORTED_MODULE_9__.isPlainObject)(options)) {
        this._playlistWidget.options(options);
      }
      return this._playlistWidget;
    }
  }, {
    key: "_initAutoplay",
    value: function _initAutoplay() {
      var autoplayMode = this.playerOptions.autoplayMode;
      if (autoplayMode === 'on-scroll') {
        this.videojs.autoplayOnScroll();
      }
    }
  }, {
    key: "_initContextMenu",
    value: function _initContextMenu() {
      if (!this.playerOptions.hideContextMenu) {
        this.videojs.contextMenu(_config_defaults__WEBPACK_IMPORTED_MODULE_4__["default"].contextMenu);
      }
    }
  }, {
    key: "_initFloatingPlayer",
    value: function _initFloatingPlayer() {
      if (this.playerOptions.floatingWhenNotVisible !== _video_player_const__WEBPACK_IMPORTED_MODULE_11__.FLOATING_TO.NONE) {
        this.videojs.floatingPlayer({
          floatTo: this.playerOptions.floatingWhenNotVisible
        });
      }
    }
  }, {
    key: "_setCssClasses",
    value: function _setCssClasses() {
      this.videojs.addClass(_utils__WEBPACK_IMPORTED_MODULE_3__["default"].CLASS_PREFIX);
      this.videojs.addClass(_utils__WEBPACK_IMPORTED_MODULE_3__["default"].playerClassPrefix(this.videojs));
      _utils__WEBPACK_IMPORTED_MODULE_3__["default"].setSkinClassPrefix(this.videojs, _utils__WEBPACK_IMPORTED_MODULE_3__["default"].skinClassPrefix(this.videojs));
    }
  }, {
    key: "_onReady",
    value: function _onReady() {
      this._setExtendedEvents();

      // Load first video (mainly to support video tag 'source' and 'public-id' attributes)
      var source = this.playerOptions.source || this.playerOptions.publicId;
      if (source) {
        this.source(source, this.playerOptions);
      }
    }
  }, {
    key: "_setExtendedEvents",
    value: function _setExtendedEvents() {
      var _this8 = this;
      var events = [];
      if (this.playerOptions.playedEventPercents) {
        events.push({
          type: _utils_consts__WEBPACK_IMPORTED_MODULE_15__.PLAYER_EVENT.PERCENTS_PLAYED,
          percents: this.playerOptions.playedEventPercents
        });
      }
      if (this.playerOptions.playedEventTimes) {
        events.push({
          type: _utils_consts__WEBPACK_IMPORTED_MODULE_15__.PLAYER_EVENT.TIME_PLAYED,
          times: this.playerOptions.playedEventTimes
        });
      }
      events.push.apply(events, [_utils_consts__WEBPACK_IMPORTED_MODULE_15__.PLAYER_EVENT.SEEK, _utils_consts__WEBPACK_IMPORTED_MODULE_15__.PLAYER_EVENT.MUTE, _utils_consts__WEBPACK_IMPORTED_MODULE_15__.PLAYER_EVENT.UNMUTE, _utils_consts__WEBPACK_IMPORTED_MODULE_15__.PLAYER_EVENT.QUALITY_CHANGED]);
      var extendedEvents = new _extended_events__WEBPACK_IMPORTED_MODULE_6__["default"](this.videojs, {
        events: events
      });
      Object.keys(extendedEvents.events).forEach(function (_event) {
        var handler = function handler(event, data) {
          _this8.videojs.trigger({
            type: _event,
            eventData: data
          });
        };
        extendedEvents.on(_event, handler);
      });
    }
  }, {
    key: "cloudinaryConfig",
    value: function cloudinaryConfig(config) {
      return this.videojs.cloudinary.cloudinaryConfig(config);
    }
  }, {
    key: "currentPublicId",
    value: function currentPublicId() {
      return this.videojs.cloudinary.currentPublicId();
    }
  }, {
    key: "currentSourceUrl",
    value: function currentSourceUrl() {
      return this.videojs.currentSource().src;
    }
  }, {
    key: "currentPoster",
    value: function currentPoster() {
      return this.videojs.cloudinary.currentPoster();
    }
  }, {
    key: "source",
    value: function source(publicId) {
      var _this9 = this;
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _normalizeOptions = (0,_plugins_cloudinary_common__WEBPACK_IMPORTED_MODULE_17__.normalizeOptions)(publicId, options);
      publicId = _normalizeOptions.publicId;
      options = _normalizeOptions.options;
      if (!this._isPlayerConfigValid) {
        return;
      }
      var isSourceConfigValid = (0,_validators_validators_functions__WEBPACK_IMPORTED_MODULE_12__.isValidConfig)(options, _validators_validators__WEBPACK_IMPORTED_MODULE_13__.sourceValidators);
      if (!isSourceConfigValid) {
        this.videojs.error('invalid source configuration');
        return;
      }
      if (publicId instanceof _plugins_cloudinary_models_video_source_video_source__WEBPACK_IMPORTED_MODULE_8__["default"]) {
        return this.videojs.cloudinary.source(publicId, options);
      }

      // Interactive plugin - available in full (not light) build only
      if (this.videojs.interactive) {
        this.videojs.interactive(this.videojs, options);
      }
      if (VideoPlayer.allowUsageReport()) {
        options.usageReport = true;
      }
      this.setTextTracks(options.textTracks);

      // #if (!process.env.WEBPACK_BUILD_LIGHT)
      //     this._initQualitySelector();
      // #endif

      clearTimeout(this.reTryId);
      this.nbCalls = 0;
      var maxTries = this.videojs.options_.maxTries || 3;
      var videoReadyTimeout = this.videojs.options_.videoTimeout || 55000;
      this.reTryVideo(maxTries, videoReadyTimeout);

      // Lazy loaded plugins
      this._initLazyPlugins(options).then(function () {
        return _this9.videojs.cloudinary.source(publicId, options);
      });
      return this.videojs.cloudinary.source(publicId, options);
    }
  }, {
    key: "posterOptions",
    value: function posterOptions(options) {
      return this.videojs.cloudinary.posterOptions(options);
    }
  }, {
    key: "skin",
    value: function skin(name) {
      if (name !== undefined && (0,_utils_type_inference__WEBPACK_IMPORTED_MODULE_9__.isString)(name)) {
        _utils__WEBPACK_IMPORTED_MODULE_3__["default"].setSkinClassPrefix(this.videojs, name);
        var playlistWidget = this.playlistWidget();
        if (playlistWidget) {
          playlistWidget.setSkin();
        }
      }
      return _utils__WEBPACK_IMPORTED_MODULE_3__["default"].skinClassPrefix(this.videojs);
    }
  }, {
    key: "playlist",
    value: function playlist(sources) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this._initQualitySelector();
      return this.videojs.cloudinary.playlist(sources, options);
    }
  }, {
    key: "playlistByTag",
    value: function playlistByTag(tag) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this.videojs.cloudinary.playlistByTag(tag, options);
    }
  }, {
    key: "sourcesByTag",
    value: function sourcesByTag(tag) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this.videojs.cloudinary.sourcesByTag(tag, options);
    }
  }, {
    key: "fluid",
    value: function fluid(bool) {
      if (bool === undefined) {
        return this.videojs.fluid();
      }
      if (bool) {
        this.videojs.addClass(_video_player_const__WEBPACK_IMPORTED_MODULE_11__.FLUID_CLASS_NAME);
      } else {
        this.videojs.removeClass(_video_player_const__WEBPACK_IMPORTED_MODULE_11__.FLUID_CLASS_NAME);
      }
      this.videojs.fluid(bool);
      this.videojs.trigger(_utils_consts__WEBPACK_IMPORTED_MODULE_15__.PLAYER_EVENT.FLUID, bool);
      return this;
    }
  }, {
    key: "play",
    value: function play() {
      this.playWasCalled = true;
      this.videojs.play();
      return this;
    }
  }, {
    key: "stop",
    value: function stop() {
      this.pause();
      this.currentTime(0);
      return this;
    }
  }, {
    key: "playPrevious",
    value: function playPrevious() {
      this.playlist().playPrevious();
      return this;
    }
  }, {
    key: "playNext",
    value: function playNext() {
      this.playlist().playNext();
      return this;
    }
  }, {
    key: "transformation",
    value: function transformation(trans) {
      return this.videojs.cloudinary.transformation(trans);
    }
  }, {
    key: "sourceTypes",
    value: function sourceTypes(types) {
      return this.videojs.cloudinary.sourceTypes(types);
    }
  }, {
    key: "sourceTransformation",
    value: function sourceTransformation(trans) {
      return this.videojs.cloudinary.sourceTransformation(trans);
    }
  }, {
    key: "autoShowRecommendations",
    value: function autoShowRecommendations(autoShow) {
      return this.videojs.cloudinary.autoShowRecommendations(autoShow);
    }
  }, {
    key: "duration",
    value: function duration() {
      return this.videojs.duration();
    }
  }, {
    key: "height",
    value: function height(dimension) {
      if (!dimension) {
        return this.videojs.height();
      }
      this.videojs.height(dimension);
      return this;
    }
  }, {
    key: "width",
    value: function width(dimension) {
      if (!dimension) {
        return this.videojs.width();
      }
      this.videojs.width(dimension);
      return this;
    }
  }, {
    key: "volume",
    value: function volume(_volume) {
      if (!_volume) {
        return this.videojs.volume();
      }
      this.videojs.volume(_volume);
      return this;
    }
  }, {
    key: "mute",
    value: function mute() {
      if (!this.isMuted()) {
        this.videojs.muted(true);
      }
      return this;
    }
  }, {
    key: "unmute",
    value: function unmute() {
      if (this.isMuted()) {
        this.videojs.muted(false);
      }
      return this;
    }
  }, {
    key: "isMuted",
    value: function isMuted() {
      return this.videojs.muted();
    }
  }, {
    key: "pause",
    value: function pause() {
      this.videojs.pause();
      return this;
    }
  }, {
    key: "currentTime",
    value: function currentTime(offsetSeconds) {
      if (!offsetSeconds && offsetSeconds !== 0) {
        return this.videojs.currentTime();
      }
      this.videojs.currentTime(offsetSeconds);
      return this;
    }
  }, {
    key: "maximize",
    value: function maximize() {
      if (!this.isMaximized()) {
        this.videojs.requestFullscreen();
      }
      return this;
    }
  }, {
    key: "exitMaximize",
    value: function exitMaximize() {
      if (this.isMaximized()) {
        this.videojs.exitFullscreen();
      }
      return this;
    }
  }, {
    key: "isMaximized",
    value: function isMaximized() {
      return this.videojs.isFullscreen();
    }
  }, {
    key: "dispose",
    value: function dispose() {
      this.videojs.dispose();
    }
  }, {
    key: "controls",
    value: function controls(bool) {
      if (bool === undefined) {
        return this.videojs.controls();
      }
      this.videojs.controls(bool);
      return this;
    }
  }, {
    key: "ima",
    value: function ima() {
      return {
        playAd: this.videojs.ima.playAd
      };
    }
  }, {
    key: "loop",
    value: function loop(bool) {
      if (bool === undefined) {
        return this.videojs.loop();
      }
      this.videojs.loop(bool);
      return this;
    }
  }, {
    key: "el",
    value: function el() {
      return this.videojs.el();
    }
  }], [{
    key: "all",
    value: function all(selector) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      var nodeList = document.querySelectorAll(selector);
      return _toConsumableArray(nodeList).map(function (node) {
        return _construct(VideoPlayer, [node].concat(args));
      });
    }
  }, {
    key: "allowUsageReport",
    value: function allowUsageReport(bool) {
      if (bool === undefined) {
        return _allowUsageReport;
      }
      _allowUsageReport = !!bool;
      return _allowUsageReport;
    }
  }, {
    key: "buildTextTrackObj",
    value: function buildTextTrackObj(type, conf) {
      return {
        kind: type,
        label: conf.label,
        srclang: conf.language,
        "default": !!conf["default"],
        src: conf.url
      };
    }
  }]);
  return VideoPlayer;
}(_utils__WEBPACK_IMPORTED_MODULE_3__["default"].mixin(_mixins_eventable__WEBPACK_IMPORTED_MODULE_5__["default"]));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (VideoPlayer);

/***/ }),

/***/ "./video-player.utils.js":
/*!*******************************!*\
  !*** ./video-player.utils.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addMetadataTrack": () => (/* binding */ addMetadataTrack),
/* harmony export */   "extractOptions": () => (/* binding */ extractOptions),
/* harmony export */   "getResolveVideoElement": () => (/* binding */ getResolveVideoElement),
/* harmony export */   "isLight": () => (/* binding */ isLight),
/* harmony export */   "normalizeAutoplay": () => (/* binding */ normalizeAutoplay),
/* harmony export */   "overrideDefaultVideojsComponents": () => (/* binding */ overrideDefaultVideojsComponents)
/* harmony export */ });
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ "../node_modules/video.js/dist/alt/video.core-exposed.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./utils/index.js");
/* harmony import */ var _config_defaults__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config/defaults */ "./config/defaults.js");
/* harmony import */ var _video_player_const__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./video-player.const */ "./video-player.const.js");
/* harmony import */ var _utils_type_inference__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/type-inference */ "./utils/type-inference.js");
/* harmony import */ var css_escape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! css.escape */ "../node_modules/css.escape/css.escape.js");
/* harmony import */ var css_escape__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(css_escape__WEBPACK_IMPORTED_MODULE_5__);
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }






/*
* Used to escape element identifiers that begin with certain
* characters such as digits.
* https://www.w3.org/International/questions/qa-escapes#css_identifiers
*/

var addMetadataTrack = function addMetadataTrack(videoJs, vttSource) {
  return videoJs.addRemoteTextTrack({
    kind: 'metadata',
    srclang: 'en',
    src: vttSource,
    "default": true
  }, true).track;
};
var isLight = function isLight(opts) {
  return opts["class"].indexOf('cld-video-player-skin-light') > -1 || opts.skin === 'light';
};
var getResolveVideoElement = function getResolveVideoElement(elem) {
  if ((0,_utils_type_inference__WEBPACK_IMPORTED_MODULE_4__.isString)(elem)) {
    var id = elem;

    // Adjust for jQuery ID syntax
    if (id.indexOf('#') === 0) {
      id = id.slice(1);
    }
    try {
      elem = document.querySelector("#".concat(css_escape__WEBPACK_IMPORTED_MODULE_5___default()(id))) || video_js__WEBPACK_IMPORTED_MODULE_0___default().getPlayer(id);
    } catch (e) {
      elem = null;
    }
    if (!elem) {
      throw new Error("Could not find element with id ".concat(id));
    }
  }
  if (!elem.tagName) {
    throw new Error('Must specify either an element or an element id.');
  } else if (elem.tagName !== 'VIDEO') {
    throw new Error('Element is not a video tag.');
  }
  return elem;
};
var normalizeAutoplay = function normalizeAutoplay(options) {
  var autoplayMode = options.autoplayMode;
  if (autoplayMode) {
    switch (autoplayMode) {
      case _video_player_const__WEBPACK_IMPORTED_MODULE_3__.AUTO_PLAY_MODE.ALWAYS:
        options.autoplay = true;
        break;
      case _video_player_const__WEBPACK_IMPORTED_MODULE_3__.AUTO_PLAY_MODE.ON_SCROLL:
      case _video_player_const__WEBPACK_IMPORTED_MODULE_3__.AUTO_PLAY_MODE.NEVER:
      default:
        options.autoplay = false;
    }
  }
};
var extractOptions = function extractOptions(elem, options) {
  var elemOptions = _utils__WEBPACK_IMPORTED_MODULE_1__["default"].normalizeAttributes(elem);
  if (video_js__WEBPACK_IMPORTED_MODULE_0___default().dom.hasClass(elem, _video_player_const__WEBPACK_IMPORTED_MODULE_3__.FLUID_CLASS_NAME) || video_js__WEBPACK_IMPORTED_MODULE_0___default().dom.hasClass(elem, 'vjs-fluid')) {
    options.fluid = true;
  }
  // Default HLS options < Default options < Markup options < Player options
  options = _utils__WEBPACK_IMPORTED_MODULE_1__["default"].assign({}, _video_player_const__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_HLS_OPTIONS, _config_defaults__WEBPACK_IMPORTED_MODULE_2__["default"], elemOptions, options);

  // In case of 'autoplay on scroll', we need to make sure normal HTML5 autoplay is off
  normalizeAutoplay(options);

  // VideoPlayer specific options
  var playerOptions = _utils__WEBPACK_IMPORTED_MODULE_1__["default"].sliceAndUnsetProperties.apply(_utils__WEBPACK_IMPORTED_MODULE_1__["default"], [options].concat(_toConsumableArray(_video_player_const__WEBPACK_IMPORTED_MODULE_3__.PLAYER_PARAMS)));

  // Cloudinary plugin specific options
  playerOptions.cloudinary = _utils__WEBPACK_IMPORTED_MODULE_1__["default"].sliceAndUnsetProperties.apply(_utils__WEBPACK_IMPORTED_MODULE_1__["default"], [playerOptions].concat(_toConsumableArray(_video_player_const__WEBPACK_IMPORTED_MODULE_3__.CLOUDINARY_PARAMS)));

  // Allow explicitly passing options to videojs using the `videojs` namespace, in order
  // to avoid param name conflicts:
  // VideoPlayer.new({ controls: true, videojs: { controls: false })
  if (options.videojs) {
    _utils__WEBPACK_IMPORTED_MODULE_1__["default"].assign(options, options.videojs);
    delete options.videojs;
  }
  return {
    playerOptions: playerOptions,
    videojsOptions: options
  };
};
var overrideDefaultVideojsComponents = function overrideDefaultVideojsComponents() {
  var Player = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('Player');
  var children = Player.prototype.options_.children;

  // Add TitleBar as default
  children.push('titleBar');
  children.push('upcomingVideoOverlay');
  children.push('recommendationsOverlay');
  var ControlBar = video_js__WEBPACK_IMPORTED_MODULE_0___default().getComponent('ControlBar');
  if (ControlBar) {
    children = ControlBar.prototype.options_.children;
    // Add space instead of the progress control (which we deattached from the controlBar, and absolutely positioned it above it)
    // Also add a blank div underneath the progress control to stop bubbling up pointer events.
    children.splice(children.indexOf('progressControl'), 0, 'spacer', 'progressControlEventsBlocker');

    // Add 'play-previous' and 'play-next' buttons around the 'play-toggle'
    children.splice(children.indexOf('playToggle'), 1, 'playlistPreviousButton', 'JumpBackButton', 'playToggle', 'JumpForwardButton', 'playlistNextButton');

    // Position the 'logo-button' button right next to 'fullscreenToggle'
    children.splice(children.indexOf('fullscreenToggle'), 1, 'logoButton', 'fullscreenToggle');
  }
};

/***/ }),

/***/ "../node_modules/cloudinary-video-analytics/dist/main.js":
/*!***************************************************************!*\
  !*** ../node_modules/cloudinary-video-analytics/dist/main.js ***!
  \***************************************************************/
/***/ ((module) => {

(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}e.r(t),e.d(t,{default:()=>T});var n="play",o="pause",i="loadedmetadata",a=function(e,t){var r=function(){t(n,{time:Date.now()})};return e.addEventListener("play",r),function(){e.removeEventListener("play",r)}},u=function(e,t){var r=function(){t(o,{time:Date.now()})};e.addEventListener("pause",r);var n=function(){t(o,{time:Date.now()})};return e.addEventListener("emptied",n),function(){e.removeEventListener("play",r),e.removeEventListener("emptied",n)}},c=function(e,t){var r=function(){var r=function(e){var t=e.duration,r=Number.isNaN(t)?null:t;return{videoDuration:null!==r?Math.round(r):r}}(e);t(i,{videoDuration:r.videoDuration})};return e.addEventListener("loadedmetadata",r),function(){e.removeEventListener("loadedmetadata",r)}};function l(e){return function(e){if(Array.isArray(e))return d(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return d(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return d(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const f={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let s;const v=new Uint8Array(16);function y(){if(!s&&(s="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!s))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return s(v)}const p=[];for(let e=0;e<256;++e)p.push((e+256).toString(16).slice(1));function m(e,t=0){return(p[e[t+0]]+p[e[t+1]]+p[e[t+2]]+p[e[t+3]]+"-"+p[e[t+4]]+p[e[t+5]]+"-"+p[e[t+6]]+p[e[t+7]]+"-"+p[e[t+8]]+p[e[t+9]]+"-"+p[e[t+10]]+p[e[t+11]]+p[e[t+12]]+p[e[t+13]]+p[e[t+14]]+p[e[t+15]]).toLowerCase()}const b=function(e,t,r){if(f.randomUUID&&!t&&!e)return f.randomUUID();const n=(e=e||{}).random||(e.rng||y)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,t){r=r||0;for(let e=0;e<16;++e)t[r+e]=n[e];return t}return m(n)};var w=function(){return b().replace(/-/g,"")},g="cld-analytics-user-id",h=function(){var e=window.localStorage.getItem(g);if(e)return e;var t=b().replace(/-/g,"");return window.localStorage.setItem(g,t),t};function S(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,u=[],c=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(u.push(n.value),u.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return u}}(e,t)||j(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function I(e){return function(e){if(Array.isArray(e))return O(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||j(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function j(e,t){if(e){if("string"==typeof e)return O(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?O(e,t):void 0}}function O(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var D=function(e){var t=I(e);return t.findLastIndex((function(e){return e.eventName===n}))>t.findLastIndex((function(e){return e.eventName===o}))&&t.push({eventName:o,eventDetails:{time:Date.now()}}),t},E=function(e){return e.reduce((function(e,t){var r=e.watchedFrames[e.watchedFrames.length-1],a=t.eventDetails.time;return t.eventName===i?e.videoMetadata.videoDuration=t.eventDetails.videoDuration:t.eventName===n?e.watchedFrames.push([a]):r&&1===r.length&&t.eventName===o&&r.push(a),e}),{watchedFrames:[],videoMetadata:{videoDuration:null}})},U=function(e){return Math.round(e.reduce((function(e,t){var r=S(t,2),n=r[0];return e+(r[1]-n)/1e3}),0))},A=function(e){return e.src};function L(e){return L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},L(e)}function P(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function M(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?P(Object(r),!0).forEach((function(t){N(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):P(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function N(e,t,r){return(t=function(e){var t=function(e,t){if("object"!==L(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==L(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===L(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var T=function(e){var t=null,n=function(e){var t={},r={};return function(n){t[n]=[],r[n]=[];var o=t[n],i=r[n],d=function(e,t){i.push({eventName:e,eventDetails:t})},f=[a(e,d),u(e,d),c(e,d)];return{flushEvents:function(){var e=i.splice(0,i.length);return o.splice.apply(o,[o.length,0].concat(l(e))),e},getAllEvents:function(){return o},destroy:function(){f.forEach((function(e){return e()}))}}}}(e),o=function(e){return function(e,t){var r=Object.keys(t).reduce((function(e,r){return e.append(r,t[r]),e}),new FormData);return"function"!=typeof window.navigator.sendBeacon?window.fetch(e,{method:"POST",mode:"no-cors",body:r,keepalive:!0}):window.navigator.sendBeacon(e,r)}("https://video-analytics-api.cloudinary.com/video-analytics",e)};return{startManuallyNewVideoTracking:function(i){var a=function(e){return"object"!==r(e)?{isValid:!1,errorMessage:"Metadata param needs to be an object"}:"string"!=typeof e.cloudName?{isValid:!1,errorMessage:"You need to provide proper cloud name of your Cloudinary account [cloudName: string]"}:"string"!=typeof e.publicId?{isValid:!1,errorMessage:"You need to provide proper video public ID of your video on your Cloudinary cloud [videoPublicId: string]"}:{isValid:!0}}(i);if(!a.isValid)throw"Cloudinary video analytics tracking called without necessary data (".concat(a.errorMessage,")");t&&(t.clear(),t=null);var u=w(),c=n(u),l=function(e,t,r){var n=function(){var n=t(),o=D(n),i=E(o),a=i.watchedFrames,u=i.videoMetadata,c=U(a);r({videoUrl:e.videoUrl,userId:e.userId,cloudName:e.cloudName,videoPublicId:e.publicId,viewId:e.viewId,playedTimeSeconds:c,videoDuration:u.videoDuration})};return window.addEventListener("beforeunload",n),function(){window.removeEventListener("beforeunload",n),n()}}(M(M({},i),{},{videoUrl:A(e),userId:h(),viewId:u}),c.flushEvents,o);t={viewId:u,clear:function(){c.destroy(),l()}}},autoTracking:function(){if(t)throw"Cloudinary video analytics tracking is already connected with this HTML Video Element";var r=function(){var r=e.src;if(r===window.location.href||!r)return null;var i=w(),a=n(i),u=function(e,t,r){var n=function(){var n=t(),o=D(n),i=E(o),a=i.watchedFrames,u=i.videoMetadata,c=U(a);r({videoUrl:e.videoUrl,userId:e.userId,viewId:e.viewId,playedTimeSeconds:c,videoDuration:u.videoDuration})};return window.addEventListener("beforeunload",n),function(){window.removeEventListener("beforeunload",n),n()}}({videoUrl:A(e),userId:h(),viewId:i},a.flushEvents,o);t={viewId:i,clear:function(){a.destroy(),u()}}};e.addEventListener("loadstart",(function(){t||r()})),e.addEventListener("emptied",(function(){if(!t)return null;t.clear(),t=null})),r()}}};module.exports=t})();

/***/ }),

/***/ "../node_modules/css.escape/css.escape.js":
/*!************************************************!*\
  !*** ../node_modules/css.escape/css.escape.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */
;(function(root, factory) {
	// https://github.com/umdjs/umd/blob/master/returnExports.js
	if (true) {
		// For Node.js.
		module.exports = factory(root);
	} else {}
}(typeof __webpack_require__.g != 'undefined' ? __webpack_require__.g : this, function(root) {

	if (root.CSS && root.CSS.escape) {
		return root.CSS.escape;
	}

	// https://drafts.csswg.org/cssom/#serialize-an-identifier
	var cssEscape = function(value) {
		if (arguments.length == 0) {
			throw new TypeError('`CSS.escape` requires an argument.');
		}
		var string = String(value);
		var length = string.length;
		var index = -1;
		var codeUnit;
		var result = '';
		var firstCodeUnit = string.charCodeAt(0);
		while (++index < length) {
			codeUnit = string.charCodeAt(index);
			// Note: there’s no need to special-case astral symbols, surrogate
			// pairs, or lone surrogates.

			// If the character is NULL (U+0000), then the REPLACEMENT CHARACTER
			// (U+FFFD).
			if (codeUnit == 0x0000) {
				result += '\uFFFD';
				continue;
			}

			if (
				// If the character is in the range [\1-\1F] (U+0001 to U+001F) or is
				// U+007F, […]
				(codeUnit >= 0x0001 && codeUnit <= 0x001F) || codeUnit == 0x007F ||
				// If the character is the first character and is in the range [0-9]
				// (U+0030 to U+0039), […]
				(index == 0 && codeUnit >= 0x0030 && codeUnit <= 0x0039) ||
				// If the character is the second character and is in the range [0-9]
				// (U+0030 to U+0039) and the first character is a `-` (U+002D), […]
				(
					index == 1 &&
					codeUnit >= 0x0030 && codeUnit <= 0x0039 &&
					firstCodeUnit == 0x002D
				)
			) {
				// https://drafts.csswg.org/cssom/#escape-a-character-as-code-point
				result += '\\' + codeUnit.toString(16) + ' ';
				continue;
			}

			if (
				// If the character is the first character and is a `-` (U+002D), and
				// there is no second character, […]
				index == 0 &&
				length == 1 &&
				codeUnit == 0x002D
			) {
				result += '\\' + string.charAt(index);
				continue;
			}

			// If the character is not handled by one of the above rules and is
			// greater than or equal to U+0080, is `-` (U+002D) or `_` (U+005F), or
			// is in one of the ranges [0-9] (U+0030 to U+0039), [A-Z] (U+0041 to
			// U+005A), or [a-z] (U+0061 to U+007A), […]
			if (
				codeUnit >= 0x0080 ||
				codeUnit == 0x002D ||
				codeUnit == 0x005F ||
				codeUnit >= 0x0030 && codeUnit <= 0x0039 ||
				codeUnit >= 0x0041 && codeUnit <= 0x005A ||
				codeUnit >= 0x0061 && codeUnit <= 0x007A
			) {
				// the character itself
				result += string.charAt(index);
				continue;
			}

			// Otherwise, the escaped character.
			// https://drafts.csswg.org/cssom/#escape-a-character
			result += '\\' + string.charAt(index);

		}
		return result;
	};

	if (!root.CSS) {
		root.CSS = {};
	}

	root.CSS.escape = cssEscape;
	return cssEscape;

}));


/***/ }),

/***/ "../node_modules/events/events.js":
/*!****************************************!*\
  !*** ../node_modules/events/events.js ***!
  \****************************************/
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),

/***/ "../node_modules/video.js/dist/alt/video.core-exposed.js":
/*!***************************************************************!*\
  !*** ../node_modules/video.js/dist/alt/video.core-exposed.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ___EXPOSE_LOADER_IMPORT___ = __webpack_require__(/*! -!./video.core.js */ "../node_modules/video.js/dist/alt/video.core.js");
var ___EXPOSE_LOADER_GET_GLOBAL_THIS___ = __webpack_require__(/*! ../../../expose-loader/dist/runtime/getGlobalThis.js */ "../node_modules/expose-loader/dist/runtime/getGlobalThis.js");
var ___EXPOSE_LOADER_GLOBAL_THIS___ = ___EXPOSE_LOADER_GET_GLOBAL_THIS___;
___EXPOSE_LOADER_GLOBAL_THIS___["videojs"] = ___EXPOSE_LOADER_IMPORT___;
module.exports = ___EXPOSE_LOADER_IMPORT___;


/***/ }),

/***/ "../node_modules/expose-loader/dist/runtime/getGlobalThis.js":
/*!*******************************************************************!*\
  !*** ../node_modules/expose-loader/dist/runtime/getGlobalThis.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// eslint-disable-next-line func-names
module.exports = function () {
  if (typeof globalThis === "object") {
    return globalThis;
  }

  var g;

  try {
    // This works if eval is allowed (see CSP)
    // eslint-disable-next-line no-new-func
    g = this || new Function("return this")();
  } catch (e) {
    // This works if the window reference is available
    if (typeof window === "object") {
      return window;
    } // This works if the self reference is available


    if (typeof self === "object") {
      return self;
    } // This works if the global reference is available


    if (typeof __webpack_require__.g !== "undefined") {
      return __webpack_require__.g;
    }
  }

  return g;
}();

/***/ }),

/***/ "../node_modules/lodash/_Symbol.js":
/*!*****************************************!*\
  !*** ../node_modules/lodash/_Symbol.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(/*! ./_root */ "../node_modules/lodash/_root.js");

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),

/***/ "../node_modules/lodash/_arrayMap.js":
/*!*******************************************!*\
  !*** ../node_modules/lodash/_arrayMap.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;


/***/ }),

/***/ "../node_modules/lodash/_arrayReduce.js":
/*!**********************************************!*\
  !*** ../node_modules/lodash/_arrayReduce.js ***!
  \**********************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

module.exports = arrayReduce;


/***/ }),

/***/ "../node_modules/lodash/_asciiWords.js":
/*!*********************************************!*\
  !*** ../node_modules/lodash/_asciiWords.js ***!
  \*********************************************/
/***/ ((module) => {

/** Used to match words composed of alphanumeric characters. */
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}

module.exports = asciiWords;


/***/ }),

/***/ "../node_modules/lodash/_baseGetTag.js":
/*!*********************************************!*\
  !*** ../node_modules/lodash/_baseGetTag.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "../node_modules/lodash/_Symbol.js"),
    getRawTag = __webpack_require__(/*! ./_getRawTag */ "../node_modules/lodash/_getRawTag.js"),
    objectToString = __webpack_require__(/*! ./_objectToString */ "../node_modules/lodash/_objectToString.js");

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),

/***/ "../node_modules/lodash/_basePropertyOf.js":
/*!*************************************************!*\
  !*** ../node_modules/lodash/_basePropertyOf.js ***!
  \*************************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function(key) {
    return object == null ? undefined : object[key];
  };
}

module.exports = basePropertyOf;


/***/ }),

/***/ "../node_modules/lodash/_baseToString.js":
/*!***********************************************!*\
  !*** ../node_modules/lodash/_baseToString.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "../node_modules/lodash/_Symbol.js"),
    arrayMap = __webpack_require__(/*! ./_arrayMap */ "../node_modules/lodash/_arrayMap.js"),
    isArray = __webpack_require__(/*! ./isArray */ "../node_modules/lodash/isArray.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "../node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;


/***/ }),

/***/ "../node_modules/lodash/_createCompounder.js":
/*!***************************************************!*\
  !*** ../node_modules/lodash/_createCompounder.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayReduce = __webpack_require__(/*! ./_arrayReduce */ "../node_modules/lodash/_arrayReduce.js"),
    deburr = __webpack_require__(/*! ./deburr */ "../node_modules/lodash/deburr.js"),
    words = __webpack_require__(/*! ./words */ "../node_modules/lodash/words.js");

/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]";

/** Used to match apostrophes. */
var reApos = RegExp(rsApos, 'g');

/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */
function createCompounder(callback) {
  return function(string) {
    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
  };
}

module.exports = createCompounder;


/***/ }),

/***/ "../node_modules/lodash/_deburrLetter.js":
/*!***********************************************!*\
  !*** ../node_modules/lodash/_deburrLetter.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var basePropertyOf = __webpack_require__(/*! ./_basePropertyOf */ "../node_modules/lodash/_basePropertyOf.js");

/** Used to map Latin Unicode letters to basic Latin letters. */
var deburredLetters = {
  // Latin-1 Supplement block.
  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
  '\xc7': 'C',  '\xe7': 'c',
  '\xd0': 'D',  '\xf0': 'd',
  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
  '\xd1': 'N',  '\xf1': 'n',
  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
  '\xc6': 'Ae', '\xe6': 'ae',
  '\xde': 'Th', '\xfe': 'th',
  '\xdf': 'ss',
  // Latin Extended-A block.
  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
  '\u0134': 'J',  '\u0135': 'j',
  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
  '\u0174': 'W',  '\u0175': 'w',
  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
  '\u0132': 'IJ', '\u0133': 'ij',
  '\u0152': 'Oe', '\u0153': 'oe',
  '\u0149': "'n", '\u017f': 's'
};

/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */
var deburrLetter = basePropertyOf(deburredLetters);

module.exports = deburrLetter;


/***/ }),

/***/ "../node_modules/lodash/_freeGlobal.js":
/*!*********************************************!*\
  !*** ../node_modules/lodash/_freeGlobal.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

module.exports = freeGlobal;


/***/ }),

/***/ "../node_modules/lodash/_getRawTag.js":
/*!********************************************!*\
  !*** ../node_modules/lodash/_getRawTag.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "../node_modules/lodash/_Symbol.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),

/***/ "../node_modules/lodash/_hasUnicodeWord.js":
/*!*************************************************!*\
  !*** ../node_modules/lodash/_hasUnicodeWord.js ***!
  \*************************************************/
/***/ ((module) => {

/** Used to detect strings that need a more robust regexp to match words. */
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */
function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}

module.exports = hasUnicodeWord;


/***/ }),

/***/ "../node_modules/lodash/_objectToString.js":
/*!*************************************************!*\
  !*** ../node_modules/lodash/_objectToString.js ***!
  \*************************************************/
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ "../node_modules/lodash/_root.js":
/*!***************************************!*\
  !*** ../node_modules/lodash/_root.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "../node_modules/lodash/_freeGlobal.js");

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),

/***/ "../node_modules/lodash/_unicodeWords.js":
/*!***********************************************!*\
  !*** ../node_modules/lodash/_unicodeWords.js ***!
  \***********************************************/
/***/ ((module) => {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsDingbatRange = '\\u2700-\\u27bf',
    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    rsPunctuationRange = '\\u2000-\\u206f',
    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    rsVarRange = '\\ufe0e\\ufe0f',
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]",
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsDigits = '\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
    rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;

/** Used to match complex or compound words. */
var reUnicodeWord = RegExp([
  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
  rsUpper + '+' + rsOptContrUpper,
  rsOrdUpper,
  rsOrdLower,
  rsDigits,
  rsEmoji
].join('|'), 'g');

/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}

module.exports = unicodeWords;


/***/ }),

/***/ "../node_modules/lodash/deburr.js":
/*!****************************************!*\
  !*** ../node_modules/lodash/deburr.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var deburrLetter = __webpack_require__(/*! ./_deburrLetter */ "../node_modules/lodash/_deburrLetter.js"),
    toString = __webpack_require__(/*! ./toString */ "../node_modules/lodash/toString.js");

/** Used to match Latin Unicode letters (excluding mathematical operators). */
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

/** Used to compose unicode character classes. */
var rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;

/** Used to compose unicode capture groups. */
var rsCombo = '[' + rsComboRange + ']';

/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */
var reComboMark = RegExp(rsCombo, 'g');

/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */
function deburr(string) {
  string = toString(string);
  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
}

module.exports = deburr;


/***/ }),

/***/ "../node_modules/lodash/isArray.js":
/*!*****************************************!*\
  !*** ../node_modules/lodash/isArray.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),

/***/ "../node_modules/lodash/isObjectLike.js":
/*!**********************************************!*\
  !*** ../node_modules/lodash/isObjectLike.js ***!
  \**********************************************/
/***/ ((module) => {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),

/***/ "../node_modules/lodash/isSymbol.js":
/*!******************************************!*\
  !*** ../node_modules/lodash/isSymbol.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "../node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "../node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),

/***/ "../node_modules/lodash/snakeCase.js":
/*!*******************************************!*\
  !*** ../node_modules/lodash/snakeCase.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createCompounder = __webpack_require__(/*! ./_createCompounder */ "../node_modules/lodash/_createCompounder.js");

/**
 * Converts `string` to
 * [snake case](https://en.wikipedia.org/wiki/Snake_case).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the snake cased string.
 * @example
 *
 * _.snakeCase('Foo Bar');
 * // => 'foo_bar'
 *
 * _.snakeCase('fooBar');
 * // => 'foo_bar'
 *
 * _.snakeCase('--FOO-BAR--');
 * // => 'foo_bar'
 */
var snakeCase = createCompounder(function(result, word, index) {
  return result + (index ? '_' : '') + word.toLowerCase();
});

module.exports = snakeCase;


/***/ }),

/***/ "../node_modules/lodash/toString.js":
/*!******************************************!*\
  !*** ../node_modules/lodash/toString.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseToString = __webpack_require__(/*! ./_baseToString */ "../node_modules/lodash/_baseToString.js");

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;


/***/ }),

/***/ "../node_modules/lodash/words.js":
/*!***************************************!*\
  !*** ../node_modules/lodash/words.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var asciiWords = __webpack_require__(/*! ./_asciiWords */ "../node_modules/lodash/_asciiWords.js"),
    hasUnicodeWord = __webpack_require__(/*! ./_hasUnicodeWord */ "../node_modules/lodash/_hasUnicodeWord.js"),
    toString = __webpack_require__(/*! ./toString */ "../node_modules/lodash/toString.js"),
    unicodeWords = __webpack_require__(/*! ./_unicodeWords */ "../node_modules/lodash/_unicodeWords.js");

/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */
function words(string, pattern, guard) {
  string = toString(string);
  pattern = guard ? undefined : pattern;

  if (pattern === undefined) {
    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
  }
  return string.match(pattern) || [];
}

module.exports = words;


/***/ }),

/***/ "./assets/styles/components/playlist.scss":
/*!************************************************!*\
  !*** ./assets/styles/components/playlist.scss ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./assets/styles/components/thumbnail.scss":
/*!*************************************************!*\
  !*** ./assets/styles/components/thumbnail.scss ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./assets/styles/components/title-bar.scss":
/*!*************************************************!*\
  !*** ./assets/styles/components/title-bar.scss ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./assets/styles/components/triangle-volume-bar.scss":
/*!***********************************************************!*\
  !*** ./assets/styles/components/triangle-volume-bar.scss ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./assets/styles/main.scss":
/*!*********************************!*\
  !*** ./assets/styles/main.scss ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./components/logoButton/logo-button.scss":
/*!************************************************!*\
  !*** ./components/logoButton/logo-button.scss ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./components/playlist/components/playlist.scss":
/*!******************************************************!*\
  !*** ./components/playlist/components/playlist.scss ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./components/playlist/components/upcoming-video-overlay.scss":
/*!********************************************************************!*\
  !*** ./components/playlist/components/upcoming-video-overlay.scss ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./components/recommendations-overlay/recommendations-overlay.scss":
/*!*************************************************************************!*\
  !*** ./components/recommendations-overlay/recommendations-overlay.scss ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./plugins/aiHighlightsGraph/aiHighlightsGraph.scss":
/*!**********************************************************!*\
  !*** ./plugins/aiHighlightsGraph/aiHighlightsGraph.scss ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./plugins/context-menu/context-menu.scss":
/*!************************************************!*\
  !*** ./plugins/context-menu/context-menu.scss ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./plugins/floating-player/floating-player.scss":
/*!******************************************************!*\
  !*** ./plugins/floating-player/floating-player.scss ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./plugins/vtt-thumbnails/vtt-thumbnails.scss":
/*!****************************************************!*\
  !*** ./plugins/vtt-thumbnails/vtt-thumbnails.scss ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "../node_modules/video.js/dist/alt/video.core.js":
/*!*******************************************************!*\
  !*** ../node_modules/video.js/dist/alt/video.core.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/**
 * @license
 * Video.js 8.3.0 <http://videojs.com/>
 * Copyright Brightcove, Inc. <https://www.brightcove.com/>
 * Available under Apache License Version 2.0
 * <https://github.com/videojs/video.js/blob/main/LICENSE>
 *
 * Includes vtt.js <https://github.com/mozilla/vtt.js>
 * Available under Apache License Version 2.0
 * <https://github.com/mozilla/vtt.js/blob/main/LICENSE>
 */

(function (global, factory) {
   true ? module.exports = factory() :
  0;
})(this, (function () { 'use strict';

  var version = "8.3.0";

  /**
   * An Object that contains lifecycle hooks as keys which point to an array
   * of functions that are run when a lifecycle is triggered
   *
   * @private
   */
  const hooks_ = {};

  /**
   * Get a list of hooks for a specific lifecycle
   *
   * @param  {string} type
   *         the lifecycle to get hooks from
   *
   * @param  {Function|Function[]} [fn]
   *         Optionally add a hook (or hooks) to the lifecycle that your are getting.
   *
   * @return {Array}
   *         an array of hooks, or an empty array if there are none.
   */
  const hooks = function (type, fn) {
    hooks_[type] = hooks_[type] || [];
    if (fn) {
      hooks_[type] = hooks_[type].concat(fn);
    }
    return hooks_[type];
  };

  /**
   * Add a function hook to a specific videojs lifecycle.
   *
   * @param {string} type
   *        the lifecycle to hook the function to.
   *
   * @param {Function|Function[]}
   *        The function or array of functions to attach.
   */
  const hook = function (type, fn) {
    hooks(type, fn);
  };

  /**
   * Remove a hook from a specific videojs lifecycle.
   *
   * @param  {string} type
   *         the lifecycle that the function hooked to
   *
   * @param  {Function} fn
   *         The hooked function to remove
   *
   * @return {boolean}
   *         The function that was removed or undef
   */
  const removeHook = function (type, fn) {
    const index = hooks(type).indexOf(fn);
    if (index <= -1) {
      return false;
    }
    hooks_[type] = hooks_[type].slice();
    hooks_[type].splice(index, 1);
    return true;
  };

  /**
   * Add a function hook that will only run once to a specific videojs lifecycle.
   *
   * @param {string} type
   *        the lifecycle to hook the function to.
   *
   * @param {Function|Function[]}
   *        The function or array of functions to attach.
   */
  const hookOnce = function (type, fn) {
    hooks(type, [].concat(fn).map(original => {
      const wrapper = (...args) => {
        removeHook(type, wrapper);
        return original(...args);
      };
      return wrapper;
    }));
  };

  /**
   * @file fullscreen-api.js
   * @module fullscreen-api
   */

  /**
   * Store the browser-specific methods for the fullscreen API.
   *
   * @type {Object}
   * @see [Specification]{@link https://fullscreen.spec.whatwg.org}
   * @see [Map Approach From Screenfull.js]{@link https://github.com/sindresorhus/screenfull.js}
   */
  const FullscreenApi = {
    prefixed: true
  };

  // browser API methods
  const apiMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror', 'fullscreen'],
  // WebKit
  ['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror', '-webkit-full-screen'],
  // Mozilla
  ['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror', '-moz-full-screen'],
  // Microsoft
  ['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError', '-ms-fullscreen']];
  const specApi = apiMap[0];
  let browserApi;

  // determine the supported set of functions
  for (let i = 0; i < apiMap.length; i++) {
    // check for exitFullscreen function
    if (apiMap[i][1] in document) {
      browserApi = apiMap[i];
      break;
    }
  }

  // map the browser API names to the spec API names
  if (browserApi) {
    for (let i = 0; i < browserApi.length; i++) {
      FullscreenApi[specApi[i]] = browserApi[i];
    }
    FullscreenApi.prefixed = browserApi[0] !== specApi[0];
  }

  /**
   * @file create-logger.js
   * @module create-logger
   */

  // This is the private tracking variable for the logging history.
  let history = [];

  /**
   * Log messages to the console and history based on the type of message
   *
   * @private
   * @param  {string} type
   *         The name of the console method to use.
   *
   * @param  {Array} args
   *         The arguments to be passed to the matching console method.
   */
  const LogByTypeFactory = (name, log) => (type, level, args) => {
    const lvl = log.levels[level];
    const lvlRegExp = new RegExp(`^(${lvl})$`);
    if (type !== 'log') {
      // Add the type to the front of the message when it's not "log".
      args.unshift(type.toUpperCase() + ':');
    }

    // Add console prefix after adding to history.
    args.unshift(name + ':');

    // Add a clone of the args at this point to history.
    if (history) {
      history.push([].concat(args));

      // only store 1000 history entries
      const splice = history.length - 1000;
      history.splice(0, splice > 0 ? splice : 0);
    }

    // If there's no console then don't try to output messages, but they will
    // still be stored in history.
    if (!window.console) {
      return;
    }

    // Was setting these once outside of this function, but containing them
    // in the function makes it easier to test cases where console doesn't exist
    // when the module is executed.
    let fn = window.console[type];
    if (!fn && type === 'debug') {
      // Certain browsers don't have support for console.debug. For those, we
      // should default to the closest comparable log.
      fn = window.console.info || window.console.log;
    }

    // Bail out if there's no console or if this type is not allowed by the
    // current logging level.
    if (!fn || !lvl || !lvlRegExp.test(type)) {
      return;
    }
    fn[Array.isArray(args) ? 'apply' : 'call'](window.console, args);
  };
  function createLogger$1(name) {
    // This is the private tracking variable for logging level.
    let level = 'info';

    // the curried logByType bound to the specific log and history
    let logByType;

    /**
     * Logs plain debug messages. Similar to `console.log`.
     *
     * Due to [limitations](https://github.com/jsdoc3/jsdoc/issues/955#issuecomment-313829149)
     * of our JSDoc template, we cannot properly document this as both a function
     * and a namespace, so its function signature is documented here.
     *
     * #### Arguments
     * ##### *args
     * *[]
     *
     * Any combination of values that could be passed to `console.log()`.
     *
     * #### Return Value
     *
     * `undefined`
     *
     * @namespace
     * @param    {...*} args
     *           One or more messages or objects that should be logged.
     */
    const log = function (...args) {
      logByType('log', level, args);
    };

    // This is the logByType helper that the logging methods below use
    logByType = LogByTypeFactory(name, log);

    /**
     * Create a new sublogger which chains the old name to the new name.
     *
     * For example, doing `videojs.log.createLogger('player')` and then using that logger will log the following:
     * ```js
     *  mylogger('foo');
     *  // > VIDEOJS: player: foo
     * ```
     *
     * @param {string} name
     *        The name to add call the new logger
     * @return {Object}
     */
    log.createLogger = subname => createLogger$1(name + ': ' + subname);

    /**
     * Enumeration of available logging levels, where the keys are the level names
     * and the values are `|`-separated strings containing logging methods allowed
     * in that logging level. These strings are used to create a regular expression
     * matching the function name being called.
     *
     * Levels provided by Video.js are:
     *
     * - `off`: Matches no calls. Any value that can be cast to `false` will have
     *   this effect. The most restrictive.
     * - `all`: Matches only Video.js-provided functions (`debug`, `log`,
     *   `log.warn`, and `log.error`).
     * - `debug`: Matches `log.debug`, `log`, `log.warn`, and `log.error` calls.
     * - `info` (default): Matches `log`, `log.warn`, and `log.error` calls.
     * - `warn`: Matches `log.warn` and `log.error` calls.
     * - `error`: Matches only `log.error` calls.
     *
     * @type {Object}
     */
    log.levels = {
      all: 'debug|log|warn|error',
      off: '',
      debug: 'debug|log|warn|error',
      info: 'log|warn|error',
      warn: 'warn|error',
      error: 'error',
      DEFAULT: level
    };

    /**
     * Get or set the current logging level.
     *
     * If a string matching a key from {@link module:log.levels} is provided, acts
     * as a setter.
     *
     * @param  {string} [lvl]
     *         Pass a valid level to set a new logging level.
     *
     * @return {string}
     *         The current logging level.
     */
    log.level = lvl => {
      if (typeof lvl === 'string') {
        if (!log.levels.hasOwnProperty(lvl)) {
          throw new Error(`"${lvl}" in not a valid log level`);
        }
        level = lvl;
      }
      return level;
    };

    /**
     * Returns an array containing everything that has been logged to the history.
     *
     * This array is a shallow clone of the internal history record. However, its
     * contents are _not_ cloned; so, mutating objects inside this array will
     * mutate them in history.
     *
     * @return {Array}
     */
    log.history = () => history ? [].concat(history) : [];

    /**
     * Allows you to filter the history by the given logger name
     *
     * @param {string} fname
     *        The name to filter by
     *
     * @return {Array}
     *         The filtered list to return
     */
    log.history.filter = fname => {
      return (history || []).filter(historyItem => {
        // if the first item in each historyItem includes `fname`, then it's a match
        return new RegExp(`.*${fname}.*`).test(historyItem[0]);
      });
    };

    /**
     * Clears the internal history tracking, but does not prevent further history
     * tracking.
     */
    log.history.clear = () => {
      if (history) {
        history.length = 0;
      }
    };

    /**
     * Disable history tracking if it is currently enabled.
     */
    log.history.disable = () => {
      if (history !== null) {
        history.length = 0;
        history = null;
      }
    };

    /**
     * Enable history tracking if it is currently disabled.
     */
    log.history.enable = () => {
      if (history === null) {
        history = [];
      }
    };

    /**
     * Logs error messages. Similar to `console.error`.
     *
     * @param {...*} args
     *        One or more messages or objects that should be logged as an error
     */
    log.error = (...args) => logByType('error', level, args);

    /**
     * Logs warning messages. Similar to `console.warn`.
     *
     * @param {...*} args
     *        One or more messages or objects that should be logged as a warning.
     */
    log.warn = (...args) => logByType('warn', level, args);

    /**
     * Logs debug messages. Similar to `console.debug`, but may also act as a comparable
     * log if `console.debug` is not available
     *
     * @param {...*} args
     *        One or more messages or objects that should be logged as debug.
     */
    log.debug = (...args) => logByType('debug', level, args);
    return log;
  }

  /**
   * @file log.js
   * @module log
   */
  const log = createLogger$1('VIDEOJS');
  const createLogger = log.createLogger;

  /**
   * @file obj.js
   * @module obj
   */

  /**
   * @callback obj:EachCallback
   *
   * @param {*} value
   *        The current key for the object that is being iterated over.
   *
   * @param {string} key
   *        The current key-value for object that is being iterated over
   */

  /**
   * @callback obj:ReduceCallback
   *
   * @param {*} accum
   *        The value that is accumulating over the reduce loop.
   *
   * @param {*} value
   *        The current key for the object that is being iterated over.
   *
   * @param {string} key
   *        The current key-value for object that is being iterated over
   *
   * @return {*}
   *         The new accumulated value.
   */
  const toString$1 = Object.prototype.toString;

  /**
   * Get the keys of an Object
   *
   * @param {Object}
   *        The Object to get the keys from
   *
   * @return {string[]}
   *         An array of the keys from the object. Returns an empty array if the
   *         object passed in was invalid or had no keys.
   *
   * @private
   */
  const keys = function (object) {
    return isObject(object) ? Object.keys(object) : [];
  };

  /**
   * Array-like iteration for objects.
   *
   * @param {Object} object
   *        The object to iterate over
   *
   * @param {obj:EachCallback} fn
   *        The callback function which is called for each key in the object.
   */
  function each(object, fn) {
    keys(object).forEach(key => fn(object[key], key));
  }

  /**
   * Array-like reduce for objects.
   *
   * @param {Object} object
   *        The Object that you want to reduce.
   *
   * @param {Function} fn
   *         A callback function which is called for each key in the object. It
   *         receives the accumulated value and the per-iteration value and key
   *         as arguments.
   *
   * @param {*} [initial = 0]
   *        Starting value
   *
   * @return {*}
   *         The final accumulated value.
   */
  function reduce(object, fn, initial = 0) {
    return keys(object).reduce((accum, key) => fn(accum, object[key], key), initial);
  }

  /**
   * Returns whether a value is an object of any kind - including DOM nodes,
   * arrays, regular expressions, etc. Not functions, though.
   *
   * This avoids the gotcha where using `typeof` on a `null` value
   * results in `'object'`.
   *
   * @param  {Object} value
   * @return {boolean}
   */
  function isObject(value) {
    return !!value && typeof value === 'object';
  }

  /**
   * Returns whether an object appears to be a "plain" object - that is, a
   * direct instance of `Object`.
   *
   * @param  {Object} value
   * @return {boolean}
   */
  function isPlain(value) {
    return isObject(value) && toString$1.call(value) === '[object Object]' && value.constructor === Object;
  }

  /**
   * Merge two objects recursively.
   *
   * Performs a deep merge like
   * {@link https://lodash.com/docs/4.17.10#merge|lodash.merge}, but only merges
   * plain objects (not arrays, elements, or anything else).
   *
   * Non-plain object values will be copied directly from the right-most
   * argument.
   *
   * @param   {Object[]} sources
   *          One or more objects to merge into a new object.
   *
   * @return {Object}
   *          A new object that is the merged result of all sources.
   */
  function merge(...sources) {
    const result = {};
    sources.forEach(source => {
      if (!source) {
        return;
      }
      each(source, (value, key) => {
        if (!isPlain(value)) {
          result[key] = value;
          return;
        }
        if (!isPlain(result[key])) {
          result[key] = {};
        }
        result[key] = merge(result[key], value);
      });
    });
    return result;
  }

  /**
   * Object.defineProperty but "lazy", which means that the value is only set after
   * it is retrieved the first time, rather than being set right away.
   *
   * @param {Object} obj the object to set the property on
   * @param {string} key the key for the property to set
   * @param {Function} getValue the function used to get the value when it is needed.
   * @param {boolean} setter whether a setter should be allowed or not
   */
  function defineLazyProperty(obj, key, getValue, setter = true) {
    const set = value => Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      writable: true
    });
    const options = {
      configurable: true,
      enumerable: true,
      get() {
        const value = getValue();
        set(value);
        return value;
      }
    };
    if (setter) {
      options.set = set;
    }
    return Object.defineProperty(obj, key, options);
  }

  var Obj = /*#__PURE__*/Object.freeze({
    __proto__: null,
    each: each,
    reduce: reduce,
    isObject: isObject,
    isPlain: isPlain,
    merge: merge,
    defineLazyProperty: defineLazyProperty
  });

  /**
   * @file browser.js
   * @module browser
   */

  /**
   * Whether or not this device is an iPod.
   *
   * @static
   * @type {Boolean}
   */
  let IS_IPOD = false;

  /**
   * The detected iOS version - or `null`.
   *
   * @static
   * @type {string|null}
   */
  let IOS_VERSION = null;

  /**
   * Whether or not this is an Android device.
   *
   * @static
   * @type {Boolean}
   */
  let IS_ANDROID = false;

  /**
   * The detected Android version - or `null` if not Android or indeterminable.
   *
   * @static
   * @type {number|string|null}
   */
  let ANDROID_VERSION;

  /**
   * Whether or not this is Mozilla Firefox.
   *
   * @static
   * @type {Boolean}
   */
  let IS_FIREFOX = false;

  /**
   * Whether or not this is Microsoft Edge.
   *
   * @static
   * @type {Boolean}
   */
  let IS_EDGE = false;

  /**
   * Whether or not this is any Chromium Browser
   *
   * @static
   * @type {Boolean}
   */
  let IS_CHROMIUM = false;

  /**
   * Whether or not this is any Chromium browser that is not Edge.
   *
   * This will also be `true` for Chrome on iOS, which will have different support
   * as it is actually Safari under the hood.
   *
   * Deprecated, as the behaviour to not match Edge was to prevent Legacy Edge's UA matching.
   * IS_CHROMIUM should be used instead.
   * "Chromium but not Edge" could be explicitly tested with IS_CHROMIUM && !IS_EDGE
   *
   * @static
   * @deprecated
   * @type {Boolean}
   */
  let IS_CHROME = false;

  /**
   * The detected Chromium version - or `null`.
   *
   * @static
   * @type {number|null}
   */
  let CHROMIUM_VERSION = null;

  /**
   * The detected Google Chrome version - or `null`.
   * This has always been the _Chromium_ version, i.e. would return on Chromium Edge.
   * Deprecated, use CHROMIUM_VERSION instead.
   *
   * @static
   * @deprecated
   * @type {number|null}
   */
  let CHROME_VERSION = null;

  /**
   * The detected Internet Explorer version - or `null`.
   *
   * @static
   * @deprecated
   * @type {number|null}
   */
  let IE_VERSION = null;

  /**
   * Whether or not this is desktop Safari.
   *
   * @static
   * @type {Boolean}
   */
  let IS_SAFARI = false;

  /**
   * Whether or not this is a Windows machine.
   *
   * @static
   * @type {Boolean}
   */
  let IS_WINDOWS = false;

  /**
   * Whether or not this device is an iPad.
   *
   * @static
   * @type {Boolean}
   */
  let IS_IPAD = false;

  /**
   * Whether or not this device is an iPhone.
   *
   * @static
   * @type {Boolean}
   */
  // The Facebook app's UIWebView identifies as both an iPhone and iPad, so
  // to identify iPhones, we need to exclude iPads.
  // http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/
  let IS_IPHONE = false;

  /**
   * Whether or not this device is touch-enabled.
   *
   * @static
   * @const
   * @type {Boolean}
   */
  const TOUCH_ENABLED = Boolean(isReal() && ('ontouchstart' in window || window.navigator.maxTouchPoints || window.DocumentTouch && window.document instanceof window.DocumentTouch));
  const UAD = window.navigator && window.navigator.userAgentData;
  if (UAD) {
    // If userAgentData is present, use it instead of userAgent to avoid warnings
    // Currently only implemented on Chromium
    // userAgentData does not expose Android version, so ANDROID_VERSION remains `null`

    IS_ANDROID = UAD.platform === 'Android';
    IS_EDGE = Boolean(UAD.brands.find(b => b.brand === 'Microsoft Edge'));
    IS_CHROMIUM = Boolean(UAD.brands.find(b => b.brand === 'Chromium'));
    IS_CHROME = !IS_EDGE && IS_CHROMIUM;
    CHROMIUM_VERSION = CHROME_VERSION = (UAD.brands.find(b => b.brand === 'Chromium') || {}).version || null;
    IS_WINDOWS = UAD.platform === 'Windows';
  }

  // If the browser is not Chromium, either userAgentData is not present which could be an old Chromium browser,
  //  or it's a browser that has added userAgentData since that we don't have tests for yet. In either case,
  // the checks need to be made agiainst the regular userAgent string.
  if (!IS_CHROMIUM) {
    const USER_AGENT = window.navigator && window.navigator.userAgent || '';
    IS_IPOD = /iPod/i.test(USER_AGENT);
    IOS_VERSION = function () {
      const match = USER_AGENT.match(/OS (\d+)_/i);
      if (match && match[1]) {
        return match[1];
      }
      return null;
    }();
    IS_ANDROID = /Android/i.test(USER_AGENT);
    ANDROID_VERSION = function () {
      // This matches Android Major.Minor.Patch versions
      // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned
      const match = USER_AGENT.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);
      if (!match) {
        return null;
      }
      const major = match[1] && parseFloat(match[1]);
      const minor = match[2] && parseFloat(match[2]);
      if (major && minor) {
        return parseFloat(match[1] + '.' + match[2]);
      } else if (major) {
        return major;
      }
      return null;
    }();
    IS_FIREFOX = /Firefox/i.test(USER_AGENT);
    IS_EDGE = /Edg/i.test(USER_AGENT);
    IS_CHROMIUM = /Chrome/i.test(USER_AGENT) || /CriOS/i.test(USER_AGENT);
    IS_CHROME = !IS_EDGE && IS_CHROMIUM;
    CHROMIUM_VERSION = CHROME_VERSION = function () {
      const match = USER_AGENT.match(/(Chrome|CriOS)\/(\d+)/);
      if (match && match[2]) {
        return parseFloat(match[2]);
      }
      return null;
    }();
    IE_VERSION = function () {
      const result = /MSIE\s(\d+)\.\d/.exec(USER_AGENT);
      let version = result && parseFloat(result[1]);
      if (!version && /Trident\/7.0/i.test(USER_AGENT) && /rv:11.0/.test(USER_AGENT)) {
        // IE 11 has a different user agent string than other IE versions
        version = 11.0;
      }
      return version;
    }();
    IS_SAFARI = /Safari/i.test(USER_AGENT) && !IS_CHROME && !IS_ANDROID && !IS_EDGE;
    IS_WINDOWS = /Windows/i.test(USER_AGENT);
    IS_IPAD = /iPad/i.test(USER_AGENT) || IS_SAFARI && TOUCH_ENABLED && !/iPhone/i.test(USER_AGENT);
    IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;
  }

  /**
   * Whether or not this is an iOS device.
   *
   * @static
   * @const
   * @type {Boolean}
   */
  const IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;

  /**
   * Whether or not this is any flavor of Safari - including iOS.
   *
   * @static
   * @const
   * @type {Boolean}
   */
  const IS_ANY_SAFARI = (IS_SAFARI || IS_IOS) && !IS_CHROME;

  var browser = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get IS_IPOD () { return IS_IPOD; },
    get IOS_VERSION () { return IOS_VERSION; },
    get IS_ANDROID () { return IS_ANDROID; },
    get ANDROID_VERSION () { return ANDROID_VERSION; },
    get IS_FIREFOX () { return IS_FIREFOX; },
    get IS_EDGE () { return IS_EDGE; },
    get IS_CHROMIUM () { return IS_CHROMIUM; },
    get IS_CHROME () { return IS_CHROME; },
    get CHROMIUM_VERSION () { return CHROMIUM_VERSION; },
    get CHROME_VERSION () { return CHROME_VERSION; },
    get IE_VERSION () { return IE_VERSION; },
    get IS_SAFARI () { return IS_SAFARI; },
    get IS_WINDOWS () { return IS_WINDOWS; },
    get IS_IPAD () { return IS_IPAD; },
    get IS_IPHONE () { return IS_IPHONE; },
    TOUCH_ENABLED: TOUCH_ENABLED,
    IS_IOS: IS_IOS,
    IS_ANY_SAFARI: IS_ANY_SAFARI
  });

  /**
   * @file dom.js
   * @module dom
   */

  /**
   * Detect if a value is a string with any non-whitespace characters.
   *
   * @private
   * @param  {string} str
   *         The string to check
   *
   * @return {boolean}
   *         Will be `true` if the string is non-blank, `false` otherwise.
   *
   */
  function isNonBlankString(str) {
    // we use str.trim as it will trim any whitespace characters
    // from the front or back of non-whitespace characters. aka
    // Any string that contains non-whitespace characters will
    // still contain them after `trim` but whitespace only strings
    // will have a length of 0, failing this check.
    return typeof str === 'string' && Boolean(str.trim());
  }

  /**
   * Throws an error if the passed string has whitespace. This is used by
   * class methods to be relatively consistent with the classList API.
   *
   * @private
   * @param  {string} str
   *         The string to check for whitespace.
   *
   * @throws {Error}
   *         Throws an error if there is whitespace in the string.
   */
  function throwIfWhitespace(str) {
    // str.indexOf instead of regex because str.indexOf is faster performance wise.
    if (str.indexOf(' ') >= 0) {
      throw new Error('class has illegal whitespace characters');
    }
  }

  /**
   * Whether the current DOM interface appears to be real (i.e. not simulated).
   *
   * @return {boolean}
   *         Will be `true` if the DOM appears to be real, `false` otherwise.
   */
  function isReal() {
    // Both document and window will never be undefined thanks to `global`.
    return document === window.document;
  }

  /**
   * Determines, via duck typing, whether or not a value is a DOM element.
   *
   * @param  {*} value
   *         The value to check.
   *
   * @return {boolean}
   *         Will be `true` if the value is a DOM element, `false` otherwise.
   */
  function isEl(value) {
    return isObject(value) && value.nodeType === 1;
  }

  /**
   * Determines if the current DOM is embedded in an iframe.
   *
   * @return {boolean}
   *         Will be `true` if the DOM is embedded in an iframe, `false`
   *         otherwise.
   */
  function isInFrame() {
    // We need a try/catch here because Safari will throw errors when attempting
    // to get either `parent` or `self`
    try {
      return window.parent !== window.self;
    } catch (x) {
      return true;
    }
  }

  /**
   * Creates functions to query the DOM using a given method.
   *
   * @private
   * @param   {string} method
   *          The method to create the query with.
   *
   * @return  {Function}
   *          The query method
   */
  function createQuerier(method) {
    return function (selector, context) {
      if (!isNonBlankString(selector)) {
        return document[method](null);
      }
      if (isNonBlankString(context)) {
        context = document.querySelector(context);
      }
      const ctx = isEl(context) ? context : document;
      return ctx[method] && ctx[method](selector);
    };
  }

  /**
   * Creates an element and applies properties, attributes, and inserts content.
   *
   * @param  {string} [tagName='div']
   *         Name of tag to be created.
   *
   * @param  {Object} [properties={}]
   *         Element properties to be applied.
   *
   * @param  {Object} [attributes={}]
   *         Element attributes to be applied.
   *
   * @param {ContentDescriptor} [content]
   *        A content descriptor object.
   *
   * @return {Element}
   *         The element that was created.
   */
  function createEl(tagName = 'div', properties = {}, attributes = {}, content) {
    const el = document.createElement(tagName);
    Object.getOwnPropertyNames(properties).forEach(function (propName) {
      const val = properties[propName];

      // Handle textContent since it's not supported everywhere and we have a
      // method for it.
      if (propName === 'textContent') {
        textContent(el, val);
      } else if (el[propName] !== val || propName === 'tabIndex') {
        el[propName] = val;
      }
    });
    Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
      el.setAttribute(attrName, attributes[attrName]);
    });
    if (content) {
      appendContent(el, content);
    }
    return el;
  }

  /**
   * Injects text into an element, replacing any existing contents entirely.
   *
   * @param  {Element} el
   *         The element to add text content into
   *
   * @param  {string} text
   *         The text content to add.
   *
   * @return {Element}
   *         The element with added text content.
   */
  function textContent(el, text) {
    if (typeof el.textContent === 'undefined') {
      el.innerText = text;
    } else {
      el.textContent = text;
    }
    return el;
  }

  /**
   * Insert an element as the first child node of another
   *
   * @param {Element} child
   *        Element to insert
   *
   * @param {Element} parent
   *        Element to insert child into
   */
  function prependTo(child, parent) {
    if (parent.firstChild) {
      parent.insertBefore(child, parent.firstChild);
    } else {
      parent.appendChild(child);
    }
  }

  /**
   * Check if an element has a class name.
   *
   * @param  {Element} element
   *         Element to check
   *
   * @param  {string} classToCheck
   *         Class name to check for
   *
   * @return {boolean}
   *         Will be `true` if the element has a class, `false` otherwise.
   *
   * @throws {Error}
   *         Throws an error if `classToCheck` has white space.
   */
  function hasClass(element, classToCheck) {
    throwIfWhitespace(classToCheck);
    return element.classList.contains(classToCheck);
  }

  /**
   * Add a class name to an element.
   *
   * @param  {Element} element
   *         Element to add class name to.
   *
   * @param  {...string} classesToAdd
   *         One or more class name to add.
   *
   * @return {Element}
   *         The DOM element with the added class name.
   */
  function addClass(element, ...classesToAdd) {
    element.classList.add(...classesToAdd.reduce((prev, current) => prev.concat(current.split(/\s+/)), []));
    return element;
  }

  /**
   * Remove a class name from an element.
   *
   * @param  {Element} element
   *         Element to remove a class name from.
   *
   * @param  {...string} classesToRemove
   *         One or more class name to remove.
   *
   * @return {Element}
   *         The DOM element with class name removed.
   */
  function removeClass(element, ...classesToRemove) {
    // Protect in case the player gets disposed
    if (!element) {
      log.warn("removeClass was called with an element that doesn't exist");
      return null;
    }
    element.classList.remove(...classesToRemove.reduce((prev, current) => prev.concat(current.split(/\s+/)), []));
    return element;
  }

  /**
   * The callback definition for toggleClass.
   *
   * @callback module:dom~PredicateCallback
   * @param    {Element} element
   *           The DOM element of the Component.
   *
   * @param    {string} classToToggle
   *           The `className` that wants to be toggled
   *
   * @return   {boolean|undefined}
   *           If `true` is returned, the `classToToggle` will be added to the
   *           `element`. If `false`, the `classToToggle` will be removed from
   *           the `element`. If `undefined`, the callback will be ignored.
   */

  /**
   * Adds or removes a class name to/from an element depending on an optional
   * condition or the presence/absence of the class name.
   *
   * @param  {Element} element
   *         The element to toggle a class name on.
   *
   * @param  {string} classToToggle
   *         The class that should be toggled.
   *
   * @param  {boolean|module:dom~PredicateCallback} [predicate]
   *         See the return value for {@link module:dom~PredicateCallback}
   *
   * @return {Element}
   *         The element with a class that has been toggled.
   */
  function toggleClass(element, classToToggle, predicate) {
    if (typeof predicate === 'function') {
      predicate = predicate(element, classToToggle);
    }
    if (typeof predicate !== 'boolean') {
      predicate = undefined;
    }
    classToToggle.split(/\s+/).forEach(className => element.classList.toggle(className, predicate));
    return element;
  }

  /**
   * Apply attributes to an HTML element.
   *
   * @param {Element} el
   *        Element to add attributes to.
   *
   * @param {Object} [attributes]
   *        Attributes to be applied.
   */
  function setAttributes(el, attributes) {
    Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
      const attrValue = attributes[attrName];
      if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {
        el.removeAttribute(attrName);
      } else {
        el.setAttribute(attrName, attrValue === true ? '' : attrValue);
      }
    });
  }

  /**
   * Get an element's attribute values, as defined on the HTML tag.
   *
   * Attributes are not the same as properties. They're defined on the tag
   * or with setAttribute.
   *
   * @param  {Element} tag
   *         Element from which to get tag attributes.
   *
   * @return {Object}
   *         All attributes of the element. Boolean attributes will be `true` or
   *         `false`, others will be strings.
   */
  function getAttributes(tag) {
    const obj = {};

    // known boolean attributes
    // we can check for matching boolean properties, but not all browsers
    // and not all tags know about these attributes, so, we still want to check them manually
    const knownBooleans = ',' + 'autoplay,controls,playsinline,loop,muted,default,defaultMuted' + ',';
    if (tag && tag.attributes && tag.attributes.length > 0) {
      const attrs = tag.attributes;
      for (let i = attrs.length - 1; i >= 0; i--) {
        const attrName = attrs[i].name;
        let attrVal = attrs[i].value;

        // check for known booleans
        // the matching element property will return a value for typeof
        if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(',' + attrName + ',') !== -1) {
          // the value of an included boolean attribute is typically an empty
          // string ('') which would equal false if we just check for a false value.
          // we also don't want support bad code like autoplay='false'
          attrVal = attrVal !== null ? true : false;
        }
        obj[attrName] = attrVal;
      }
    }
    return obj;
  }

  /**
   * Get the value of an element's attribute.
   *
   * @param {Element} el
   *        A DOM element.
   *
   * @param {string} attribute
   *        Attribute to get the value of.
   *
   * @return {string}
   *         The value of the attribute.
   */
  function getAttribute(el, attribute) {
    return el.getAttribute(attribute);
  }

  /**
   * Set the value of an element's attribute.
   *
   * @param {Element} el
   *        A DOM element.
   *
   * @param {string} attribute
   *        Attribute to set.
   *
   * @param {string} value
   *        Value to set the attribute to.
   */
  function setAttribute(el, attribute, value) {
    el.setAttribute(attribute, value);
  }

  /**
   * Remove an element's attribute.
   *
   * @param {Element} el
   *        A DOM element.
   *
   * @param {string} attribute
   *        Attribute to remove.
   */
  function removeAttribute(el, attribute) {
    el.removeAttribute(attribute);
  }

  /**
   * Attempt to block the ability to select text.
   */
  function blockTextSelection() {
    document.body.focus();
    document.onselectstart = function () {
      return false;
    };
  }

  /**
   * Turn off text selection blocking.
   */
  function unblockTextSelection() {
    document.onselectstart = function () {
      return true;
    };
  }

  /**
   * Identical to the native `getBoundingClientRect` function, but ensures that
   * the method is supported at all (it is in all browsers we claim to support)
   * and that the element is in the DOM before continuing.
   *
   * This wrapper function also shims properties which are not provided by some
   * older browsers (namely, IE8).
   *
   * Additionally, some browsers do not support adding properties to a
   * `ClientRect`/`DOMRect` object; so, we shallow-copy it with the standard
   * properties (except `x` and `y` which are not widely supported). This helps
   * avoid implementations where keys are non-enumerable.
   *
   * @param  {Element} el
   *         Element whose `ClientRect` we want to calculate.
   *
   * @return {Object|undefined}
   *         Always returns a plain object - or `undefined` if it cannot.
   */
  function getBoundingClientRect(el) {
    if (el && el.getBoundingClientRect && el.parentNode) {
      const rect = el.getBoundingClientRect();
      const result = {};
      ['bottom', 'height', 'left', 'right', 'top', 'width'].forEach(k => {
        if (rect[k] !== undefined) {
          result[k] = rect[k];
        }
      });
      if (!result.height) {
        result.height = parseFloat(computedStyle(el, 'height'));
      }
      if (!result.width) {
        result.width = parseFloat(computedStyle(el, 'width'));
      }
      return result;
    }
  }

  /**
   * Represents the position of a DOM element on the page.
   *
   * @typedef  {Object} module:dom~Position
   *
   * @property {number} left
   *           Pixels to the left.
   *
   * @property {number} top
   *           Pixels from the top.
   */

  /**
   * Get the position of an element in the DOM.
   *
   * Uses `getBoundingClientRect` technique from John Resig.
   *
   * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/
   *
   * @param  {Element} el
   *         Element from which to get offset.
   *
   * @return {module:dom~Position}
   *         The position of the element that was passed in.
   */
  function findPosition(el) {
    if (!el || el && !el.offsetParent) {
      return {
        left: 0,
        top: 0,
        width: 0,
        height: 0
      };
    }
    const width = el.offsetWidth;
    const height = el.offsetHeight;
    let left = 0;
    let top = 0;
    while (el.offsetParent && el !== document[FullscreenApi.fullscreenElement]) {
      left += el.offsetLeft;
      top += el.offsetTop;
      el = el.offsetParent;
    }
    return {
      left,
      top,
      width,
      height
    };
  }

  /**
   * Represents x and y coordinates for a DOM element or mouse pointer.
   *
   * @typedef  {Object} module:dom~Coordinates
   *
   * @property {number} x
   *           x coordinate in pixels
   *
   * @property {number} y
   *           y coordinate in pixels
   */

  /**
   * Get the pointer position within an element.
   *
   * The base on the coordinates are the bottom left of the element.
   *
   * @param  {Element} el
   *         Element on which to get the pointer position on.
   *
   * @param  {Event} event
   *         Event object.
   *
   * @return {module:dom~Coordinates}
   *         A coordinates object corresponding to the mouse position.
   *
   */
  function getPointerPosition(el, event) {
    const translated = {
      x: 0,
      y: 0
    };
    if (IS_IOS) {
      let item = el;
      while (item && item.nodeName.toLowerCase() !== 'html') {
        const transform = computedStyle(item, 'transform');
        if (/^matrix/.test(transform)) {
          const values = transform.slice(7, -1).split(/,\s/).map(Number);
          translated.x += values[4];
          translated.y += values[5];
        } else if (/^matrix3d/.test(transform)) {
          const values = transform.slice(9, -1).split(/,\s/).map(Number);
          translated.x += values[12];
          translated.y += values[13];
        }
        item = item.parentNode;
      }
    }
    const position = {};
    const boxTarget = findPosition(event.target);
    const box = findPosition(el);
    const boxW = box.width;
    const boxH = box.height;
    let offsetY = event.offsetY - (box.top - boxTarget.top);
    let offsetX = event.offsetX - (box.left - boxTarget.left);
    if (event.changedTouches) {
      offsetX = event.changedTouches[0].pageX - box.left;
      offsetY = event.changedTouches[0].pageY + box.top;
      if (IS_IOS) {
        offsetX -= translated.x;
        offsetY -= translated.y;
      }
    }
    position.y = 1 - Math.max(0, Math.min(1, offsetY / boxH));
    position.x = Math.max(0, Math.min(1, offsetX / boxW));
    return position;
  }

  /**
   * Determines, via duck typing, whether or not a value is a text node.
   *
   * @param  {*} value
   *         Check if this value is a text node.
   *
   * @return {boolean}
   *         Will be `true` if the value is a text node, `false` otherwise.
   */
  function isTextNode(value) {
    return isObject(value) && value.nodeType === 3;
  }

  /**
   * Empties the contents of an element.
   *
   * @param  {Element} el
   *         The element to empty children from
   *
   * @return {Element}
   *         The element with no children
   */
  function emptyEl(el) {
    while (el.firstChild) {
      el.removeChild(el.firstChild);
    }
    return el;
  }

  /**
   * This is a mixed value that describes content to be injected into the DOM
   * via some method. It can be of the following types:
   *
   * Type       | Description
   * -----------|-------------
   * `string`   | The value will be normalized into a text node.
   * `Element`  | The value will be accepted as-is.
   * `Text`     | A TextNode. The value will be accepted as-is.
   * `Array`    | A one-dimensional array of strings, elements, text nodes, or functions. These functions should return a string, element, or text node (any other return value, like an array, will be ignored).
   * `Function` | A function, which is expected to return a string, element, text node, or array - any of the other possible values described above. This means that a content descriptor could be a function that returns an array of functions, but those second-level functions must return strings, elements, or text nodes.
   *
   * @typedef {string|Element|Text|Array|Function} ContentDescriptor
   */

  /**
   * Normalizes content for eventual insertion into the DOM.
   *
   * This allows a wide range of content definition methods, but helps protect
   * from falling into the trap of simply writing to `innerHTML`, which could
   * be an XSS concern.
   *
   * The content for an element can be passed in multiple types and
   * combinations, whose behavior is as follows:
   *
   * @param {ContentDescriptor} content
   *        A content descriptor value.
   *
   * @return {Array}
   *         All of the content that was passed in, normalized to an array of
   *         elements or text nodes.
   */
  function normalizeContent(content) {
    // First, invoke content if it is a function. If it produces an array,
    // that needs to happen before normalization.
    if (typeof content === 'function') {
      content = content();
    }

    // Next up, normalize to an array, so one or many items can be normalized,
    // filtered, and returned.
    return (Array.isArray(content) ? content : [content]).map(value => {
      // First, invoke value if it is a function to produce a new value,
      // which will be subsequently normalized to a Node of some kind.
      if (typeof value === 'function') {
        value = value();
      }
      if (isEl(value) || isTextNode(value)) {
        return value;
      }
      if (typeof value === 'string' && /\S/.test(value)) {
        return document.createTextNode(value);
      }
    }).filter(value => value);
  }

  /**
   * Normalizes and appends content to an element.
   *
   * @param  {Element} el
   *         Element to append normalized content to.
   *
   * @param {ContentDescriptor} content
   *        A content descriptor value.
   *
   * @return {Element}
   *         The element with appended normalized content.
   */
  function appendContent(el, content) {
    normalizeContent(content).forEach(node => el.appendChild(node));
    return el;
  }

  /**
   * Normalizes and inserts content into an element; this is identical to
   * `appendContent()`, except it empties the element first.
   *
   * @param {Element} el
   *        Element to insert normalized content into.
   *
   * @param {ContentDescriptor} content
   *        A content descriptor value.
   *
   * @return {Element}
   *         The element with inserted normalized content.
   */
  function insertContent(el, content) {
    return appendContent(emptyEl(el), content);
  }

  /**
   * Check if an event was a single left click.
   *
   * @param  {Event} event
   *         Event object.
   *
   * @return {boolean}
   *         Will be `true` if a single left click, `false` otherwise.
   */
  function isSingleLeftClick(event) {
    // Note: if you create something draggable, be sure to
    // call it on both `mousedown` and `mousemove` event,
    // otherwise `mousedown` should be enough for a button

    if (event.button === undefined && event.buttons === undefined) {
      // Why do we need `buttons` ?
      // Because, middle mouse sometimes have this:
      // e.button === 0 and e.buttons === 4
      // Furthermore, we want to prevent combination click, something like
      // HOLD middlemouse then left click, that would be
      // e.button === 0, e.buttons === 5
      // just `button` is not gonna work

      // Alright, then what this block does ?
      // this is for chrome `simulate mobile devices`
      // I want to support this as well

      return true;
    }
    if (event.button === 0 && event.buttons === undefined) {
      // Touch screen, sometimes on some specific device, `buttons`
      // doesn't have anything (safari on ios, blackberry...)

      return true;
    }

    // `mouseup` event on a single left click has
    // `button` and `buttons` equal to 0
    if (event.type === 'mouseup' && event.button === 0 && event.buttons === 0) {
      return true;
    }
    if (event.button !== 0 || event.buttons !== 1) {
      // This is the reason we have those if else block above
      // if any special case we can catch and let it slide
      // we do it above, when get to here, this definitely
      // is-not-left-click

      return false;
    }
    return true;
  }

  /**
   * Finds a single DOM element matching `selector` within the optional
   * `context` of another DOM element (defaulting to `document`).
   *
   * @param  {string} selector
   *         A valid CSS selector, which will be passed to `querySelector`.
   *
   * @param  {Element|String} [context=document]
   *         A DOM element within which to query. Can also be a selector
   *         string in which case the first matching element will be used
   *         as context. If missing (or no element matches selector), falls
   *         back to `document`.
   *
   * @return {Element|null}
   *         The element that was found or null.
   */
  const $ = createQuerier('querySelector');

  /**
   * Finds a all DOM elements matching `selector` within the optional
   * `context` of another DOM element (defaulting to `document`).
   *
   * @param  {string} selector
   *         A valid CSS selector, which will be passed to `querySelectorAll`.
   *
   * @param  {Element|String} [context=document]
   *         A DOM element within which to query. Can also be a selector
   *         string in which case the first matching element will be used
   *         as context. If missing (or no element matches selector), falls
   *         back to `document`.
   *
   * @return {NodeList}
   *         A element list of elements that were found. Will be empty if none
   *         were found.
   *
   */
  const $$ = createQuerier('querySelectorAll');

  /**
   * A safe getComputedStyle.
   *
   * This is needed because in Firefox, if the player is loaded in an iframe with
   * `display:none`, then `getComputedStyle` returns `null`, so, we do a
   * null-check to make sure that the player doesn't break in these cases.
   *
   * @param    {Element} el
   *           The element you want the computed style of
   *
   * @param    {string} prop
   *           The property name you want
   *
   * @see      https://bugzilla.mozilla.org/show_bug.cgi?id=548397
   */
  function computedStyle(el, prop) {
    if (!el || !prop) {
      return '';
    }
    if (typeof window.getComputedStyle === 'function') {
      let computedStyleValue;
      try {
        computedStyleValue = window.getComputedStyle(el);
      } catch (e) {
        return '';
      }
      return computedStyleValue ? computedStyleValue.getPropertyValue(prop) || computedStyleValue[prop] : '';
    }
    return '';
  }

  var Dom = /*#__PURE__*/Object.freeze({
    __proto__: null,
    isReal: isReal,
    isEl: isEl,
    isInFrame: isInFrame,
    createEl: createEl,
    textContent: textContent,
    prependTo: prependTo,
    hasClass: hasClass,
    addClass: addClass,
    removeClass: removeClass,
    toggleClass: toggleClass,
    setAttributes: setAttributes,
    getAttributes: getAttributes,
    getAttribute: getAttribute,
    setAttribute: setAttribute,
    removeAttribute: removeAttribute,
    blockTextSelection: blockTextSelection,
    unblockTextSelection: unblockTextSelection,
    getBoundingClientRect: getBoundingClientRect,
    findPosition: findPosition,
    getPointerPosition: getPointerPosition,
    isTextNode: isTextNode,
    emptyEl: emptyEl,
    normalizeContent: normalizeContent,
    appendContent: appendContent,
    insertContent: insertContent,
    isSingleLeftClick: isSingleLeftClick,
    $: $,
    $$: $$,
    computedStyle: computedStyle
  });

  /**
   * @file setup.js - Functions for setting up a player without
   * user interaction based on the data-setup `attribute` of the video tag.
   *
   * @module setup
   */
  let _windowLoaded = false;
  let videojs$1;

  /**
   * Set up any tags that have a data-setup `attribute` when the player is started.
   */
  const autoSetup = function () {
    if (videojs$1.options.autoSetup === false) {
      return;
    }
    const vids = Array.prototype.slice.call(document.getElementsByTagName('video'));
    const audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));
    const divs = Array.prototype.slice.call(document.getElementsByTagName('video-js'));
    const mediaEls = vids.concat(audios, divs);

    // Check if any media elements exist
    if (mediaEls && mediaEls.length > 0) {
      for (let i = 0, e = mediaEls.length; i < e; i++) {
        const mediaEl = mediaEls[i];

        // Check if element exists, has getAttribute func.
        if (mediaEl && mediaEl.getAttribute) {
          // Make sure this player hasn't already been set up.
          if (mediaEl.player === undefined) {
            const options = mediaEl.getAttribute('data-setup');

            // Check if data-setup attr exists.
            // We only auto-setup if they've added the data-setup attr.
            if (options !== null) {
              // Create new video.js instance.
              videojs$1(mediaEl);
            }
          }

          // If getAttribute isn't defined, we need to wait for the DOM.
        } else {
          autoSetupTimeout(1);
          break;
        }
      }

      // No videos were found, so keep looping unless page is finished loading.
    } else if (!_windowLoaded) {
      autoSetupTimeout(1);
    }
  };

  /**
   * Wait until the page is loaded before running autoSetup. This will be called in
   * autoSetup if `hasLoaded` returns false.
   *
   * @param {number} wait
   *        How long to wait in ms
   *
   * @param {module:videojs} [vjs]
   *        The videojs library function
   */
  function autoSetupTimeout(wait, vjs) {
    // Protect against breakage in non-browser environments
    if (!isReal()) {
      return;
    }
    if (vjs) {
      videojs$1 = vjs;
    }
    window.setTimeout(autoSetup, wait);
  }

  /**
   * Used to set the internal tracking of window loaded state to true.
   *
   * @private
   */
  function setWindowLoaded() {
    _windowLoaded = true;
    window.removeEventListener('load', setWindowLoaded);
  }
  if (isReal()) {
    if (document.readyState === 'complete') {
      setWindowLoaded();
    } else {
      /**
       * Listen for the load event on window, and set _windowLoaded to true.
       *
       * We use a standard event listener here to avoid incrementing the GUID
       * before any players are created.
       *
       * @listens load
       */
      window.addEventListener('load', setWindowLoaded);
    }
  }

  /**
   * @file stylesheet.js
   * @module stylesheet
   */

  /**
   * Create a DOM style element given a className for it.
   *
   * @param {string} className
   *        The className to add to the created style element.
   *
   * @return {Element}
   *         The element that was created.
   */
  const createStyleElement = function (className) {
    const style = document.createElement('style');
    style.className = className;
    return style;
  };

  /**
   * Add text to a DOM element.
   *
   * @param {Element} el
   *        The Element to add text content to.
   *
   * @param {string} content
   *        The text to add to the element.
   */
  const setTextContent = function (el, content) {
    if (el.styleSheet) {
      el.styleSheet.cssText = content;
    } else {
      el.textContent = content;
    }
  };

  /**
   * @file dom-data.js
   * @module dom-data
   */

  /**
   * Element Data Store.
   *
   * Allows for binding data to an element without putting it directly on the
   * element. Ex. Event listeners are stored here.
   * (also from jsninja.com, slightly modified and updated for closure compiler)
   *
   * @type {Object}
   * @private
   */
  var DomData = new WeakMap();

  /**
   * @file guid.js
   * @module guid
   */

  // Default value for GUIDs. This allows us to reset the GUID counter in tests.
  //
  // The initial GUID is 3 because some users have come to rely on the first
  // default player ID ending up as `vjs_video_3`.
  //
  // See: https://github.com/videojs/video.js/pull/6216
  const _initialGuid = 3;

  /**
   * Unique ID for an element or function
   *
   * @type {Number}
   */
  let _guid = _initialGuid;

  /**
   * Get a unique auto-incrementing ID by number that has not been returned before.
   *
   * @return {number}
   *         A new unique ID.
   */
  function newGUID() {
    return _guid++;
  }

  /**
   * @file events.js. An Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)
   * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)
   * This should work very similarly to jQuery's events, however it's based off the book version which isn't as
   * robust as jquery's, so there's probably some differences.
   *
   * @file events.js
   * @module events
   */

  /**
   * Clean up the listener cache and dispatchers
   *
   * @param {Element|Object} elem
   *        Element to clean up
   *
   * @param {string} type
   *        Type of event to clean up
   */
  function _cleanUpEvents(elem, type) {
    if (!DomData.has(elem)) {
      return;
    }
    const data = DomData.get(elem);

    // Remove the events of a particular type if there are none left
    if (data.handlers[type].length === 0) {
      delete data.handlers[type];
      // data.handlers[type] = null;
      // Setting to null was causing an error with data.handlers

      // Remove the meta-handler from the element
      if (elem.removeEventListener) {
        elem.removeEventListener(type, data.dispatcher, false);
      } else if (elem.detachEvent) {
        elem.detachEvent('on' + type, data.dispatcher);
      }
    }

    // Remove the events object if there are no types left
    if (Object.getOwnPropertyNames(data.handlers).length <= 0) {
      delete data.handlers;
      delete data.dispatcher;
      delete data.disabled;
    }

    // Finally remove the element data if there is no data left
    if (Object.getOwnPropertyNames(data).length === 0) {
      DomData.delete(elem);
    }
  }

  /**
   * Loops through an array of event types and calls the requested method for each type.
   *
   * @param {Function} fn
   *        The event method we want to use.
   *
   * @param {Element|Object} elem
   *        Element or object to bind listeners to
   *
   * @param {string} type
   *        Type of event to bind to.
   *
   * @param {Function} callback
   *        Event listener.
   */
  function _handleMultipleEvents(fn, elem, types, callback) {
    types.forEach(function (type) {
      // Call the event method for each one of the types
      fn(elem, type, callback);
    });
  }

  /**
   * Fix a native event to have standard property values
   *
   * @param {Object} event
   *        Event object to fix.
   *
   * @return {Object}
   *         Fixed event object.
   */
  function fixEvent(event) {
    if (event.fixed_) {
      return event;
    }
    function returnTrue() {
      return true;
    }
    function returnFalse() {
      return false;
    }

    // Test if fixing up is needed
    // Used to check if !event.stopPropagation instead of isPropagationStopped
    // But native events return true for stopPropagation, but don't have
    // other expected methods like isPropagationStopped. Seems to be a problem
    // with the Javascript Ninja code. So we're just overriding all events now.
    if (!event || !event.isPropagationStopped || !event.isImmediatePropagationStopped) {
      const old = event || window.event;
      event = {};
      // Clone the old object so that we can modify the values event = {};
      // IE8 Doesn't like when you mess with native event properties
      // Firefox returns false for event.hasOwnProperty('type') and other props
      //  which makes copying more difficult.
      // TODO: Probably best to create a whitelist of event props
      for (const key in old) {
        // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y
        // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation
        // and webkitMovementX/Y
        // Lighthouse complains if Event.path is copied
        if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation' && key !== 'webkitMovementX' && key !== 'webkitMovementY' && key !== 'path') {
          // Chrome 32+ warns if you try to copy deprecated returnValue, but
          // we still want to if preventDefault isn't supported (IE8).
          if (!(key === 'returnValue' && old.preventDefault)) {
            event[key] = old[key];
          }
        }
      }

      // The event occurred on this element
      if (!event.target) {
        event.target = event.srcElement || document;
      }

      // Handle which other element the event is related to
      if (!event.relatedTarget) {
        event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;
      }

      // Stop the default browser action
      event.preventDefault = function () {
        if (old.preventDefault) {
          old.preventDefault();
        }
        event.returnValue = false;
        old.returnValue = false;
        event.defaultPrevented = true;
      };
      event.defaultPrevented = false;

      // Stop the event from bubbling
      event.stopPropagation = function () {
        if (old.stopPropagation) {
          old.stopPropagation();
        }
        event.cancelBubble = true;
        old.cancelBubble = true;
        event.isPropagationStopped = returnTrue;
      };
      event.isPropagationStopped = returnFalse;

      // Stop the event from bubbling and executing other handlers
      event.stopImmediatePropagation = function () {
        if (old.stopImmediatePropagation) {
          old.stopImmediatePropagation();
        }
        event.isImmediatePropagationStopped = returnTrue;
        event.stopPropagation();
      };
      event.isImmediatePropagationStopped = returnFalse;

      // Handle mouse position
      if (event.clientX !== null && event.clientX !== undefined) {
        const doc = document.documentElement;
        const body = document.body;
        event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
        event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
      }

      // Handle key presses
      event.which = event.charCode || event.keyCode;

      // Fix button for mouse clicks:
      // 0 == left; 1 == middle; 2 == right
      if (event.button !== null && event.button !== undefined) {
        // The following is disabled because it does not pass videojs-standard
        // and... yikes.
        /* eslint-disable */
        event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;
        /* eslint-enable */
      }
    }

    event.fixed_ = true;
    // Returns fixed-up instance
    return event;
  }

  /**
   * Whether passive event listeners are supported
   */
  let _supportsPassive;
  const supportsPassive = function () {
    if (typeof _supportsPassive !== 'boolean') {
      _supportsPassive = false;
      try {
        const opts = Object.defineProperty({}, 'passive', {
          get() {
            _supportsPassive = true;
          }
        });
        window.addEventListener('test', null, opts);
        window.removeEventListener('test', null, opts);
      } catch (e) {
        // disregard
      }
    }
    return _supportsPassive;
  };

  /**
   * Touch events Chrome expects to be passive
   */
  const passiveEvents = ['touchstart', 'touchmove'];

  /**
   * Add an event listener to element
   * It stores the handler function in a separate cache object
   * and adds a generic handler to the element's event,
   * along with a unique id (guid) to the element.
   *
   * @param {Element|Object} elem
   *        Element or object to bind listeners to
   *
   * @param {string|string[]} type
   *        Type of event to bind to.
   *
   * @param {Function} fn
   *        Event listener.
   */
  function on(elem, type, fn) {
    if (Array.isArray(type)) {
      return _handleMultipleEvents(on, elem, type, fn);
    }
    if (!DomData.has(elem)) {
      DomData.set(elem, {});
    }
    const data = DomData.get(elem);

    // We need a place to store all our handler data
    if (!data.handlers) {
      data.handlers = {};
    }
    if (!data.handlers[type]) {
      data.handlers[type] = [];
    }
    if (!fn.guid) {
      fn.guid = newGUID();
    }
    data.handlers[type].push(fn);
    if (!data.dispatcher) {
      data.disabled = false;
      data.dispatcher = function (event, hash) {
        if (data.disabled) {
          return;
        }
        event = fixEvent(event);
        const handlers = data.handlers[event.type];
        if (handlers) {
          // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.
          const handlersCopy = handlers.slice(0);
          for (let m = 0, n = handlersCopy.length; m < n; m++) {
            if (event.isImmediatePropagationStopped()) {
              break;
            } else {
              try {
                handlersCopy[m].call(elem, event, hash);
              } catch (e) {
                log.error(e);
              }
            }
          }
        }
      };
    }
    if (data.handlers[type].length === 1) {
      if (elem.addEventListener) {
        let options = false;
        if (supportsPassive() && passiveEvents.indexOf(type) > -1) {
          options = {
            passive: true
          };
        }
        elem.addEventListener(type, data.dispatcher, options);
      } else if (elem.attachEvent) {
        elem.attachEvent('on' + type, data.dispatcher);
      }
    }
  }

  /**
   * Removes event listeners from an element
   *
   * @param {Element|Object} elem
   *        Object to remove listeners from.
   *
   * @param {string|string[]} [type]
   *        Type of listener to remove. Don't include to remove all events from element.
   *
   * @param {Function} [fn]
   *        Specific listener to remove. Don't include to remove listeners for an event
   *        type.
   */
  function off(elem, type, fn) {
    // Don't want to add a cache object through getElData if not needed
    if (!DomData.has(elem)) {
      return;
    }
    const data = DomData.get(elem);

    // If no events exist, nothing to unbind
    if (!data.handlers) {
      return;
    }
    if (Array.isArray(type)) {
      return _handleMultipleEvents(off, elem, type, fn);
    }

    // Utility function
    const removeType = function (el, t) {
      data.handlers[t] = [];
      _cleanUpEvents(el, t);
    };

    // Are we removing all bound events?
    if (type === undefined) {
      for (const t in data.handlers) {
        if (Object.prototype.hasOwnProperty.call(data.handlers || {}, t)) {
          removeType(elem, t);
        }
      }
      return;
    }
    const handlers = data.handlers[type];

    // If no handlers exist, nothing to unbind
    if (!handlers) {
      return;
    }

    // If no listener was provided, remove all listeners for type
    if (!fn) {
      removeType(elem, type);
      return;
    }

    // We're only removing a single handler
    if (fn.guid) {
      for (let n = 0; n < handlers.length; n++) {
        if (handlers[n].guid === fn.guid) {
          handlers.splice(n--, 1);
        }
      }
    }
    _cleanUpEvents(elem, type);
  }

  /**
   * Trigger an event for an element
   *
   * @param {Element|Object} elem
   *        Element to trigger an event on
   *
   * @param {EventTarget~Event|string} event
   *        A string (the type) or an event object with a type attribute
   *
   * @param {Object} [hash]
   *        data hash to pass along with the event
   *
   * @return {boolean|undefined}
   *         Returns the opposite of `defaultPrevented` if default was
   *         prevented. Otherwise, returns `undefined`
   */
  function trigger(elem, event, hash) {
    // Fetches element data and a reference to the parent (for bubbling).
    // Don't want to add a data object to cache for every parent,
    // so checking hasElData first.
    const elemData = DomData.has(elem) ? DomData.get(elem) : {};
    const parent = elem.parentNode || elem.ownerDocument;
    // type = event.type || event,
    // handler;

    // If an event name was passed as a string, creates an event out of it
    if (typeof event === 'string') {
      event = {
        type: event,
        target: elem
      };
    } else if (!event.target) {
      event.target = elem;
    }

    // Normalizes the event properties.
    event = fixEvent(event);

    // If the passed element has a dispatcher, executes the established handlers.
    if (elemData.dispatcher) {
      elemData.dispatcher.call(elem, event, hash);
    }

    // Unless explicitly stopped or the event does not bubble (e.g. media events)
    // recursively calls this function to bubble the event up the DOM.
    if (parent && !event.isPropagationStopped() && event.bubbles === true) {
      trigger.call(null, parent, event, hash);

      // If at the top of the DOM, triggers the default action unless disabled.
    } else if (!parent && !event.defaultPrevented && event.target && event.target[event.type]) {
      if (!DomData.has(event.target)) {
        DomData.set(event.target, {});
      }
      const targetData = DomData.get(event.target);

      // Checks if the target has a default action for this event.
      if (event.target[event.type]) {
        // Temporarily disables event dispatching on the target as we have already executed the handler.
        targetData.disabled = true;
        // Executes the default action.
        if (typeof event.target[event.type] === 'function') {
          event.target[event.type]();
        }
        // Re-enables event dispatching.
        targetData.disabled = false;
      }
    }

    // Inform the triggerer if the default was prevented by returning false
    return !event.defaultPrevented;
  }

  /**
   * Trigger a listener only once for an event.
   *
   * @param {Element|Object} elem
   *        Element or object to bind to.
   *
   * @param {string|string[]} type
   *        Name/type of event
   *
   * @param {Event~EventListener} fn
   *        Event listener function
   */
  function one(elem, type, fn) {
    if (Array.isArray(type)) {
      return _handleMultipleEvents(one, elem, type, fn);
    }
    const func = function () {
      off(elem, type, func);
      fn.apply(this, arguments);
    };

    // copy the guid to the new function so it can removed using the original function's ID
    func.guid = fn.guid = fn.guid || newGUID();
    on(elem, type, func);
  }

  /**
   * Trigger a listener only once and then turn if off for all
   * configured events
   *
   * @param {Element|Object} elem
   *        Element or object to bind to.
   *
   * @param {string|string[]} type
   *        Name/type of event
   *
   * @param {Event~EventListener} fn
   *        Event listener function
   */
  function any(elem, type, fn) {
    const func = function () {
      off(elem, type, func);
      fn.apply(this, arguments);
    };

    // copy the guid to the new function so it can removed using the original function's ID
    func.guid = fn.guid = fn.guid || newGUID();

    // multiple ons, but one off for everything
    on(elem, type, func);
  }

  var Events = /*#__PURE__*/Object.freeze({
    __proto__: null,
    fixEvent: fixEvent,
    on: on,
    off: off,
    trigger: trigger,
    one: one,
    any: any
  });

  /**
   * @file fn.js
   * @module fn
   */
  const UPDATE_REFRESH_INTERVAL = 30;

  /**
   * A private, internal-only function for changing the context of a function.
   *
   * It also stores a unique id on the function so it can be easily removed from
   * events.
   *
   * @private
   * @function
   * @param    {*} context
   *           The object to bind as scope.
   *
   * @param    {Function} fn
   *           The function to be bound to a scope.
   *
   * @param    {number} [uid]
   *           An optional unique ID for the function to be set
   *
   * @return   {Function}
   *           The new function that will be bound into the context given
   */
  const bind_ = function (context, fn, uid) {
    // Make sure the function has a unique ID
    if (!fn.guid) {
      fn.guid = newGUID();
    }

    // Create the new function that changes the context
    const bound = fn.bind(context);

    // Allow for the ability to individualize this function
    // Needed in the case where multiple objects might share the same prototype
    // IF both items add an event listener with the same function, then you try to remove just one
    // it will remove both because they both have the same guid.
    // when using this, you need to use the bind method when you remove the listener as well.
    // currently used in text tracks
    bound.guid = uid ? uid + '_' + fn.guid : fn.guid;
    return bound;
  };

  /**
   * Wraps the given function, `fn`, with a new function that only invokes `fn`
   * at most once per every `wait` milliseconds.
   *
   * @function
   * @param    {Function} fn
   *           The function to be throttled.
   *
   * @param    {number}   wait
   *           The number of milliseconds by which to throttle.
   *
   * @return   {Function}
   */
  const throttle = function (fn, wait) {
    let last = window.performance.now();
    const throttled = function (...args) {
      const now = window.performance.now();
      if (now - last >= wait) {
        fn(...args);
        last = now;
      }
    };
    return throttled;
  };

  /**
   * Creates a debounced function that delays invoking `func` until after `wait`
   * milliseconds have elapsed since the last time the debounced function was
   * invoked.
   *
   * Inspired by lodash and underscore implementations.
   *
   * @function
   * @param    {Function} func
   *           The function to wrap with debounce behavior.
   *
   * @param    {number} wait
   *           The number of milliseconds to wait after the last invocation.
   *
   * @param    {boolean} [immediate]
   *           Whether or not to invoke the function immediately upon creation.
   *
   * @param    {Object} [context=window]
   *           The "context" in which the debounced function should debounce. For
   *           example, if this function should be tied to a Video.js player,
   *           the player can be passed here. Alternatively, defaults to the
   *           global `window` object.
   *
   * @return   {Function}
   *           A debounced function.
   */
  const debounce = function (func, wait, immediate, context = window) {
    let timeout;
    const cancel = () => {
      context.clearTimeout(timeout);
      timeout = null;
    };

    /* eslint-disable consistent-this */
    const debounced = function () {
      const self = this;
      const args = arguments;
      let later = function () {
        timeout = null;
        later = null;
        if (!immediate) {
          func.apply(self, args);
        }
      };
      if (!timeout && immediate) {
        func.apply(self, args);
      }
      context.clearTimeout(timeout);
      timeout = context.setTimeout(later, wait);
    };
    /* eslint-enable consistent-this */

    debounced.cancel = cancel;
    return debounced;
  };

  var Fn = /*#__PURE__*/Object.freeze({
    __proto__: null,
    UPDATE_REFRESH_INTERVAL: UPDATE_REFRESH_INTERVAL,
    bind_: bind_,
    throttle: throttle,
    debounce: debounce
  });

  /**
   * @file src/js/event-target.js
   */
  let EVENT_MAP;

  /**
   * `EventTarget` is a class that can have the same API as the DOM `EventTarget`. It
   * adds shorthand functions that wrap around lengthy functions. For example:
   * the `on` function is a wrapper around `addEventListener`.
   *
   * @see [EventTarget Spec]{@link https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget}
   * @class EventTarget
   */
  class EventTarget {
    /**
     * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a
     * function that will get called when an event with a certain name gets triggered.
     *
     * @param {string|string[]} type
     *        An event name or an array of event names.
     *
     * @param {Function} fn
     *        The function to call with `EventTarget`s
     */
    on(type, fn) {
      // Remove the addEventListener alias before calling Events.on
      // so we don't get into an infinite type loop
      const ael = this.addEventListener;
      this.addEventListener = () => {};
      on(this, type, fn);
      this.addEventListener = ael;
    }
    /**
     * Removes an `event listener` for a specific event from an instance of `EventTarget`.
     * This makes it so that the `event listener` will no longer get called when the
     * named event happens.
     *
     * @param {string|string[]} type
     *        An event name or an array of event names.
     *
     * @param {Function} fn
     *        The function to remove.
     */
    off(type, fn) {
      off(this, type, fn);
    }
    /**
     * This function will add an `event listener` that gets triggered only once. After the
     * first trigger it will get removed. This is like adding an `event listener`
     * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.
     *
     * @param {string|string[]} type
     *        An event name or an array of event names.
     *
     * @param {Function} fn
     *        The function to be called once for each event name.
     */
    one(type, fn) {
      // Remove the addEventListener aliasing Events.on
      // so we don't get into an infinite type loop
      const ael = this.addEventListener;
      this.addEventListener = () => {};
      one(this, type, fn);
      this.addEventListener = ael;
    }
    /**
     * This function will add an `event listener` that gets triggered only once and is
     * removed from all events. This is like adding an array of `event listener`s
     * with {@link EventTarget#on} that calls {@link EventTarget#off} on all events the
     * first time it is triggered.
     *
     * @param {string|string[]} type
     *        An event name or an array of event names.
     *
     * @param {Function} fn
     *        The function to be called once for each event name.
     */
    any(type, fn) {
      // Remove the addEventListener aliasing Events.on
      // so we don't get into an infinite type loop
      const ael = this.addEventListener;
      this.addEventListener = () => {};
      any(this, type, fn);
      this.addEventListener = ael;
    }
    /**
     * This function causes an event to happen. This will then cause any `event listeners`
     * that are waiting for that event, to get called. If there are no `event listeners`
     * for an event then nothing will happen.
     *
     * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.
     * Trigger will also call the `on` + `uppercaseEventName` function.
     *
     * Example:
     * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call
     * `onClick` if it exists.
     *
     * @param {string|EventTarget~Event|Object} event
     *        The name of the event, an `Event`, or an object with a key of type set to
     *        an event name.
     */
    trigger(event) {
      const type = event.type || event;

      // deprecation
      // In a future version we should default target to `this`
      // similar to how we default the target to `elem` in
      // `Events.trigger`. Right now the default `target` will be
      // `document` due to the `Event.fixEvent` call.
      if (typeof event === 'string') {
        event = {
          type
        };
      }
      event = fixEvent(event);
      if (this.allowedEvents_[type] && this['on' + type]) {
        this['on' + type](event);
      }
      trigger(this, event);
    }
    queueTrigger(event) {
      // only set up EVENT_MAP if it'll be used
      if (!EVENT_MAP) {
        EVENT_MAP = new Map();
      }
      const type = event.type || event;
      let map = EVENT_MAP.get(this);
      if (!map) {
        map = new Map();
        EVENT_MAP.set(this, map);
      }
      const oldTimeout = map.get(type);
      map.delete(type);
      window.clearTimeout(oldTimeout);
      const timeout = window.setTimeout(() => {
        map.delete(type);
        // if we cleared out all timeouts for the current target, delete its map
        if (map.size === 0) {
          map = null;
          EVENT_MAP.delete(this);
        }
        this.trigger(event);
      }, 0);
      map.set(type, timeout);
    }
  }

  /**
   * A Custom DOM event.
   *
   * @typedef {CustomEvent} Event
   * @see [Properties]{@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}
   */

  /**
   * All event listeners should follow the following format.
   *
   * @callback EventTarget~EventListener
   * @this {EventTarget}
   *
   * @param {Event} event
   *        the event that triggered this function
   *
   * @param {Object} [hash]
   *        hash of data sent during the event
   */

  /**
   * An object containing event names as keys and booleans as values.
   *
   * > NOTE: If an event name is set to a true value here {@link EventTarget#trigger}
   *         will have extra functionality. See that function for more information.
   *
   * @property EventTarget.prototype.allowedEvents_
   * @private
   */
  EventTarget.prototype.allowedEvents_ = {};

  /**
   * An alias of {@link EventTarget#on}. Allows `EventTarget` to mimic
   * the standard DOM API.
   *
   * @function
   * @see {@link EventTarget#on}
   */
  EventTarget.prototype.addEventListener = EventTarget.prototype.on;

  /**
   * An alias of {@link EventTarget#off}. Allows `EventTarget` to mimic
   * the standard DOM API.
   *
   * @function
   * @see {@link EventTarget#off}
   */
  EventTarget.prototype.removeEventListener = EventTarget.prototype.off;

  /**
   * An alias of {@link EventTarget#trigger}. Allows `EventTarget` to mimic
   * the standard DOM API.
   *
   * @function
   * @see {@link EventTarget#trigger}
   */
  EventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;

  /**
   * @file mixins/evented.js
   * @module evented
   */
  const objName = obj => {
    if (typeof obj.name === 'function') {
      return obj.name();
    }
    if (typeof obj.name === 'string') {
      return obj.name;
    }
    if (obj.name_) {
      return obj.name_;
    }
    if (obj.constructor && obj.constructor.name) {
      return obj.constructor.name;
    }
    return typeof obj;
  };

  /**
   * Returns whether or not an object has had the evented mixin applied.
   *
   * @param  {Object} object
   *         An object to test.
   *
   * @return {boolean}
   *         Whether or not the object appears to be evented.
   */
  const isEvented = object => object instanceof EventTarget || !!object.eventBusEl_ && ['on', 'one', 'off', 'trigger'].every(k => typeof object[k] === 'function');

  /**
   * Adds a callback to run after the evented mixin applied.
   *
   * @param  {Object} object
   *         An object to Add
   * @param  {Function} callback
   *         The callback to run.
   */
  const addEventedCallback = (target, callback) => {
    if (isEvented(target)) {
      callback();
    } else {
      if (!target.eventedCallbacks) {
        target.eventedCallbacks = [];
      }
      target.eventedCallbacks.push(callback);
    }
  };

  /**
   * Whether a value is a valid event type - non-empty string or array.
   *
   * @private
   * @param  {string|Array} type
   *         The type value to test.
   *
   * @return {boolean}
   *         Whether or not the type is a valid event type.
   */
  const isValidEventType = type =>
  // The regex here verifies that the `type` contains at least one non-
  // whitespace character.
  typeof type === 'string' && /\S/.test(type) || Array.isArray(type) && !!type.length;

  /**
   * Validates a value to determine if it is a valid event target. Throws if not.
   *
   * @private
   * @throws {Error}
   *         If the target does not appear to be a valid event target.
   *
   * @param  {Object} target
   *         The object to test.
   *
   * @param  {Object} obj
   *         The evented object we are validating for
   *
   * @param  {string} fnName
   *         The name of the evented mixin function that called this.
   */
  const validateTarget = (target, obj, fnName) => {
    if (!target || !target.nodeName && !isEvented(target)) {
      throw new Error(`Invalid target for ${objName(obj)}#${fnName}; must be a DOM node or evented object.`);
    }
  };

  /**
   * Validates a value to determine if it is a valid event target. Throws if not.
   *
   * @private
   * @throws {Error}
   *         If the type does not appear to be a valid event type.
   *
   * @param  {string|Array} type
   *         The type to test.
   *
   * @param  {Object} obj
  *         The evented object we are validating for
   *
   * @param  {string} fnName
   *         The name of the evented mixin function that called this.
   */
  const validateEventType = (type, obj, fnName) => {
    if (!isValidEventType(type)) {
      throw new Error(`Invalid event type for ${objName(obj)}#${fnName}; must be a non-empty string or array.`);
    }
  };

  /**
   * Validates a value to determine if it is a valid listener. Throws if not.
   *
   * @private
   * @throws {Error}
   *         If the listener is not a function.
   *
   * @param  {Function} listener
   *         The listener to test.
   *
   * @param  {Object} obj
   *         The evented object we are validating for
   *
   * @param  {string} fnName
   *         The name of the evented mixin function that called this.
   */
  const validateListener = (listener, obj, fnName) => {
    if (typeof listener !== 'function') {
      throw new Error(`Invalid listener for ${objName(obj)}#${fnName}; must be a function.`);
    }
  };

  /**
   * Takes an array of arguments given to `on()` or `one()`, validates them, and
   * normalizes them into an object.
   *
   * @private
   * @param  {Object} self
   *         The evented object on which `on()` or `one()` was called. This
   *         object will be bound as the `this` value for the listener.
   *
   * @param  {Array} args
   *         An array of arguments passed to `on()` or `one()`.
   *
   * @param  {string} fnName
   *         The name of the evented mixin function that called this.
   *
   * @return {Object}
   *         An object containing useful values for `on()` or `one()` calls.
   */
  const normalizeListenArgs = (self, args, fnName) => {
    // If the number of arguments is less than 3, the target is always the
    // evented object itself.
    const isTargetingSelf = args.length < 3 || args[0] === self || args[0] === self.eventBusEl_;
    let target;
    let type;
    let listener;
    if (isTargetingSelf) {
      target = self.eventBusEl_;

      // Deal with cases where we got 3 arguments, but we are still listening to
      // the evented object itself.
      if (args.length >= 3) {
        args.shift();
      }
      [type, listener] = args;
    } else {
      [target, type, listener] = args;
    }
    validateTarget(target, self, fnName);
    validateEventType(type, self, fnName);
    validateListener(listener, self, fnName);
    listener = bind_(self, listener);
    return {
      isTargetingSelf,
      target,
      type,
      listener
    };
  };

  /**
   * Adds the listener to the event type(s) on the target, normalizing for
   * the type of target.
   *
   * @private
   * @param  {Element|Object} target
   *         A DOM node or evented object.
   *
   * @param  {string} method
   *         The event binding method to use ("on" or "one").
   *
   * @param  {string|Array} type
   *         One or more event type(s).
   *
   * @param  {Function} listener
   *         A listener function.
   */
  const listen = (target, method, type, listener) => {
    validateTarget(target, target, method);
    if (target.nodeName) {
      Events[method](target, type, listener);
    } else {
      target[method](type, listener);
    }
  };

  /**
   * Contains methods that provide event capabilities to an object which is passed
   * to {@link module:evented|evented}.
   *
   * @mixin EventedMixin
   */
  const EventedMixin = {
    /**
     * Add a listener to an event (or events) on this object or another evented
     * object.
     *
     * @param  {string|Array|Element|Object} targetOrType
     *         If this is a string or array, it represents the event type(s)
     *         that will trigger the listener.
     *
     *         Another evented object can be passed here instead, which will
     *         cause the listener to listen for events on _that_ object.
     *
     *         In either case, the listener's `this` value will be bound to
     *         this object.
     *
     * @param  {string|Array|Function} typeOrListener
     *         If the first argument was a string or array, this should be the
     *         listener function. Otherwise, this is a string or array of event
     *         type(s).
     *
     * @param  {Function} [listener]
     *         If the first argument was another evented object, this will be
     *         the listener function.
     */
    on(...args) {
      const {
        isTargetingSelf,
        target,
        type,
        listener
      } = normalizeListenArgs(this, args, 'on');
      listen(target, 'on', type, listener);

      // If this object is listening to another evented object.
      if (!isTargetingSelf) {
        // If this object is disposed, remove the listener.
        const removeListenerOnDispose = () => this.off(target, type, listener);

        // Use the same function ID as the listener so we can remove it later it
        // using the ID of the original listener.
        removeListenerOnDispose.guid = listener.guid;

        // Add a listener to the target's dispose event as well. This ensures
        // that if the target is disposed BEFORE this object, we remove the
        // removal listener that was just added. Otherwise, we create a memory leak.
        const removeRemoverOnTargetDispose = () => this.off('dispose', removeListenerOnDispose);

        // Use the same function ID as the listener so we can remove it later
        // it using the ID of the original listener.
        removeRemoverOnTargetDispose.guid = listener.guid;
        listen(this, 'on', 'dispose', removeListenerOnDispose);
        listen(target, 'on', 'dispose', removeRemoverOnTargetDispose);
      }
    },
    /**
     * Add a listener to an event (or events) on this object or another evented
     * object. The listener will be called once per event and then removed.
     *
     * @param  {string|Array|Element|Object} targetOrType
     *         If this is a string or array, it represents the event type(s)
     *         that will trigger the listener.
     *
     *         Another evented object can be passed here instead, which will
     *         cause the listener to listen for events on _that_ object.
     *
     *         In either case, the listener's `this` value will be bound to
     *         this object.
     *
     * @param  {string|Array|Function} typeOrListener
     *         If the first argument was a string or array, this should be the
     *         listener function. Otherwise, this is a string or array of event
     *         type(s).
     *
     * @param  {Function} [listener]
     *         If the first argument was another evented object, this will be
     *         the listener function.
     */
    one(...args) {
      const {
        isTargetingSelf,
        target,
        type,
        listener
      } = normalizeListenArgs(this, args, 'one');

      // Targeting this evented object.
      if (isTargetingSelf) {
        listen(target, 'one', type, listener);

        // Targeting another evented object.
      } else {
        // TODO: This wrapper is incorrect! It should only
        //       remove the wrapper for the event type that called it.
        //       Instead all listeners are removed on the first trigger!
        //       see https://github.com/videojs/video.js/issues/5962
        const wrapper = (...largs) => {
          this.off(target, type, wrapper);
          listener.apply(null, largs);
        };

        // Use the same function ID as the listener so we can remove it later
        // it using the ID of the original listener.
        wrapper.guid = listener.guid;
        listen(target, 'one', type, wrapper);
      }
    },
    /**
     * Add a listener to an event (or events) on this object or another evented
     * object. The listener will only be called once for the first event that is triggered
     * then removed.
     *
     * @param  {string|Array|Element|Object} targetOrType
     *         If this is a string or array, it represents the event type(s)
     *         that will trigger the listener.
     *
     *         Another evented object can be passed here instead, which will
     *         cause the listener to listen for events on _that_ object.
     *
     *         In either case, the listener's `this` value will be bound to
     *         this object.
     *
     * @param  {string|Array|Function} typeOrListener
     *         If the first argument was a string or array, this should be the
     *         listener function. Otherwise, this is a string or array of event
     *         type(s).
     *
     * @param  {Function} [listener]
     *         If the first argument was another evented object, this will be
     *         the listener function.
     */
    any(...args) {
      const {
        isTargetingSelf,
        target,
        type,
        listener
      } = normalizeListenArgs(this, args, 'any');

      // Targeting this evented object.
      if (isTargetingSelf) {
        listen(target, 'any', type, listener);

        // Targeting another evented object.
      } else {
        const wrapper = (...largs) => {
          this.off(target, type, wrapper);
          listener.apply(null, largs);
        };

        // Use the same function ID as the listener so we can remove it later
        // it using the ID of the original listener.
        wrapper.guid = listener.guid;
        listen(target, 'any', type, wrapper);
      }
    },
    /**
     * Removes listener(s) from event(s) on an evented object.
     *
     * @param  {string|Array|Element|Object} [targetOrType]
     *         If this is a string or array, it represents the event type(s).
     *
     *         Another evented object can be passed here instead, in which case
     *         ALL 3 arguments are _required_.
     *
     * @param  {string|Array|Function} [typeOrListener]
     *         If the first argument was a string or array, this may be the
     *         listener function. Otherwise, this is a string or array of event
     *         type(s).
     *
     * @param  {Function} [listener]
     *         If the first argument was another evented object, this will be
     *         the listener function; otherwise, _all_ listeners bound to the
     *         event type(s) will be removed.
     */
    off(targetOrType, typeOrListener, listener) {
      // Targeting this evented object.
      if (!targetOrType || isValidEventType(targetOrType)) {
        off(this.eventBusEl_, targetOrType, typeOrListener);

        // Targeting another evented object.
      } else {
        const target = targetOrType;
        const type = typeOrListener;

        // Fail fast and in a meaningful way!
        validateTarget(target, this, 'off');
        validateEventType(type, this, 'off');
        validateListener(listener, this, 'off');

        // Ensure there's at least a guid, even if the function hasn't been used
        listener = bind_(this, listener);

        // Remove the dispose listener on this evented object, which was given
        // the same guid as the event listener in on().
        this.off('dispose', listener);
        if (target.nodeName) {
          off(target, type, listener);
          off(target, 'dispose', listener);
        } else if (isEvented(target)) {
          target.off(type, listener);
          target.off('dispose', listener);
        }
      }
    },
    /**
     * Fire an event on this evented object, causing its listeners to be called.
     *
     * @param   {string|Object} event
     *          An event type or an object with a type property.
     *
     * @param   {Object} [hash]
     *          An additional object to pass along to listeners.
     *
     * @return {boolean}
     *          Whether or not the default behavior was prevented.
     */
    trigger(event, hash) {
      validateTarget(this.eventBusEl_, this, 'trigger');
      const type = event && typeof event !== 'string' ? event.type : event;
      if (!isValidEventType(type)) {
        throw new Error(`Invalid event type for ${objName(this)}#trigger; ` + 'must be a non-empty string or object with a type key that has a non-empty value.');
      }
      return trigger(this.eventBusEl_, event, hash);
    }
  };

  /**
   * Applies {@link module:evented~EventedMixin|EventedMixin} to a target object.
   *
   * @param  {Object} target
   *         The object to which to add event methods.
   *
   * @param  {Object} [options={}]
   *         Options for customizing the mixin behavior.
   *
   * @param  {string} [options.eventBusKey]
   *         By default, adds a `eventBusEl_` DOM element to the target object,
   *         which is used as an event bus. If the target object already has a
   *         DOM element that should be used, pass its key here.
   *
   * @return {Object}
   *         The target object.
   */
  function evented(target, options = {}) {
    const {
      eventBusKey
    } = options;

    // Set or create the eventBusEl_.
    if (eventBusKey) {
      if (!target[eventBusKey].nodeName) {
        throw new Error(`The eventBusKey "${eventBusKey}" does not refer to an element.`);
      }
      target.eventBusEl_ = target[eventBusKey];
    } else {
      target.eventBusEl_ = createEl('span', {
        className: 'vjs-event-bus'
      });
    }
    Object.assign(target, EventedMixin);
    if (target.eventedCallbacks) {
      target.eventedCallbacks.forEach(callback => {
        callback();
      });
    }

    // When any evented object is disposed, it removes all its listeners.
    target.on('dispose', () => {
      target.off();
      [target, target.el_, target.eventBusEl_].forEach(function (val) {
        if (val && DomData.has(val)) {
          DomData.delete(val);
        }
      });
      window.setTimeout(() => {
        target.eventBusEl_ = null;
      }, 0);
    });
    return target;
  }

  /**
   * @file mixins/stateful.js
   * @module stateful
   */

  /**
   * Contains methods that provide statefulness to an object which is passed
   * to {@link module:stateful}.
   *
   * @mixin StatefulMixin
   */
  const StatefulMixin = {
    /**
     * A hash containing arbitrary keys and values representing the state of
     * the object.
     *
     * @type {Object}
     */
    state: {},
    /**
     * Set the state of an object by mutating its
     * {@link module:stateful~StatefulMixin.state|state} object in place.
     *
     * @fires   module:stateful~StatefulMixin#statechanged
     * @param   {Object|Function} stateUpdates
     *          A new set of properties to shallow-merge into the plugin state.
     *          Can be a plain object or a function returning a plain object.
     *
     * @return {Object|undefined}
     *          An object containing changes that occurred. If no changes
     *          occurred, returns `undefined`.
     */
    setState(stateUpdates) {
      // Support providing the `stateUpdates` state as a function.
      if (typeof stateUpdates === 'function') {
        stateUpdates = stateUpdates();
      }
      let changes;
      each(stateUpdates, (value, key) => {
        // Record the change if the value is different from what's in the
        // current state.
        if (this.state[key] !== value) {
          changes = changes || {};
          changes[key] = {
            from: this.state[key],
            to: value
          };
        }
        this.state[key] = value;
      });

      // Only trigger "statechange" if there were changes AND we have a trigger
      // function. This allows us to not require that the target object be an
      // evented object.
      if (changes && isEvented(this)) {
        /**
         * An event triggered on an object that is both
         * {@link module:stateful|stateful} and {@link module:evented|evented}
         * indicating that its state has changed.
         *
         * @event    module:stateful~StatefulMixin#statechanged
         * @type     {Object}
         * @property {Object} changes
         *           A hash containing the properties that were changed and
         *           the values they were changed `from` and `to`.
         */
        this.trigger({
          changes,
          type: 'statechanged'
        });
      }
      return changes;
    }
  };

  /**
   * Applies {@link module:stateful~StatefulMixin|StatefulMixin} to a target
   * object.
   *
   * If the target object is {@link module:evented|evented} and has a
   * `handleStateChanged` method, that method will be automatically bound to the
   * `statechanged` event on itself.
   *
   * @param   {Object} target
   *          The object to be made stateful.
   *
   * @param   {Object} [defaultState]
   *          A default set of properties to populate the newly-stateful object's
   *          `state` property.
   *
   * @return {Object}
   *          Returns the `target`.
   */
  function stateful(target, defaultState) {
    Object.assign(target, StatefulMixin);

    // This happens after the mixing-in because we need to replace the `state`
    // added in that step.
    target.state = Object.assign({}, target.state, defaultState);

    // Auto-bind the `handleStateChanged` method of the target object if it exists.
    if (typeof target.handleStateChanged === 'function' && isEvented(target)) {
      target.on('statechanged', target.handleStateChanged);
    }
    return target;
  }

  /**
   * @file str.js
   * @module to-lower-case
   */

  /**
   * Lowercase the first letter of a string.
   *
   * @param {string} string
   *        String to be lowercased
   *
   * @return {string}
   *         The string with a lowercased first letter
   */
  const toLowerCase = function (string) {
    if (typeof string !== 'string') {
      return string;
    }
    return string.replace(/./, w => w.toLowerCase());
  };

  /**
   * Uppercase the first letter of a string.
   *
   * @param {string} string
   *        String to be uppercased
   *
   * @return {string}
   *         The string with an uppercased first letter
   */
  const toTitleCase = function (string) {
    if (typeof string !== 'string') {
      return string;
    }
    return string.replace(/./, w => w.toUpperCase());
  };

  /**
   * Compares the TitleCase versions of the two strings for equality.
   *
   * @param {string} str1
   *        The first string to compare
   *
   * @param {string} str2
   *        The second string to compare
   *
   * @return {boolean}
   *         Whether the TitleCase versions of the strings are equal
   */
  const titleCaseEquals = function (str1, str2) {
    return toTitleCase(str1) === toTitleCase(str2);
  };

  var Str = /*#__PURE__*/Object.freeze({
    __proto__: null,
    toLowerCase: toLowerCase,
    toTitleCase: toTitleCase,
    titleCaseEquals: titleCaseEquals
  });

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var keycode = createCommonjsModule(function (module, exports) {
    // Source: http://jsfiddle.net/vWx8V/
    // http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes

    /**
     * Conenience method returns corresponding value for given keyName or keyCode.
     *
     * @param {Mixed} keyCode {Number} or keyName {String}
     * @return {Mixed}
     * @api public
     */

    function keyCode(searchInput) {
      // Keyboard Events
      if (searchInput && 'object' === typeof searchInput) {
        var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode;
        if (hasKeyCode) searchInput = hasKeyCode;
      }

      // Numbers
      if ('number' === typeof searchInput) return names[searchInput];

      // Everything else (cast to string)
      var search = String(searchInput);

      // check codes
      var foundNamedKey = codes[search.toLowerCase()];
      if (foundNamedKey) return foundNamedKey;

      // check aliases
      var foundNamedKey = aliases[search.toLowerCase()];
      if (foundNamedKey) return foundNamedKey;

      // weird character?
      if (search.length === 1) return search.charCodeAt(0);
      return undefined;
    }

    /**
     * Compares a keyboard event with a given keyCode or keyName.
     *
     * @param {Event} event Keyboard event that should be tested
     * @param {Mixed} keyCode {Number} or keyName {String}
     * @return {Boolean}
     * @api public
     */
    keyCode.isEventKey = function isEventKey(event, nameOrCode) {
      if (event && 'object' === typeof event) {
        var keyCode = event.which || event.keyCode || event.charCode;
        if (keyCode === null || keyCode === undefined) {
          return false;
        }
        if (typeof nameOrCode === 'string') {
          // check codes
          var foundNamedKey = codes[nameOrCode.toLowerCase()];
          if (foundNamedKey) {
            return foundNamedKey === keyCode;
          }

          // check aliases
          var foundNamedKey = aliases[nameOrCode.toLowerCase()];
          if (foundNamedKey) {
            return foundNamedKey === keyCode;
          }
        } else if (typeof nameOrCode === 'number') {
          return nameOrCode === keyCode;
        }
        return false;
      }
    };
    exports = module.exports = keyCode;

    /**
     * Get by name
     *
     *   exports.code['enter'] // => 13
     */

    var codes = exports.code = exports.codes = {
      'backspace': 8,
      'tab': 9,
      'enter': 13,
      'shift': 16,
      'ctrl': 17,
      'alt': 18,
      'pause/break': 19,
      'caps lock': 20,
      'esc': 27,
      'space': 32,
      'page up': 33,
      'page down': 34,
      'end': 35,
      'home': 36,
      'left': 37,
      'up': 38,
      'right': 39,
      'down': 40,
      'insert': 45,
      'delete': 46,
      'command': 91,
      'left command': 91,
      'right command': 93,
      'numpad *': 106,
      'numpad +': 107,
      'numpad -': 109,
      'numpad .': 110,
      'numpad /': 111,
      'num lock': 144,
      'scroll lock': 145,
      'my computer': 182,
      'my calculator': 183,
      ';': 186,
      '=': 187,
      ',': 188,
      '-': 189,
      '.': 190,
      '/': 191,
      '`': 192,
      '[': 219,
      '\\': 220,
      ']': 221,
      "'": 222
    };

    // Helper aliases

    var aliases = exports.aliases = {
      'windows': 91,
      '⇧': 16,
      '⌥': 18,
      '⌃': 17,
      '⌘': 91,
      'ctl': 17,
      'control': 17,
      'option': 18,
      'pause': 19,
      'break': 19,
      'caps': 20,
      'return': 13,
      'escape': 27,
      'spc': 32,
      'spacebar': 32,
      'pgup': 33,
      'pgdn': 34,
      'ins': 45,
      'del': 46,
      'cmd': 91
    };

    /*!
     * Programatically add the following
     */

    // lower case chars
    for (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32;

    // numbers
    for (var i = 48; i < 58; i++) codes[i - 48] = i;

    // function keys
    for (i = 1; i < 13; i++) codes['f' + i] = i + 111;

    // numpad keys
    for (i = 0; i < 10; i++) codes['numpad ' + i] = i + 96;

    /**
     * Get by code
     *
     *   exports.name[13] // => 'Enter'
     */

    var names = exports.names = exports.title = {}; // title for backward compat

    // Create reverse mapping
    for (i in codes) names[codes[i]] = i;

    // Add aliases
    for (var alias in aliases) {
      codes[alias] = aliases[alias];
    }
  });
  keycode.code;
  keycode.codes;
  keycode.aliases;
  keycode.names;
  keycode.title;

  /**
   * Player Component - Base class for all UI objects
   *
   * @file component.js
   */

  /**
   * Base class for all UI Components.
   * Components are UI objects which represent both a javascript object and an element
   * in the DOM. They can be children of other components, and can have
   * children themselves.
   *
   * Components can also use methods from {@link EventTarget}
   */
  class Component {
    /**
     * A callback that is called when a component is ready. Does not have any
     * parameters and any callback value will be ignored.
     *
     * @callback ReadyCallback
     * @this Component
     */

    /**
     * Creates an instance of this class.
     *
     * @param { import('./player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of component options.
     *
     * @param {Object[]} [options.children]
     *        An array of children objects to initialize this component with. Children objects have
     *        a name property that will be used if more than one component of the same type needs to be
     *        added.
     *
     * @param  {string} [options.className]
     *         A class or space separated list of classes to add the component
     *
     * @param {ReadyCallback} [ready]
     *        Function that gets called when the `Component` is ready.
     */
    constructor(player, options, ready) {
      // The component might be the player itself and we can't pass `this` to super
      if (!player && this.play) {
        this.player_ = player = this; // eslint-disable-line
      } else {
        this.player_ = player;
      }
      this.isDisposed_ = false;

      // Hold the reference to the parent component via `addChild` method
      this.parentComponent_ = null;

      // Make a copy of prototype.options_ to protect against overriding defaults
      this.options_ = merge({}, this.options_);

      // Updated options with supplied options
      options = this.options_ = merge(this.options_, options);

      // Get ID from options or options element if one is supplied
      this.id_ = options.id || options.el && options.el.id;

      // If there was no ID from the options, generate one
      if (!this.id_) {
        // Don't require the player ID function in the case of mock players
        const id = player && player.id && player.id() || 'no_player';
        this.id_ = `${id}_component_${newGUID()}`;
      }
      this.name_ = options.name || null;

      // Create element if one wasn't provided in options
      if (options.el) {
        this.el_ = options.el;
      } else if (options.createEl !== false) {
        this.el_ = this.createEl();
      }
      if (options.className && this.el_) {
        options.className.split(' ').forEach(c => this.addClass(c));
      }

      // Remove the placeholder event methods. If the component is evented, the
      // real methods are added next
      ['on', 'off', 'one', 'any', 'trigger'].forEach(fn => {
        this[fn] = undefined;
      });

      // if evented is anything except false, we want to mixin in evented
      if (options.evented !== false) {
        // Make this an evented object and use `el_`, if available, as its event bus
        evented(this, {
          eventBusKey: this.el_ ? 'el_' : null
        });
        this.handleLanguagechange = this.handleLanguagechange.bind(this);
        this.on(this.player_, 'languagechange', this.handleLanguagechange);
      }
      stateful(this, this.constructor.defaultState);
      this.children_ = [];
      this.childIndex_ = {};
      this.childNameIndex_ = {};
      this.setTimeoutIds_ = new Set();
      this.setIntervalIds_ = new Set();
      this.rafIds_ = new Set();
      this.namedRafs_ = new Map();
      this.clearingTimersOnDispose_ = false;

      // Add any child components in options
      if (options.initChildren !== false) {
        this.initChildren();
      }

      // Don't want to trigger ready here or it will go before init is actually
      // finished for all children that run this constructor
      this.ready(ready);
      if (options.reportTouchActivity !== false) {
        this.enableTouchActivity();
      }
    }

    // `on`, `off`, `one`, `any` and `trigger` are here so tsc includes them in definitions.
    // They are replaced or removed in the constructor

    /**
     * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a
     * function that will get called when an event with a certain name gets triggered.
     *
     * @param {string|string[]} type
     *        An event name or an array of event names.
     *
     * @param {Function} fn
     *        The function to call with `EventTarget`s
     */
    on(type, fn) {}

    /**
     * Removes an `event listener` for a specific event from an instance of `EventTarget`.
     * This makes it so that the `event listener` will no longer get called when the
     * named event happens.
     *
     * @param {string|string[]} type
     *        An event name or an array of event names.
     *
     * @param {Function} fn
     *        The function to remove.
     */
    off(type, fn) {}

    /**
     * This function will add an `event listener` that gets triggered only once. After the
     * first trigger it will get removed. This is like adding an `event listener`
     * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.
     *
     * @param {string|string[]} type
     *        An event name or an array of event names.
     *
     * @param {Function} fn
     *        The function to be called once for each event name.
     */
    one(type, fn) {}

    /**
     * This function will add an `event listener` that gets triggered only once and is
     * removed from all events. This is like adding an array of `event listener`s
     * with {@link EventTarget#on} that calls {@link EventTarget#off} on all events the
     * first time it is triggered.
     *
     * @param {string|string[]} type
     *        An event name or an array of event names.
     *
     * @param {Function} fn
     *        The function to be called once for each event name.
     */
    any(type, fn) {}

    /**
     * This function causes an event to happen. This will then cause any `event listeners`
     * that are waiting for that event, to get called. If there are no `event listeners`
     * for an event then nothing will happen.
     *
     * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.
     * Trigger will also call the `on` + `uppercaseEventName` function.
     *
     * Example:
     * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call
     * `onClick` if it exists.
     *
     * @param {string|Event|Object} event
     *        The name of the event, an `Event`, or an object with a key of type set to
     *        an event name.
     */
    trigger(event) {}

    /**
     * Dispose of the `Component` and all child components.
     *
     * @fires Component#dispose
     *
     * @param {Object} options
     * @param {Element} options.originalEl element with which to replace player element
     */
    dispose(options = {}) {
      // Bail out if the component has already been disposed.
      if (this.isDisposed_) {
        return;
      }
      if (this.readyQueue_) {
        this.readyQueue_.length = 0;
      }

      /**
       * Triggered when a `Component` is disposed.
       *
       * @event Component#dispose
       * @type {Event}
       *
       * @property {boolean} [bubbles=false]
       *           set to false so that the dispose event does not
       *           bubble up
       */
      this.trigger({
        type: 'dispose',
        bubbles: false
      });
      this.isDisposed_ = true;

      // Dispose all children.
      if (this.children_) {
        for (let i = this.children_.length - 1; i >= 0; i--) {
          if (this.children_[i].dispose) {
            this.children_[i].dispose();
          }
        }
      }

      // Delete child references
      this.children_ = null;
      this.childIndex_ = null;
      this.childNameIndex_ = null;
      this.parentComponent_ = null;
      if (this.el_) {
        // Remove element from DOM
        if (this.el_.parentNode) {
          if (options.restoreEl) {
            this.el_.parentNode.replaceChild(options.restoreEl, this.el_);
          } else {
            this.el_.parentNode.removeChild(this.el_);
          }
        }
        this.el_ = null;
      }

      // remove reference to the player after disposing of the element
      this.player_ = null;
    }

    /**
     * Determine whether or not this component has been disposed.
     *
     * @return {boolean}
     *         If the component has been disposed, will be `true`. Otherwise, `false`.
     */
    isDisposed() {
      return Boolean(this.isDisposed_);
    }

    /**
     * Return the {@link Player} that the `Component` has attached to.
     *
     * @return { import('./player').default }
     *         The player that this `Component` has attached to.
     */
    player() {
      return this.player_;
    }

    /**
     * Deep merge of options objects with new options.
     * > Note: When both `obj` and `options` contain properties whose values are objects.
     *         The two properties get merged using {@link module:obj.merge}
     *
     * @param {Object} obj
     *        The object that contains new options.
     *
     * @return {Object}
     *         A new object of `this.options_` and `obj` merged together.
     */
    options(obj) {
      if (!obj) {
        return this.options_;
      }
      this.options_ = merge(this.options_, obj);
      return this.options_;
    }

    /**
     * Get the `Component`s DOM element
     *
     * @return {Element}
     *         The DOM element for this `Component`.
     */
    el() {
      return this.el_;
    }

    /**
     * Create the `Component`s DOM element.
     *
     * @param {string} [tagName]
     *        Element's DOM node type. e.g. 'div'
     *
     * @param {Object} [properties]
     *        An object of properties that should be set.
     *
     * @param {Object} [attributes]
     *        An object of attributes that should be set.
     *
     * @return {Element}
     *         The element that gets created.
     */
    createEl(tagName, properties, attributes) {
      return createEl(tagName, properties, attributes);
    }

    /**
     * Localize a string given the string in english.
     *
     * If tokens are provided, it'll try and run a simple token replacement on the provided string.
     * The tokens it looks for look like `{1}` with the index being 1-indexed into the tokens array.
     *
     * If a `defaultValue` is provided, it'll use that over `string`,
     * if a value isn't found in provided language files.
     * This is useful if you want to have a descriptive key for token replacement
     * but have a succinct localized string and not require `en.json` to be included.
     *
     * Currently, it is used for the progress bar timing.
     * ```js
     * {
     *   "progress bar timing: currentTime={1} duration={2}": "{1} of {2}"
     * }
     * ```
     * It is then used like so:
     * ```js
     * this.localize('progress bar timing: currentTime={1} duration{2}',
     *               [this.player_.currentTime(), this.player_.duration()],
     *               '{1} of {2}');
     * ```
     *
     * Which outputs something like: `01:23 of 24:56`.
     *
     *
     * @param {string} string
     *        The string to localize and the key to lookup in the language files.
     * @param {string[]} [tokens]
     *        If the current item has token replacements, provide the tokens here.
     * @param {string} [defaultValue]
     *        Defaults to `string`. Can be a default value to use for token replacement
     *        if the lookup key is needed to be separate.
     *
     * @return {string}
     *         The localized string or if no localization exists the english string.
     */
    localize(string, tokens, defaultValue = string) {
      const code = this.player_.language && this.player_.language();
      const languages = this.player_.languages && this.player_.languages();
      const language = languages && languages[code];
      const primaryCode = code && code.split('-')[0];
      const primaryLang = languages && languages[primaryCode];
      let localizedString = defaultValue;
      if (language && language[string]) {
        localizedString = language[string];
      } else if (primaryLang && primaryLang[string]) {
        localizedString = primaryLang[string];
      }
      if (tokens) {
        localizedString = localizedString.replace(/\{(\d+)\}/g, function (match, index) {
          const value = tokens[index - 1];
          let ret = value;
          if (typeof value === 'undefined') {
            ret = match;
          }
          return ret;
        });
      }
      return localizedString;
    }

    /**
     * Handles language change for the player in components. Should be overridden by sub-components.
     *
     * @abstract
     */
    handleLanguagechange() {}

    /**
     * Return the `Component`s DOM element. This is where children get inserted.
     * This will usually be the the same as the element returned in {@link Component#el}.
     *
     * @return {Element}
     *         The content element for this `Component`.
     */
    contentEl() {
      return this.contentEl_ || this.el_;
    }

    /**
     * Get this `Component`s ID
     *
     * @return {string}
     *         The id of this `Component`
     */
    id() {
      return this.id_;
    }

    /**
     * Get the `Component`s name. The name gets used to reference the `Component`
     * and is set during registration.
     *
     * @return {string}
     *         The name of this `Component`.
     */
    name() {
      return this.name_;
    }

    /**
     * Get an array of all child components
     *
     * @return {Array}
     *         The children
     */
    children() {
      return this.children_;
    }

    /**
     * Returns the child `Component` with the given `id`.
     *
     * @param {string} id
     *        The id of the child `Component` to get.
     *
     * @return {Component|undefined}
     *         The child `Component` with the given `id` or undefined.
     */
    getChildById(id) {
      return this.childIndex_[id];
    }

    /**
     * Returns the child `Component` with the given `name`.
     *
     * @param {string} name
     *        The name of the child `Component` to get.
     *
     * @return {Component|undefined}
     *         The child `Component` with the given `name` or undefined.
     */
    getChild(name) {
      if (!name) {
        return;
      }
      return this.childNameIndex_[name];
    }

    /**
     * Returns the descendant `Component` following the givent
     * descendant `names`. For instance ['foo', 'bar', 'baz'] would
     * try to get 'foo' on the current component, 'bar' on the 'foo'
     * component and 'baz' on the 'bar' component and return undefined
     * if any of those don't exist.
     *
     * @param {...string[]|...string} names
     *        The name of the child `Component` to get.
     *
     * @return {Component|undefined}
     *         The descendant `Component` following the given descendant
     *         `names` or undefined.
     */
    getDescendant(...names) {
      // flatten array argument into the main array
      names = names.reduce((acc, n) => acc.concat(n), []);
      let currentChild = this;
      for (let i = 0; i < names.length; i++) {
        currentChild = currentChild.getChild(names[i]);
        if (!currentChild || !currentChild.getChild) {
          return;
        }
      }
      return currentChild;
    }

    /**
     * Add a child `Component` inside the current `Component`.
     *
     *
     * @param {string|Component} child
     *        The name or instance of a child to add.
     *
     * @param {Object} [options={}]
     *        The key/value store of options that will get passed to children of
     *        the child.
     *
     * @param {number} [index=this.children_.length]
     *        The index to attempt to add a child into.
     *
     * @return {Component}
     *         The `Component` that gets added as a child. When using a string the
     *         `Component` will get created by this process.
     */
    addChild(child, options = {}, index = this.children_.length) {
      let component;
      let componentName;

      // If child is a string, create component with options
      if (typeof child === 'string') {
        componentName = toTitleCase(child);
        const componentClassName = options.componentClass || componentName;

        // Set name through options
        options.name = componentName;

        // Create a new object & element for this controls set
        // If there's no .player_, this is a player
        const ComponentClass = Component.getComponent(componentClassName);
        if (!ComponentClass) {
          throw new Error(`Component ${componentClassName} does not exist`);
        }

        // data stored directly on the videojs object may be
        // misidentified as a component to retain
        // backwards-compatibility with 4.x. check to make sure the
        // component class can be instantiated.
        if (typeof ComponentClass !== 'function') {
          return null;
        }
        component = new ComponentClass(this.player_ || this, options);

        // child is a component instance
      } else {
        component = child;
      }
      if (component.parentComponent_) {
        component.parentComponent_.removeChild(component);
      }
      this.children_.splice(index, 0, component);
      component.parentComponent_ = this;
      if (typeof component.id === 'function') {
        this.childIndex_[component.id()] = component;
      }

      // If a name wasn't used to create the component, check if we can use the
      // name function of the component
      componentName = componentName || component.name && toTitleCase(component.name());
      if (componentName) {
        this.childNameIndex_[componentName] = component;
        this.childNameIndex_[toLowerCase(componentName)] = component;
      }

      // Add the UI object's element to the container div (box)
      // Having an element is not required
      if (typeof component.el === 'function' && component.el()) {
        // If inserting before a component, insert before that component's element
        let refNode = null;
        if (this.children_[index + 1]) {
          // Most children are components, but the video tech is an HTML element
          if (this.children_[index + 1].el_) {
            refNode = this.children_[index + 1].el_;
          } else if (isEl(this.children_[index + 1])) {
            refNode = this.children_[index + 1];
          }
        }
        this.contentEl().insertBefore(component.el(), refNode);
      }

      // Return so it can stored on parent object if desired.
      return component;
    }

    /**
     * Remove a child `Component` from this `Component`s list of children. Also removes
     * the child `Component`s element from this `Component`s element.
     *
     * @param {Component} component
     *        The child `Component` to remove.
     */
    removeChild(component) {
      if (typeof component === 'string') {
        component = this.getChild(component);
      }
      if (!component || !this.children_) {
        return;
      }
      let childFound = false;
      for (let i = this.children_.length - 1; i >= 0; i--) {
        if (this.children_[i] === component) {
          childFound = true;
          this.children_.splice(i, 1);
          break;
        }
      }
      if (!childFound) {
        return;
      }
      component.parentComponent_ = null;
      this.childIndex_[component.id()] = null;
      this.childNameIndex_[toTitleCase(component.name())] = null;
      this.childNameIndex_[toLowerCase(component.name())] = null;
      const compEl = component.el();
      if (compEl && compEl.parentNode === this.contentEl()) {
        this.contentEl().removeChild(component.el());
      }
    }

    /**
     * Add and initialize default child `Component`s based upon options.
     */
    initChildren() {
      const children = this.options_.children;
      if (children) {
        // `this` is `parent`
        const parentOptions = this.options_;
        const handleAdd = child => {
          const name = child.name;
          let opts = child.opts;

          // Allow options for children to be set at the parent options
          // e.g. videojs(id, { controlBar: false });
          // instead of videojs(id, { children: { controlBar: false });
          if (parentOptions[name] !== undefined) {
            opts = parentOptions[name];
          }

          // Allow for disabling default components
          // e.g. options['children']['posterImage'] = false
          if (opts === false) {
            return;
          }

          // Allow options to be passed as a simple boolean if no configuration
          // is necessary.
          if (opts === true) {
            opts = {};
          }

          // We also want to pass the original player options
          // to each component as well so they don't need to
          // reach back into the player for options later.
          opts.playerOptions = this.options_.playerOptions;

          // Create and add the child component.
          // Add a direct reference to the child by name on the parent instance.
          // If two of the same component are used, different names should be supplied
          // for each
          const newChild = this.addChild(name, opts);
          if (newChild) {
            this[name] = newChild;
          }
        };

        // Allow for an array of children details to passed in the options
        let workingChildren;
        const Tech = Component.getComponent('Tech');
        if (Array.isArray(children)) {
          workingChildren = children;
        } else {
          workingChildren = Object.keys(children);
        }
        workingChildren
        // children that are in this.options_ but also in workingChildren  would
        // give us extra children we do not want. So, we want to filter them out.
        .concat(Object.keys(this.options_).filter(function (child) {
          return !workingChildren.some(function (wchild) {
            if (typeof wchild === 'string') {
              return child === wchild;
            }
            return child === wchild.name;
          });
        })).map(child => {
          let name;
          let opts;
          if (typeof child === 'string') {
            name = child;
            opts = children[name] || this.options_[name] || {};
          } else {
            name = child.name;
            opts = child;
          }
          return {
            name,
            opts
          };
        }).filter(child => {
          // we have to make sure that child.name isn't in the techOrder since
          // techs are registered as Components but can't aren't compatible
          // See https://github.com/videojs/video.js/issues/2772
          const c = Component.getComponent(child.opts.componentClass || toTitleCase(child.name));
          return c && !Tech.isTech(c);
        }).forEach(handleAdd);
      }
    }

    /**
     * Builds the default DOM class name. Should be overridden by sub-components.
     *
     * @return {string}
     *         The DOM class name for this object.
     *
     * @abstract
     */
    buildCSSClass() {
      // Child classes can include a function that does:
      // return 'CLASS NAME' + this._super();
      return '';
    }

    /**
     * Bind a listener to the component's ready state.
     * Different from event listeners in that if the ready event has already happened
     * it will trigger the function immediately.
     *
     * @param {ReadyCallback} fn
     *        Function that gets called when the `Component` is ready.
     *
     * @return {Component}
     *         Returns itself; method can be chained.
     */
    ready(fn, sync = false) {
      if (!fn) {
        return;
      }
      if (!this.isReady_) {
        this.readyQueue_ = this.readyQueue_ || [];
        this.readyQueue_.push(fn);
        return;
      }
      if (sync) {
        fn.call(this);
      } else {
        // Call the function asynchronously by default for consistency
        this.setTimeout(fn, 1);
      }
    }

    /**
     * Trigger all the ready listeners for this `Component`.
     *
     * @fires Component#ready
     */
    triggerReady() {
      this.isReady_ = true;

      // Ensure ready is triggered asynchronously
      this.setTimeout(function () {
        const readyQueue = this.readyQueue_;

        // Reset Ready Queue
        this.readyQueue_ = [];
        if (readyQueue && readyQueue.length > 0) {
          readyQueue.forEach(function (fn) {
            fn.call(this);
          }, this);
        }

        // Allow for using event listeners also
        /**
         * Triggered when a `Component` is ready.
         *
         * @event Component#ready
         * @type {Event}
         */
        this.trigger('ready');
      }, 1);
    }

    /**
     * Find a single DOM element matching a `selector`. This can be within the `Component`s
     * `contentEl()` or another custom context.
     *
     * @param {string} selector
     *        A valid CSS selector, which will be passed to `querySelector`.
     *
     * @param {Element|string} [context=this.contentEl()]
     *        A DOM element within which to query. Can also be a selector string in
     *        which case the first matching element will get used as context. If
     *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
     *        nothing it falls back to `document`.
     *
     * @return {Element|null}
     *         the dom element that was found, or null
     *
     * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
     */
    $(selector, context) {
      return $(selector, context || this.contentEl());
    }

    /**
     * Finds all DOM element matching a `selector`. This can be within the `Component`s
     * `contentEl()` or another custom context.
     *
     * @param {string} selector
     *        A valid CSS selector, which will be passed to `querySelectorAll`.
     *
     * @param {Element|string} [context=this.contentEl()]
     *        A DOM element within which to query. Can also be a selector string in
     *        which case the first matching element will get used as context. If
     *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
     *        nothing it falls back to `document`.
     *
     * @return {NodeList}
     *         a list of dom elements that were found
     *
     * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
     */
    $$(selector, context) {
      return $$(selector, context || this.contentEl());
    }

    /**
     * Check if a component's element has a CSS class name.
     *
     * @param {string} classToCheck
     *        CSS class name to check.
     *
     * @return {boolean}
     *         - True if the `Component` has the class.
     *         - False if the `Component` does not have the class`
     */
    hasClass(classToCheck) {
      return hasClass(this.el_, classToCheck);
    }

    /**
     * Add a CSS class name to the `Component`s element.
     *
     * @param {...string} classesToAdd
     *        One or more CSS class name to add.
     */
    addClass(...classesToAdd) {
      addClass(this.el_, ...classesToAdd);
    }

    /**
     * Remove a CSS class name from the `Component`s element.
     *
     * @param {...string} classesToRemove
     *        One or more CSS class name to remove.
     */
    removeClass(...classesToRemove) {
      removeClass(this.el_, ...classesToRemove);
    }

    /**
     * Add or remove a CSS class name from the component's element.
     * - `classToToggle` gets added when {@link Component#hasClass} would return false.
     * - `classToToggle` gets removed when {@link Component#hasClass} would return true.
     *
     * @param  {string} classToToggle
     *         The class to add or remove based on (@link Component#hasClass}
     *
     * @param  {boolean|Dom~predicate} [predicate]
     *         An {@link Dom~predicate} function or a boolean
     */
    toggleClass(classToToggle, predicate) {
      toggleClass(this.el_, classToToggle, predicate);
    }

    /**
     * Show the `Component`s element if it is hidden by removing the
     * 'vjs-hidden' class name from it.
     */
    show() {
      this.removeClass('vjs-hidden');
    }

    /**
     * Hide the `Component`s element if it is currently showing by adding the
     * 'vjs-hidden` class name to it.
     */
    hide() {
      this.addClass('vjs-hidden');
    }

    /**
     * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'
     * class name to it. Used during fadeIn/fadeOut.
     *
     * @private
     */
    lockShowing() {
      this.addClass('vjs-lock-showing');
    }

    /**
     * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'
     * class name from it. Used during fadeIn/fadeOut.
     *
     * @private
     */
    unlockShowing() {
      this.removeClass('vjs-lock-showing');
    }

    /**
     * Get the value of an attribute on the `Component`s element.
     *
     * @param {string} attribute
     *        Name of the attribute to get the value from.
     *
     * @return {string|null}
     *         - The value of the attribute that was asked for.
     *         - Can be an empty string on some browsers if the attribute does not exist
     *           or has no value
     *         - Most browsers will return null if the attribute does not exist or has
     *           no value.
     *
     * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}
     */
    getAttribute(attribute) {
      return getAttribute(this.el_, attribute);
    }

    /**
     * Set the value of an attribute on the `Component`'s element
     *
     * @param {string} attribute
     *        Name of the attribute to set.
     *
     * @param {string} value
     *        Value to set the attribute to.
     *
     * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}
     */
    setAttribute(attribute, value) {
      setAttribute(this.el_, attribute, value);
    }

    /**
     * Remove an attribute from the `Component`s element.
     *
     * @param {string} attribute
     *        Name of the attribute to remove.
     *
     * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}
     */
    removeAttribute(attribute) {
      removeAttribute(this.el_, attribute);
    }

    /**
     * Get or set the width of the component based upon the CSS styles.
     * See {@link Component#dimension} for more detailed information.
     *
     * @param {number|string} [num]
     *        The width that you want to set postfixed with '%', 'px' or nothing.
     *
     * @param {boolean} [skipListeners]
     *        Skip the componentresize event trigger
     *
     * @return {number|string}
     *         The width when getting, zero if there is no width. Can be a string
     *           postpixed with '%' or 'px'.
     */
    width(num, skipListeners) {
      return this.dimension('width', num, skipListeners);
    }

    /**
     * Get or set the height of the component based upon the CSS styles.
     * See {@link Component#dimension} for more detailed information.
     *
     * @param {number|string} [num]
     *        The height that you want to set postfixed with '%', 'px' or nothing.
     *
     * @param {boolean} [skipListeners]
     *        Skip the componentresize event trigger
     *
     * @return {number|string}
     *         The width when getting, zero if there is no width. Can be a string
     *         postpixed with '%' or 'px'.
     */
    height(num, skipListeners) {
      return this.dimension('height', num, skipListeners);
    }

    /**
     * Set both the width and height of the `Component` element at the same time.
     *
     * @param  {number|string} width
     *         Width to set the `Component`s element to.
     *
     * @param  {number|string} height
     *         Height to set the `Component`s element to.
     */
    dimensions(width, height) {
      // Skip componentresize listeners on width for optimization
      this.width(width, true);
      this.height(height);
    }

    /**
     * Get or set width or height of the `Component` element. This is the shared code
     * for the {@link Component#width} and {@link Component#height}.
     *
     * Things to know:
     * - If the width or height in an number this will return the number postfixed with 'px'.
     * - If the width/height is a percent this will return the percent postfixed with '%'
     * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function
     *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.
     *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}
     *   for more information
     * - If you want the computed style of the component, use {@link Component#currentWidth}
     *   and {@link {Component#currentHeight}
     *
     * @fires Component#componentresize
     *
     * @param {string} widthOrHeight
     8        'width' or 'height'
     *
     * @param  {number|string} [num]
     8         New dimension
     *
     * @param  {boolean} [skipListeners]
     *         Skip componentresize event trigger
     *
     * @return {number}
     *         The dimension when getting or 0 if unset
     */
    dimension(widthOrHeight, num, skipListeners) {
      if (num !== undefined) {
        // Set to zero if null or literally NaN (NaN !== NaN)
        if (num === null || num !== num) {
          num = 0;
        }

        // Check if using css width/height (% or px) and adjust
        if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {
          this.el_.style[widthOrHeight] = num;
        } else if (num === 'auto') {
          this.el_.style[widthOrHeight] = '';
        } else {
          this.el_.style[widthOrHeight] = num + 'px';
        }

        // skipListeners allows us to avoid triggering the resize event when setting both width and height
        if (!skipListeners) {
          /**
           * Triggered when a component is resized.
           *
           * @event Component#componentresize
           * @type {Event}
           */
          this.trigger('componentresize');
        }
        return;
      }

      // Not setting a value, so getting it
      // Make sure element exists
      if (!this.el_) {
        return 0;
      }

      // Get dimension value from style
      const val = this.el_.style[widthOrHeight];
      const pxIndex = val.indexOf('px');
      if (pxIndex !== -1) {
        // Return the pixel value with no 'px'
        return parseInt(val.slice(0, pxIndex), 10);
      }

      // No px so using % or no style was set, so falling back to offsetWidth/height
      // If component has display:none, offset will return 0
      // TODO: handle display:none and no dimension style using px
      return parseInt(this.el_['offset' + toTitleCase(widthOrHeight)], 10);
    }

    /**
     * Get the computed width or the height of the component's element.
     *
     * Uses `window.getComputedStyle`.
     *
     * @param {string} widthOrHeight
     *        A string containing 'width' or 'height'. Whichever one you want to get.
     *
     * @return {number}
     *         The dimension that gets asked for or 0 if nothing was set
     *         for that dimension.
     */
    currentDimension(widthOrHeight) {
      let computedWidthOrHeight = 0;
      if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {
        throw new Error('currentDimension only accepts width or height value');
      }
      computedWidthOrHeight = computedStyle(this.el_, widthOrHeight);

      // remove 'px' from variable and parse as integer
      computedWidthOrHeight = parseFloat(computedWidthOrHeight);

      // if the computed value is still 0, it's possible that the browser is lying
      // and we want to check the offset values.
      // This code also runs wherever getComputedStyle doesn't exist.
      if (computedWidthOrHeight === 0 || isNaN(computedWidthOrHeight)) {
        const rule = `offset${toTitleCase(widthOrHeight)}`;
        computedWidthOrHeight = this.el_[rule];
      }
      return computedWidthOrHeight;
    }

    /**
     * An object that contains width and height values of the `Component`s
     * computed style. Uses `window.getComputedStyle`.
     *
     * @typedef {Object} Component~DimensionObject
     *
     * @property {number} width
     *           The width of the `Component`s computed style.
     *
     * @property {number} height
     *           The height of the `Component`s computed style.
     */

    /**
     * Get an object that contains computed width and height values of the
     * component's element.
     *
     * Uses `window.getComputedStyle`.
     *
     * @return {Component~DimensionObject}
     *         The computed dimensions of the component's element.
     */
    currentDimensions() {
      return {
        width: this.currentDimension('width'),
        height: this.currentDimension('height')
      };
    }

    /**
     * Get the computed width of the component's element.
     *
     * Uses `window.getComputedStyle`.
     *
     * @return {number}
     *         The computed width of the component's element.
     */
    currentWidth() {
      return this.currentDimension('width');
    }

    /**
     * Get the computed height of the component's element.
     *
     * Uses `window.getComputedStyle`.
     *
     * @return {number}
     *         The computed height of the component's element.
     */
    currentHeight() {
      return this.currentDimension('height');
    }

    /**
     * Set the focus to this component
     */
    focus() {
      this.el_.focus();
    }

    /**
     * Remove the focus from this component
     */
    blur() {
      this.el_.blur();
    }

    /**
     * When this Component receives a `keydown` event which it does not process,
     *  it passes the event to the Player for handling.
     *
     * @param {KeyboardEvent} event
     *        The `keydown` event that caused this function to be called.
     */
    handleKeyDown(event) {
      if (this.player_) {
        // We only stop propagation here because we want unhandled events to fall
        // back to the browser. Exclude Tab for focus trapping.
        if (!keycode.isEventKey(event, 'Tab')) {
          event.stopPropagation();
        }
        this.player_.handleKeyDown(event);
      }
    }

    /**
     * Many components used to have a `handleKeyPress` method, which was poorly
     * named because it listened to a `keydown` event. This method name now
     * delegates to `handleKeyDown`. This means anyone calling `handleKeyPress`
     * will not see their method calls stop working.
     *
     * @param {Event} event
     *        The event that caused this function to be called.
     */
    handleKeyPress(event) {
      this.handleKeyDown(event);
    }

    /**
     * Emit a 'tap' events when touch event support gets detected. This gets used to
     * support toggling the controls through a tap on the video. They get enabled
     * because every sub-component would have extra overhead otherwise.
     *
     * @private
     * @fires Component#tap
     * @listens Component#touchstart
     * @listens Component#touchmove
     * @listens Component#touchleave
     * @listens Component#touchcancel
     * @listens Component#touchend
      */
    emitTapEvents() {
      // Track the start time so we can determine how long the touch lasted
      let touchStart = 0;
      let firstTouch = null;

      // Maximum movement allowed during a touch event to still be considered a tap
      // Other popular libs use anywhere from 2 (hammer.js) to 15,
      // so 10 seems like a nice, round number.
      const tapMovementThreshold = 10;

      // The maximum length a touch can be while still being considered a tap
      const touchTimeThreshold = 200;
      let couldBeTap;
      this.on('touchstart', function (event) {
        // If more than one finger, don't consider treating this as a click
        if (event.touches.length === 1) {
          // Copy pageX/pageY from the object
          firstTouch = {
            pageX: event.touches[0].pageX,
            pageY: event.touches[0].pageY
          };
          // Record start time so we can detect a tap vs. "touch and hold"
          touchStart = window.performance.now();
          // Reset couldBeTap tracking
          couldBeTap = true;
        }
      });
      this.on('touchmove', function (event) {
        // If more than one finger, don't consider treating this as a click
        if (event.touches.length > 1) {
          couldBeTap = false;
        } else if (firstTouch) {
          // Some devices will throw touchmoves for all but the slightest of taps.
          // So, if we moved only a small distance, this could still be a tap
          const xdiff = event.touches[0].pageX - firstTouch.pageX;
          const ydiff = event.touches[0].pageY - firstTouch.pageY;
          const touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);
          if (touchDistance > tapMovementThreshold) {
            couldBeTap = false;
          }
        }
      });
      const noTap = function () {
        couldBeTap = false;
      };

      // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s
      this.on('touchleave', noTap);
      this.on('touchcancel', noTap);

      // When the touch ends, measure how long it took and trigger the appropriate
      // event
      this.on('touchend', function (event) {
        firstTouch = null;
        // Proceed only if the touchmove/leave/cancel event didn't happen
        if (couldBeTap === true) {
          // Measure how long the touch lasted
          const touchTime = window.performance.now() - touchStart;

          // Make sure the touch was less than the threshold to be considered a tap
          if (touchTime < touchTimeThreshold) {
            // Don't let browser turn this into a click
            event.preventDefault();
            /**
             * Triggered when a `Component` is tapped.
             *
             * @event Component#tap
             * @type {MouseEvent}
             */
            this.trigger('tap');
            // It may be good to copy the touchend event object and change the
            // type to tap, if the other event properties aren't exact after
            // Events.fixEvent runs (e.g. event.target)
          }
        }
      });
    }

    /**
     * This function reports user activity whenever touch events happen. This can get
     * turned off by any sub-components that wants touch events to act another way.
     *
     * Report user touch activity when touch events occur. User activity gets used to
     * determine when controls should show/hide. It is simple when it comes to mouse
     * events, because any mouse event should show the controls. So we capture mouse
     * events that bubble up to the player and report activity when that happens.
     * With touch events it isn't as easy as `touchstart` and `touchend` toggle player
     * controls. So touch events can't help us at the player level either.
     *
     * User activity gets checked asynchronously. So what could happen is a tap event
     * on the video turns the controls off. Then the `touchend` event bubbles up to
     * the player. Which, if it reported user activity, would turn the controls right
     * back on. We also don't want to completely block touch events from bubbling up.
     * Furthermore a `touchmove` event and anything other than a tap, should not turn
     * controls back on.
     *
     * @listens Component#touchstart
     * @listens Component#touchmove
     * @listens Component#touchend
     * @listens Component#touchcancel
     */
    enableTouchActivity() {
      // Don't continue if the root player doesn't support reporting user activity
      if (!this.player() || !this.player().reportUserActivity) {
        return;
      }

      // listener for reporting that the user is active
      const report = bind_(this.player(), this.player().reportUserActivity);
      let touchHolding;
      this.on('touchstart', function () {
        report();
        // For as long as the they are touching the device or have their mouse down,
        // we consider them active even if they're not moving their finger or mouse.
        // So we want to continue to update that they are active
        this.clearInterval(touchHolding);
        // report at the same interval as activityCheck
        touchHolding = this.setInterval(report, 250);
      });
      const touchEnd = function (event) {
        report();
        // stop the interval that maintains activity if the touch is holding
        this.clearInterval(touchHolding);
      };
      this.on('touchmove', report);
      this.on('touchend', touchEnd);
      this.on('touchcancel', touchEnd);
    }

    /**
     * A callback that has no parameters and is bound into `Component`s context.
     *
     * @callback Component~GenericCallback
     * @this Component
     */

    /**
     * Creates a function that runs after an `x` millisecond timeout. This function is a
     * wrapper around `window.setTimeout`. There are a few reasons to use this one
     * instead though:
     * 1. It gets cleared via  {@link Component#clearTimeout} when
     *    {@link Component#dispose} gets called.
     * 2. The function callback will gets turned into a {@link Component~GenericCallback}
     *
     * > Note: You can't use `window.clearTimeout` on the id returned by this function. This
     *         will cause its dispose listener not to get cleaned up! Please use
     *         {@link Component#clearTimeout} or {@link Component#dispose} instead.
     *
     * @param {Component~GenericCallback} fn
     *        The function that will be run after `timeout`.
     *
     * @param {number} timeout
     *        Timeout in milliseconds to delay before executing the specified function.
     *
     * @return {number}
     *         Returns a timeout ID that gets used to identify the timeout. It can also
     *         get used in {@link Component#clearTimeout} to clear the timeout that
     *         was set.
     *
     * @listens Component#dispose
     * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}
     */
    setTimeout(fn, timeout) {
      // declare as variables so they are properly available in timeout function
      // eslint-disable-next-line
      var timeoutId;
      fn = bind_(this, fn);
      this.clearTimersOnDispose_();
      timeoutId = window.setTimeout(() => {
        if (this.setTimeoutIds_.has(timeoutId)) {
          this.setTimeoutIds_.delete(timeoutId);
        }
        fn();
      }, timeout);
      this.setTimeoutIds_.add(timeoutId);
      return timeoutId;
    }

    /**
     * Clears a timeout that gets created via `window.setTimeout` or
     * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}
     * use this function instead of `window.clearTimout`. If you don't your dispose
     * listener will not get cleaned up until {@link Component#dispose}!
     *
     * @param {number} timeoutId
     *        The id of the timeout to clear. The return value of
     *        {@link Component#setTimeout} or `window.setTimeout`.
     *
     * @return {number}
     *         Returns the timeout id that was cleared.
     *
     * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}
     */
    clearTimeout(timeoutId) {
      if (this.setTimeoutIds_.has(timeoutId)) {
        this.setTimeoutIds_.delete(timeoutId);
        window.clearTimeout(timeoutId);
      }
      return timeoutId;
    }

    /**
     * Creates a function that gets run every `x` milliseconds. This function is a wrapper
     * around `window.setInterval`. There are a few reasons to use this one instead though.
     * 1. It gets cleared via  {@link Component#clearInterval} when
     *    {@link Component#dispose} gets called.
     * 2. The function callback will be a {@link Component~GenericCallback}
     *
     * @param {Component~GenericCallback} fn
     *        The function to run every `x` seconds.
     *
     * @param {number} interval
     *        Execute the specified function every `x` milliseconds.
     *
     * @return {number}
     *         Returns an id that can be used to identify the interval. It can also be be used in
     *         {@link Component#clearInterval} to clear the interval.
     *
     * @listens Component#dispose
     * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}
     */
    setInterval(fn, interval) {
      fn = bind_(this, fn);
      this.clearTimersOnDispose_();
      const intervalId = window.setInterval(fn, interval);
      this.setIntervalIds_.add(intervalId);
      return intervalId;
    }

    /**
     * Clears an interval that gets created via `window.setInterval` or
     * {@link Component#setInterval}. If you set an interval via {@link Component#setInterval}
     * use this function instead of `window.clearInterval`. If you don't your dispose
     * listener will not get cleaned up until {@link Component#dispose}!
     *
     * @param {number} intervalId
     *        The id of the interval to clear. The return value of
     *        {@link Component#setInterval} or `window.setInterval`.
     *
     * @return {number}
     *         Returns the interval id that was cleared.
     *
     * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}
     */
    clearInterval(intervalId) {
      if (this.setIntervalIds_.has(intervalId)) {
        this.setIntervalIds_.delete(intervalId);
        window.clearInterval(intervalId);
      }
      return intervalId;
    }

    /**
     * Queues up a callback to be passed to requestAnimationFrame (rAF), but
     * with a few extra bonuses:
     *
     * - Supports browsers that do not support rAF by falling back to
     *   {@link Component#setTimeout}.
     *
     * - The callback is turned into a {@link Component~GenericCallback} (i.e.
     *   bound to the component).
     *
     * - Automatic cancellation of the rAF callback is handled if the component
     *   is disposed before it is called.
     *
     * @param  {Component~GenericCallback} fn
     *         A function that will be bound to this component and executed just
     *         before the browser's next repaint.
     *
     * @return {number}
     *         Returns an rAF ID that gets used to identify the timeout. It can
     *         also be used in {@link Component#cancelAnimationFrame} to cancel
     *         the animation frame callback.
     *
     * @listens Component#dispose
     * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame}
     */
    requestAnimationFrame(fn) {
      this.clearTimersOnDispose_();

      // declare as variables so they are properly available in rAF function
      // eslint-disable-next-line
      var id;
      fn = bind_(this, fn);
      id = window.requestAnimationFrame(() => {
        if (this.rafIds_.has(id)) {
          this.rafIds_.delete(id);
        }
        fn();
      });
      this.rafIds_.add(id);
      return id;
    }

    /**
     * Request an animation frame, but only one named animation
     * frame will be queued. Another will never be added until
     * the previous one finishes.
     *
     * @param {string} name
     *        The name to give this requestAnimationFrame
     *
     * @param  {Component~GenericCallback} fn
     *         A function that will be bound to this component and executed just
     *         before the browser's next repaint.
     */
    requestNamedAnimationFrame(name, fn) {
      if (this.namedRafs_.has(name)) {
        return;
      }
      this.clearTimersOnDispose_();
      fn = bind_(this, fn);
      const id = this.requestAnimationFrame(() => {
        fn();
        if (this.namedRafs_.has(name)) {
          this.namedRafs_.delete(name);
        }
      });
      this.namedRafs_.set(name, id);
      return name;
    }

    /**
     * Cancels a current named animation frame if it exists.
     *
     * @param {string} name
     *        The name of the requestAnimationFrame to cancel.
     */
    cancelNamedAnimationFrame(name) {
      if (!this.namedRafs_.has(name)) {
        return;
      }
      this.cancelAnimationFrame(this.namedRafs_.get(name));
      this.namedRafs_.delete(name);
    }

    /**
     * Cancels a queued callback passed to {@link Component#requestAnimationFrame}
     * (rAF).
     *
     * If you queue an rAF callback via {@link Component#requestAnimationFrame},
     * use this function instead of `window.cancelAnimationFrame`. If you don't,
     * your dispose listener will not get cleaned up until {@link Component#dispose}!
     *
     * @param {number} id
     *        The rAF ID to clear. The return value of {@link Component#requestAnimationFrame}.
     *
     * @return {number}
     *         Returns the rAF ID that was cleared.
     *
     * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/cancelAnimationFrame}
     */
    cancelAnimationFrame(id) {
      if (this.rafIds_.has(id)) {
        this.rafIds_.delete(id);
        window.cancelAnimationFrame(id);
      }
      return id;
    }

    /**
     * A function to setup `requestAnimationFrame`, `setTimeout`,
     * and `setInterval`, clearing on dispose.
     *
     * > Previously each timer added and removed dispose listeners on it's own.
     * For better performance it was decided to batch them all, and use `Set`s
     * to track outstanding timer ids.
     *
     * @private
     */
    clearTimersOnDispose_() {
      if (this.clearingTimersOnDispose_) {
        return;
      }
      this.clearingTimersOnDispose_ = true;
      this.one('dispose', () => {
        [['namedRafs_', 'cancelNamedAnimationFrame'], ['rafIds_', 'cancelAnimationFrame'], ['setTimeoutIds_', 'clearTimeout'], ['setIntervalIds_', 'clearInterval']].forEach(([idName, cancelName]) => {
          // for a `Set` key will actually be the value again
          // so forEach((val, val) =>` but for maps we want to use
          // the key.
          this[idName].forEach((val, key) => this[cancelName](key));
        });
        this.clearingTimersOnDispose_ = false;
      });
    }

    /**
     * Register a `Component` with `videojs` given the name and the component.
     *
     * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s
     *         should be registered using {@link Tech.registerTech} or
     *         {@link videojs:videojs.registerTech}.
     *
     * > NOTE: This function can also be seen on videojs as
     *         {@link videojs:videojs.registerComponent}.
     *
     * @param {string} name
     *        The name of the `Component` to register.
     *
     * @param {Component} ComponentToRegister
     *        The `Component` class to register.
     *
     * @return {Component}
     *         The `Component` that was registered.
     */
    static registerComponent(name, ComponentToRegister) {
      if (typeof name !== 'string' || !name) {
        throw new Error(`Illegal component name, "${name}"; must be a non-empty string.`);
      }
      const Tech = Component.getComponent('Tech');

      // We need to make sure this check is only done if Tech has been registered.
      const isTech = Tech && Tech.isTech(ComponentToRegister);
      const isComp = Component === ComponentToRegister || Component.prototype.isPrototypeOf(ComponentToRegister.prototype);
      if (isTech || !isComp) {
        let reason;
        if (isTech) {
          reason = 'techs must be registered using Tech.registerTech()';
        } else {
          reason = 'must be a Component subclass';
        }
        throw new Error(`Illegal component, "${name}"; ${reason}.`);
      }
      name = toTitleCase(name);
      if (!Component.components_) {
        Component.components_ = {};
      }
      const Player = Component.getComponent('Player');
      if (name === 'Player' && Player && Player.players) {
        const players = Player.players;
        const playerNames = Object.keys(players);

        // If we have players that were disposed, then their name will still be
        // in Players.players. So, we must loop through and verify that the value
        // for each item is not null. This allows registration of the Player component
        // after all players have been disposed or before any were created.
        if (players && playerNames.length > 0 && playerNames.map(pname => players[pname]).every(Boolean)) {
          throw new Error('Can not register Player component after player has been created.');
        }
      }
      Component.components_[name] = ComponentToRegister;
      Component.components_[toLowerCase(name)] = ComponentToRegister;
      return ComponentToRegister;
    }

    /**
     * Get a `Component` based on the name it was registered with.
     *
     * @param {string} name
     *        The Name of the component to get.
     *
     * @return {Component}
     *         The `Component` that got registered under the given name.
     */
    static getComponent(name) {
      if (!name || !Component.components_) {
        return;
      }
      return Component.components_[name];
    }
  }
  Component.registerComponent('Component', Component);

  /**
   * @file time.js
   * @module time
   */

  /**
   * Returns the time for the specified index at the start or end
   * of a TimeRange object.
   *
   * @typedef    {Function} TimeRangeIndex
   *
   * @param      {number} [index=0]
   *             The range number to return the time for.
   *
   * @return     {number}
   *             The time offset at the specified index.
   *
   * @deprecated The index argument must be provided.
   *             In the future, leaving it out will throw an error.
   */

  /**
   * An object that contains ranges of time, which mimics {@link TimeRanges}.
   *
   * @typedef  {Object} TimeRange
   *
   * @property {number} length
   *           The number of time ranges represented by this object.
   *
   * @property {module:time~TimeRangeIndex} start
   *           Returns the time offset at which a specified time range begins.
   *
   * @property {module:time~TimeRangeIndex} end
   *           Returns the time offset at which a specified time range ends.
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges
   */

  /**
   * Check if any of the time ranges are over the maximum index.
   *
   * @private
   * @param   {string} fnName
   *          The function name to use for logging
   *
   * @param   {number} index
   *          The index to check
   *
   * @param   {number} maxIndex
   *          The maximum possible index
   *
   * @throws  {Error} if the timeRanges provided are over the maxIndex
   */
  function rangeCheck(fnName, index, maxIndex) {
    if (typeof index !== 'number' || index < 0 || index > maxIndex) {
      throw new Error(`Failed to execute '${fnName}' on 'TimeRanges': The index provided (${index}) is non-numeric or out of bounds (0-${maxIndex}).`);
    }
  }

  /**
   * Get the time for the specified index at the start or end
   * of a TimeRange object.
   *
   * @private
   * @param      {string} fnName
   *             The function name to use for logging
   *
   * @param      {string} valueIndex
   *             The property that should be used to get the time. should be
   *             'start' or 'end'
   *
   * @param      {Array} ranges
   *             An array of time ranges
   *
   * @param      {Array} [rangeIndex=0]
   *             The index to start the search at
   *
   * @return     {number}
   *             The time that offset at the specified index.
   *
   * @deprecated rangeIndex must be set to a value, in the future this will throw an error.
   * @throws     {Error} if rangeIndex is more than the length of ranges
   */
  function getRange(fnName, valueIndex, ranges, rangeIndex) {
    rangeCheck(fnName, rangeIndex, ranges.length - 1);
    return ranges[rangeIndex][valueIndex];
  }

  /**
   * Create a time range object given ranges of time.
   *
   * @private
   * @param   {Array} [ranges]
   *          An array of time ranges.
   *
   * @return  {TimeRange}
   */
  function createTimeRangesObj(ranges) {
    let timeRangesObj;
    if (ranges === undefined || ranges.length === 0) {
      timeRangesObj = {
        length: 0,
        start() {
          throw new Error('This TimeRanges object is empty');
        },
        end() {
          throw new Error('This TimeRanges object is empty');
        }
      };
    } else {
      timeRangesObj = {
        length: ranges.length,
        start: getRange.bind(null, 'start', 0, ranges),
        end: getRange.bind(null, 'end', 1, ranges)
      };
    }
    if (window.Symbol && window.Symbol.iterator) {
      timeRangesObj[window.Symbol.iterator] = () => (ranges || []).values();
    }
    return timeRangesObj;
  }

  /**
   * Create a `TimeRange` object which mimics an
   * {@link https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges|HTML5 TimeRanges instance}.
   *
   * @param {number|Array[]} start
   *        The start of a single range (a number) or an array of ranges (an
   *        array of arrays of two numbers each).
   *
   * @param {number} end
   *        The end of a single range. Cannot be used with the array form of
   *        the `start` argument.
   *
   * @return {TimeRange}
   */
  function createTimeRanges(start, end) {
    if (Array.isArray(start)) {
      return createTimeRangesObj(start);
    } else if (start === undefined || end === undefined) {
      return createTimeRangesObj();
    }
    return createTimeRangesObj([[start, end]]);
  }

  /**
   * Format seconds as a time string, H:MM:SS or M:SS. Supplying a guide (in
   * seconds) will force a number of leading zeros to cover the length of the
   * guide.
   *
   * @private
   * @param  {number} seconds
   *         Number of seconds to be turned into a string
   *
   * @param  {number} guide
   *         Number (in seconds) to model the string after
   *
   * @return {string}
   *         Time formatted as H:MM:SS or M:SS
   */
  const defaultImplementation = function (seconds, guide) {
    seconds = seconds < 0 ? 0 : seconds;
    let s = Math.floor(seconds % 60);
    let m = Math.floor(seconds / 60 % 60);
    let h = Math.floor(seconds / 3600);
    const gm = Math.floor(guide / 60 % 60);
    const gh = Math.floor(guide / 3600);

    // handle invalid times
    if (isNaN(seconds) || seconds === Infinity) {
      // '-' is false for all relational operators (e.g. <, >=) so this setting
      // will add the minimum number of fields specified by the guide
      h = m = s = '-';
    }

    // Check if we need to show hours
    h = h > 0 || gh > 0 ? h + ':' : '';

    // If hours are showing, we may need to add a leading zero.
    // Always show at least one digit of minutes.
    m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';

    // Check if leading zero is need for seconds
    s = s < 10 ? '0' + s : s;
    return h + m + s;
  };

  // Internal pointer to the current implementation.
  let implementation = defaultImplementation;

  /**
   * Replaces the default formatTime implementation with a custom implementation.
   *
   * @param {Function} customImplementation
   *        A function which will be used in place of the default formatTime
   *        implementation. Will receive the current time in seconds and the
   *        guide (in seconds) as arguments.
   */
  function setFormatTime(customImplementation) {
    implementation = customImplementation;
  }

  /**
   * Resets formatTime to the default implementation.
   */
  function resetFormatTime() {
    implementation = defaultImplementation;
  }

  /**
   * Delegates to either the default time formatting function or a custom
   * function supplied via `setFormatTime`.
   *
   * Formats seconds as a time string (H:MM:SS or M:SS). Supplying a
   * guide (in seconds) will force a number of leading zeros to cover the
   * length of the guide.
   *
   * @example  formatTime(125, 600) === "02:05"
   * @param    {number} seconds
   *           Number of seconds to be turned into a string
   *
   * @param    {number} guide
   *           Number (in seconds) to model the string after
   *
   * @return   {string}
   *           Time formatted as H:MM:SS or M:SS
   */
  function formatTime(seconds, guide = seconds) {
    return implementation(seconds, guide);
  }

  var Time = /*#__PURE__*/Object.freeze({
    __proto__: null,
    createTimeRanges: createTimeRanges,
    createTimeRange: createTimeRanges,
    setFormatTime: setFormatTime,
    resetFormatTime: resetFormatTime,
    formatTime: formatTime
  });

  /**
   * @file buffer.js
   * @module buffer
   */

  /**
   * Compute the percentage of the media that has been buffered.
   *
   * @param { import('./time').TimeRange } buffered
   *        The current `TimeRanges` object representing buffered time ranges
   *
   * @param {number} duration
   *        Total duration of the media
   *
   * @return {number}
   *         Percent buffered of the total duration in decimal form.
   */
  function bufferedPercent(buffered, duration) {
    let bufferedDuration = 0;
    let start;
    let end;
    if (!duration) {
      return 0;
    }
    if (!buffered || !buffered.length) {
      buffered = createTimeRanges(0, 0);
    }
    for (let i = 0; i < buffered.length; i++) {
      start = buffered.start(i);
      end = buffered.end(i);

      // buffered end can be bigger than duration by a very small fraction
      if (end > duration) {
        end = duration;
      }
      bufferedDuration += end - start;
    }
    return bufferedDuration / duration;
  }

  /**
   * @file media-error.js
   */

  /**
   * A Custom `MediaError` class which mimics the standard HTML5 `MediaError` class.
   *
   * @param {number|string|Object|MediaError} value
   *        This can be of multiple types:
   *        - number: should be a standard error code
   *        - string: an error message (the code will be 0)
   *        - Object: arbitrary properties
   *        - `MediaError` (native): used to populate a video.js `MediaError` object
   *        - `MediaError` (video.js): will return itself if it's already a
   *          video.js `MediaError` object.
   *
   * @see [MediaError Spec]{@link https://dev.w3.org/html5/spec-author-view/video.html#mediaerror}
   * @see [Encrypted MediaError Spec]{@link https://www.w3.org/TR/2013/WD-encrypted-media-20130510/#error-codes}
   *
   * @class MediaError
   */
  function MediaError(value) {
    // Allow redundant calls to this constructor to avoid having `instanceof`
    // checks peppered around the code.
    if (value instanceof MediaError) {
      return value;
    }
    if (typeof value === 'number') {
      this.code = value;
    } else if (typeof value === 'string') {
      // default code is zero, so this is a custom error
      this.message = value;
    } else if (isObject(value)) {
      // We assign the `code` property manually because native `MediaError` objects
      // do not expose it as an own/enumerable property of the object.
      if (typeof value.code === 'number') {
        this.code = value.code;
      }
      Object.assign(this, value);
    }
    if (!this.message) {
      this.message = MediaError.defaultMessages[this.code] || '';
    }
  }

  /**
   * The error code that refers two one of the defined `MediaError` types
   *
   * @type {Number}
   */
  MediaError.prototype.code = 0;

  /**
   * An optional message that to show with the error. Message is not part of the HTML5
   * video spec but allows for more informative custom errors.
   *
   * @type {String}
   */
  MediaError.prototype.message = '';

  /**
   * An optional status code that can be set by plugins to allow even more detail about
   * the error. For example a plugin might provide a specific HTTP status code and an
   * error message for that code. Then when the plugin gets that error this class will
   * know how to display an error message for it. This allows a custom message to show
   * up on the `Player` error overlay.
   *
   * @type {Array}
   */
  MediaError.prototype.status = null;

  /**
   * Errors indexed by the W3C standard. The order **CANNOT CHANGE**! See the
   * specification listed under {@link MediaError} for more information.
   *
   * @enum {array}
   * @readonly
   * @property {string} 0 - MEDIA_ERR_CUSTOM
   * @property {string} 1 - MEDIA_ERR_ABORTED
   * @property {string} 2 - MEDIA_ERR_NETWORK
   * @property {string} 3 - MEDIA_ERR_DECODE
   * @property {string} 4 - MEDIA_ERR_SRC_NOT_SUPPORTED
   * @property {string} 5 - MEDIA_ERR_ENCRYPTED
   */
  MediaError.errorTypes = ['MEDIA_ERR_CUSTOM', 'MEDIA_ERR_ABORTED', 'MEDIA_ERR_NETWORK', 'MEDIA_ERR_DECODE', 'MEDIA_ERR_SRC_NOT_SUPPORTED', 'MEDIA_ERR_ENCRYPTED'];

  /**
   * The default `MediaError` messages based on the {@link MediaError.errorTypes}.
   *
   * @type {Array}
   * @constant
   */
  MediaError.defaultMessages = {
    1: 'You aborted the media playback',
    2: 'A network error caused the media download to fail part-way.',
    3: 'The media playback was aborted due to a corruption problem or because the media used features your browser did not support.',
    4: 'The media could not be loaded, either because the server or network failed or because the format is not supported.',
    5: 'The media is encrypted and we do not have the keys to decrypt it.'
  };

  // Add types as properties on MediaError
  // e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
  for (let errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {
    MediaError[MediaError.errorTypes[errNum]] = errNum;
    // values should be accessible on both the class and instance
    MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;
  }

  var tuple = SafeParseTuple;
  function SafeParseTuple(obj, reviver) {
    var json;
    var error = null;
    try {
      json = JSON.parse(obj, reviver);
    } catch (err) {
      error = err;
    }
    return [error, json];
  }

  /**
   * Returns whether an object is `Promise`-like (i.e. has a `then` method).
   *
   * @param  {Object}  value
   *         An object that may or may not be `Promise`-like.
   *
   * @return {boolean}
   *         Whether or not the object is `Promise`-like.
   */
  function isPromise(value) {
    return value !== undefined && value !== null && typeof value.then === 'function';
  }

  /**
   * Silence a Promise-like object.
   *
   * This is useful for avoiding non-harmful, but potentially confusing "uncaught
   * play promise" rejection error messages.
   *
   * @param  {Object} value
   *         An object that may or may not be `Promise`-like.
   */
  function silencePromise(value) {
    if (isPromise(value)) {
      value.then(null, e => {});
    }
  }

  /**
   * @file text-track-list-converter.js Utilities for capturing text track state and
   * re-creating tracks based on a capture.
   *
   * @module text-track-list-converter
   */

  /**
   * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that
   * represents the {@link TextTrack}'s state.
   *
   * @param {TextTrack} track
   *        The text track to query.
   *
   * @return {Object}
   *         A serializable javascript representation of the TextTrack.
   * @private
   */
  const trackToJson_ = function (track) {
    const ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce((acc, prop, i) => {
      if (track[prop]) {
        acc[prop] = track[prop];
      }
      return acc;
    }, {
      cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {
        return {
          startTime: cue.startTime,
          endTime: cue.endTime,
          text: cue.text,
          id: cue.id
        };
      })
    });
    return ret;
  };

  /**
   * Examine a {@link Tech} and return a JSON-compatible javascript array that represents the
   * state of all {@link TextTrack}s currently configured. The return array is compatible with
   * {@link text-track-list-converter:jsonToTextTracks}.
   *
   * @param { import('../tech/tech').default } tech
   *        The tech object to query
   *
   * @return {Array}
   *         A serializable javascript representation of the {@link Tech}s
   *         {@link TextTrackList}.
   */
  const textTracksToJson = function (tech) {
    const trackEls = tech.$$('track');
    const trackObjs = Array.prototype.map.call(trackEls, t => t.track);
    const tracks = Array.prototype.map.call(trackEls, function (trackEl) {
      const json = trackToJson_(trackEl.track);
      if (trackEl.src) {
        json.src = trackEl.src;
      }
      return json;
    });
    return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {
      return trackObjs.indexOf(track) === -1;
    }).map(trackToJson_));
  };

  /**
   * Create a set of remote {@link TextTrack}s on a {@link Tech} based on an array of javascript
   * object {@link TextTrack} representations.
   *
   * @param {Array} json
   *        An array of `TextTrack` representation objects, like those that would be
   *        produced by `textTracksToJson`.
   *
   * @param {Tech} tech
   *        The `Tech` to create the `TextTrack`s on.
   */
  const jsonToTextTracks = function (json, tech) {
    json.forEach(function (track) {
      const addedTrack = tech.addRemoteTextTrack(track).track;
      if (!track.src && track.cues) {
        track.cues.forEach(cue => addedTrack.addCue(cue));
      }
    });
    return tech.textTracks();
  };
  var textTrackConverter = {
    textTracksToJson,
    jsonToTextTracks,
    trackToJson_
  };

  /**
   * @file modal-dialog.js
   */
  const MODAL_CLASS_NAME = 'vjs-modal-dialog';

  /**
   * The `ModalDialog` displays over the video and its controls, which blocks
   * interaction with the player until it is closed.
   *
   * Modal dialogs include a "Close" button and will close when that button
   * is activated - or when ESC is pressed anywhere.
   *
   * @extends Component
   */
  class ModalDialog extends Component {
    /**
     * Create an instance of this class.
     *
     * @param { import('./player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     *
     * @param { import('./utils/dom').ContentDescriptor} [options.content=undefined]
     *        Provide customized content for this modal.
     *
     * @param {string} [options.description]
     *        A text description for the modal, primarily for accessibility.
     *
     * @param {boolean} [options.fillAlways=false]
     *        Normally, modals are automatically filled only the first time
     *        they open. This tells the modal to refresh its content
     *        every time it opens.
     *
     * @param {string} [options.label]
     *        A text label for the modal, primarily for accessibility.
     *
     * @param {boolean} [options.pauseOnOpen=true]
     *        If `true`, playback will will be paused if playing when
     *        the modal opens, and resumed when it closes.
     *
     * @param {boolean} [options.temporary=true]
     *        If `true`, the modal can only be opened once; it will be
     *        disposed as soon as it's closed.
     *
     * @param {boolean} [options.uncloseable=false]
     *        If `true`, the user will not be able to close the modal
     *        through the UI in the normal ways. Programmatic closing is
     *        still possible.
     */
    constructor(player, options) {
      super(player, options);
      this.handleKeyDown_ = e => this.handleKeyDown(e);
      this.close_ = e => this.close(e);
      this.opened_ = this.hasBeenOpened_ = this.hasBeenFilled_ = false;
      this.closeable(!this.options_.uncloseable);
      this.content(this.options_.content);

      // Make sure the contentEl is defined AFTER any children are initialized
      // because we only want the contents of the modal in the contentEl
      // (not the UI elements like the close button).
      this.contentEl_ = createEl('div', {
        className: `${MODAL_CLASS_NAME}-content`
      }, {
        role: 'document'
      });
      this.descEl_ = createEl('p', {
        className: `${MODAL_CLASS_NAME}-description vjs-control-text`,
        id: this.el().getAttribute('aria-describedby')
      });
      textContent(this.descEl_, this.description());
      this.el_.appendChild(this.descEl_);
      this.el_.appendChild(this.contentEl_);
    }

    /**
     * Create the `ModalDialog`'s DOM element
     *
     * @return {Element}
     *         The DOM element that gets created.
     */
    createEl() {
      return super.createEl('div', {
        className: this.buildCSSClass(),
        tabIndex: -1
      }, {
        'aria-describedby': `${this.id()}_description`,
        'aria-hidden': 'true',
        'aria-label': this.label(),
        'role': 'dialog'
      });
    }
    dispose() {
      this.contentEl_ = null;
      this.descEl_ = null;
      this.previouslyActiveEl_ = null;
      super.dispose();
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */
    buildCSSClass() {
      return `${MODAL_CLASS_NAME} vjs-hidden ${super.buildCSSClass()}`;
    }

    /**
     * Returns the label string for this modal. Primarily used for accessibility.
     *
     * @return {string}
     *         the localized or raw label of this modal.
     */
    label() {
      return this.localize(this.options_.label || 'Modal Window');
    }

    /**
     * Returns the description string for this modal. Primarily used for
     * accessibility.
     *
     * @return {string}
     *         The localized or raw description of this modal.
     */
    description() {
      let desc = this.options_.description || this.localize('This is a modal window.');

      // Append a universal closeability message if the modal is closeable.
      if (this.closeable()) {
        desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');
      }
      return desc;
    }

    /**
     * Opens the modal.
     *
     * @fires ModalDialog#beforemodalopen
     * @fires ModalDialog#modalopen
     */
    open() {
      if (!this.opened_) {
        const player = this.player();

        /**
          * Fired just before a `ModalDialog` is opened.
          *
          * @event ModalDialog#beforemodalopen
          * @type {Event}
          */
        this.trigger('beforemodalopen');
        this.opened_ = true;

        // Fill content if the modal has never opened before and
        // never been filled.
        if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {
          this.fill();
        }

        // If the player was playing, pause it and take note of its previously
        // playing state.
        this.wasPlaying_ = !player.paused();
        if (this.options_.pauseOnOpen && this.wasPlaying_) {
          player.pause();
        }
        this.on('keydown', this.handleKeyDown_);

        // Hide controls and note if they were enabled.
        this.hadControls_ = player.controls();
        player.controls(false);
        this.show();
        this.conditionalFocus_();
        this.el().setAttribute('aria-hidden', 'false');

        /**
          * Fired just after a `ModalDialog` is opened.
          *
          * @event ModalDialog#modalopen
          * @type {Event}
          */
        this.trigger('modalopen');
        this.hasBeenOpened_ = true;
      }
    }

    /**
     * If the `ModalDialog` is currently open or closed.
     *
     * @param  {boolean} [value]
     *         If given, it will open (`true`) or close (`false`) the modal.
     *
     * @return {boolean}
     *         the current open state of the modaldialog
     */
    opened(value) {
      if (typeof value === 'boolean') {
        this[value ? 'open' : 'close']();
      }
      return this.opened_;
    }

    /**
     * Closes the modal, does nothing if the `ModalDialog` is
     * not open.
     *
     * @fires ModalDialog#beforemodalclose
     * @fires ModalDialog#modalclose
     */
    close() {
      if (!this.opened_) {
        return;
      }
      const player = this.player();

      /**
        * Fired just before a `ModalDialog` is closed.
        *
        * @event ModalDialog#beforemodalclose
        * @type {Event}
        */
      this.trigger('beforemodalclose');
      this.opened_ = false;
      if (this.wasPlaying_ && this.options_.pauseOnOpen) {
        player.play();
      }
      this.off('keydown', this.handleKeyDown_);
      if (this.hadControls_) {
        player.controls(true);
      }
      this.hide();
      this.el().setAttribute('aria-hidden', 'true');

      /**
        * Fired just after a `ModalDialog` is closed.
        *
        * @event ModalDialog#modalclose
        * @type {Event}
        */
      this.trigger('modalclose');
      this.conditionalBlur_();
      if (this.options_.temporary) {
        this.dispose();
      }
    }

    /**
     * Check to see if the `ModalDialog` is closeable via the UI.
     *
     * @param  {boolean} [value]
     *         If given as a boolean, it will set the `closeable` option.
     *
     * @return {boolean}
     *         Returns the final value of the closable option.
     */
    closeable(value) {
      if (typeof value === 'boolean') {
        const closeable = this.closeable_ = !!value;
        let close = this.getChild('closeButton');

        // If this is being made closeable and has no close button, add one.
        if (closeable && !close) {
          // The close button should be a child of the modal - not its
          // content element, so temporarily change the content element.
          const temp = this.contentEl_;
          this.contentEl_ = this.el_;
          close = this.addChild('closeButton', {
            controlText: 'Close Modal Dialog'
          });
          this.contentEl_ = temp;
          this.on(close, 'close', this.close_);
        }

        // If this is being made uncloseable and has a close button, remove it.
        if (!closeable && close) {
          this.off(close, 'close', this.close_);
          this.removeChild(close);
          close.dispose();
        }
      }
      return this.closeable_;
    }

    /**
     * Fill the modal's content element with the modal's "content" option.
     * The content element will be emptied before this change takes place.
     */
    fill() {
      this.fillWith(this.content());
    }

    /**
     * Fill the modal's content element with arbitrary content.
     * The content element will be emptied before this change takes place.
     *
     * @fires ModalDialog#beforemodalfill
     * @fires ModalDialog#modalfill
     *
     * @param { import('./utils/dom').ContentDescriptor} [content]
     *        The same rules apply to this as apply to the `content` option.
     */
    fillWith(content) {
      const contentEl = this.contentEl();
      const parentEl = contentEl.parentNode;
      const nextSiblingEl = contentEl.nextSibling;

      /**
        * Fired just before a `ModalDialog` is filled with content.
        *
        * @event ModalDialog#beforemodalfill
        * @type {Event}
        */
      this.trigger('beforemodalfill');
      this.hasBeenFilled_ = true;

      // Detach the content element from the DOM before performing
      // manipulation to avoid modifying the live DOM multiple times.
      parentEl.removeChild(contentEl);
      this.empty();
      insertContent(contentEl, content);
      /**
       * Fired just after a `ModalDialog` is filled with content.
       *
       * @event ModalDialog#modalfill
       * @type {Event}
       */
      this.trigger('modalfill');

      // Re-inject the re-filled content element.
      if (nextSiblingEl) {
        parentEl.insertBefore(contentEl, nextSiblingEl);
      } else {
        parentEl.appendChild(contentEl);
      }

      // make sure that the close button is last in the dialog DOM
      const closeButton = this.getChild('closeButton');
      if (closeButton) {
        parentEl.appendChild(closeButton.el_);
      }
    }

    /**
     * Empties the content element. This happens anytime the modal is filled.
     *
     * @fires ModalDialog#beforemodalempty
     * @fires ModalDialog#modalempty
     */
    empty() {
      /**
      * Fired just before a `ModalDialog` is emptied.
      *
      * @event ModalDialog#beforemodalempty
      * @type {Event}
      */
      this.trigger('beforemodalempty');
      emptyEl(this.contentEl());

      /**
      * Fired just after a `ModalDialog` is emptied.
      *
      * @event ModalDialog#modalempty
      * @type {Event}
      */
      this.trigger('modalempty');
    }

    /**
     * Gets or sets the modal content, which gets normalized before being
     * rendered into the DOM.
     *
     * This does not update the DOM or fill the modal, but it is called during
     * that process.
     *
     * @param  { import('./utils/dom').ContentDescriptor} [value]
     *         If defined, sets the internal content value to be used on the
     *         next call(s) to `fill`. This value is normalized before being
     *         inserted. To "clear" the internal content value, pass `null`.
     *
     * @return { import('./utils/dom').ContentDescriptor}
     *         The current content of the modal dialog
     */
    content(value) {
      if (typeof value !== 'undefined') {
        this.content_ = value;
      }
      return this.content_;
    }

    /**
     * conditionally focus the modal dialog if focus was previously on the player.
     *
     * @private
     */
    conditionalFocus_() {
      const activeEl = document.activeElement;
      const playerEl = this.player_.el_;
      this.previouslyActiveEl_ = null;
      if (playerEl.contains(activeEl) || playerEl === activeEl) {
        this.previouslyActiveEl_ = activeEl;
        this.focus();
      }
    }

    /**
     * conditionally blur the element and refocus the last focused element
     *
     * @private
     */
    conditionalBlur_() {
      if (this.previouslyActiveEl_) {
        this.previouslyActiveEl_.focus();
        this.previouslyActiveEl_ = null;
      }
    }

    /**
     * Keydown handler. Attached when modal is focused.
     *
     * @listens keydown
     */
    handleKeyDown(event) {
      // Do not allow keydowns to reach out of the modal dialog.
      event.stopPropagation();
      if (keycode.isEventKey(event, 'Escape') && this.closeable()) {
        event.preventDefault();
        this.close();
        return;
      }

      // exit early if it isn't a tab key
      if (!keycode.isEventKey(event, 'Tab')) {
        return;
      }
      const focusableEls = this.focusableEls_();
      const activeEl = this.el_.querySelector(':focus');
      let focusIndex;
      for (let i = 0; i < focusableEls.length; i++) {
        if (activeEl === focusableEls[i]) {
          focusIndex = i;
          break;
        }
      }
      if (document.activeElement === this.el_) {
        focusIndex = 0;
      }
      if (event.shiftKey && focusIndex === 0) {
        focusableEls[focusableEls.length - 1].focus();
        event.preventDefault();
      } else if (!event.shiftKey && focusIndex === focusableEls.length - 1) {
        focusableEls[0].focus();
        event.preventDefault();
      }
    }

    /**
     * get all focusable elements
     *
     * @private
     */
    focusableEls_() {
      const allChildren = this.el_.querySelectorAll('*');
      return Array.prototype.filter.call(allChildren, child => {
        return (child instanceof window.HTMLAnchorElement || child instanceof window.HTMLAreaElement) && child.hasAttribute('href') || (child instanceof window.HTMLInputElement || child instanceof window.HTMLSelectElement || child instanceof window.HTMLTextAreaElement || child instanceof window.HTMLButtonElement) && !child.hasAttribute('disabled') || child instanceof window.HTMLIFrameElement || child instanceof window.HTMLObjectElement || child instanceof window.HTMLEmbedElement || child.hasAttribute('tabindex') && child.getAttribute('tabindex') !== -1 || child.hasAttribute('contenteditable');
      });
    }
  }

  /**
   * Default options for `ModalDialog` default options.
   *
   * @type {Object}
   * @private
   */
  ModalDialog.prototype.options_ = {
    pauseOnOpen: true,
    temporary: true
  };
  Component.registerComponent('ModalDialog', ModalDialog);

  /**
   * @file track-list.js
   */

  /**
   * Common functionaliy between {@link TextTrackList}, {@link AudioTrackList}, and
   * {@link VideoTrackList}
   *
   * @extends EventTarget
   */
  class TrackList extends EventTarget {
    /**
     * Create an instance of this class
     *
     * @param { import('./track').default[] } tracks
     *        A list of tracks to initialize the list with.
     *
     * @abstract
     */
    constructor(tracks = []) {
      super();
      this.tracks_ = [];

      /**
       * @memberof TrackList
       * @member {number} length
       *         The current number of `Track`s in the this Trackist.
       * @instance
       */
      Object.defineProperty(this, 'length', {
        get() {
          return this.tracks_.length;
        }
      });
      for (let i = 0; i < tracks.length; i++) {
        this.addTrack(tracks[i]);
      }
    }

    /**
     * Add a {@link Track} to the `TrackList`
     *
     * @param { import('./track').default } track
     *        The audio, video, or text track to add to the list.
     *
     * @fires TrackList#addtrack
     */
    addTrack(track) {
      const index = this.tracks_.length;
      if (!('' + index in this)) {
        Object.defineProperty(this, index, {
          get() {
            return this.tracks_[index];
          }
        });
      }

      // Do not add duplicate tracks
      if (this.tracks_.indexOf(track) === -1) {
        this.tracks_.push(track);
        /**
         * Triggered when a track is added to a track list.
         *
         * @event TrackList#addtrack
         * @type {Event}
         * @property {Track} track
         *           A reference to track that was added.
         */
        this.trigger({
          track,
          type: 'addtrack',
          target: this
        });
      }

      /**
       * Triggered when a track label is changed.
       *
       * @event TrackList#addtrack
       * @type {Event}
       * @property {Track} track
       *           A reference to track that was added.
       */
      track.labelchange_ = () => {
        this.trigger({
          track,
          type: 'labelchange',
          target: this
        });
      };
      if (isEvented(track)) {
        track.addEventListener('labelchange', track.labelchange_);
      }
    }

    /**
     * Remove a {@link Track} from the `TrackList`
     *
     * @param { import('./track').default } rtrack
     *        The audio, video, or text track to remove from the list.
     *
     * @fires TrackList#removetrack
     */
    removeTrack(rtrack) {
      let track;
      for (let i = 0, l = this.length; i < l; i++) {
        if (this[i] === rtrack) {
          track = this[i];
          if (track.off) {
            track.off();
          }
          this.tracks_.splice(i, 1);
          break;
        }
      }
      if (!track) {
        return;
      }

      /**
       * Triggered when a track is removed from track list.
       *
       * @event TrackList#removetrack
       * @type {Event}
       * @property {Track} track
       *           A reference to track that was removed.
       */
      this.trigger({
        track,
        type: 'removetrack',
        target: this
      });
    }

    /**
     * Get a Track from the TrackList by a tracks id
     *
     * @param {string} id - the id of the track to get
     * @method getTrackById
     * @return { import('./track').default }
     * @private
     */
    getTrackById(id) {
      let result = null;
      for (let i = 0, l = this.length; i < l; i++) {
        const track = this[i];
        if (track.id === id) {
          result = track;
          break;
        }
      }
      return result;
    }
  }

  /**
   * Triggered when a different track is selected/enabled.
   *
   * @event TrackList#change
   * @type {Event}
   */

  /**
   * Events that can be called with on + eventName. See {@link EventHandler}.
   *
   * @property {Object} TrackList#allowedEvents_
   * @private
   */
  TrackList.prototype.allowedEvents_ = {
    change: 'change',
    addtrack: 'addtrack',
    removetrack: 'removetrack',
    labelchange: 'labelchange'
  };

  // emulate attribute EventHandler support to allow for feature detection
  for (const event in TrackList.prototype.allowedEvents_) {
    TrackList.prototype['on' + event] = null;
  }

  /**
   * @file audio-track-list.js
   */

  /**
   * Anywhere we call this function we diverge from the spec
   * as we only support one enabled audiotrack at a time
   *
   * @param {AudioTrackList} list
   *        list to work on
   *
   * @param { import('./audio-track').default } track
   *        The track to skip
   *
   * @private
   */
  const disableOthers$1 = function (list, track) {
    for (let i = 0; i < list.length; i++) {
      if (!Object.keys(list[i]).length || track.id === list[i].id) {
        continue;
      }
      // another audio track is enabled, disable it
      list[i].enabled = false;
    }
  };

  /**
   * The current list of {@link AudioTrack} for a media file.
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist}
   * @extends TrackList
   */
  class AudioTrackList extends TrackList {
    /**
     * Create an instance of this class.
     *
     * @param {AudioTrack[]} [tracks=[]]
     *        A list of `AudioTrack` to instantiate the list with.
     */
    constructor(tracks = []) {
      // make sure only 1 track is enabled
      // sorted from last index to first index
      for (let i = tracks.length - 1; i >= 0; i--) {
        if (tracks[i].enabled) {
          disableOthers$1(tracks, tracks[i]);
          break;
        }
      }
      super(tracks);
      this.changing_ = false;
    }

    /**
     * Add an {@link AudioTrack} to the `AudioTrackList`.
     *
     * @param { import('./audio-track').default } track
     *        The AudioTrack to add to the list
     *
     * @fires TrackList#addtrack
     */
    addTrack(track) {
      if (track.enabled) {
        disableOthers$1(this, track);
      }
      super.addTrack(track);
      // native tracks don't have this
      if (!track.addEventListener) {
        return;
      }
      track.enabledChange_ = () => {
        // when we are disabling other tracks (since we don't support
        // more than one track at a time) we will set changing_
        // to true so that we don't trigger additional change events
        if (this.changing_) {
          return;
        }
        this.changing_ = true;
        disableOthers$1(this, track);
        this.changing_ = false;
        this.trigger('change');
      };

      /**
       * @listens AudioTrack#enabledchange
       * @fires TrackList#change
       */
      track.addEventListener('enabledchange', track.enabledChange_);
    }
    removeTrack(rtrack) {
      super.removeTrack(rtrack);
      if (rtrack.removeEventListener && rtrack.enabledChange_) {
        rtrack.removeEventListener('enabledchange', rtrack.enabledChange_);
        rtrack.enabledChange_ = null;
      }
    }
  }

  /**
   * @file video-track-list.js
   */

  /**
   * Un-select all other {@link VideoTrack}s that are selected.
   *
   * @param {VideoTrackList} list
   *        list to work on
   *
   * @param { import('./video-track').default } track
   *        The track to skip
   *
   * @private
   */
  const disableOthers = function (list, track) {
    for (let i = 0; i < list.length; i++) {
      if (!Object.keys(list[i]).length || track.id === list[i].id) {
        continue;
      }
      // another video track is enabled, disable it
      list[i].selected = false;
    }
  };

  /**
   * The current list of {@link VideoTrack} for a video.
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist}
   * @extends TrackList
   */
  class VideoTrackList extends TrackList {
    /**
     * Create an instance of this class.
     *
     * @param {VideoTrack[]} [tracks=[]]
     *        A list of `VideoTrack` to instantiate the list with.
     */
    constructor(tracks = []) {
      // make sure only 1 track is enabled
      // sorted from last index to first index
      for (let i = tracks.length - 1; i >= 0; i--) {
        if (tracks[i].selected) {
          disableOthers(tracks, tracks[i]);
          break;
        }
      }
      super(tracks);
      this.changing_ = false;

      /**
       * @member {number} VideoTrackList#selectedIndex
       *         The current index of the selected {@link VideoTrack`}.
       */
      Object.defineProperty(this, 'selectedIndex', {
        get() {
          for (let i = 0; i < this.length; i++) {
            if (this[i].selected) {
              return i;
            }
          }
          return -1;
        },
        set() {}
      });
    }

    /**
     * Add a {@link VideoTrack} to the `VideoTrackList`.
     *
     * @param { import('./video-track').default } track
     *        The VideoTrack to add to the list
     *
     * @fires TrackList#addtrack
     */
    addTrack(track) {
      if (track.selected) {
        disableOthers(this, track);
      }
      super.addTrack(track);
      // native tracks don't have this
      if (!track.addEventListener) {
        return;
      }
      track.selectedChange_ = () => {
        if (this.changing_) {
          return;
        }
        this.changing_ = true;
        disableOthers(this, track);
        this.changing_ = false;
        this.trigger('change');
      };

      /**
       * @listens VideoTrack#selectedchange
       * @fires TrackList#change
       */
      track.addEventListener('selectedchange', track.selectedChange_);
    }
    removeTrack(rtrack) {
      super.removeTrack(rtrack);
      if (rtrack.removeEventListener && rtrack.selectedChange_) {
        rtrack.removeEventListener('selectedchange', rtrack.selectedChange_);
        rtrack.selectedChange_ = null;
      }
    }
  }

  /**
   * @file text-track-list.js
   */

  /**
   * The current list of {@link TextTrack} for a media file.
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist}
   * @extends TrackList
   */
  class TextTrackList extends TrackList {
    /**
     * Add a {@link TextTrack} to the `TextTrackList`
     *
     * @param { import('./text-track').default } track
     *        The text track to add to the list.
     *
     * @fires TrackList#addtrack
     */
    addTrack(track) {
      super.addTrack(track);
      if (!this.queueChange_) {
        this.queueChange_ = () => this.queueTrigger('change');
      }
      if (!this.triggerSelectedlanguagechange) {
        this.triggerSelectedlanguagechange_ = () => this.trigger('selectedlanguagechange');
      }

      /**
       * @listens TextTrack#modechange
       * @fires TrackList#change
       */
      track.addEventListener('modechange', this.queueChange_);
      const nonLanguageTextTrackKind = ['metadata', 'chapters'];
      if (nonLanguageTextTrackKind.indexOf(track.kind) === -1) {
        track.addEventListener('modechange', this.triggerSelectedlanguagechange_);
      }
    }
    removeTrack(rtrack) {
      super.removeTrack(rtrack);

      // manually remove the event handlers we added
      if (rtrack.removeEventListener) {
        if (this.queueChange_) {
          rtrack.removeEventListener('modechange', this.queueChange_);
        }
        if (this.selectedlanguagechange_) {
          rtrack.removeEventListener('modechange', this.triggerSelectedlanguagechange_);
        }
      }
    }
  }

  /**
   * @file html-track-element-list.js
   */

  /**
   * The current list of {@link HtmlTrackElement}s.
   */
  class HtmlTrackElementList {
    /**
     * Create an instance of this class.
     *
     * @param {HtmlTrackElement[]} [tracks=[]]
     *        A list of `HtmlTrackElement` to instantiate the list with.
     */
    constructor(trackElements = []) {
      this.trackElements_ = [];

      /**
       * @memberof HtmlTrackElementList
       * @member {number} length
       *         The current number of `Track`s in the this Trackist.
       * @instance
       */
      Object.defineProperty(this, 'length', {
        get() {
          return this.trackElements_.length;
        }
      });
      for (let i = 0, length = trackElements.length; i < length; i++) {
        this.addTrackElement_(trackElements[i]);
      }
    }

    /**
     * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`
     *
     * @param {HtmlTrackElement} trackElement
     *        The track element to add to the list.
     *
     * @private
     */
    addTrackElement_(trackElement) {
      const index = this.trackElements_.length;
      if (!('' + index in this)) {
        Object.defineProperty(this, index, {
          get() {
            return this.trackElements_[index];
          }
        });
      }

      // Do not add duplicate elements
      if (this.trackElements_.indexOf(trackElement) === -1) {
        this.trackElements_.push(trackElement);
      }
    }

    /**
     * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an
     * {@link TextTrack}.
     *
     * @param {TextTrack} track
     *        The track associated with a track element.
     *
     * @return {HtmlTrackElement|undefined}
     *         The track element that was found or undefined.
     *
     * @private
     */
    getTrackElementByTrack_(track) {
      let trackElement_;
      for (let i = 0, length = this.trackElements_.length; i < length; i++) {
        if (track === this.trackElements_[i].track) {
          trackElement_ = this.trackElements_[i];
          break;
        }
      }
      return trackElement_;
    }

    /**
     * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`
     *
     * @param {HtmlTrackElement} trackElement
     *        The track element to remove from the list.
     *
     * @private
     */
    removeTrackElement_(trackElement) {
      for (let i = 0, length = this.trackElements_.length; i < length; i++) {
        if (trackElement === this.trackElements_[i]) {
          if (this.trackElements_[i].track && typeof this.trackElements_[i].track.off === 'function') {
            this.trackElements_[i].track.off();
          }
          if (typeof this.trackElements_[i].off === 'function') {
            this.trackElements_[i].off();
          }
          this.trackElements_.splice(i, 1);
          break;
        }
      }
    }
  }

  /**
   * @file text-track-cue-list.js
   */

  /**
   * @typedef {Object} TextTrackCueList~TextTrackCue
   *
   * @property {string} id
   *           The unique id for this text track cue
   *
   * @property {number} startTime
   *           The start time for this text track cue
   *
   * @property {number} endTime
   *           The end time for this text track cue
   *
   * @property {boolean} pauseOnExit
   *           Pause when the end time is reached if true.
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcue}
   */

  /**
   * A List of TextTrackCues.
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist}
   */
  class TextTrackCueList {
    /**
     * Create an instance of this class..
     *
     * @param {Array} cues
     *        A list of cues to be initialized with
     */
    constructor(cues) {
      TextTrackCueList.prototype.setCues_.call(this, cues);

      /**
       * @memberof TextTrackCueList
       * @member {number} length
       *         The current number of `TextTrackCue`s in the TextTrackCueList.
       * @instance
       */
      Object.defineProperty(this, 'length', {
        get() {
          return this.length_;
        }
      });
    }

    /**
     * A setter for cues in this list. Creates getters
     * an an index for the cues.
     *
     * @param {Array} cues
     *        An array of cues to set
     *
     * @private
     */
    setCues_(cues) {
      const oldLength = this.length || 0;
      let i = 0;
      const l = cues.length;
      this.cues_ = cues;
      this.length_ = cues.length;
      const defineProp = function (index) {
        if (!('' + index in this)) {
          Object.defineProperty(this, '' + index, {
            get() {
              return this.cues_[index];
            }
          });
        }
      };
      if (oldLength < l) {
        i = oldLength;
        for (; i < l; i++) {
          defineProp.call(this, i);
        }
      }
    }

    /**
     * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.
     *
     * @param {string} id
     *        The id of the cue that should be searched for.
     *
     * @return {TextTrackCueList~TextTrackCue|null}
     *         A single cue or null if none was found.
     */
    getCueById(id) {
      let result = null;
      for (let i = 0, l = this.length; i < l; i++) {
        const cue = this[i];
        if (cue.id === id) {
          result = cue;
          break;
        }
      }
      return result;
    }
  }

  /**
   * @file track-kinds.js
   */

  /**
   * All possible `VideoTrackKind`s
   *
   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind
   * @typedef VideoTrack~Kind
   * @enum
   */
  const VideoTrackKind = {
    alternative: 'alternative',
    captions: 'captions',
    main: 'main',
    sign: 'sign',
    subtitles: 'subtitles',
    commentary: 'commentary'
  };

  /**
   * All possible `AudioTrackKind`s
   *
   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-audiotrack-kind
   * @typedef AudioTrack~Kind
   * @enum
   */
  const AudioTrackKind = {
    'alternative': 'alternative',
    'descriptions': 'descriptions',
    'main': 'main',
    'main-desc': 'main-desc',
    'translation': 'translation',
    'commentary': 'commentary'
  };

  /**
   * All possible `TextTrackKind`s
   *
   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-texttrack-kind
   * @typedef TextTrack~Kind
   * @enum
   */
  const TextTrackKind = {
    subtitles: 'subtitles',
    captions: 'captions',
    descriptions: 'descriptions',
    chapters: 'chapters',
    metadata: 'metadata'
  };

  /**
   * All possible `TextTrackMode`s
   *
   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode
   * @typedef TextTrack~Mode
   * @enum
   */
  const TextTrackMode = {
    disabled: 'disabled',
    hidden: 'hidden',
    showing: 'showing'
  };

  /**
   * @file track.js
   */

  /**
   * A Track class that contains all of the common functionality for {@link AudioTrack},
   * {@link VideoTrack}, and {@link TextTrack}.
   *
   * > Note: This class should not be used directly
   *
   * @see {@link https://html.spec.whatwg.org/multipage/embedded-content.html}
   * @extends EventTarget
   * @abstract
   */
  class Track extends EventTarget {
    /**
     * Create an instance of this class.
     *
     * @param {Object} [options={}]
     *        Object of option names and values
     *
     * @param {string} [options.kind='']
     *        A valid kind for the track type you are creating.
     *
     * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
     *        A unique id for this AudioTrack.
     *
     * @param {string} [options.label='']
     *        The menu label for this track.
     *
     * @param {string} [options.language='']
     *        A valid two character language code.
     *
     * @abstract
     */
    constructor(options = {}) {
      super();
      const trackProps = {
        id: options.id || 'vjs_track_' + newGUID(),
        kind: options.kind || '',
        language: options.language || ''
      };
      let label = options.label || '';

      /**
       * @memberof Track
       * @member {string} id
       *         The id of this track. Cannot be changed after creation.
       * @instance
       *
       * @readonly
       */

      /**
       * @memberof Track
       * @member {string} kind
       *         The kind of track that this is. Cannot be changed after creation.
       * @instance
       *
       * @readonly
       */

      /**
       * @memberof Track
       * @member {string} language
       *         The two letter language code for this track. Cannot be changed after
       *         creation.
       * @instance
       *
       * @readonly
       */

      for (const key in trackProps) {
        Object.defineProperty(this, key, {
          get() {
            return trackProps[key];
          },
          set() {}
        });
      }

      /**
       * @memberof Track
       * @member {string} label
       *         The label of this track. Cannot be changed after creation.
       * @instance
       *
       * @fires Track#labelchange
       */
      Object.defineProperty(this, 'label', {
        get() {
          return label;
        },
        set(newLabel) {
          if (newLabel !== label) {
            label = newLabel;

            /**
             * An event that fires when label changes on this track.
             *
             * > Note: This is not part of the spec!
             *
             * @event Track#labelchange
             * @type {Event}
             */
            this.trigger('labelchange');
          }
        }
      });
    }
  }

  /**
   * @file url.js
   * @module url
   */

  /**
   * @typedef {Object} url:URLObject
   *
   * @property {string} protocol
   *           The protocol of the url that was parsed.
   *
   * @property {string} hostname
   *           The hostname of the url that was parsed.
   *
   * @property {string} port
   *           The port of the url that was parsed.
   *
   * @property {string} pathname
   *           The pathname of the url that was parsed.
   *
   * @property {string} search
   *           The search query of the url that was parsed.
   *
   * @property {string} hash
   *           The hash of the url that was parsed.
   *
   * @property {string} host
   *           The host of the url that was parsed.
   */

  /**
   * Resolve and parse the elements of a URL.
   *
   * @function
   * @param    {String} url
   *           The url to parse
   *
   * @return   {url:URLObject}
   *           An object of url details
   */
  const parseUrl = function (url) {
    // This entire method can be replace with URL once we are able to drop IE11

    const props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host'];

    // add the url to an anchor and let the browser parse the URL
    const a = document.createElement('a');
    a.href = url;

    // Copy the specific URL properties to a new object
    // This is also needed for IE because the anchor loses its
    // properties when it's removed from the dom
    const details = {};
    for (let i = 0; i < props.length; i++) {
      details[props[i]] = a[props[i]];
    }

    // IE adds the port to the host property unlike everyone else. If
    // a port identifier is added for standard ports, strip it.
    if (details.protocol === 'http:') {
      details.host = details.host.replace(/:80$/, '');
    }
    if (details.protocol === 'https:') {
      details.host = details.host.replace(/:443$/, '');
    }
    if (!details.protocol) {
      details.protocol = window.location.protocol;
    }

    /* istanbul ignore if */
    if (!details.host) {
      details.host = window.location.host;
    }
    return details;
  };

  /**
   * Get absolute version of relative URL.
   *
   * @function
   * @param    {string} url
   *           URL to make absolute
   *
   * @return   {string}
   *           Absolute URL
   *
   * @see      http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue
   */
  const getAbsoluteURL = function (url) {
    // Check if absolute URL
    if (!url.match(/^https?:\/\//)) {
      // Add the url to an anchor and let the browser parse it to convert to an absolute url
      const a = document.createElement('a');
      a.href = url;
      url = a.href;
    }
    return url;
  };

  /**
   * Returns the extension of the passed file name. It will return an empty string
   * if passed an invalid path.
   *
   * @function
   * @param    {string} path
   *           The fileName path like '/path/to/file.mp4'
   *
   * @return  {string}
   *           The extension in lower case or an empty string if no
   *           extension could be found.
   */
  const getFileExtension = function (path) {
    if (typeof path === 'string') {
      const splitPathRe = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/;
      const pathParts = splitPathRe.exec(path);
      if (pathParts) {
        return pathParts.pop().toLowerCase();
      }
    }
    return '';
  };

  /**
   * Returns whether the url passed is a cross domain request or not.
   *
   * @function
   * @param    {string} url
   *           The url to check.
   *
   * @param    {Object} [winLoc]
   *           the domain to check the url against, defaults to window.location
   *
   * @param    {string} [winLoc.protocol]
   *           The window location protocol defaults to window.location.protocol
   *
   * @param    {string} [winLoc.host]
   *           The window location host defaults to window.location.host
   *
   * @return   {boolean}
   *           Whether it is a cross domain request or not.
   */
  const isCrossOrigin = function (url, winLoc = window.location) {
    const urlInfo = parseUrl(url);

    // IE8 protocol relative urls will return ':' for protocol
    const srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol;

    // Check if url is for another domain/origin
    // IE8 doesn't know location.origin, so we won't rely on it here
    const crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;
    return crossOrigin;
  };

  var Url = /*#__PURE__*/Object.freeze({
    __proto__: null,
    parseUrl: parseUrl,
    getAbsoluteURL: getAbsoluteURL,
    getFileExtension: getFileExtension,
    isCrossOrigin: isCrossOrigin
  });

  var win;
  if (typeof window !== "undefined") {
    win = window;
  } else if (typeof commonjsGlobal !== "undefined") {
    win = commonjsGlobal;
  } else if (typeof self !== "undefined") {
    win = self;
  } else {
    win = {};
  }
  var window_1 = win;

  var _extends_1 = createCommonjsModule(function (module) {
    function _extends() {
      module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _extends.apply(this, arguments);
    }
    module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;
  });
  unwrapExports(_extends_1);

  var isFunction_1 = isFunction;
  var toString = Object.prototype.toString;
  function isFunction(fn) {
    if (!fn) {
      return false;
    }
    var string = toString.call(fn);
    return string === '[object Function]' || typeof fn === 'function' && string !== '[object RegExp]' || typeof window !== 'undefined' && (
    // IE8 and below
    fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt);
  }

  var httpResponseHandler = function httpResponseHandler(callback, decodeResponseBody) {
    if (decodeResponseBody === void 0) {
      decodeResponseBody = false;
    }
    return function (err, response, responseBody) {
      // if the XHR failed, return that error
      if (err) {
        callback(err);
        return;
      } // if the HTTP status code is 4xx or 5xx, the request also failed

      if (response.statusCode >= 400 && response.statusCode <= 599) {
        var cause = responseBody;
        if (decodeResponseBody) {
          if (window_1.TextDecoder) {
            var charset = getCharset(response.headers && response.headers['content-type']);
            try {
              cause = new TextDecoder(charset).decode(responseBody);
            } catch (e) {}
          } else {
            cause = String.fromCharCode.apply(null, new Uint8Array(responseBody));
          }
        }
        callback({
          cause: cause
        });
        return;
      } // otherwise, request succeeded

      callback(null, responseBody);
    };
  };
  function getCharset(contentTypeHeader) {
    if (contentTypeHeader === void 0) {
      contentTypeHeader = '';
    }
    return contentTypeHeader.toLowerCase().split(';').reduce(function (charset, contentType) {
      var _contentType$split = contentType.split('='),
        type = _contentType$split[0],
        value = _contentType$split[1];
      if (type.trim() === 'charset') {
        return value.trim();
      }
      return charset;
    }, 'utf-8');
  }
  var httpHandler = httpResponseHandler;

  createXHR.httpHandler = httpHandler;
  /**
   * @license
   * slighly modified parse-headers 2.0.2 <https://github.com/kesla/parse-headers/>
   * Copyright (c) 2014 David Björklund
   * Available under the MIT license
   * <https://github.com/kesla/parse-headers/blob/master/LICENCE>
   */

  var parseHeaders = function parseHeaders(headers) {
    var result = {};
    if (!headers) {
      return result;
    }
    headers.trim().split('\n').forEach(function (row) {
      var index = row.indexOf(':');
      var key = row.slice(0, index).trim().toLowerCase();
      var value = row.slice(index + 1).trim();
      if (typeof result[key] === 'undefined') {
        result[key] = value;
      } else if (Array.isArray(result[key])) {
        result[key].push(value);
      } else {
        result[key] = [result[key], value];
      }
    });
    return result;
  };
  var lib = createXHR; // Allow use of default import syntax in TypeScript

  var default_1 = createXHR;
  createXHR.XMLHttpRequest = window_1.XMLHttpRequest || noop;
  createXHR.XDomainRequest = "withCredentials" in new createXHR.XMLHttpRequest() ? createXHR.XMLHttpRequest : window_1.XDomainRequest;
  forEachArray(["get", "put", "post", "patch", "head", "delete"], function (method) {
    createXHR[method === "delete" ? "del" : method] = function (uri, options, callback) {
      options = initParams(uri, options, callback);
      options.method = method.toUpperCase();
      return _createXHR(options);
    };
  });
  function forEachArray(array, iterator) {
    for (var i = 0; i < array.length; i++) {
      iterator(array[i]);
    }
  }
  function isEmpty(obj) {
    for (var i in obj) {
      if (obj.hasOwnProperty(i)) return false;
    }
    return true;
  }
  function initParams(uri, options, callback) {
    var params = uri;
    if (isFunction_1(options)) {
      callback = options;
      if (typeof uri === "string") {
        params = {
          uri: uri
        };
      }
    } else {
      params = _extends_1({}, options, {
        uri: uri
      });
    }
    params.callback = callback;
    return params;
  }
  function createXHR(uri, options, callback) {
    options = initParams(uri, options, callback);
    return _createXHR(options);
  }
  function _createXHR(options) {
    if (typeof options.callback === "undefined") {
      throw new Error("callback argument missing");
    }
    var called = false;
    var callback = function cbOnce(err, response, body) {
      if (!called) {
        called = true;
        options.callback(err, response, body);
      }
    };
    function readystatechange() {
      if (xhr.readyState === 4) {
        setTimeout(loadFunc, 0);
      }
    }
    function getBody() {
      // Chrome with requestType=blob throws errors arround when even testing access to responseText
      var body = undefined;
      if (xhr.response) {
        body = xhr.response;
      } else {
        body = xhr.responseText || getXml(xhr);
      }
      if (isJson) {
        try {
          body = JSON.parse(body);
        } catch (e) {}
      }
      return body;
    }
    function errorFunc(evt) {
      clearTimeout(timeoutTimer);
      if (!(evt instanceof Error)) {
        evt = new Error("" + (evt || "Unknown XMLHttpRequest Error"));
      }
      evt.statusCode = 0;
      return callback(evt, failureResponse);
    } // will load the data & process the response in a special response object

    function loadFunc() {
      if (aborted) return;
      var status;
      clearTimeout(timeoutTimer);
      if (options.useXDR && xhr.status === undefined) {
        //IE8 CORS GET successful response doesn't have a status field, but body is fine
        status = 200;
      } else {
        status = xhr.status === 1223 ? 204 : xhr.status;
      }
      var response = failureResponse;
      var err = null;
      if (status !== 0) {
        response = {
          body: getBody(),
          statusCode: status,
          method: method,
          headers: {},
          url: uri,
          rawRequest: xhr
        };
        if (xhr.getAllResponseHeaders) {
          //remember xhr can in fact be XDR for CORS in IE
          response.headers = parseHeaders(xhr.getAllResponseHeaders());
        }
      } else {
        err = new Error("Internal XMLHttpRequest Error");
      }
      return callback(err, response, response.body);
    }
    var xhr = options.xhr || null;
    if (!xhr) {
      if (options.cors || options.useXDR) {
        xhr = new createXHR.XDomainRequest();
      } else {
        xhr = new createXHR.XMLHttpRequest();
      }
    }
    var key;
    var aborted;
    var uri = xhr.url = options.uri || options.url;
    var method = xhr.method = options.method || "GET";
    var body = options.body || options.data;
    var headers = xhr.headers = options.headers || {};
    var sync = !!options.sync;
    var isJson = false;
    var timeoutTimer;
    var failureResponse = {
      body: undefined,
      headers: {},
      statusCode: 0,
      method: method,
      url: uri,
      rawRequest: xhr
    };
    if ("json" in options && options.json !== false) {
      isJson = true;
      headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json"); //Don't override existing accept header declared by user

      if (method !== "GET" && method !== "HEAD") {
        headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json"); //Don't override existing accept header declared by user

        body = JSON.stringify(options.json === true ? body : options.json);
      }
    }
    xhr.onreadystatechange = readystatechange;
    xhr.onload = loadFunc;
    xhr.onerror = errorFunc; // IE9 must have onprogress be set to a unique function.

    xhr.onprogress = function () {// IE must die
    };
    xhr.onabort = function () {
      aborted = true;
    };
    xhr.ontimeout = errorFunc;
    xhr.open(method, uri, !sync, options.username, options.password); //has to be after open

    if (!sync) {
      xhr.withCredentials = !!options.withCredentials;
    } // Cannot set timeout with sync request
    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent

    if (!sync && options.timeout > 0) {
      timeoutTimer = setTimeout(function () {
        if (aborted) return;
        aborted = true; //IE9 may still call readystatechange

        xhr.abort("timeout");
        var e = new Error("XMLHttpRequest timeout");
        e.code = "ETIMEDOUT";
        errorFunc(e);
      }, options.timeout);
    }
    if (xhr.setRequestHeader) {
      for (key in headers) {
        if (headers.hasOwnProperty(key)) {
          xhr.setRequestHeader(key, headers[key]);
        }
      }
    } else if (options.headers && !isEmpty(options.headers)) {
      throw new Error("Headers cannot be set on an XDomainRequest object");
    }
    if ("responseType" in options) {
      xhr.responseType = options.responseType;
    }
    if ("beforeSend" in options && typeof options.beforeSend === "function") {
      options.beforeSend(xhr);
    } // Microsoft Edge browser sends "undefined" when send is called with undefined value.
    // XMLHttpRequest spec says to pass null as body to indicate no body
    // See https://github.com/naugtur/xhr/issues/100.

    xhr.send(body || null);
    return xhr;
  }
  function getXml(xhr) {
    // xhr.responseXML will throw Exception "InvalidStateError" or "DOMException"
    // See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML.
    try {
      if (xhr.responseType === "document") {
        return xhr.responseXML;
      }
      var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror";
      if (xhr.responseType === "" && !firefoxBugTakenEffect) {
        return xhr.responseXML;
      }
    } catch (e) {}
    return null;
  }
  function noop() {}
  lib.default = default_1;

  /**
   * @file text-track.js
   */

  /**
   * Takes a webvtt file contents and parses it into cues
   *
   * @param {string} srcContent
   *        webVTT file contents
   *
   * @param {TextTrack} track
   *        TextTrack to add cues to. Cues come from the srcContent.
   *
   * @private
   */
  const parseCues = function (srcContent, track) {
    const parser = new window.WebVTT.Parser(window, window.vttjs, window.WebVTT.StringDecoder());
    const errors = [];
    parser.oncue = function (cue) {
      track.addCue(cue);
    };
    parser.onparsingerror = function (error) {
      errors.push(error);
    };
    parser.onflush = function () {
      track.trigger({
        type: 'loadeddata',
        target: track
      });
    };
    parser.parse(srcContent);
    if (errors.length > 0) {
      if (window.console && window.console.groupCollapsed) {
        window.console.groupCollapsed(`Text Track parsing errors for ${track.src}`);
      }
      errors.forEach(error => log.error(error));
      if (window.console && window.console.groupEnd) {
        window.console.groupEnd();
      }
    }
    parser.flush();
  };

  /**
   * Load a `TextTrack` from a specified url.
   *
   * @param {string} src
   *        Url to load track from.
   *
   * @param {TextTrack} track
   *        Track to add cues to. Comes from the content at the end of `url`.
   *
   * @private
   */
  const loadTrack = function (src, track) {
    const opts = {
      uri: src
    };
    const crossOrigin = isCrossOrigin(src);
    if (crossOrigin) {
      opts.cors = crossOrigin;
    }
    const withCredentials = track.tech_.crossOrigin() === 'use-credentials';
    if (withCredentials) {
      opts.withCredentials = withCredentials;
    }
    lib(opts, bind_(this, function (err, response, responseBody) {
      if (err) {
        return log.error(err, response);
      }
      track.loaded_ = true;

      // Make sure that vttjs has loaded, otherwise, wait till it finished loading
      // NOTE: this is only used for the alt/video.novtt.js build
      if (typeof window.WebVTT !== 'function') {
        if (track.tech_) {
          // to prevent use before define eslint error, we define loadHandler
          // as a let here
          track.tech_.any(['vttjsloaded', 'vttjserror'], event => {
            if (event.type === 'vttjserror') {
              log.error(`vttjs failed to load, stopping trying to process ${track.src}`);
              return;
            }
            return parseCues(responseBody, track);
          });
        }
      } else {
        parseCues(responseBody, track);
      }
    }));
  };

  /**
   * A representation of a single `TextTrack`.
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack}
   * @extends Track
   */
  class TextTrack extends Track {
    /**
     * Create an instance of this class.
     *
     * @param {Object} options={}
     *        Object of option names and values
     *
     * @param { import('../tech/tech').default } options.tech
     *        A reference to the tech that owns this TextTrack.
     *
     * @param {TextTrack~Kind} [options.kind='subtitles']
     *        A valid text track kind.
     *
     * @param {TextTrack~Mode} [options.mode='disabled']
     *        A valid text track mode.
     *
     * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
     *        A unique id for this TextTrack.
     *
     * @param {string} [options.label='']
     *        The menu label for this track.
     *
     * @param {string} [options.language='']
     *        A valid two character language code.
     *
     * @param {string} [options.srclang='']
     *        A valid two character language code. An alternative, but deprioritized
     *        version of `options.language`
     *
     * @param {string} [options.src]
     *        A url to TextTrack cues.
     *
     * @param {boolean} [options.default]
     *        If this track should default to on or off.
     */
    constructor(options = {}) {
      if (!options.tech) {
        throw new Error('A tech was not provided.');
      }
      const settings = merge(options, {
        kind: TextTrackKind[options.kind] || 'subtitles',
        language: options.language || options.srclang || ''
      });
      let mode = TextTrackMode[settings.mode] || 'disabled';
      const default_ = settings.default;
      if (settings.kind === 'metadata' || settings.kind === 'chapters') {
        mode = 'hidden';
      }
      super(settings);
      this.tech_ = settings.tech;
      this.cues_ = [];
      this.activeCues_ = [];
      this.preload_ = this.tech_.preloadTextTracks !== false;
      const cues = new TextTrackCueList(this.cues_);
      const activeCues = new TextTrackCueList(this.activeCues_);
      let changed = false;
      this.timeupdateHandler = bind_(this, function (event = {}) {
        if (this.tech_.isDisposed()) {
          return;
        }
        if (!this.tech_.isReady_) {
          if (event.type !== 'timeupdate') {
            this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler);
          }
          return;
        }

        // Accessing this.activeCues for the side-effects of updating itself
        // due to its nature as a getter function. Do not remove or cues will
        // stop updating!
        // Use the setter to prevent deletion from uglify (pure_getters rule)
        this.activeCues = this.activeCues;
        if (changed) {
          this.trigger('cuechange');
          changed = false;
        }
        if (event.type !== 'timeupdate') {
          this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler);
        }
      });
      const disposeHandler = () => {
        this.stopTracking();
      };
      this.tech_.one('dispose', disposeHandler);
      if (mode !== 'disabled') {
        this.startTracking();
      }
      Object.defineProperties(this, {
        /**
         * @memberof TextTrack
         * @member {boolean} default
         *         If this track was set to be on or off by default. Cannot be changed after
         *         creation.
         * @instance
         *
         * @readonly
         */
        default: {
          get() {
            return default_;
          },
          set() {}
        },
        /**
         * @memberof TextTrack
         * @member {string} mode
         *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will
         *         not be set if setting to an invalid mode.
         * @instance
         *
         * @fires TextTrack#modechange
         */
        mode: {
          get() {
            return mode;
          },
          set(newMode) {
            if (!TextTrackMode[newMode]) {
              return;
            }
            if (mode === newMode) {
              return;
            }
            mode = newMode;
            if (!this.preload_ && mode !== 'disabled' && this.cues.length === 0) {
              // On-demand load.
              loadTrack(this.src, this);
            }
            this.stopTracking();
            if (mode !== 'disabled') {
              this.startTracking();
            }
            /**
             * An event that fires when mode changes on this track. This allows
             * the TextTrackList that holds this track to act accordingly.
             *
             * > Note: This is not part of the spec!
             *
             * @event TextTrack#modechange
             * @type {Event}
             */
            this.trigger('modechange');
          }
        },
        /**
         * @memberof TextTrack
         * @member {TextTrackCueList} cues
         *         The text track cue list for this TextTrack.
         * @instance
         */
        cues: {
          get() {
            if (!this.loaded_) {
              return null;
            }
            return cues;
          },
          set() {}
        },
        /**
         * @memberof TextTrack
         * @member {TextTrackCueList} activeCues
         *         The list text track cues that are currently active for this TextTrack.
         * @instance
         */
        activeCues: {
          get() {
            if (!this.loaded_) {
              return null;
            }

            // nothing to do
            if (this.cues.length === 0) {
              return activeCues;
            }
            const ct = this.tech_.currentTime();
            const active = [];
            for (let i = 0, l = this.cues.length; i < l; i++) {
              const cue = this.cues[i];
              if (cue.startTime <= ct && cue.endTime >= ct) {
                active.push(cue);
              }
            }
            changed = false;
            if (active.length !== this.activeCues_.length) {
              changed = true;
            } else {
              for (let i = 0; i < active.length; i++) {
                if (this.activeCues_.indexOf(active[i]) === -1) {
                  changed = true;
                }
              }
            }
            this.activeCues_ = active;
            activeCues.setCues_(this.activeCues_);
            return activeCues;
          },
          // /!\ Keep this setter empty (see the timeupdate handler above)
          set() {}
        }
      });
      if (settings.src) {
        this.src = settings.src;
        if (!this.preload_) {
          // Tracks will load on-demand.
          // Act like we're loaded for other purposes.
          this.loaded_ = true;
        }
        if (this.preload_ || settings.kind !== 'subtitles' && settings.kind !== 'captions') {
          loadTrack(this.src, this);
        }
      } else {
        this.loaded_ = true;
      }
    }
    startTracking() {
      // More precise cues based on requestVideoFrameCallback with a requestAnimationFram fallback
      this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler);
      // Also listen to timeupdate in case rVFC/rAF stops (window in background, audio in video el)
      this.tech_.on('timeupdate', this.timeupdateHandler);
    }
    stopTracking() {
      if (this.rvf_) {
        this.tech_.cancelVideoFrameCallback(this.rvf_);
        this.rvf_ = undefined;
      }
      this.tech_.off('timeupdate', this.timeupdateHandler);
    }

    /**
     * Add a cue to the internal list of cues.
     *
     * @param {TextTrack~Cue} cue
     *        The cue to add to our internal list
     */
    addCue(originalCue) {
      let cue = originalCue;
      if (window.vttjs && !(originalCue instanceof window.vttjs.VTTCue)) {
        cue = new window.vttjs.VTTCue(originalCue.startTime, originalCue.endTime, originalCue.text);
        for (const prop in originalCue) {
          if (!(prop in cue)) {
            cue[prop] = originalCue[prop];
          }
        }

        // make sure that `id` is copied over
        cue.id = originalCue.id;
        cue.originalCue_ = originalCue;
      }
      const tracks = this.tech_.textTracks();
      for (let i = 0; i < tracks.length; i++) {
        if (tracks[i] !== this) {
          tracks[i].removeCue(cue);
        }
      }
      this.cues_.push(cue);
      this.cues.setCues_(this.cues_);
    }

    /**
     * Remove a cue from our internal list
     *
     * @param {TextTrack~Cue} removeCue
     *        The cue to remove from our internal list
     */
    removeCue(removeCue) {
      let i = this.cues_.length;
      while (i--) {
        const cue = this.cues_[i];
        if (cue === removeCue || cue.originalCue_ && cue.originalCue_ === removeCue) {
          this.cues_.splice(i, 1);
          this.cues.setCues_(this.cues_);
          break;
        }
      }
    }
  }

  /**
   * cuechange - One or more cues in the track have become active or stopped being active.
   */
  TextTrack.prototype.allowedEvents_ = {
    cuechange: 'cuechange'
  };

  /**
   * A representation of a single `AudioTrack`. If it is part of an {@link AudioTrackList}
   * only one `AudioTrack` in the list will be enabled at a time.
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack}
   * @extends Track
   */
  class AudioTrack extends Track {
    /**
     * Create an instance of this class.
     *
     * @param {Object} [options={}]
     *        Object of option names and values
     *
     * @param {AudioTrack~Kind} [options.kind='']
     *        A valid audio track kind
     *
     * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
     *        A unique id for this AudioTrack.
     *
     * @param {string} [options.label='']
     *        The menu label for this track.
     *
     * @param {string} [options.language='']
     *        A valid two character language code.
     *
     * @param {boolean} [options.enabled]
     *        If this track is the one that is currently playing. If this track is part of
     *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.
     */
    constructor(options = {}) {
      const settings = merge(options, {
        kind: AudioTrackKind[options.kind] || ''
      });
      super(settings);
      let enabled = false;

      /**
       * @memberof AudioTrack
       * @member {boolean} enabled
       *         If this `AudioTrack` is enabled or not. When setting this will
       *         fire {@link AudioTrack#enabledchange} if the state of enabled is changed.
       * @instance
       *
       * @fires VideoTrack#selectedchange
       */
      Object.defineProperty(this, 'enabled', {
        get() {
          return enabled;
        },
        set(newEnabled) {
          // an invalid or unchanged value
          if (typeof newEnabled !== 'boolean' || newEnabled === enabled) {
            return;
          }
          enabled = newEnabled;

          /**
           * An event that fires when enabled changes on this track. This allows
           * the AudioTrackList that holds this track to act accordingly.
           *
           * > Note: This is not part of the spec! Native tracks will do
           *         this internally without an event.
           *
           * @event AudioTrack#enabledchange
           * @type {Event}
           */
          this.trigger('enabledchange');
        }
      });

      // if the user sets this track to selected then
      // set selected to that true value otherwise
      // we keep it false
      if (settings.enabled) {
        this.enabled = settings.enabled;
      }
      this.loaded_ = true;
    }
  }

  /**
   * A representation of a single `VideoTrack`.
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack}
   * @extends Track
   */
  class VideoTrack extends Track {
    /**
     * Create an instance of this class.
     *
     * @param {Object} [options={}]
     *        Object of option names and values
     *
     * @param {string} [options.kind='']
     *        A valid {@link VideoTrack~Kind}
     *
     * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
     *        A unique id for this AudioTrack.
     *
     * @param {string} [options.label='']
     *        The menu label for this track.
     *
     * @param {string} [options.language='']
     *        A valid two character language code.
     *
     * @param {boolean} [options.selected]
     *        If this track is the one that is currently playing.
     */
    constructor(options = {}) {
      const settings = merge(options, {
        kind: VideoTrackKind[options.kind] || ''
      });
      super(settings);
      let selected = false;

      /**
       * @memberof VideoTrack
       * @member {boolean} selected
       *         If this `VideoTrack` is selected or not. When setting this will
       *         fire {@link VideoTrack#selectedchange} if the state of selected changed.
       * @instance
       *
       * @fires VideoTrack#selectedchange
       */
      Object.defineProperty(this, 'selected', {
        get() {
          return selected;
        },
        set(newSelected) {
          // an invalid or unchanged value
          if (typeof newSelected !== 'boolean' || newSelected === selected) {
            return;
          }
          selected = newSelected;

          /**
           * An event that fires when selected changes on this track. This allows
           * the VideoTrackList that holds this track to act accordingly.
           *
           * > Note: This is not part of the spec! Native tracks will do
           *         this internally without an event.
           *
           * @event VideoTrack#selectedchange
           * @type {Event}
           */
          this.trigger('selectedchange');
        }
      });

      // if the user sets this track to selected then
      // set selected to that true value otherwise
      // we keep it false
      if (settings.selected) {
        this.selected = settings.selected;
      }
    }
  }

  /**
   * @file html-track-element.js
   */

  /**
   * A single track represented in the DOM.
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement}
   * @extends EventTarget
   */
  class HTMLTrackElement extends EventTarget {
    /**
     * Create an instance of this class.
     *
     * @param {Object} options={}
     *        Object of option names and values
     *
     * @param { import('../tech/tech').default } options.tech
     *        A reference to the tech that owns this HTMLTrackElement.
     *
     * @param {TextTrack~Kind} [options.kind='subtitles']
     *        A valid text track kind.
     *
     * @param {TextTrack~Mode} [options.mode='disabled']
     *        A valid text track mode.
     *
     * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
     *        A unique id for this TextTrack.
     *
     * @param {string} [options.label='']
     *        The menu label for this track.
     *
     * @param {string} [options.language='']
     *        A valid two character language code.
     *
     * @param {string} [options.srclang='']
     *        A valid two character language code. An alternative, but deprioritized
     *        version of `options.language`
     *
     * @param {string} [options.src]
     *        A url to TextTrack cues.
     *
     * @param {boolean} [options.default]
     *        If this track should default to on or off.
     */
    constructor(options = {}) {
      super();
      let readyState;
      const track = new TextTrack(options);
      this.kind = track.kind;
      this.src = track.src;
      this.srclang = track.language;
      this.label = track.label;
      this.default = track.default;
      Object.defineProperties(this, {
        /**
         * @memberof HTMLTrackElement
         * @member {HTMLTrackElement~ReadyState} readyState
         *         The current ready state of the track element.
         * @instance
         */
        readyState: {
          get() {
            return readyState;
          }
        },
        /**
         * @memberof HTMLTrackElement
         * @member {TextTrack} track
         *         The underlying TextTrack object.
         * @instance
         *
         */
        track: {
          get() {
            return track;
          }
        }
      });
      readyState = HTMLTrackElement.NONE;

      /**
       * @listens TextTrack#loadeddata
       * @fires HTMLTrackElement#load
       */
      track.addEventListener('loadeddata', () => {
        readyState = HTMLTrackElement.LOADED;
        this.trigger({
          type: 'load',
          target: this
        });
      });
    }
  }
  HTMLTrackElement.prototype.allowedEvents_ = {
    load: 'load'
  };

  /**
   * The text track not loaded state.
   *
   * @type {number}
   * @static
   */
  HTMLTrackElement.NONE = 0;

  /**
   * The text track loading state.
   *
   * @type {number}
   * @static
   */
  HTMLTrackElement.LOADING = 1;

  /**
   * The text track loaded state.
   *
   * @type {number}
   * @static
   */
  HTMLTrackElement.LOADED = 2;

  /**
   * The text track failed to load state.
   *
   * @type {number}
   * @static
   */
  HTMLTrackElement.ERROR = 3;

  /*
   * This file contains all track properties that are used in
   * player.js, tech.js, html5.js and possibly other techs in the future.
   */

  const NORMAL = {
    audio: {
      ListClass: AudioTrackList,
      TrackClass: AudioTrack,
      capitalName: 'Audio'
    },
    video: {
      ListClass: VideoTrackList,
      TrackClass: VideoTrack,
      capitalName: 'Video'
    },
    text: {
      ListClass: TextTrackList,
      TrackClass: TextTrack,
      capitalName: 'Text'
    }
  };
  Object.keys(NORMAL).forEach(function (type) {
    NORMAL[type].getterName = `${type}Tracks`;
    NORMAL[type].privateName = `${type}Tracks_`;
  });
  const REMOTE = {
    remoteText: {
      ListClass: TextTrackList,
      TrackClass: TextTrack,
      capitalName: 'RemoteText',
      getterName: 'remoteTextTracks',
      privateName: 'remoteTextTracks_'
    },
    remoteTextEl: {
      ListClass: HtmlTrackElementList,
      TrackClass: HTMLTrackElement,
      capitalName: 'RemoteTextTrackEls',
      getterName: 'remoteTextTrackEls',
      privateName: 'remoteTextTrackEls_'
    }
  };
  const ALL = Object.assign({}, NORMAL, REMOTE);
  REMOTE.names = Object.keys(REMOTE);
  NORMAL.names = Object.keys(NORMAL);
  ALL.names = [].concat(REMOTE.names).concat(NORMAL.names);

  var minDoc = {};

  var topLevel = typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof window !== 'undefined' ? window : {};
  var doccy;
  if (typeof document !== 'undefined') {
    doccy = document;
  } else {
    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];
    if (!doccy) {
      doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }
  }
  var document_1 = doccy;

  /**
   * Copyright 2013 vtt.js Contributors
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
  /* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */

  var _objCreate = Object.create || function () {
    function F() {}
    return function (o) {
      if (arguments.length !== 1) {
        throw new Error('Object.create shim only accepts one parameter.');
      }
      F.prototype = o;
      return new F();
    };
  }();

  // Creates a new ParserError object from an errorData object. The errorData
  // object should have default code and message properties. The default message
  // property can be overriden by passing in a message parameter.
  // See ParsingError.Errors below for acceptable errors.
  function ParsingError(errorData, message) {
    this.name = "ParsingError";
    this.code = errorData.code;
    this.message = message || errorData.message;
  }
  ParsingError.prototype = _objCreate(Error.prototype);
  ParsingError.prototype.constructor = ParsingError;

  // ParsingError metadata for acceptable ParsingErrors.
  ParsingError.Errors = {
    BadSignature: {
      code: 0,
      message: "Malformed WebVTT signature."
    },
    BadTimeStamp: {
      code: 1,
      message: "Malformed time stamp."
    }
  };

  // Try to parse input as a time stamp.
  function parseTimeStamp(input) {
    function computeSeconds(h, m, s, f) {
      return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1000;
    }
    var m = input.match(/^(\d+):(\d{1,2})(:\d{1,2})?\.(\d{3})/);
    if (!m) {
      return null;
    }
    if (m[3]) {
      // Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]
      return computeSeconds(m[1], m[2], m[3].replace(":", ""), m[4]);
    } else if (m[1] > 59) {
      // Timestamp takes the form of [hours]:[minutes].[milliseconds]
      // First position is hours as it's over 59.
      return computeSeconds(m[1], m[2], 0, m[4]);
    } else {
      // Timestamp takes the form of [minutes]:[seconds].[milliseconds]
      return computeSeconds(0, m[1], m[2], m[4]);
    }
  }

  // A settings object holds key/value pairs and will ignore anything but the first
  // assignment to a specific key.
  function Settings() {
    this.values = _objCreate(null);
  }
  Settings.prototype = {
    // Only accept the first assignment to any key.
    set: function (k, v) {
      if (!this.get(k) && v !== "") {
        this.values[k] = v;
      }
    },
    // Return the value for a key, or a default value.
    // If 'defaultKey' is passed then 'dflt' is assumed to be an object with
    // a number of possible default values as properties where 'defaultKey' is
    // the key of the property that will be chosen; otherwise it's assumed to be
    // a single value.
    get: function (k, dflt, defaultKey) {
      if (defaultKey) {
        return this.has(k) ? this.values[k] : dflt[defaultKey];
      }
      return this.has(k) ? this.values[k] : dflt;
    },
    // Check whether we have a value for a key.
    has: function (k) {
      return k in this.values;
    },
    // Accept a setting if its one of the given alternatives.
    alt: function (k, v, a) {
      for (var n = 0; n < a.length; ++n) {
        if (v === a[n]) {
          this.set(k, v);
          break;
        }
      }
    },
    // Accept a setting if its a valid (signed) integer.
    integer: function (k, v) {
      if (/^-?\d+$/.test(v)) {
        // integer
        this.set(k, parseInt(v, 10));
      }
    },
    // Accept a setting if its a valid percentage.
    percent: function (k, v) {
      if (v.match(/^([\d]{1,3})(\.[\d]*)?%$/)) {
        v = parseFloat(v);
        if (v >= 0 && v <= 100) {
          this.set(k, v);
          return true;
        }
      }
      return false;
    }
  };

  // Helper function to parse input into groups separated by 'groupDelim', and
  // interprete each group as a key/value pair separated by 'keyValueDelim'.
  function parseOptions(input, callback, keyValueDelim, groupDelim) {
    var groups = groupDelim ? input.split(groupDelim) : [input];
    for (var i in groups) {
      if (typeof groups[i] !== "string") {
        continue;
      }
      var kv = groups[i].split(keyValueDelim);
      if (kv.length !== 2) {
        continue;
      }
      var k = kv[0].trim();
      var v = kv[1].trim();
      callback(k, v);
    }
  }
  function parseCue(input, cue, regionList) {
    // Remember the original input if we need to throw an error.
    var oInput = input;
    // 4.1 WebVTT timestamp
    function consumeTimeStamp() {
      var ts = parseTimeStamp(input);
      if (ts === null) {
        throw new ParsingError(ParsingError.Errors.BadTimeStamp, "Malformed timestamp: " + oInput);
      }
      // Remove time stamp from input.
      input = input.replace(/^[^\sa-zA-Z-]+/, "");
      return ts;
    }

    // 4.4.2 WebVTT cue settings
    function consumeCueSettings(input, cue) {
      var settings = new Settings();
      parseOptions(input, function (k, v) {
        switch (k) {
          case "region":
            // Find the last region we parsed with the same region id.
            for (var i = regionList.length - 1; i >= 0; i--) {
              if (regionList[i].id === v) {
                settings.set(k, regionList[i].region);
                break;
              }
            }
            break;
          case "vertical":
            settings.alt(k, v, ["rl", "lr"]);
            break;
          case "line":
            var vals = v.split(","),
              vals0 = vals[0];
            settings.integer(k, vals0);
            settings.percent(k, vals0) ? settings.set("snapToLines", false) : null;
            settings.alt(k, vals0, ["auto"]);
            if (vals.length === 2) {
              settings.alt("lineAlign", vals[1], ["start", "center", "end"]);
            }
            break;
          case "position":
            vals = v.split(",");
            settings.percent(k, vals[0]);
            if (vals.length === 2) {
              settings.alt("positionAlign", vals[1], ["start", "center", "end"]);
            }
            break;
          case "size":
            settings.percent(k, v);
            break;
          case "align":
            settings.alt(k, v, ["start", "center", "end", "left", "right"]);
            break;
        }
      }, /:/, /\s/);

      // Apply default values for any missing fields.
      cue.region = settings.get("region", null);
      cue.vertical = settings.get("vertical", "");
      try {
        cue.line = settings.get("line", "auto");
      } catch (e) {}
      cue.lineAlign = settings.get("lineAlign", "start");
      cue.snapToLines = settings.get("snapToLines", true);
      cue.size = settings.get("size", 100);
      // Safari still uses the old middle value and won't accept center
      try {
        cue.align = settings.get("align", "center");
      } catch (e) {
        cue.align = settings.get("align", "middle");
      }
      try {
        cue.position = settings.get("position", "auto");
      } catch (e) {
        cue.position = settings.get("position", {
          start: 0,
          left: 0,
          center: 50,
          middle: 50,
          end: 100,
          right: 100
        }, cue.align);
      }
      cue.positionAlign = settings.get("positionAlign", {
        start: "start",
        left: "start",
        center: "center",
        middle: "center",
        end: "end",
        right: "end"
      }, cue.align);
    }
    function skipWhitespace() {
      input = input.replace(/^\s+/, "");
    }

    // 4.1 WebVTT cue timings.
    skipWhitespace();
    cue.startTime = consumeTimeStamp(); // (1) collect cue start time
    skipWhitespace();
    if (input.substr(0, 3) !== "-->") {
      // (3) next characters must match "-->"
      throw new ParsingError(ParsingError.Errors.BadTimeStamp, "Malformed time stamp (time stamps must be separated by '-->'): " + oInput);
    }
    input = input.substr(3);
    skipWhitespace();
    cue.endTime = consumeTimeStamp(); // (5) collect cue end time

    // 4.1 WebVTT cue settings list.
    skipWhitespace();
    consumeCueSettings(input, cue);
  }

  // When evaluating this file as part of a Webpack bundle for server
  // side rendering, `document` is an empty object.
  var TEXTAREA_ELEMENT = document_1.createElement && document_1.createElement("textarea");
  var TAG_NAME = {
    c: "span",
    i: "i",
    b: "b",
    u: "u",
    ruby: "ruby",
    rt: "rt",
    v: "span",
    lang: "span"
  };

  // 5.1 default text color
  // 5.2 default text background color is equivalent to text color with bg_ prefix
  var DEFAULT_COLOR_CLASS = {
    white: 'rgba(255,255,255,1)',
    lime: 'rgba(0,255,0,1)',
    cyan: 'rgba(0,255,255,1)',
    red: 'rgba(255,0,0,1)',
    yellow: 'rgba(255,255,0,1)',
    magenta: 'rgba(255,0,255,1)',
    blue: 'rgba(0,0,255,1)',
    black: 'rgba(0,0,0,1)'
  };
  var TAG_ANNOTATION = {
    v: "title",
    lang: "lang"
  };
  var NEEDS_PARENT = {
    rt: "ruby"
  };

  // Parse content into a document fragment.
  function parseContent(window, input) {
    function nextToken() {
      // Check for end-of-string.
      if (!input) {
        return null;
      }

      // Consume 'n' characters from the input.
      function consume(result) {
        input = input.substr(result.length);
        return result;
      }
      var m = input.match(/^([^<]*)(<[^>]*>?)?/);
      // If there is some text before the next tag, return it, otherwise return
      // the tag.
      return consume(m[1] ? m[1] : m[2]);
    }
    function unescape(s) {
      TEXTAREA_ELEMENT.innerHTML = s;
      s = TEXTAREA_ELEMENT.textContent;
      TEXTAREA_ELEMENT.textContent = "";
      return s;
    }
    function shouldAdd(current, element) {
      return !NEEDS_PARENT[element.localName] || NEEDS_PARENT[element.localName] === current.localName;
    }

    // Create an element for this tag.
    function createElement(type, annotation) {
      var tagName = TAG_NAME[type];
      if (!tagName) {
        return null;
      }
      var element = window.document.createElement(tagName);
      var name = TAG_ANNOTATION[type];
      if (name && annotation) {
        element[name] = annotation.trim();
      }
      return element;
    }
    var rootDiv = window.document.createElement("div"),
      current = rootDiv,
      t,
      tagStack = [];
    while ((t = nextToken()) !== null) {
      if (t[0] === '<') {
        if (t[1] === "/") {
          // If the closing tag matches, move back up to the parent node.
          if (tagStack.length && tagStack[tagStack.length - 1] === t.substr(2).replace(">", "")) {
            tagStack.pop();
            current = current.parentNode;
          }
          // Otherwise just ignore the end tag.
          continue;
        }
        var ts = parseTimeStamp(t.substr(1, t.length - 2));
        var node;
        if (ts) {
          // Timestamps are lead nodes as well.
          node = window.document.createProcessingInstruction("timestamp", ts);
          current.appendChild(node);
          continue;
        }
        var m = t.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);
        // If we can't parse the tag, skip to the next tag.
        if (!m) {
          continue;
        }
        // Try to construct an element, and ignore the tag if we couldn't.
        node = createElement(m[1], m[3]);
        if (!node) {
          continue;
        }
        // Determine if the tag should be added based on the context of where it
        // is placed in the cuetext.
        if (!shouldAdd(current, node)) {
          continue;
        }
        // Set the class list (as a list of classes, separated by space).
        if (m[2]) {
          var classes = m[2].split('.');
          classes.forEach(function (cl) {
            var bgColor = /^bg_/.test(cl);
            // slice out `bg_` if it's a background color
            var colorName = bgColor ? cl.slice(3) : cl;
            if (DEFAULT_COLOR_CLASS.hasOwnProperty(colorName)) {
              var propName = bgColor ? 'background-color' : 'color';
              var propValue = DEFAULT_COLOR_CLASS[colorName];
              node.style[propName] = propValue;
            }
          });
          node.className = classes.join(' ');
        }
        // Append the node to the current node, and enter the scope of the new
        // node.
        tagStack.push(m[1]);
        current.appendChild(node);
        current = node;
        continue;
      }

      // Text nodes are leaf nodes.
      current.appendChild(window.document.createTextNode(unescape(t)));
    }
    return rootDiv;
  }

  // This is a list of all the Unicode characters that have a strong
  // right-to-left category. What this means is that these characters are
  // written right-to-left for sure. It was generated by pulling all the strong
  // right-to-left characters out of the Unicode data table. That table can
  // found at: http://www.unicode.org/Public/UNIDATA/UnicodeData.txt
  var strongRTLRanges = [[0x5be, 0x5be], [0x5c0, 0x5c0], [0x5c3, 0x5c3], [0x5c6, 0x5c6], [0x5d0, 0x5ea], [0x5f0, 0x5f4], [0x608, 0x608], [0x60b, 0x60b], [0x60d, 0x60d], [0x61b, 0x61b], [0x61e, 0x64a], [0x66d, 0x66f], [0x671, 0x6d5], [0x6e5, 0x6e6], [0x6ee, 0x6ef], [0x6fa, 0x70d], [0x70f, 0x710], [0x712, 0x72f], [0x74d, 0x7a5], [0x7b1, 0x7b1], [0x7c0, 0x7ea], [0x7f4, 0x7f5], [0x7fa, 0x7fa], [0x800, 0x815], [0x81a, 0x81a], [0x824, 0x824], [0x828, 0x828], [0x830, 0x83e], [0x840, 0x858], [0x85e, 0x85e], [0x8a0, 0x8a0], [0x8a2, 0x8ac], [0x200f, 0x200f], [0xfb1d, 0xfb1d], [0xfb1f, 0xfb28], [0xfb2a, 0xfb36], [0xfb38, 0xfb3c], [0xfb3e, 0xfb3e], [0xfb40, 0xfb41], [0xfb43, 0xfb44], [0xfb46, 0xfbc1], [0xfbd3, 0xfd3d], [0xfd50, 0xfd8f], [0xfd92, 0xfdc7], [0xfdf0, 0xfdfc], [0xfe70, 0xfe74], [0xfe76, 0xfefc], [0x10800, 0x10805], [0x10808, 0x10808], [0x1080a, 0x10835], [0x10837, 0x10838], [0x1083c, 0x1083c], [0x1083f, 0x10855], [0x10857, 0x1085f], [0x10900, 0x1091b], [0x10920, 0x10939], [0x1093f, 0x1093f], [0x10980, 0x109b7], [0x109be, 0x109bf], [0x10a00, 0x10a00], [0x10a10, 0x10a13], [0x10a15, 0x10a17], [0x10a19, 0x10a33], [0x10a40, 0x10a47], [0x10a50, 0x10a58], [0x10a60, 0x10a7f], [0x10b00, 0x10b35], [0x10b40, 0x10b55], [0x10b58, 0x10b72], [0x10b78, 0x10b7f], [0x10c00, 0x10c48], [0x1ee00, 0x1ee03], [0x1ee05, 0x1ee1f], [0x1ee21, 0x1ee22], [0x1ee24, 0x1ee24], [0x1ee27, 0x1ee27], [0x1ee29, 0x1ee32], [0x1ee34, 0x1ee37], [0x1ee39, 0x1ee39], [0x1ee3b, 0x1ee3b], [0x1ee42, 0x1ee42], [0x1ee47, 0x1ee47], [0x1ee49, 0x1ee49], [0x1ee4b, 0x1ee4b], [0x1ee4d, 0x1ee4f], [0x1ee51, 0x1ee52], [0x1ee54, 0x1ee54], [0x1ee57, 0x1ee57], [0x1ee59, 0x1ee59], [0x1ee5b, 0x1ee5b], [0x1ee5d, 0x1ee5d], [0x1ee5f, 0x1ee5f], [0x1ee61, 0x1ee62], [0x1ee64, 0x1ee64], [0x1ee67, 0x1ee6a], [0x1ee6c, 0x1ee72], [0x1ee74, 0x1ee77], [0x1ee79, 0x1ee7c], [0x1ee7e, 0x1ee7e], [0x1ee80, 0x1ee89], [0x1ee8b, 0x1ee9b], [0x1eea1, 0x1eea3], [0x1eea5, 0x1eea9], [0x1eeab, 0x1eebb], [0x10fffd, 0x10fffd]];
  function isStrongRTLChar(charCode) {
    for (var i = 0; i < strongRTLRanges.length; i++) {
      var currentRange = strongRTLRanges[i];
      if (charCode >= currentRange[0] && charCode <= currentRange[1]) {
        return true;
      }
    }
    return false;
  }
  function determineBidi(cueDiv) {
    var nodeStack = [],
      text = "",
      charCode;
    if (!cueDiv || !cueDiv.childNodes) {
      return "ltr";
    }
    function pushNodes(nodeStack, node) {
      for (var i = node.childNodes.length - 1; i >= 0; i--) {
        nodeStack.push(node.childNodes[i]);
      }
    }
    function nextTextNode(nodeStack) {
      if (!nodeStack || !nodeStack.length) {
        return null;
      }
      var node = nodeStack.pop(),
        text = node.textContent || node.innerText;
      if (text) {
        // TODO: This should match all unicode type B characters (paragraph
        // separator characters). See issue #115.
        var m = text.match(/^.*(\n|\r)/);
        if (m) {
          nodeStack.length = 0;
          return m[0];
        }
        return text;
      }
      if (node.tagName === "ruby") {
        return nextTextNode(nodeStack);
      }
      if (node.childNodes) {
        pushNodes(nodeStack, node);
        return nextTextNode(nodeStack);
      }
    }
    pushNodes(nodeStack, cueDiv);
    while (text = nextTextNode(nodeStack)) {
      for (var i = 0; i < text.length; i++) {
        charCode = text.charCodeAt(i);
        if (isStrongRTLChar(charCode)) {
          return "rtl";
        }
      }
    }
    return "ltr";
  }
  function computeLinePos(cue) {
    if (typeof cue.line === "number" && (cue.snapToLines || cue.line >= 0 && cue.line <= 100)) {
      return cue.line;
    }
    if (!cue.track || !cue.track.textTrackList || !cue.track.textTrackList.mediaElement) {
      return -1;
    }
    var track = cue.track,
      trackList = track.textTrackList,
      count = 0;
    for (var i = 0; i < trackList.length && trackList[i] !== track; i++) {
      if (trackList[i].mode === "showing") {
        count++;
      }
    }
    return ++count * -1;
  }
  function StyleBox() {}

  // Apply styles to a div. If there is no div passed then it defaults to the
  // div on 'this'.
  StyleBox.prototype.applyStyles = function (styles, div) {
    div = div || this.div;
    for (var prop in styles) {
      if (styles.hasOwnProperty(prop)) {
        div.style[prop] = styles[prop];
      }
    }
  };
  StyleBox.prototype.formatStyle = function (val, unit) {
    return val === 0 ? 0 : val + unit;
  };

  // Constructs the computed display state of the cue (a div). Places the div
  // into the overlay which should be a block level element (usually a div).
  function CueStyleBox(window, cue, styleOptions) {
    StyleBox.call(this);
    this.cue = cue;

    // Parse our cue's text into a DOM tree rooted at 'cueDiv'. This div will
    // have inline positioning and will function as the cue background box.
    this.cueDiv = parseContent(window, cue.text);
    var styles = {
      color: "rgba(255, 255, 255, 1)",
      backgroundColor: "rgba(0, 0, 0, 0.8)",
      position: "relative",
      left: 0,
      right: 0,
      top: 0,
      bottom: 0,
      display: "inline",
      writingMode: cue.vertical === "" ? "horizontal-tb" : cue.vertical === "lr" ? "vertical-lr" : "vertical-rl",
      unicodeBidi: "plaintext"
    };
    this.applyStyles(styles, this.cueDiv);

    // Create an absolutely positioned div that will be used to position the cue
    // div. Note, all WebVTT cue-setting alignments are equivalent to the CSS
    // mirrors of them except middle instead of center on Safari.
    this.div = window.document.createElement("div");
    styles = {
      direction: determineBidi(this.cueDiv),
      writingMode: cue.vertical === "" ? "horizontal-tb" : cue.vertical === "lr" ? "vertical-lr" : "vertical-rl",
      unicodeBidi: "plaintext",
      textAlign: cue.align === "middle" ? "center" : cue.align,
      font: styleOptions.font,
      whiteSpace: "pre-line",
      position: "absolute"
    };
    this.applyStyles(styles);
    this.div.appendChild(this.cueDiv);

    // Calculate the distance from the reference edge of the viewport to the text
    // position of the cue box. The reference edge will be resolved later when
    // the box orientation styles are applied.
    var textPos = 0;
    switch (cue.positionAlign) {
      case "start":
        textPos = cue.position;
        break;
      case "center":
        textPos = cue.position - cue.size / 2;
        break;
      case "end":
        textPos = cue.position - cue.size;
        break;
    }

    // Horizontal box orientation; textPos is the distance from the left edge of the
    // area to the left edge of the box and cue.size is the distance extending to
    // the right from there.
    if (cue.vertical === "") {
      this.applyStyles({
        left: this.formatStyle(textPos, "%"),
        width: this.formatStyle(cue.size, "%")
      });
      // Vertical box orientation; textPos is the distance from the top edge of the
      // area to the top edge of the box and cue.size is the height extending
      // downwards from there.
    } else {
      this.applyStyles({
        top: this.formatStyle(textPos, "%"),
        height: this.formatStyle(cue.size, "%")
      });
    }
    this.move = function (box) {
      this.applyStyles({
        top: this.formatStyle(box.top, "px"),
        bottom: this.formatStyle(box.bottom, "px"),
        left: this.formatStyle(box.left, "px"),
        right: this.formatStyle(box.right, "px"),
        height: this.formatStyle(box.height, "px"),
        width: this.formatStyle(box.width, "px")
      });
    };
  }
  CueStyleBox.prototype = _objCreate(StyleBox.prototype);
  CueStyleBox.prototype.constructor = CueStyleBox;

  // Represents the co-ordinates of an Element in a way that we can easily
  // compute things with such as if it overlaps or intersects with another Element.
  // Can initialize it with either a StyleBox or another BoxPosition.
  function BoxPosition(obj) {
    // Either a BoxPosition was passed in and we need to copy it, or a StyleBox
    // was passed in and we need to copy the results of 'getBoundingClientRect'
    // as the object returned is readonly. All co-ordinate values are in reference
    // to the viewport origin (top left).
    var lh, height, width, top;
    if (obj.div) {
      height = obj.div.offsetHeight;
      width = obj.div.offsetWidth;
      top = obj.div.offsetTop;
      var rects = (rects = obj.div.childNodes) && (rects = rects[0]) && rects.getClientRects && rects.getClientRects();
      obj = obj.div.getBoundingClientRect();
      // In certain cases the outter div will be slightly larger then the sum of
      // the inner div's lines. This could be due to bold text, etc, on some platforms.
      // In this case we should get the average line height and use that. This will
      // result in the desired behaviour.
      lh = rects ? Math.max(rects[0] && rects[0].height || 0, obj.height / rects.length) : 0;
    }
    this.left = obj.left;
    this.right = obj.right;
    this.top = obj.top || top;
    this.height = obj.height || height;
    this.bottom = obj.bottom || top + (obj.height || height);
    this.width = obj.width || width;
    this.lineHeight = lh !== undefined ? lh : obj.lineHeight;
  }

  // Move the box along a particular axis. Optionally pass in an amount to move
  // the box. If no amount is passed then the default is the line height of the
  // box.
  BoxPosition.prototype.move = function (axis, toMove) {
    toMove = toMove !== undefined ? toMove : this.lineHeight;
    switch (axis) {
      case "+x":
        this.left += toMove;
        this.right += toMove;
        break;
      case "-x":
        this.left -= toMove;
        this.right -= toMove;
        break;
      case "+y":
        this.top += toMove;
        this.bottom += toMove;
        break;
      case "-y":
        this.top -= toMove;
        this.bottom -= toMove;
        break;
    }
  };

  // Check if this box overlaps another box, b2.
  BoxPosition.prototype.overlaps = function (b2) {
    return this.left < b2.right && this.right > b2.left && this.top < b2.bottom && this.bottom > b2.top;
  };

  // Check if this box overlaps any other boxes in boxes.
  BoxPosition.prototype.overlapsAny = function (boxes) {
    for (var i = 0; i < boxes.length; i++) {
      if (this.overlaps(boxes[i])) {
        return true;
      }
    }
    return false;
  };

  // Check if this box is within another box.
  BoxPosition.prototype.within = function (container) {
    return this.top >= container.top && this.bottom <= container.bottom && this.left >= container.left && this.right <= container.right;
  };

  // Check if this box is entirely within the container or it is overlapping
  // on the edge opposite of the axis direction passed. For example, if "+x" is
  // passed and the box is overlapping on the left edge of the container, then
  // return true.
  BoxPosition.prototype.overlapsOppositeAxis = function (container, axis) {
    switch (axis) {
      case "+x":
        return this.left < container.left;
      case "-x":
        return this.right > container.right;
      case "+y":
        return this.top < container.top;
      case "-y":
        return this.bottom > container.bottom;
    }
  };

  // Find the percentage of the area that this box is overlapping with another
  // box.
  BoxPosition.prototype.intersectPercentage = function (b2) {
    var x = Math.max(0, Math.min(this.right, b2.right) - Math.max(this.left, b2.left)),
      y = Math.max(0, Math.min(this.bottom, b2.bottom) - Math.max(this.top, b2.top)),
      intersectArea = x * y;
    return intersectArea / (this.height * this.width);
  };

  // Convert the positions from this box to CSS compatible positions using
  // the reference container's positions. This has to be done because this
  // box's positions are in reference to the viewport origin, whereas, CSS
  // values are in referecne to their respective edges.
  BoxPosition.prototype.toCSSCompatValues = function (reference) {
    return {
      top: this.top - reference.top,
      bottom: reference.bottom - this.bottom,
      left: this.left - reference.left,
      right: reference.right - this.right,
      height: this.height,
      width: this.width
    };
  };

  // Get an object that represents the box's position without anything extra.
  // Can pass a StyleBox, HTMLElement, or another BoxPositon.
  BoxPosition.getSimpleBoxPosition = function (obj) {
    var height = obj.div ? obj.div.offsetHeight : obj.tagName ? obj.offsetHeight : 0;
    var width = obj.div ? obj.div.offsetWidth : obj.tagName ? obj.offsetWidth : 0;
    var top = obj.div ? obj.div.offsetTop : obj.tagName ? obj.offsetTop : 0;
    obj = obj.div ? obj.div.getBoundingClientRect() : obj.tagName ? obj.getBoundingClientRect() : obj;
    var ret = {
      left: obj.left,
      right: obj.right,
      top: obj.top || top,
      height: obj.height || height,
      bottom: obj.bottom || top + (obj.height || height),
      width: obj.width || width
    };
    return ret;
  };

  // Move a StyleBox to its specified, or next best, position. The containerBox
  // is the box that contains the StyleBox, such as a div. boxPositions are
  // a list of other boxes that the styleBox can't overlap with.
  function moveBoxToLinePosition(window, styleBox, containerBox, boxPositions) {
    // Find the best position for a cue box, b, on the video. The axis parameter
    // is a list of axis, the order of which, it will move the box along. For example:
    // Passing ["+x", "-x"] will move the box first along the x axis in the positive
    // direction. If it doesn't find a good position for it there it will then move
    // it along the x axis in the negative direction.
    function findBestPosition(b, axis) {
      var bestPosition,
        specifiedPosition = new BoxPosition(b),
        percentage = 1; // Highest possible so the first thing we get is better.

      for (var i = 0; i < axis.length; i++) {
        while (b.overlapsOppositeAxis(containerBox, axis[i]) || b.within(containerBox) && b.overlapsAny(boxPositions)) {
          b.move(axis[i]);
        }
        // We found a spot where we aren't overlapping anything. This is our
        // best position.
        if (b.within(containerBox)) {
          return b;
        }
        var p = b.intersectPercentage(containerBox);
        // If we're outside the container box less then we were on our last try
        // then remember this position as the best position.
        if (percentage > p) {
          bestPosition = new BoxPosition(b);
          percentage = p;
        }
        // Reset the box position to the specified position.
        b = new BoxPosition(specifiedPosition);
      }
      return bestPosition || specifiedPosition;
    }
    var boxPosition = new BoxPosition(styleBox),
      cue = styleBox.cue,
      linePos = computeLinePos(cue),
      axis = [];

    // If we have a line number to align the cue to.
    if (cue.snapToLines) {
      var size;
      switch (cue.vertical) {
        case "":
          axis = ["+y", "-y"];
          size = "height";
          break;
        case "rl":
          axis = ["+x", "-x"];
          size = "width";
          break;
        case "lr":
          axis = ["-x", "+x"];
          size = "width";
          break;
      }
      var step = boxPosition.lineHeight,
        position = step * Math.round(linePos),
        maxPosition = containerBox[size] + step,
        initialAxis = axis[0];

      // If the specified intial position is greater then the max position then
      // clamp the box to the amount of steps it would take for the box to
      // reach the max position.
      if (Math.abs(position) > maxPosition) {
        position = position < 0 ? -1 : 1;
        position *= Math.ceil(maxPosition / step) * step;
      }

      // If computed line position returns negative then line numbers are
      // relative to the bottom of the video instead of the top. Therefore, we
      // need to increase our initial position by the length or width of the
      // video, depending on the writing direction, and reverse our axis directions.
      if (linePos < 0) {
        position += cue.vertical === "" ? containerBox.height : containerBox.width;
        axis = axis.reverse();
      }

      // Move the box to the specified position. This may not be its best
      // position.
      boxPosition.move(initialAxis, position);
    } else {
      // If we have a percentage line value for the cue.
      var calculatedPercentage = boxPosition.lineHeight / containerBox.height * 100;
      switch (cue.lineAlign) {
        case "center":
          linePos -= calculatedPercentage / 2;
          break;
        case "end":
          linePos -= calculatedPercentage;
          break;
      }

      // Apply initial line position to the cue box.
      switch (cue.vertical) {
        case "":
          styleBox.applyStyles({
            top: styleBox.formatStyle(linePos, "%")
          });
          break;
        case "rl":
          styleBox.applyStyles({
            left: styleBox.formatStyle(linePos, "%")
          });
          break;
        case "lr":
          styleBox.applyStyles({
            right: styleBox.formatStyle(linePos, "%")
          });
          break;
      }
      axis = ["+y", "-x", "+x", "-y"];

      // Get the box position again after we've applied the specified positioning
      // to it.
      boxPosition = new BoxPosition(styleBox);
    }
    var bestPosition = findBestPosition(boxPosition, axis);
    styleBox.move(bestPosition.toCSSCompatValues(containerBox));
  }
  function WebVTT$1() {
    // Nothing
  }

  // Helper to allow strings to be decoded instead of the default binary utf8 data.
  WebVTT$1.StringDecoder = function () {
    return {
      decode: function (data) {
        if (!data) {
          return "";
        }
        if (typeof data !== "string") {
          throw new Error("Error - expected string data.");
        }
        return decodeURIComponent(encodeURIComponent(data));
      }
    };
  };
  WebVTT$1.convertCueToDOMTree = function (window, cuetext) {
    if (!window || !cuetext) {
      return null;
    }
    return parseContent(window, cuetext);
  };
  var FONT_SIZE_PERCENT = 0.05;
  var FONT_STYLE = "sans-serif";
  var CUE_BACKGROUND_PADDING = "1.5%";

  // Runs the processing model over the cues and regions passed to it.
  // @param overlay A block level element (usually a div) that the computed cues
  //                and regions will be placed into.
  WebVTT$1.processCues = function (window, cues, overlay) {
    if (!window || !cues || !overlay) {
      return null;
    }

    // Remove all previous children.
    while (overlay.firstChild) {
      overlay.removeChild(overlay.firstChild);
    }
    var paddedOverlay = window.document.createElement("div");
    paddedOverlay.style.position = "absolute";
    paddedOverlay.style.left = "0";
    paddedOverlay.style.right = "0";
    paddedOverlay.style.top = "0";
    paddedOverlay.style.bottom = "0";
    paddedOverlay.style.margin = CUE_BACKGROUND_PADDING;
    overlay.appendChild(paddedOverlay);

    // Determine if we need to compute the display states of the cues. This could
    // be the case if a cue's state has been changed since the last computation or
    // if it has not been computed yet.
    function shouldCompute(cues) {
      for (var i = 0; i < cues.length; i++) {
        if (cues[i].hasBeenReset || !cues[i].displayState) {
          return true;
        }
      }
      return false;
    }

    // We don't need to recompute the cues' display states. Just reuse them.
    if (!shouldCompute(cues)) {
      for (var i = 0; i < cues.length; i++) {
        paddedOverlay.appendChild(cues[i].displayState);
      }
      return;
    }
    var boxPositions = [],
      containerBox = BoxPosition.getSimpleBoxPosition(paddedOverlay),
      fontSize = Math.round(containerBox.height * FONT_SIZE_PERCENT * 100) / 100;
    var styleOptions = {
      font: fontSize + "px " + FONT_STYLE
    };
    (function () {
      var styleBox, cue;
      for (var i = 0; i < cues.length; i++) {
        cue = cues[i];

        // Compute the intial position and styles of the cue div.
        styleBox = new CueStyleBox(window, cue, styleOptions);
        paddedOverlay.appendChild(styleBox.div);

        // Move the cue div to it's correct line position.
        moveBoxToLinePosition(window, styleBox, containerBox, boxPositions);

        // Remember the computed div so that we don't have to recompute it later
        // if we don't have too.
        cue.displayState = styleBox.div;
        boxPositions.push(BoxPosition.getSimpleBoxPosition(styleBox));
      }
    })();
  };
  WebVTT$1.Parser = function (window, vttjs, decoder) {
    if (!decoder) {
      decoder = vttjs;
      vttjs = {};
    }
    if (!vttjs) {
      vttjs = {};
    }
    this.window = window;
    this.vttjs = vttjs;
    this.state = "INITIAL";
    this.buffer = "";
    this.decoder = decoder || new TextDecoder("utf8");
    this.regionList = [];
  };
  WebVTT$1.Parser.prototype = {
    // If the error is a ParsingError then report it to the consumer if
    // possible. If it's not a ParsingError then throw it like normal.
    reportOrThrowError: function (e) {
      if (e instanceof ParsingError) {
        this.onparsingerror && this.onparsingerror(e);
      } else {
        throw e;
      }
    },
    parse: function (data) {
      var self = this;

      // If there is no data then we won't decode it, but will just try to parse
      // whatever is in buffer already. This may occur in circumstances, for
      // example when flush() is called.
      if (data) {
        // Try to decode the data that we received.
        self.buffer += self.decoder.decode(data, {
          stream: true
        });
      }
      function collectNextLine() {
        var buffer = self.buffer;
        var pos = 0;
        while (pos < buffer.length && buffer[pos] !== '\r' && buffer[pos] !== '\n') {
          ++pos;
        }
        var line = buffer.substr(0, pos);
        // Advance the buffer early in case we fail below.
        if (buffer[pos] === '\r') {
          ++pos;
        }
        if (buffer[pos] === '\n') {
          ++pos;
        }
        self.buffer = buffer.substr(pos);
        return line;
      }

      // 3.4 WebVTT region and WebVTT region settings syntax
      function parseRegion(input) {
        var settings = new Settings();
        parseOptions(input, function (k, v) {
          switch (k) {
            case "id":
              settings.set(k, v);
              break;
            case "width":
              settings.percent(k, v);
              break;
            case "lines":
              settings.integer(k, v);
              break;
            case "regionanchor":
            case "viewportanchor":
              var xy = v.split(',');
              if (xy.length !== 2) {
                break;
              }
              // We have to make sure both x and y parse, so use a temporary
              // settings object here.
              var anchor = new Settings();
              anchor.percent("x", xy[0]);
              anchor.percent("y", xy[1]);
              if (!anchor.has("x") || !anchor.has("y")) {
                break;
              }
              settings.set(k + "X", anchor.get("x"));
              settings.set(k + "Y", anchor.get("y"));
              break;
            case "scroll":
              settings.alt(k, v, ["up"]);
              break;
          }
        }, /=/, /\s/);

        // Create the region, using default values for any values that were not
        // specified.
        if (settings.has("id")) {
          var region = new (self.vttjs.VTTRegion || self.window.VTTRegion)();
          region.width = settings.get("width", 100);
          region.lines = settings.get("lines", 3);
          region.regionAnchorX = settings.get("regionanchorX", 0);
          region.regionAnchorY = settings.get("regionanchorY", 100);
          region.viewportAnchorX = settings.get("viewportanchorX", 0);
          region.viewportAnchorY = settings.get("viewportanchorY", 100);
          region.scroll = settings.get("scroll", "");
          // Register the region.
          self.onregion && self.onregion(region);
          // Remember the VTTRegion for later in case we parse any VTTCues that
          // reference it.
          self.regionList.push({
            id: settings.get("id"),
            region: region
          });
        }
      }

      // draft-pantos-http-live-streaming-20
      // https://tools.ietf.org/html/draft-pantos-http-live-streaming-20#section-3.5
      // 3.5 WebVTT
      function parseTimestampMap(input) {
        var settings = new Settings();
        parseOptions(input, function (k, v) {
          switch (k) {
            case "MPEGT":
              settings.integer(k + 'S', v);
              break;
            case "LOCA":
              settings.set(k + 'L', parseTimeStamp(v));
              break;
          }
        }, /[^\d]:/, /,/);
        self.ontimestampmap && self.ontimestampmap({
          "MPEGTS": settings.get("MPEGTS"),
          "LOCAL": settings.get("LOCAL")
        });
      }

      // 3.2 WebVTT metadata header syntax
      function parseHeader(input) {
        if (input.match(/X-TIMESTAMP-MAP/)) {
          // This line contains HLS X-TIMESTAMP-MAP metadata
          parseOptions(input, function (k, v) {
            switch (k) {
              case "X-TIMESTAMP-MAP":
                parseTimestampMap(v);
                break;
            }
          }, /=/);
        } else {
          parseOptions(input, function (k, v) {
            switch (k) {
              case "Region":
                // 3.3 WebVTT region metadata header syntax
                parseRegion(v);
                break;
            }
          }, /:/);
        }
      }

      // 5.1 WebVTT file parsing.
      try {
        var line;
        if (self.state === "INITIAL") {
          // We can't start parsing until we have the first line.
          if (!/\r\n|\n/.test(self.buffer)) {
            return this;
          }
          line = collectNextLine();
          var m = line.match(/^WEBVTT([ \t].*)?$/);
          if (!m || !m[0]) {
            throw new ParsingError(ParsingError.Errors.BadSignature);
          }
          self.state = "HEADER";
        }
        var alreadyCollectedLine = false;
        while (self.buffer) {
          // We can't parse a line until we have the full line.
          if (!/\r\n|\n/.test(self.buffer)) {
            return this;
          }
          if (!alreadyCollectedLine) {
            line = collectNextLine();
          } else {
            alreadyCollectedLine = false;
          }
          switch (self.state) {
            case "HEADER":
              // 13-18 - Allow a header (metadata) under the WEBVTT line.
              if (/:/.test(line)) {
                parseHeader(line);
              } else if (!line) {
                // An empty line terminates the header and starts the body (cues).
                self.state = "ID";
              }
              continue;
            case "NOTE":
              // Ignore NOTE blocks.
              if (!line) {
                self.state = "ID";
              }
              continue;
            case "ID":
              // Check for the start of NOTE blocks.
              if (/^NOTE($|[ \t])/.test(line)) {
                self.state = "NOTE";
                break;
              }
              // 19-29 - Allow any number of line terminators, then initialize new cue values.
              if (!line) {
                continue;
              }
              self.cue = new (self.vttjs.VTTCue || self.window.VTTCue)(0, 0, "");
              // Safari still uses the old middle value and won't accept center
              try {
                self.cue.align = "center";
              } catch (e) {
                self.cue.align = "middle";
              }
              self.state = "CUE";
              // 30-39 - Check if self line contains an optional identifier or timing data.
              if (line.indexOf("-->") === -1) {
                self.cue.id = line;
                continue;
              }
            // Process line as start of a cue.
            /*falls through*/
            case "CUE":
              // 40 - Collect cue timings and settings.
              try {
                parseCue(line, self.cue, self.regionList);
              } catch (e) {
                self.reportOrThrowError(e);
                // In case of an error ignore rest of the cue.
                self.cue = null;
                self.state = "BADCUE";
                continue;
              }
              self.state = "CUETEXT";
              continue;
            case "CUETEXT":
              var hasSubstring = line.indexOf("-->") !== -1;
              // 34 - If we have an empty line then report the cue.
              // 35 - If we have the special substring '-->' then report the cue,
              // but do not collect the line as we need to process the current
              // one as a new cue.
              if (!line || hasSubstring && (alreadyCollectedLine = true)) {
                // We are done parsing self cue.
                self.oncue && self.oncue(self.cue);
                self.cue = null;
                self.state = "ID";
                continue;
              }
              if (self.cue.text) {
                self.cue.text += "\n";
              }
              self.cue.text += line.replace(/\u2028/g, '\n').replace(/u2029/g, '\n');
              continue;
            case "BADCUE":
              // BADCUE
              // 54-62 - Collect and discard the remaining cue.
              if (!line) {
                self.state = "ID";
              }
              continue;
          }
        }
      } catch (e) {
        self.reportOrThrowError(e);

        // If we are currently parsing a cue, report what we have.
        if (self.state === "CUETEXT" && self.cue && self.oncue) {
          self.oncue(self.cue);
        }
        self.cue = null;
        // Enter BADWEBVTT state if header was not parsed correctly otherwise
        // another exception occurred so enter BADCUE state.
        self.state = self.state === "INITIAL" ? "BADWEBVTT" : "BADCUE";
      }
      return this;
    },
    flush: function () {
      var self = this;
      try {
        // Finish decoding the stream.
        self.buffer += self.decoder.decode();
        // Synthesize the end of the current cue or region.
        if (self.cue || self.state === "HEADER") {
          self.buffer += "\n\n";
          self.parse();
        }
        // If we've flushed, parsed, and we're still on the INITIAL state then
        // that means we don't have enough of the stream to parse the first
        // line.
        if (self.state === "INITIAL") {
          throw new ParsingError(ParsingError.Errors.BadSignature);
        }
      } catch (e) {
        self.reportOrThrowError(e);
      }
      self.onflush && self.onflush();
      return this;
    }
  };
  var vtt = WebVTT$1;

  /**
   * Copyright 2013 vtt.js Contributors
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  var autoKeyword = "auto";
  var directionSetting = {
    "": 1,
    "lr": 1,
    "rl": 1
  };
  var alignSetting = {
    "start": 1,
    "center": 1,
    "end": 1,
    "left": 1,
    "right": 1,
    "auto": 1,
    "line-left": 1,
    "line-right": 1
  };
  function findDirectionSetting(value) {
    if (typeof value !== "string") {
      return false;
    }
    var dir = directionSetting[value.toLowerCase()];
    return dir ? value.toLowerCase() : false;
  }
  function findAlignSetting(value) {
    if (typeof value !== "string") {
      return false;
    }
    var align = alignSetting[value.toLowerCase()];
    return align ? value.toLowerCase() : false;
  }
  function VTTCue(startTime, endTime, text) {
    /**
     * Shim implementation specific properties. These properties are not in
     * the spec.
     */

    // Lets us know when the VTTCue's data has changed in such a way that we need
    // to recompute its display state. This lets us compute its display state
    // lazily.
    this.hasBeenReset = false;

    /**
     * VTTCue and TextTrackCue properties
     * http://dev.w3.org/html5/webvtt/#vttcue-interface
     */

    var _id = "";
    var _pauseOnExit = false;
    var _startTime = startTime;
    var _endTime = endTime;
    var _text = text;
    var _region = null;
    var _vertical = "";
    var _snapToLines = true;
    var _line = "auto";
    var _lineAlign = "start";
    var _position = "auto";
    var _positionAlign = "auto";
    var _size = 100;
    var _align = "center";
    Object.defineProperties(this, {
      "id": {
        enumerable: true,
        get: function () {
          return _id;
        },
        set: function (value) {
          _id = "" + value;
        }
      },
      "pauseOnExit": {
        enumerable: true,
        get: function () {
          return _pauseOnExit;
        },
        set: function (value) {
          _pauseOnExit = !!value;
        }
      },
      "startTime": {
        enumerable: true,
        get: function () {
          return _startTime;
        },
        set: function (value) {
          if (typeof value !== "number") {
            throw new TypeError("Start time must be set to a number.");
          }
          _startTime = value;
          this.hasBeenReset = true;
        }
      },
      "endTime": {
        enumerable: true,
        get: function () {
          return _endTime;
        },
        set: function (value) {
          if (typeof value !== "number") {
            throw new TypeError("End time must be set to a number.");
          }
          _endTime = value;
          this.hasBeenReset = true;
        }
      },
      "text": {
        enumerable: true,
        get: function () {
          return _text;
        },
        set: function (value) {
          _text = "" + value;
          this.hasBeenReset = true;
        }
      },
      "region": {
        enumerable: true,
        get: function () {
          return _region;
        },
        set: function (value) {
          _region = value;
          this.hasBeenReset = true;
        }
      },
      "vertical": {
        enumerable: true,
        get: function () {
          return _vertical;
        },
        set: function (value) {
          var setting = findDirectionSetting(value);
          // Have to check for false because the setting an be an empty string.
          if (setting === false) {
            throw new SyntaxError("Vertical: an invalid or illegal direction string was specified.");
          }
          _vertical = setting;
          this.hasBeenReset = true;
        }
      },
      "snapToLines": {
        enumerable: true,
        get: function () {
          return _snapToLines;
        },
        set: function (value) {
          _snapToLines = !!value;
          this.hasBeenReset = true;
        }
      },
      "line": {
        enumerable: true,
        get: function () {
          return _line;
        },
        set: function (value) {
          if (typeof value !== "number" && value !== autoKeyword) {
            throw new SyntaxError("Line: an invalid number or illegal string was specified.");
          }
          _line = value;
          this.hasBeenReset = true;
        }
      },
      "lineAlign": {
        enumerable: true,
        get: function () {
          return _lineAlign;
        },
        set: function (value) {
          var setting = findAlignSetting(value);
          if (!setting) {
            console.warn("lineAlign: an invalid or illegal string was specified.");
          } else {
            _lineAlign = setting;
            this.hasBeenReset = true;
          }
        }
      },
      "position": {
        enumerable: true,
        get: function () {
          return _position;
        },
        set: function (value) {
          if (value < 0 || value > 100) {
            throw new Error("Position must be between 0 and 100.");
          }
          _position = value;
          this.hasBeenReset = true;
        }
      },
      "positionAlign": {
        enumerable: true,
        get: function () {
          return _positionAlign;
        },
        set: function (value) {
          var setting = findAlignSetting(value);
          if (!setting) {
            console.warn("positionAlign: an invalid or illegal string was specified.");
          } else {
            _positionAlign = setting;
            this.hasBeenReset = true;
          }
        }
      },
      "size": {
        enumerable: true,
        get: function () {
          return _size;
        },
        set: function (value) {
          if (value < 0 || value > 100) {
            throw new Error("Size must be between 0 and 100.");
          }
          _size = value;
          this.hasBeenReset = true;
        }
      },
      "align": {
        enumerable: true,
        get: function () {
          return _align;
        },
        set: function (value) {
          var setting = findAlignSetting(value);
          if (!setting) {
            throw new SyntaxError("align: an invalid or illegal alignment string was specified.");
          }
          _align = setting;
          this.hasBeenReset = true;
        }
      }
    });

    /**
     * Other <track> spec defined properties
     */

    // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state
    this.displayState = undefined;
  }

  /**
   * VTTCue methods
   */

  VTTCue.prototype.getCueAsHTML = function () {
    // Assume WebVTT.convertCueToDOMTree is on the global.
    return WebVTT.convertCueToDOMTree(window, this.text);
  };
  var vttcue = VTTCue;

  /**
   * Copyright 2013 vtt.js Contributors
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  var scrollSetting = {
    "": true,
    "up": true
  };
  function findScrollSetting(value) {
    if (typeof value !== "string") {
      return false;
    }
    var scroll = scrollSetting[value.toLowerCase()];
    return scroll ? value.toLowerCase() : false;
  }
  function isValidPercentValue(value) {
    return typeof value === "number" && value >= 0 && value <= 100;
  }

  // VTTRegion shim http://dev.w3.org/html5/webvtt/#vttregion-interface
  function VTTRegion() {
    var _width = 100;
    var _lines = 3;
    var _regionAnchorX = 0;
    var _regionAnchorY = 100;
    var _viewportAnchorX = 0;
    var _viewportAnchorY = 100;
    var _scroll = "";
    Object.defineProperties(this, {
      "width": {
        enumerable: true,
        get: function () {
          return _width;
        },
        set: function (value) {
          if (!isValidPercentValue(value)) {
            throw new Error("Width must be between 0 and 100.");
          }
          _width = value;
        }
      },
      "lines": {
        enumerable: true,
        get: function () {
          return _lines;
        },
        set: function (value) {
          if (typeof value !== "number") {
            throw new TypeError("Lines must be set to a number.");
          }
          _lines = value;
        }
      },
      "regionAnchorY": {
        enumerable: true,
        get: function () {
          return _regionAnchorY;
        },
        set: function (value) {
          if (!isValidPercentValue(value)) {
            throw new Error("RegionAnchorX must be between 0 and 100.");
          }
          _regionAnchorY = value;
        }
      },
      "regionAnchorX": {
        enumerable: true,
        get: function () {
          return _regionAnchorX;
        },
        set: function (value) {
          if (!isValidPercentValue(value)) {
            throw new Error("RegionAnchorY must be between 0 and 100.");
          }
          _regionAnchorX = value;
        }
      },
      "viewportAnchorY": {
        enumerable: true,
        get: function () {
          return _viewportAnchorY;
        },
        set: function (value) {
          if (!isValidPercentValue(value)) {
            throw new Error("ViewportAnchorY must be between 0 and 100.");
          }
          _viewportAnchorY = value;
        }
      },
      "viewportAnchorX": {
        enumerable: true,
        get: function () {
          return _viewportAnchorX;
        },
        set: function (value) {
          if (!isValidPercentValue(value)) {
            throw new Error("ViewportAnchorX must be between 0 and 100.");
          }
          _viewportAnchorX = value;
        }
      },
      "scroll": {
        enumerable: true,
        get: function () {
          return _scroll;
        },
        set: function (value) {
          var setting = findScrollSetting(value);
          // Have to check for false as an empty string is a legal value.
          if (setting === false) {
            console.warn("Scroll: an invalid or illegal string was specified.");
          } else {
            _scroll = setting;
          }
        }
      }
    });
  }
  var vttregion = VTTRegion;

  var browserIndex = createCommonjsModule(function (module) {
    /**
     * Copyright 2013 vtt.js Contributors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    // Default exports for Node. Export the extended versions of VTTCue and
    // VTTRegion in Node since we likely want the capability to convert back and
    // forth between JSON. If we don't then it's not that big of a deal since we're
    // off browser.

    var vttjs = module.exports = {
      WebVTT: vtt,
      VTTCue: vttcue,
      VTTRegion: vttregion
    };
    window_1.vttjs = vttjs;
    window_1.WebVTT = vttjs.WebVTT;
    var cueShim = vttjs.VTTCue;
    var regionShim = vttjs.VTTRegion;
    var nativeVTTCue = window_1.VTTCue;
    var nativeVTTRegion = window_1.VTTRegion;
    vttjs.shim = function () {
      window_1.VTTCue = cueShim;
      window_1.VTTRegion = regionShim;
    };
    vttjs.restore = function () {
      window_1.VTTCue = nativeVTTCue;
      window_1.VTTRegion = nativeVTTRegion;
    };
    if (!window_1.VTTCue) {
      vttjs.shim();
    }
  });
  browserIndex.WebVTT;
  browserIndex.VTTCue;
  browserIndex.VTTRegion;

  /**
   * @file tech.js
   */

  /**
   * An Object containing a structure like: `{src: 'url', type: 'mimetype'}` or string
   * that just contains the src url alone.
   * * `var SourceObject = {src: 'http://ex.com/video.mp4', type: 'video/mp4'};`
     * `var SourceString = 'http://example.com/some-video.mp4';`
   *
   * @typedef {Object|string} Tech~SourceObject
   *
   * @property {string} src
   *           The url to the source
   *
   * @property {string} type
   *           The mime type of the source
   */

  /**
   * A function used by {@link Tech} to create a new {@link TextTrack}.
   *
   * @private
   *
   * @param {Tech} self
   *        An instance of the Tech class.
   *
   * @param {string} kind
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
   *
   * @param {string} [label]
   *        Label to identify the text track
   *
   * @param {string} [language]
   *        Two letter language abbreviation
   *
   * @param {Object} [options={}]
   *        An object with additional text track options
   *
   * @return {TextTrack}
   *          The text track that was created.
   */
  function createTrackHelper(self, kind, label, language, options = {}) {
    const tracks = self.textTracks();
    options.kind = kind;
    if (label) {
      options.label = label;
    }
    if (language) {
      options.language = language;
    }
    options.tech = self;
    const track = new ALL.text.TrackClass(options);
    tracks.addTrack(track);
    return track;
  }

  /**
   * This is the base class for media playback technology controllers, such as
   * {@link HTML5}
   *
   * @extends Component
   */
  class Tech extends Component {
    /**
    * Create an instance of this Tech.
    *
    * @param {Object} [options]
    *        The key/value store of player options.
    *
    * @param {Function} [ready]
    *        Callback function to call when the `HTML5` Tech is ready.
    */
    constructor(options = {}, ready = function () {}) {
      // we don't want the tech to report user activity automatically.
      // This is done manually in addControlsListeners
      options.reportTouchActivity = false;
      super(null, options, ready);
      this.onDurationChange_ = e => this.onDurationChange(e);
      this.trackProgress_ = e => this.trackProgress(e);
      this.trackCurrentTime_ = e => this.trackCurrentTime(e);
      this.stopTrackingCurrentTime_ = e => this.stopTrackingCurrentTime(e);
      this.disposeSourceHandler_ = e => this.disposeSourceHandler(e);
      this.queuedHanders_ = new Set();

      // keep track of whether the current source has played at all to
      // implement a very limited played()
      this.hasStarted_ = false;
      this.on('playing', function () {
        this.hasStarted_ = true;
      });
      this.on('loadstart', function () {
        this.hasStarted_ = false;
      });
      ALL.names.forEach(name => {
        const props = ALL[name];
        if (options && options[props.getterName]) {
          this[props.privateName] = options[props.getterName];
        }
      });

      // Manually track progress in cases where the browser/tech doesn't report it.
      if (!this.featuresProgressEvents) {
        this.manualProgressOn();
      }

      // Manually track timeupdates in cases where the browser/tech doesn't report it.
      if (!this.featuresTimeupdateEvents) {
        this.manualTimeUpdatesOn();
      }
      ['Text', 'Audio', 'Video'].forEach(track => {
        if (options[`native${track}Tracks`] === false) {
          this[`featuresNative${track}Tracks`] = false;
        }
      });
      if (options.nativeCaptions === false || options.nativeTextTracks === false) {
        this.featuresNativeTextTracks = false;
      } else if (options.nativeCaptions === true || options.nativeTextTracks === true) {
        this.featuresNativeTextTracks = true;
      }
      if (!this.featuresNativeTextTracks) {
        this.emulateTextTracks();
      }
      this.preloadTextTracks = options.preloadTextTracks !== false;
      this.autoRemoteTextTracks_ = new ALL.text.ListClass();
      this.initTrackListeners();

      // Turn on component tap events only if not using native controls
      if (!options.nativeControlsForTouch) {
        this.emitTapEvents();
      }
      if (this.constructor) {
        this.name_ = this.constructor.name || 'Unknown Tech';
      }
    }

    /**
     * A special function to trigger source set in a way that will allow player
     * to re-trigger if the player or tech are not ready yet.
     *
     * @fires Tech#sourceset
     * @param {string} src The source string at the time of the source changing.
     */
    triggerSourceset(src) {
      if (!this.isReady_) {
        // on initial ready we have to trigger source set
        // 1ms after ready so that player can watch for it.
        this.one('ready', () => this.setTimeout(() => this.triggerSourceset(src), 1));
      }

      /**
       * Fired when the source is set on the tech causing the media element
       * to reload.
       *
       * @see {@link Player#event:sourceset}
       * @event Tech#sourceset
       * @type {Event}
       */
      this.trigger({
        src,
        type: 'sourceset'
      });
    }

    /* Fallbacks for unsupported event types
    ================================================================================ */

    /**
     * Polyfill the `progress` event for browsers that don't support it natively.
     *
     * @see {@link Tech#trackProgress}
     */
    manualProgressOn() {
      this.on('durationchange', this.onDurationChange_);
      this.manualProgress = true;

      // Trigger progress watching when a source begins loading
      this.one('ready', this.trackProgress_);
    }

    /**
     * Turn off the polyfill for `progress` events that was created in
     * {@link Tech#manualProgressOn}
     */
    manualProgressOff() {
      this.manualProgress = false;
      this.stopTrackingProgress();
      this.off('durationchange', this.onDurationChange_);
    }

    /**
     * This is used to trigger a `progress` event when the buffered percent changes. It
     * sets an interval function that will be called every 500 milliseconds to check if the
     * buffer end percent has changed.
     *
     * > This function is called by {@link Tech#manualProgressOn}
     *
     * @param {Event} event
     *        The `ready` event that caused this to run.
     *
     * @listens Tech#ready
     * @fires Tech#progress
     */
    trackProgress(event) {
      this.stopTrackingProgress();
      this.progressInterval = this.setInterval(bind_(this, function () {
        // Don't trigger unless buffered amount is greater than last time

        const numBufferedPercent = this.bufferedPercent();
        if (this.bufferedPercent_ !== numBufferedPercent) {
          /**
           * See {@link Player#progress}
           *
           * @event Tech#progress
           * @type {Event}
           */
          this.trigger('progress');
        }
        this.bufferedPercent_ = numBufferedPercent;
        if (numBufferedPercent === 1) {
          this.stopTrackingProgress();
        }
      }), 500);
    }

    /**
     * Update our internal duration on a `durationchange` event by calling
     * {@link Tech#duration}.
     *
     * @param {Event} event
     *        The `durationchange` event that caused this to run.
     *
     * @listens Tech#durationchange
     */
    onDurationChange(event) {
      this.duration_ = this.duration();
    }

    /**
     * Get and create a `TimeRange` object for buffering.
     *
     * @return { import('../utils/time').TimeRange }
     *         The time range object that was created.
     */
    buffered() {
      return createTimeRanges(0, 0);
    }

    /**
     * Get the percentage of the current video that is currently buffered.
     *
     * @return {number}
     *         A number from 0 to 1 that represents the decimal percentage of the
     *         video that is buffered.
     *
     */
    bufferedPercent() {
      return bufferedPercent(this.buffered(), this.duration_);
    }

    /**
     * Turn off the polyfill for `progress` events that was created in
     * {@link Tech#manualProgressOn}
     * Stop manually tracking progress events by clearing the interval that was set in
     * {@link Tech#trackProgress}.
     */
    stopTrackingProgress() {
      this.clearInterval(this.progressInterval);
    }

    /**
     * Polyfill the `timeupdate` event for browsers that don't support it.
     *
     * @see {@link Tech#trackCurrentTime}
     */
    manualTimeUpdatesOn() {
      this.manualTimeUpdates = true;
      this.on('play', this.trackCurrentTime_);
      this.on('pause', this.stopTrackingCurrentTime_);
    }

    /**
     * Turn off the polyfill for `timeupdate` events that was created in
     * {@link Tech#manualTimeUpdatesOn}
     */
    manualTimeUpdatesOff() {
      this.manualTimeUpdates = false;
      this.stopTrackingCurrentTime();
      this.off('play', this.trackCurrentTime_);
      this.off('pause', this.stopTrackingCurrentTime_);
    }

    /**
     * Sets up an interval function to track current time and trigger `timeupdate` every
     * 250 milliseconds.
     *
     * @listens Tech#play
     * @triggers Tech#timeupdate
     */
    trackCurrentTime() {
      if (this.currentTimeInterval) {
        this.stopTrackingCurrentTime();
      }
      this.currentTimeInterval = this.setInterval(function () {
        /**
         * Triggered at an interval of 250ms to indicated that time is passing in the video.
         *
         * @event Tech#timeupdate
         * @type {Event}
         */
        this.trigger({
          type: 'timeupdate',
          target: this,
          manuallyTriggered: true
        });

        // 42 = 24 fps // 250 is what Webkit uses // FF uses 15
      }, 250);
    }

    /**
     * Stop the interval function created in {@link Tech#trackCurrentTime} so that the
     * `timeupdate` event is no longer triggered.
     *
     * @listens {Tech#pause}
     */
    stopTrackingCurrentTime() {
      this.clearInterval(this.currentTimeInterval);

      // #1002 - if the video ends right before the next timeupdate would happen,
      // the progress bar won't make it all the way to the end
      this.trigger({
        type: 'timeupdate',
        target: this,
        manuallyTriggered: true
      });
    }

    /**
     * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},
     * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.
     *
     * @fires Component#dispose
     */
    dispose() {
      // clear out all tracks because we can't reuse them between techs
      this.clearTracks(NORMAL.names);

      // Turn off any manual progress or timeupdate tracking
      if (this.manualProgress) {
        this.manualProgressOff();
      }
      if (this.manualTimeUpdates) {
        this.manualTimeUpdatesOff();
      }
      super.dispose();
    }

    /**
     * Clear out a single `TrackList` or an array of `TrackLists` given their names.
     *
     * > Note: Techs without source handlers should call this between sources for `video`
     *         & `audio` tracks. You don't want to use them between tracks!
     *
     * @param {string[]|string} types
     *        TrackList names to clear, valid names are `video`, `audio`, and
     *        `text`.
     */
    clearTracks(types) {
      types = [].concat(types);
      // clear out all tracks because we can't reuse them between techs
      types.forEach(type => {
        const list = this[`${type}Tracks`]() || [];
        let i = list.length;
        while (i--) {
          const track = list[i];
          if (type === 'text') {
            this.removeRemoteTextTrack(track);
          }
          list.removeTrack(track);
        }
      });
    }

    /**
     * Remove any TextTracks added via addRemoteTextTrack that are
     * flagged for automatic garbage collection
     */
    cleanupAutoTextTracks() {
      const list = this.autoRemoteTextTracks_ || [];
      let i = list.length;
      while (i--) {
        const track = list[i];
        this.removeRemoteTextTrack(track);
      }
    }

    /**
     * Reset the tech, which will removes all sources and reset the internal readyState.
     *
     * @abstract
     */
    reset() {}

    /**
     * Get the value of `crossOrigin` from the tech.
     *
     * @abstract
     *
     * @see {Html5#crossOrigin}
     */
    crossOrigin() {}

    /**
     * Set the value of `crossOrigin` on the tech.
     *
     * @abstract
     *
     * @param {string} crossOrigin the crossOrigin value
     * @see {Html5#setCrossOrigin}
     */
    setCrossOrigin() {}

    /**
     * Get or set an error on the Tech.
     *
     * @param {MediaError} [err]
     *        Error to set on the Tech
     *
     * @return {MediaError|null}
     *         The current error object on the tech, or null if there isn't one.
     */
    error(err) {
      if (err !== undefined) {
        this.error_ = new MediaError(err);
        this.trigger('error');
      }
      return this.error_;
    }

    /**
     * Returns the `TimeRange`s that have been played through for the current source.
     *
     * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.
     *         It only checks whether the source has played at all or not.
     *
     * @return {TimeRange}
     *         - A single time range if this video has played
     *         - An empty set of ranges if not.
     */
    played() {
      if (this.hasStarted_) {
        return createTimeRanges(0, 0);
      }
      return createTimeRanges();
    }

    /**
     * Start playback
     *
     * @abstract
     *
     * @see {Html5#play}
     */
    play() {}

    /**
     * Set whether we are scrubbing or not
     *
     * @abstract
     * @param {boolean} _isScrubbing
     *                  - true for we are currently scrubbing
     *                  - false for we are no longer scrubbing
     *
     * @see {Html5#setScrubbing}
     */
    setScrubbing(_isScrubbing) {}

    /**
     * Get whether we are scrubbing or not
     *
     * @abstract
     *
     * @see {Html5#scrubbing}
     */
    scrubbing() {}

    /**
     * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was
     * previously called.
     *
     * @param {number} _seconds
     *        Set the current time of the media to this.
     * @fires Tech#timeupdate
     */
    setCurrentTime(_seconds) {
      // improve the accuracy of manual timeupdates
      if (this.manualTimeUpdates) {
        /**
         * A manual `timeupdate` event.
         *
         * @event Tech#timeupdate
         * @type {Event}
         */
        this.trigger({
          type: 'timeupdate',
          target: this,
          manuallyTriggered: true
        });
      }
    }

    /**
     * Turn on listeners for {@link VideoTrackList}, {@link {AudioTrackList}, and
     * {@link TextTrackList} events.
     *
     * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.
     *
     * @fires Tech#audiotrackchange
     * @fires Tech#videotrackchange
     * @fires Tech#texttrackchange
     */
    initTrackListeners() {
      /**
        * Triggered when tracks are added or removed on the Tech {@link AudioTrackList}
        *
        * @event Tech#audiotrackchange
        * @type {Event}
        */

      /**
        * Triggered when tracks are added or removed on the Tech {@link VideoTrackList}
        *
        * @event Tech#videotrackchange
        * @type {Event}
        */

      /**
        * Triggered when tracks are added or removed on the Tech {@link TextTrackList}
        *
        * @event Tech#texttrackchange
        * @type {Event}
        */
      NORMAL.names.forEach(name => {
        const props = NORMAL[name];
        const trackListChanges = () => {
          this.trigger(`${name}trackchange`);
        };
        const tracks = this[props.getterName]();
        tracks.addEventListener('removetrack', trackListChanges);
        tracks.addEventListener('addtrack', trackListChanges);
        this.on('dispose', () => {
          tracks.removeEventListener('removetrack', trackListChanges);
          tracks.removeEventListener('addtrack', trackListChanges);
        });
      });
    }

    /**
     * Emulate TextTracks using vtt.js if necessary
     *
     * @fires Tech#vttjsloaded
     * @fires Tech#vttjserror
     */
    addWebVttScript_() {
      if (window.WebVTT) {
        return;
      }

      // Initially, Tech.el_ is a child of a dummy-div wait until the Component system
      // signals that the Tech is ready at which point Tech.el_ is part of the DOM
      // before inserting the WebVTT script
      if (document.body.contains(this.el())) {
        // load via require if available and vtt.js script location was not passed in
        // as an option. novtt builds will turn the above require call into an empty object
        // which will cause this if check to always fail.
        if (!this.options_['vtt.js'] && isPlain(browserIndex) && Object.keys(browserIndex).length > 0) {
          this.trigger('vttjsloaded');
          return;
        }

        // load vtt.js via the script location option or the cdn of no location was
        // passed in
        const script = document.createElement('script');
        script.src = this.options_['vtt.js'] || 'https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js';
        script.onload = () => {
          /**
           * Fired when vtt.js is loaded.
           *
           * @event Tech#vttjsloaded
           * @type {Event}
           */
          this.trigger('vttjsloaded');
        };
        script.onerror = () => {
          /**
           * Fired when vtt.js was not loaded due to an error
           *
           * @event Tech#vttjsloaded
           * @type {Event}
           */
          this.trigger('vttjserror');
        };
        this.on('dispose', () => {
          script.onload = null;
          script.onerror = null;
        });
        // but have not loaded yet and we set it to true before the inject so that
        // we don't overwrite the injected window.WebVTT if it loads right away
        window.WebVTT = true;
        this.el().parentNode.appendChild(script);
      } else {
        this.ready(this.addWebVttScript_);
      }
    }

    /**
     * Emulate texttracks
     *
     */
    emulateTextTracks() {
      const tracks = this.textTracks();
      const remoteTracks = this.remoteTextTracks();
      const handleAddTrack = e => tracks.addTrack(e.track);
      const handleRemoveTrack = e => tracks.removeTrack(e.track);
      remoteTracks.on('addtrack', handleAddTrack);
      remoteTracks.on('removetrack', handleRemoveTrack);
      this.addWebVttScript_();
      const updateDisplay = () => this.trigger('texttrackchange');
      const textTracksChanges = () => {
        updateDisplay();
        for (let i = 0; i < tracks.length; i++) {
          const track = tracks[i];
          track.removeEventListener('cuechange', updateDisplay);
          if (track.mode === 'showing') {
            track.addEventListener('cuechange', updateDisplay);
          }
        }
      };
      textTracksChanges();
      tracks.addEventListener('change', textTracksChanges);
      tracks.addEventListener('addtrack', textTracksChanges);
      tracks.addEventListener('removetrack', textTracksChanges);
      this.on('dispose', function () {
        remoteTracks.off('addtrack', handleAddTrack);
        remoteTracks.off('removetrack', handleRemoveTrack);
        tracks.removeEventListener('change', textTracksChanges);
        tracks.removeEventListener('addtrack', textTracksChanges);
        tracks.removeEventListener('removetrack', textTracksChanges);
        for (let i = 0; i < tracks.length; i++) {
          const track = tracks[i];
          track.removeEventListener('cuechange', updateDisplay);
        }
      });
    }

    /**
     * Create and returns a remote {@link TextTrack} object.
     *
     * @param {string} kind
     *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
     *
     * @param {string} [label]
     *        Label to identify the text track
     *
     * @param {string} [language]
     *        Two letter language abbreviation
     *
     * @return {TextTrack}
     *         The TextTrack that gets created.
     */
    addTextTrack(kind, label, language) {
      if (!kind) {
        throw new Error('TextTrack kind is required but was not provided');
      }
      return createTrackHelper(this, kind, label, language);
    }

    /**
     * Create an emulated TextTrack for use by addRemoteTextTrack
     *
     * This is intended to be overridden by classes that inherit from
     * Tech in order to create native or custom TextTracks.
     *
     * @param {Object} options
     *        The object should contain the options to initialize the TextTrack with.
     *
     * @param {string} [options.kind]
     *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
     *
     * @param {string} [options.label].
     *        Label to identify the text track
     *
     * @param {string} [options.language]
     *        Two letter language abbreviation.
     *
     * @return {HTMLTrackElement}
     *         The track element that gets created.
     */
    createRemoteTextTrack(options) {
      const track = merge(options, {
        tech: this
      });
      return new REMOTE.remoteTextEl.TrackClass(track);
    }

    /**
     * Creates a remote text track object and returns an html track element.
     *
     * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.
     *
     * @param {Object} options
     *        See {@link Tech#createRemoteTextTrack} for more detailed properties.
     *
     * @param {boolean} [manualCleanup=false]
     *        - When false: the TextTrack will be automatically removed from the video
     *          element whenever the source changes
     *        - When True: The TextTrack will have to be cleaned up manually
     *
     * @return {HTMLTrackElement}
     *         An Html Track Element.
     *
     */
    addRemoteTextTrack(options = {}, manualCleanup) {
      const htmlTrackElement = this.createRemoteTextTrack(options);
      if (typeof manualCleanup !== 'boolean') {
        manualCleanup = false;
      }

      // store HTMLTrackElement and TextTrack to remote list
      this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);
      this.remoteTextTracks().addTrack(htmlTrackElement.track);
      if (manualCleanup === false) {
        // create the TextTrackList if it doesn't exist
        this.ready(() => this.autoRemoteTextTracks_.addTrack(htmlTrackElement.track));
      }
      return htmlTrackElement;
    }

    /**
     * Remove a remote text track from the remote `TextTrackList`.
     *
     * @param {TextTrack} track
     *        `TextTrack` to remove from the `TextTrackList`
     */
    removeRemoteTextTrack(track) {
      const trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);

      // remove HTMLTrackElement and TextTrack from remote list
      this.remoteTextTrackEls().removeTrackElement_(trackElement);
      this.remoteTextTracks().removeTrack(track);
      this.autoRemoteTextTracks_.removeTrack(track);
    }

    /**
     * Gets available media playback quality metrics as specified by the W3C's Media
     * Playback Quality API.
     *
     * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
     *
     * @return {Object}
     *         An object with supported media playback quality metrics
     *
     * @abstract
     */
    getVideoPlaybackQuality() {
      return {};
    }

    /**
     * Attempt to create a floating video window always on top of other windows
     * so that users may continue consuming media while they interact with other
     * content sites, or applications on their device.
     *
     * @see [Spec]{@link https://wicg.github.io/picture-in-picture}
     *
     * @return {Promise|undefined}
     *         A promise with a Picture-in-Picture window if the browser supports
     *         Promises (or one was passed in as an option). It returns undefined
     *         otherwise.
     *
     * @abstract
     */
    requestPictureInPicture() {
      return Promise.reject();
    }

    /**
     * A method to check for the value of the 'disablePictureInPicture' <video> property.
     * Defaults to true, as it should be considered disabled if the tech does not support pip
     *
     * @abstract
     */
    disablePictureInPicture() {
      return true;
    }

    /**
     * A method to set or unset the 'disablePictureInPicture' <video> property.
     *
     * @abstract
     */
    setDisablePictureInPicture() {}

    /**
     * A fallback implementation of requestVideoFrameCallback using requestAnimationFrame
     *
     * @param {function} cb
     * @return {number} request id
     */
    requestVideoFrameCallback(cb) {
      const id = newGUID();
      if (!this.isReady_ || this.paused()) {
        this.queuedHanders_.add(id);
        this.one('playing', () => {
          if (this.queuedHanders_.has(id)) {
            this.queuedHanders_.delete(id);
            cb();
          }
        });
      } else {
        this.requestNamedAnimationFrame(id, cb);
      }
      return id;
    }

    /**
     * A fallback implementation of cancelVideoFrameCallback
     *
     * @param {number} id id of callback to be cancelled
     */
    cancelVideoFrameCallback(id) {
      if (this.queuedHanders_.has(id)) {
        this.queuedHanders_.delete(id);
      } else {
        this.cancelNamedAnimationFrame(id);
      }
    }

    /**
     * A method to set a poster from a `Tech`.
     *
     * @abstract
     */
    setPoster() {}

    /**
     * A method to check for the presence of the 'playsinline' <video> attribute.
     *
     * @abstract
     */
    playsinline() {}

    /**
     * A method to set or unset the 'playsinline' <video> attribute.
     *
     * @abstract
     */
    setPlaysinline() {}

    /**
     * Attempt to force override of native audio tracks.
     *
     * @param {boolean} override - If set to true native audio will be overridden,
     * otherwise native audio will potentially be used.
     *
     * @abstract
     */
    overrideNativeAudioTracks(override) {}

    /**
     * Attempt to force override of native video tracks.
     *
     * @param {boolean} override - If set to true native video will be overridden,
     * otherwise native video will potentially be used.
     *
     * @abstract
     */
    overrideNativeVideoTracks(override) {}

    /**
     * Check if the tech can support the given mime-type.
     *
     * The base tech does not support any type, but source handlers might
     * overwrite this.
     *
     * @param  {string} _type
     *         The mimetype to check for support
     *
     * @return {string}
     *         'probably', 'maybe', or empty string
     *
     * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}
     *
     * @abstract
     */
    canPlayType(_type) {
      return '';
    }

    /**
     * Check if the type is supported by this tech.
     *
     * The base tech does not support any type, but source handlers might
     * overwrite this.
     *
     * @param {string} _type
     *        The media type to check
     * @return {string} Returns the native video element's response
     */
    static canPlayType(_type) {
      return '';
    }

    /**
     * Check if the tech can support the given source
     *
     * @param {Object} srcObj
     *        The source object
     * @param {Object} options
     *        The options passed to the tech
     * @return {string} 'probably', 'maybe', or '' (empty string)
     */
    static canPlaySource(srcObj, options) {
      return Tech.canPlayType(srcObj.type);
    }

    /*
     * Return whether the argument is a Tech or not.
     * Can be passed either a Class like `Html5` or a instance like `player.tech_`
     *
     * @param {Object} component
     *        The item to check
     *
     * @return {boolean}
     *         Whether it is a tech or not
     *         - True if it is a tech
     *         - False if it is not
     */
    static isTech(component) {
      return component.prototype instanceof Tech || component instanceof Tech || component === Tech;
    }

    /**
     * Registers a `Tech` into a shared list for videojs.
     *
     * @param {string} name
     *        Name of the `Tech` to register.
     *
     * @param {Object} tech
     *        The `Tech` class to register.
     */
    static registerTech(name, tech) {
      if (!Tech.techs_) {
        Tech.techs_ = {};
      }
      if (!Tech.isTech(tech)) {
        throw new Error(`Tech ${name} must be a Tech`);
      }
      if (!Tech.canPlayType) {
        throw new Error('Techs must have a static canPlayType method on them');
      }
      if (!Tech.canPlaySource) {
        throw new Error('Techs must have a static canPlaySource method on them');
      }
      name = toTitleCase(name);
      Tech.techs_[name] = tech;
      Tech.techs_[toLowerCase(name)] = tech;
      if (name !== 'Tech') {
        // camel case the techName for use in techOrder
        Tech.defaultTechOrder_.push(name);
      }
      return tech;
    }

    /**
     * Get a `Tech` from the shared list by name.
     *
     * @param {string} name
     *        `camelCase` or `TitleCase` name of the Tech to get
     *
     * @return {Tech|undefined}
     *         The `Tech` or undefined if there was no tech with the name requested.
     */
    static getTech(name) {
      if (!name) {
        return;
      }
      if (Tech.techs_ && Tech.techs_[name]) {
        return Tech.techs_[name];
      }
      name = toTitleCase(name);
      if (window && window.videojs && window.videojs[name]) {
        log.warn(`The ${name} tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)`);
        return window.videojs[name];
      }
    }
  }

  /**
   * Get the {@link VideoTrackList}
   *
   * @returns {VideoTrackList}
   * @method Tech.prototype.videoTracks
   */

  /**
   * Get the {@link AudioTrackList}
   *
   * @returns {AudioTrackList}
   * @method Tech.prototype.audioTracks
   */

  /**
   * Get the {@link TextTrackList}
   *
   * @returns {TextTrackList}
   * @method Tech.prototype.textTracks
   */

  /**
   * Get the remote element {@link TextTrackList}
   *
   * @returns {TextTrackList}
   * @method Tech.prototype.remoteTextTracks
   */

  /**
   * Get the remote element {@link HtmlTrackElementList}
   *
   * @returns {HtmlTrackElementList}
   * @method Tech.prototype.remoteTextTrackEls
   */

  ALL.names.forEach(function (name) {
    const props = ALL[name];
    Tech.prototype[props.getterName] = function () {
      this[props.privateName] = this[props.privateName] || new props.ListClass();
      return this[props.privateName];
    };
  });

  /**
   * List of associated text tracks
   *
   * @type {TextTrackList}
   * @private
   * @property Tech#textTracks_
   */

  /**
   * List of associated audio tracks.
   *
   * @type {AudioTrackList}
   * @private
   * @property Tech#audioTracks_
   */

  /**
   * List of associated video tracks.
   *
   * @type {VideoTrackList}
   * @private
   * @property Tech#videoTracks_
   */

  /**
   * Boolean indicating whether the `Tech` supports volume control.
   *
   * @type {boolean}
   * @default
   */
  Tech.prototype.featuresVolumeControl = true;

  /**
   * Boolean indicating whether the `Tech` supports muting volume.
   *
   * @type {boolean}
   * @default
   */
  Tech.prototype.featuresMuteControl = true;

  /**
   * Boolean indicating whether the `Tech` supports fullscreen resize control.
   * Resizing plugins using request fullscreen reloads the plugin
   *
   * @type {boolean}
   * @default
   */
  Tech.prototype.featuresFullscreenResize = false;

  /**
   * Boolean indicating whether the `Tech` supports changing the speed at which the video
   * plays. Examples:
   *   - Set player to play 2x (twice) as fast
   *   - Set player to play 0.5x (half) as fast
   *
   * @type {boolean}
   * @default
   */
  Tech.prototype.featuresPlaybackRate = false;

  /**
   * Boolean indicating whether the `Tech` supports the `progress` event.
   * This will be used to determine if {@link Tech#manualProgressOn} should be called.
   *
   * @type {boolean}
   * @default
   */
  Tech.prototype.featuresProgressEvents = false;

  /**
   * Boolean indicating whether the `Tech` supports the `sourceset` event.
   *
   * A tech should set this to `true` and then use {@link Tech#triggerSourceset}
   * to trigger a {@link Tech#event:sourceset} at the earliest time after getting
   * a new source.
   *
   * @type {boolean}
   * @default
   */
  Tech.prototype.featuresSourceset = false;

  /**
   * Boolean indicating whether the `Tech` supports the `timeupdate` event.
   * This will be used to determine if {@link Tech#manualTimeUpdates} should be called.
   *
   * @type {boolean}
   * @default
   */
  Tech.prototype.featuresTimeupdateEvents = false;

  /**
   * Boolean indicating whether the `Tech` supports the native `TextTrack`s.
   * This will help us integrate with native `TextTrack`s if the browser supports them.
   *
   * @type {boolean}
   * @default
   */
  Tech.prototype.featuresNativeTextTracks = false;

  /**
   * Boolean indicating whether the `Tech` supports `requestVideoFrameCallback`.
   *
   * @type {boolean}
   * @default
   */
  Tech.prototype.featuresVideoFrameCallback = false;

  /**
   * A functional mixin for techs that want to use the Source Handler pattern.
   * Source handlers are scripts for handling specific formats.
   * The source handler pattern is used for adaptive formats (HLS, DASH) that
   * manually load video data and feed it into a Source Buffer (Media Source Extensions)
   * Example: `Tech.withSourceHandlers.call(MyTech);`
   *
   * @param {Tech} _Tech
   *        The tech to add source handler functions to.
   *
   * @mixes Tech~SourceHandlerAdditions
   */
  Tech.withSourceHandlers = function (_Tech) {
    /**
     * Register a source handler
     *
     * @param {Function} handler
     *        The source handler class
     *
     * @param {number} [index]
     *        Register it at the following index
     */
    _Tech.registerSourceHandler = function (handler, index) {
      let handlers = _Tech.sourceHandlers;
      if (!handlers) {
        handlers = _Tech.sourceHandlers = [];
      }
      if (index === undefined) {
        // add to the end of the list
        index = handlers.length;
      }
      handlers.splice(index, 0, handler);
    };

    /**
     * Check if the tech can support the given type. Also checks the
     * Techs sourceHandlers.
     *
     * @param {string} type
     *         The mimetype to check.
     *
     * @return {string}
     *         'probably', 'maybe', or '' (empty string)
     */
    _Tech.canPlayType = function (type) {
      const handlers = _Tech.sourceHandlers || [];
      let can;
      for (let i = 0; i < handlers.length; i++) {
        can = handlers[i].canPlayType(type);
        if (can) {
          return can;
        }
      }
      return '';
    };

    /**
     * Returns the first source handler that supports the source.
     *
     * TODO: Answer question: should 'probably' be prioritized over 'maybe'
     *
     * @param {Tech~SourceObject} source
     *        The source object
     *
     * @param {Object} options
     *        The options passed to the tech
     *
     * @return {SourceHandler|null}
     *          The first source handler that supports the source or null if
     *          no SourceHandler supports the source
     */
    _Tech.selectSourceHandler = function (source, options) {
      const handlers = _Tech.sourceHandlers || [];
      let can;
      for (let i = 0; i < handlers.length; i++) {
        can = handlers[i].canHandleSource(source, options);
        if (can) {
          return handlers[i];
        }
      }
      return null;
    };

    /**
     * Check if the tech can support the given source.
     *
     * @param {Tech~SourceObject} srcObj
     *        The source object
     *
     * @param {Object} options
     *        The options passed to the tech
     *
     * @return {string}
     *         'probably', 'maybe', or '' (empty string)
     */
    _Tech.canPlaySource = function (srcObj, options) {
      const sh = _Tech.selectSourceHandler(srcObj, options);
      if (sh) {
        return sh.canHandleSource(srcObj, options);
      }
      return '';
    };

    /**
     * When using a source handler, prefer its implementation of
     * any function normally provided by the tech.
     */
    const deferrable = ['seekable', 'seeking', 'duration'];

    /**
     * A wrapper around {@link Tech#seekable} that will call a `SourceHandler`s seekable
     * function if it exists, with a fallback to the Techs seekable function.
     *
     * @method _Tech.seekable
     */

    /**
     * A wrapper around {@link Tech#duration} that will call a `SourceHandler`s duration
     * function if it exists, otherwise it will fallback to the techs duration function.
     *
     * @method _Tech.duration
     */

    deferrable.forEach(function (fnName) {
      const originalFn = this[fnName];
      if (typeof originalFn !== 'function') {
        return;
      }
      this[fnName] = function () {
        if (this.sourceHandler_ && this.sourceHandler_[fnName]) {
          return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);
        }
        return originalFn.apply(this, arguments);
      };
    }, _Tech.prototype);

    /**
     * Create a function for setting the source using a source object
     * and source handlers.
     * Should never be called unless a source handler was found.
     *
     * @param {Tech~SourceObject} source
     *        A source object with src and type keys
     */
    _Tech.prototype.setSource = function (source) {
      let sh = _Tech.selectSourceHandler(source, this.options_);
      if (!sh) {
        // Fall back to a native source handler when unsupported sources are
        // deliberately set
        if (_Tech.nativeSourceHandler) {
          sh = _Tech.nativeSourceHandler;
        } else {
          log.error('No source handler found for the current source.');
        }
      }

      // Dispose any existing source handler
      this.disposeSourceHandler();
      this.off('dispose', this.disposeSourceHandler_);
      if (sh !== _Tech.nativeSourceHandler) {
        this.currentSource_ = source;
      }
      this.sourceHandler_ = sh.handleSource(source, this, this.options_);
      this.one('dispose', this.disposeSourceHandler_);
    };

    /**
     * Clean up any existing SourceHandlers and listeners when the Tech is disposed.
     *
     * @listens Tech#dispose
     */
    _Tech.prototype.disposeSourceHandler = function () {
      // if we have a source and get another one
      // then we are loading something new
      // than clear all of our current tracks
      if (this.currentSource_) {
        this.clearTracks(['audio', 'video']);
        this.currentSource_ = null;
      }

      // always clean up auto-text tracks
      this.cleanupAutoTextTracks();
      if (this.sourceHandler_) {
        if (this.sourceHandler_.dispose) {
          this.sourceHandler_.dispose();
        }
        this.sourceHandler_ = null;
      }
    };
  };

  // The base Tech class needs to be registered as a Component. It is the only
  // Tech that can be registered as a Component.
  Component.registerComponent('Tech', Tech);
  Tech.registerTech('Tech', Tech);

  /**
   * A list of techs that should be added to techOrder on Players
   *
   * @private
   */
  Tech.defaultTechOrder_ = [];

  /**
   * @file middleware.js
   * @module middleware
   */
  const middlewares = {};
  const middlewareInstances = {};
  const TERMINATOR = {};

  /**
   * A middleware object is a plain JavaScript object that has methods that
   * match the {@link Tech} methods found in the lists of allowed
   * {@link module:middleware.allowedGetters|getters},
   * {@link module:middleware.allowedSetters|setters}, and
   * {@link module:middleware.allowedMediators|mediators}.
   *
   * @typedef {Object} MiddlewareObject
   */

  /**
   * A middleware factory function that should return a
   * {@link module:middleware~MiddlewareObject|MiddlewareObject}.
   *
   * This factory will be called for each player when needed, with the player
   * passed in as an argument.
   *
   * @callback MiddlewareFactory
   * @param { import('../player').default } player
   *        A Video.js player.
   */

  /**
   * Define a middleware that the player should use by way of a factory function
   * that returns a middleware object.
   *
   * @param  {string} type
   *         The MIME type to match or `"*"` for all MIME types.
   *
   * @param  {MiddlewareFactory} middleware
   *         A middleware factory function that will be executed for
   *         matching types.
   */
  function use(type, middleware) {
    middlewares[type] = middlewares[type] || [];
    middlewares[type].push(middleware);
  }

  /**
   * Asynchronously sets a source using middleware by recursing through any
   * matching middlewares and calling `setSource` on each, passing along the
   * previous returned value each time.
   *
   * @param  { import('../player').default } player
   *         A {@link Player} instance.
   *
   * @param  {Tech~SourceObject} src
   *         A source object.
   *
   * @param  {Function}
   *         The next middleware to run.
   */
  function setSource(player, src, next) {
    player.setTimeout(() => setSourceHelper(src, middlewares[src.type], next, player), 1);
  }

  /**
   * When the tech is set, passes the tech to each middleware's `setTech` method.
   *
   * @param {Object[]} middleware
   *        An array of middleware instances.
   *
   * @param { import('../tech/tech').default } tech
   *        A Video.js tech.
   */
  function setTech(middleware, tech) {
    middleware.forEach(mw => mw.setTech && mw.setTech(tech));
  }

  /**
   * Calls a getter on the tech first, through each middleware
   * from right to left to the player.
   *
   * @param  {Object[]} middleware
   *         An array of middleware instances.
   *
   * @param  { import('../tech/tech').default } tech
   *         The current tech.
   *
   * @param  {string} method
   *         A method name.
   *
   * @return {*}
   *         The final value from the tech after middleware has intercepted it.
   */
  function get(middleware, tech, method) {
    return middleware.reduceRight(middlewareIterator(method), tech[method]());
  }

  /**
   * Takes the argument given to the player and calls the setter method on each
   * middleware from left to right to the tech.
   *
   * @param  {Object[]} middleware
   *         An array of middleware instances.
   *
   * @param  { import('../tech/tech').default } tech
   *         The current tech.
   *
   * @param  {string} method
   *         A method name.
   *
   * @param  {*} arg
   *         The value to set on the tech.
   *
   * @return {*}
   *         The return value of the `method` of the `tech`.
   */
  function set(middleware, tech, method, arg) {
    return tech[method](middleware.reduce(middlewareIterator(method), arg));
  }

  /**
   * Takes the argument given to the player and calls the `call` version of the
   * method on each middleware from left to right.
   *
   * Then, call the passed in method on the tech and return the result unchanged
   * back to the player, through middleware, this time from right to left.
   *
   * @param  {Object[]} middleware
   *         An array of middleware instances.
   *
   * @param  { import('../tech/tech').default } tech
   *         The current tech.
   *
   * @param  {string} method
   *         A method name.
   *
   * @param  {*} arg
   *         The value to set on the tech.
   *
   * @return {*}
   *         The return value of the `method` of the `tech`, regardless of the
   *         return values of middlewares.
   */
  function mediate(middleware, tech, method, arg = null) {
    const callMethod = 'call' + toTitleCase(method);
    const middlewareValue = middleware.reduce(middlewareIterator(callMethod), arg);
    const terminated = middlewareValue === TERMINATOR;
    // deprecated. The `null` return value should instead return TERMINATOR to
    // prevent confusion if a techs method actually returns null.
    const returnValue = terminated ? null : tech[method](middlewareValue);
    executeRight(middleware, method, returnValue, terminated);
    return returnValue;
  }

  /**
   * Enumeration of allowed getters where the keys are method names.
   *
   * @type {Object}
   */
  const allowedGetters = {
    buffered: 1,
    currentTime: 1,
    duration: 1,
    muted: 1,
    played: 1,
    paused: 1,
    seekable: 1,
    volume: 1,
    ended: 1
  };

  /**
   * Enumeration of allowed setters where the keys are method names.
   *
   * @type {Object}
   */
  const allowedSetters = {
    setCurrentTime: 1,
    setMuted: 1,
    setVolume: 1
  };

  /**
   * Enumeration of allowed mediators where the keys are method names.
   *
   * @type {Object}
   */
  const allowedMediators = {
    play: 1,
    pause: 1
  };
  function middlewareIterator(method) {
    return (value, mw) => {
      // if the previous middleware terminated, pass along the termination
      if (value === TERMINATOR) {
        return TERMINATOR;
      }
      if (mw[method]) {
        return mw[method](value);
      }
      return value;
    };
  }
  function executeRight(mws, method, value, terminated) {
    for (let i = mws.length - 1; i >= 0; i--) {
      const mw = mws[i];
      if (mw[method]) {
        mw[method](terminated, value);
      }
    }
  }

  /**
   * Clear the middleware cache for a player.
   *
   * @param  { import('../player').default } player
   *         A {@link Player} instance.
   */
  function clearCacheForPlayer(player) {
    middlewareInstances[player.id()] = null;
  }

  /**
   * {
   *  [playerId]: [[mwFactory, mwInstance], ...]
   * }
   *
   * @private
   */
  function getOrCreateFactory(player, mwFactory) {
    const mws = middlewareInstances[player.id()];
    let mw = null;
    if (mws === undefined || mws === null) {
      mw = mwFactory(player);
      middlewareInstances[player.id()] = [[mwFactory, mw]];
      return mw;
    }
    for (let i = 0; i < mws.length; i++) {
      const [mwf, mwi] = mws[i];
      if (mwf !== mwFactory) {
        continue;
      }
      mw = mwi;
    }
    if (mw === null) {
      mw = mwFactory(player);
      mws.push([mwFactory, mw]);
    }
    return mw;
  }
  function setSourceHelper(src = {}, middleware = [], next, player, acc = [], lastRun = false) {
    const [mwFactory, ...mwrest] = middleware;

    // if mwFactory is a string, then we're at a fork in the road
    if (typeof mwFactory === 'string') {
      setSourceHelper(src, middlewares[mwFactory], next, player, acc, lastRun);

      // if we have an mwFactory, call it with the player to get the mw,
      // then call the mw's setSource method
    } else if (mwFactory) {
      const mw = getOrCreateFactory(player, mwFactory);

      // if setSource isn't present, implicitly select this middleware
      if (!mw.setSource) {
        acc.push(mw);
        return setSourceHelper(src, mwrest, next, player, acc, lastRun);
      }
      mw.setSource(Object.assign({}, src), function (err, _src) {
        // something happened, try the next middleware on the current level
        // make sure to use the old src
        if (err) {
          return setSourceHelper(src, mwrest, next, player, acc, lastRun);
        }

        // we've succeeded, now we need to go deeper
        acc.push(mw);

        // if it's the same type, continue down the current chain
        // otherwise, we want to go down the new chain
        setSourceHelper(_src, src.type === _src.type ? mwrest : middlewares[_src.type], next, player, acc, lastRun);
      });
    } else if (mwrest.length) {
      setSourceHelper(src, mwrest, next, player, acc, lastRun);
    } else if (lastRun) {
      next(src, acc);
    } else {
      setSourceHelper(src, middlewares['*'], next, player, acc, true);
    }
  }

  /**
   * Mimetypes
   *
   * @see https://www.iana.org/assignments/media-types/media-types.xhtml
   * @typedef Mimetypes~Kind
   * @enum
   */
  const MimetypesKind = {
    opus: 'video/ogg',
    ogv: 'video/ogg',
    mp4: 'video/mp4',
    mov: 'video/mp4',
    m4v: 'video/mp4',
    mkv: 'video/x-matroska',
    m4a: 'audio/mp4',
    mp3: 'audio/mpeg',
    aac: 'audio/aac',
    caf: 'audio/x-caf',
    flac: 'audio/flac',
    oga: 'audio/ogg',
    wav: 'audio/wav',
    m3u8: 'application/x-mpegURL',
    mpd: 'application/dash+xml',
    jpg: 'image/jpeg',
    jpeg: 'image/jpeg',
    gif: 'image/gif',
    png: 'image/png',
    svg: 'image/svg+xml',
    webp: 'image/webp'
  };

  /**
   * Get the mimetype of a given src url if possible
   *
   * @param {string} src
   *        The url to the src
   *
   * @return {string}
   *         return the mimetype if it was known or empty string otherwise
   */
  const getMimetype = function (src = '') {
    const ext = getFileExtension(src);
    const mimetype = MimetypesKind[ext.toLowerCase()];
    return mimetype || '';
  };

  /**
   * Find the mime type of a given source string if possible. Uses the player
   * source cache.
   *
   * @param { import('../player').default } player
   *        The player object
   *
   * @param {string} src
   *        The source string
   *
   * @return {string}
   *         The type that was found
   */
  const findMimetype = (player, src) => {
    if (!src) {
      return '';
    }

    // 1. check for the type in the `source` cache
    if (player.cache_.source.src === src && player.cache_.source.type) {
      return player.cache_.source.type;
    }

    // 2. see if we have this source in our `currentSources` cache
    const matchingSources = player.cache_.sources.filter(s => s.src === src);
    if (matchingSources.length) {
      return matchingSources[0].type;
    }

    // 3. look for the src url in source elements and use the type there
    const sources = player.$$('source');
    for (let i = 0; i < sources.length; i++) {
      const s = sources[i];
      if (s.type && s.src && s.src === src) {
        return s.type;
      }
    }

    // 4. finally fallback to our list of mime types based on src url extension
    return getMimetype(src);
  };

  /**
   * @module filter-source
   */

  /**
   * Filter out single bad source objects or multiple source objects in an
   * array. Also flattens nested source object arrays into a 1 dimensional
   * array of source objects.
   *
   * @param {Tech~SourceObject|Tech~SourceObject[]} src
   *        The src object to filter
   *
   * @return {Tech~SourceObject[]}
   *         An array of sourceobjects containing only valid sources
   *
   * @private
   */
  const filterSource = function (src) {
    // traverse array
    if (Array.isArray(src)) {
      let newsrc = [];
      src.forEach(function (srcobj) {
        srcobj = filterSource(srcobj);
        if (Array.isArray(srcobj)) {
          newsrc = newsrc.concat(srcobj);
        } else if (isObject(srcobj)) {
          newsrc.push(srcobj);
        }
      });
      src = newsrc;
    } else if (typeof src === 'string' && src.trim()) {
      // convert string into object
      src = [fixSource({
        src
      })];
    } else if (isObject(src) && typeof src.src === 'string' && src.src && src.src.trim()) {
      // src is already valid
      src = [fixSource(src)];
    } else {
      // invalid source, turn it into an empty array
      src = [];
    }
    return src;
  };

  /**
   * Checks src mimetype, adding it when possible
   *
   * @param {Tech~SourceObject} src
   *        The src object to check
   * @return {Tech~SourceObject}
   *        src Object with known type
   */
  function fixSource(src) {
    if (!src.type) {
      const mimetype = getMimetype(src.src);
      if (mimetype) {
        src.type = mimetype;
      }
    }
    return src;
  }

  /**
   * @file loader.js
   */

  /**
   * The `MediaLoader` is the `Component` that decides which playback technology to load
   * when a player is initialized.
   *
   * @extends Component
   */
  class MediaLoader extends Component {
    /**
     * Create an instance of this class.
     *
     * @param { import('../player').default } player
     *        The `Player` that this class should attach to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     *
     * @param {Function} [ready]
     *        The function that is run when this component is ready.
     */
    constructor(player, options, ready) {
      // MediaLoader has no element
      const options_ = merge({
        createEl: false
      }, options);
      super(player, options_, ready);

      // If there are no sources when the player is initialized,
      // load the first supported playback technology.

      if (!options.playerOptions.sources || options.playerOptions.sources.length === 0) {
        for (let i = 0, j = options.playerOptions.techOrder; i < j.length; i++) {
          const techName = toTitleCase(j[i]);
          let tech = Tech.getTech(techName);

          // Support old behavior of techs being registered as components.
          // Remove once that deprecated behavior is removed.
          if (!techName) {
            tech = Component.getComponent(techName);
          }

          // Check if the browser supports this technology
          if (tech && tech.isSupported()) {
            player.loadTech_(techName);
            break;
          }
        }
      } else {
        // Loop through playback technologies (e.g. HTML5) and check for support.
        // Then load the best source.
        // A few assumptions here:
        //   All playback technologies respect preload false.
        player.src(options.playerOptions.sources);
      }
    }
  }
  Component.registerComponent('MediaLoader', MediaLoader);

  /**
   * @file clickable-component.js
   */

  /**
   * Component which is clickable or keyboard actionable, but is not a
   * native HTML button.
   *
   * @extends Component
   */
  class ClickableComponent extends Component {
    /**
     * Creates an instance of this class.
     *
     * @param  { import('./player').default } player
     *         The `Player` that this class should be attached to.
     *
     * @param  {Object} [options]
     *         The key/value store of component options.
     *
     * @param  {function} [options.clickHandler]
     *         The function to call when the button is clicked / activated
     *
     * @param  {string} [options.controlText]
     *         The text to set on the button
     *
     * @param  {string} [options.className]
     *         A class or space separated list of classes to add the component
     *
     */
    constructor(player, options) {
      super(player, options);
      if (this.options_.controlText) {
        this.controlText(this.options_.controlText);
      }
      this.handleMouseOver_ = e => this.handleMouseOver(e);
      this.handleMouseOut_ = e => this.handleMouseOut(e);
      this.handleClick_ = e => this.handleClick(e);
      this.handleKeyDown_ = e => this.handleKeyDown(e);
      this.emitTapEvents();
      this.enable();
    }

    /**
     * Create the `ClickableComponent`s DOM element.
     *
     * @param {string} [tag=div]
     *        The element's node type.
     *
     * @param {Object} [props={}]
     *        An object of properties that should be set on the element.
     *
     * @param {Object} [attributes={}]
     *        An object of attributes that should be set on the element.
     *
     * @return {Element}
     *         The element that gets created.
     */
    createEl(tag = 'div', props = {}, attributes = {}) {
      props = Object.assign({
        className: this.buildCSSClass(),
        tabIndex: 0
      }, props);
      if (tag === 'button') {
        log.error(`Creating a ClickableComponent with an HTML element of ${tag} is not supported; use a Button instead.`);
      }

      // Add ARIA attributes for clickable element which is not a native HTML button
      attributes = Object.assign({
        role: 'button'
      }, attributes);
      this.tabIndex_ = props.tabIndex;
      const el = createEl(tag, props, attributes);
      el.appendChild(createEl('span', {
        className: 'vjs-icon-placeholder'
      }, {
        'aria-hidden': true
      }));
      this.createControlTextEl(el);
      return el;
    }
    dispose() {
      // remove controlTextEl_ on dispose
      this.controlTextEl_ = null;
      super.dispose();
    }

    /**
     * Create a control text element on this `ClickableComponent`
     *
     * @param {Element} [el]
     *        Parent element for the control text.
     *
     * @return {Element}
     *         The control text element that gets created.
     */
    createControlTextEl(el) {
      this.controlTextEl_ = createEl('span', {
        className: 'vjs-control-text'
      }, {
        // let the screen reader user know that the text of the element may change
        'aria-live': 'polite'
      });
      if (el) {
        el.appendChild(this.controlTextEl_);
      }
      this.controlText(this.controlText_, el);
      return this.controlTextEl_;
    }

    /**
     * Get or set the localize text to use for the controls on the `ClickableComponent`.
     *
     * @param {string} [text]
     *        Control text for element.
     *
     * @param {Element} [el=this.el()]
     *        Element to set the title on.
     *
     * @return {string}
     *         - The control text when getting
     */
    controlText(text, el = this.el()) {
      if (text === undefined) {
        return this.controlText_ || 'Need Text';
      }
      const localizedText = this.localize(text);

      /** @protected */
      this.controlText_ = text;
      textContent(this.controlTextEl_, localizedText);
      if (!this.nonIconControl && !this.player_.options_.noUITitleAttributes) {
        // Set title attribute if only an icon is shown
        el.setAttribute('title', localizedText);
      }
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */
    buildCSSClass() {
      return `vjs-control vjs-button ${super.buildCSSClass()}`;
    }

    /**
     * Enable this `ClickableComponent`
     */
    enable() {
      if (!this.enabled_) {
        this.enabled_ = true;
        this.removeClass('vjs-disabled');
        this.el_.setAttribute('aria-disabled', 'false');
        if (typeof this.tabIndex_ !== 'undefined') {
          this.el_.setAttribute('tabIndex', this.tabIndex_);
        }
        this.on(['tap', 'click'], this.handleClick_);
        this.on('keydown', this.handleKeyDown_);
      }
    }

    /**
     * Disable this `ClickableComponent`
     */
    disable() {
      this.enabled_ = false;
      this.addClass('vjs-disabled');
      this.el_.setAttribute('aria-disabled', 'true');
      if (typeof this.tabIndex_ !== 'undefined') {
        this.el_.removeAttribute('tabIndex');
      }
      this.off('mouseover', this.handleMouseOver_);
      this.off('mouseout', this.handleMouseOut_);
      this.off(['tap', 'click'], this.handleClick_);
      this.off('keydown', this.handleKeyDown_);
    }

    /**
     * Handles language change in ClickableComponent for the player in components
     *
     *
     */
    handleLanguagechange() {
      this.controlText(this.controlText_);
    }

    /**
     * Event handler that is called when a `ClickableComponent` receives a
     * `click` or `tap` event.
     *
     * @param {Event} event
     *        The `tap` or `click` event that caused this function to be called.
     *
     * @listens tap
     * @listens click
     * @abstract
     */
    handleClick(event) {
      if (this.options_.clickHandler) {
        this.options_.clickHandler.call(this, arguments);
      }
    }

    /**
     * Event handler that is called when a `ClickableComponent` receives a
     * `keydown` event.
     *
     * By default, if the key is Space or Enter, it will trigger a `click` event.
     *
     * @param {Event} event
     *        The `keydown` event that caused this function to be called.
     *
     * @listens keydown
     */
    handleKeyDown(event) {
      // Support Space or Enter key operation to fire a click event. Also,
      // prevent the event from propagating through the DOM and triggering
      // Player hotkeys.
      if (keycode.isEventKey(event, 'Space') || keycode.isEventKey(event, 'Enter')) {
        event.preventDefault();
        event.stopPropagation();
        this.trigger('click');
      } else {
        // Pass keypress handling up for unsupported keys
        super.handleKeyDown(event);
      }
    }
  }
  Component.registerComponent('ClickableComponent', ClickableComponent);

  /**
   * @file poster-image.js
   */

  /**
   * A `ClickableComponent` that handles showing the poster image for the player.
   *
   * @extends ClickableComponent
   */
  class PosterImage extends ClickableComponent {
    /**
     * Create an instance of this class.
     *
     * @param { import('./player').default } player
     *        The `Player` that this class should attach to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      super(player, options);
      this.update();
      this.update_ = e => this.update(e);
      player.on('posterchange', this.update_);
    }

    /**
     * Clean up and dispose of the `PosterImage`.
     */
    dispose() {
      this.player().off('posterchange', this.update_);
      super.dispose();
    }

    /**
     * Create the `PosterImage`s DOM element.
     *
     * @return {Element}
     *         The element that gets created.
     */
    createEl() {
      // The el is an empty div to keep position in the DOM
      // A picture and img el will be inserted when a source is set
      return createEl('div', {
        className: 'vjs-poster'
      });
    }

    /**
     * Get or set the `PosterImage`'s crossOrigin option.
     *
     * @param {string|null} [value]
     *        The value to set the crossOrigin to. If an argument is
     *        given, must be one of `'anonymous'` or `'use-credentials'`, or 'null'.
     *
     * @return {string|null}
     *         - The current crossOrigin value of the `Player` when getting.
     *         - undefined when setting
     */
    crossOrigin(value) {
      // `null` can be set to unset a value
      if (typeof value === 'undefined') {
        if (this.$('img')) {
          // If the poster's element exists, give its value
          return this.$('img').crossOrigin;
        } else if (this.player_.tech_ && this.player_.tech_.isReady_) {
          // If not but the tech is ready, query the tech
          return this.player_.crossOrigin();
        }
        // Otherwise check options as the  poster is usually set before the state of crossorigin
        // can be retrieved by the getter
        return this.player_.options_.crossOrigin || this.player_.options_.crossorigin || null;
      }
      if (value !== null && value !== 'anonymous' && value !== 'use-credentials') {
        this.player_.log.warn(`crossOrigin must be null,  "anonymous" or "use-credentials", given "${value}"`);
        return;
      }
      if (this.$('img')) {
        this.$('img').crossOrigin = value;
      }
      return;
    }

    /**
     * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.
     *
     * @listens Player#posterchange
     *
     * @param {Event} [event]
     *        The `Player#posterchange` event that triggered this function.
     */
    update(event) {
      const url = this.player().poster();
      this.setSrc(url);

      // If there's no poster source we should display:none on this component
      // so it's not still clickable or right-clickable
      if (url) {
        this.show();
      } else {
        this.hide();
      }
    }

    /**
     * Set the source of the `PosterImage` depending on the display method. (Re)creates
     * the inner picture and img elementss when needed.
     *
     * @param {string} [url]
     *        The URL to the source for the `PosterImage`. If not specified or falsy,
     *        any source and ant inner picture/img are removed.
     */
    setSrc(url) {
      if (!url) {
        this.el_.textContent = '';
        return;
      }
      if (!this.$('img')) {
        this.el_.appendChild(createEl('picture', {
          className: 'vjs-poster',
          // Don't want poster to be tabbable.
          tabIndex: -1
        }, {}, createEl('img', {
          loading: 'lazy',
          crossOrigin: this.crossOrigin()
        }, {
          alt: ''
        })));
      }
      this.$('img').src = url;
    }

    /**
     * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See
     * {@link ClickableComponent#handleClick} for instances where this will be triggered.
     *
     * @listens tap
     * @listens click
     * @listens keydown
     *
     * @param {Event} event
     +        The `click`, `tap` or `keydown` event that caused this function to be called.
     */
    handleClick(event) {
      // We don't want a click to trigger playback when controls are disabled
      if (!this.player_.controls()) {
        return;
      }
      if (this.player_.tech(true)) {
        this.player_.tech(true).focus();
      }
      if (this.player_.paused()) {
        silencePromise(this.player_.play());
      } else {
        this.player_.pause();
      }
    }
  }

  /**
   * Get or set the `PosterImage`'s crossorigin option. For the HTML5 player, this
   * sets the `crossOrigin` property on the `<img>` tag to control the CORS
   * behavior.
   *
   * @param {string|null} [value]
   *        The value to set the `PosterImages`'s crossorigin to. If an argument is
   *        given, must be one of `anonymous` or `use-credentials`.
   *
   * @return {string|null|undefined}
   *         - The current crossorigin value of the `Player` when getting.
   *         - undefined when setting
   */
  PosterImage.prototype.crossorigin = PosterImage.prototype.crossOrigin;
  Component.registerComponent('PosterImage', PosterImage);

  /**
   * @file text-track-display.js
   */
  const darkGray = '#222';
  const lightGray = '#ccc';
  const fontMap = {
    monospace: 'monospace',
    sansSerif: 'sans-serif',
    serif: 'serif',
    monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
    monospaceSerif: '"Courier New", monospace',
    proportionalSansSerif: 'sans-serif',
    proportionalSerif: 'serif',
    casual: '"Comic Sans MS", Impact, fantasy',
    script: '"Monotype Corsiva", cursive',
    smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
  };

  /**
   * Construct an rgba color from a given hex color code.
   *
   * @param {number} color
   *        Hex number for color, like #f0e or #f604e2.
   *
   * @param {number} opacity
   *        Value for opacity, 0.0 - 1.0.
   *
   * @return {string}
   *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.
   */
  function constructColor(color, opacity) {
    let hex;
    if (color.length === 4) {
      // color looks like "#f0e"
      hex = color[1] + color[1] + color[2] + color[2] + color[3] + color[3];
    } else if (color.length === 7) {
      // color looks like "#f604e2"
      hex = color.slice(1);
    } else {
      throw new Error('Invalid color code provided, ' + color + '; must be formatted as e.g. #f0e or #f604e2.');
    }
    return 'rgba(' + parseInt(hex.slice(0, 2), 16) + ',' + parseInt(hex.slice(2, 4), 16) + ',' + parseInt(hex.slice(4, 6), 16) + ',' + opacity + ')';
  }

  /**
   * Try to update the style of a DOM element. Some style changes will throw an error,
   * particularly in IE8. Those should be noops.
   *
   * @param {Element} el
   *        The DOM element to be styled.
   *
   * @param {string} style
   *        The CSS property on the element that should be styled.
   *
   * @param {string} rule
   *        The style rule that should be applied to the property.
   *
   * @private
   */
  function tryUpdateStyle(el, style, rule) {
    try {
      el.style[style] = rule;
    } catch (e) {
      // Satisfies linter.
      return;
    }
  }

  /**
   * The component for displaying text track cues.
   *
   * @extends Component
   */
  class TextTrackDisplay extends Component {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     *
     * @param {Function} [ready]
     *        The function to call when `TextTrackDisplay` is ready.
     */
    constructor(player, options, ready) {
      super(player, options, ready);
      const updateDisplayHandler = e => this.updateDisplay(e);
      player.on('loadstart', e => this.toggleDisplay(e));
      player.on('texttrackchange', updateDisplayHandler);
      player.on('loadedmetadata', e => this.preselectTrack(e));

      // This used to be called during player init, but was causing an error
      // if a track should show by default and the display hadn't loaded yet.
      // Should probably be moved to an external track loader when we support
      // tracks that don't need a display.
      player.ready(bind_(this, function () {
        if (player.tech_ && player.tech_.featuresNativeTextTracks) {
          this.hide();
          return;
        }
        player.on('fullscreenchange', updateDisplayHandler);
        player.on('playerresize', updateDisplayHandler);
        const screenOrientation = window.screen.orientation || window;
        const changeOrientationEvent = window.screen.orientation ? 'change' : 'orientationchange';
        screenOrientation.addEventListener(changeOrientationEvent, updateDisplayHandler);
        player.on('dispose', () => screenOrientation.removeEventListener(changeOrientationEvent, updateDisplayHandler));
        const tracks = this.options_.playerOptions.tracks || [];
        for (let i = 0; i < tracks.length; i++) {
          this.player_.addRemoteTextTrack(tracks[i], true);
        }
        this.preselectTrack();
      }));
    }

    /**
    * Preselect a track following this precedence:
    * - matches the previously selected {@link TextTrack}'s language and kind
    * - matches the previously selected {@link TextTrack}'s language only
    * - is the first default captions track
    * - is the first default descriptions track
    *
    * @listens Player#loadstart
    */
    preselectTrack() {
      const modes = {
        captions: 1,
        subtitles: 1
      };
      const trackList = this.player_.textTracks();
      const userPref = this.player_.cache_.selectedLanguage;
      let firstDesc;
      let firstCaptions;
      let preferredTrack;
      for (let i = 0; i < trackList.length; i++) {
        const track = trackList[i];
        if (userPref && userPref.enabled && userPref.language && userPref.language === track.language && track.kind in modes) {
          // Always choose the track that matches both language and kind
          if (track.kind === userPref.kind) {
            preferredTrack = track;
            // or choose the first track that matches language
          } else if (!preferredTrack) {
            preferredTrack = track;
          }

          // clear everything if offTextTrackMenuItem was clicked
        } else if (userPref && !userPref.enabled) {
          preferredTrack = null;
          firstDesc = null;
          firstCaptions = null;
        } else if (track.default) {
          if (track.kind === 'descriptions' && !firstDesc) {
            firstDesc = track;
          } else if (track.kind in modes && !firstCaptions) {
            firstCaptions = track;
          }
        }
      }

      // The preferredTrack matches the user preference and takes
      // precedence over all the other tracks.
      // So, display the preferredTrack before the first default track
      // and the subtitles/captions track before the descriptions track
      if (preferredTrack) {
        preferredTrack.mode = 'showing';
      } else if (firstCaptions) {
        firstCaptions.mode = 'showing';
      } else if (firstDesc) {
        firstDesc.mode = 'showing';
      }
    }

    /**
     * Turn display of {@link TextTrack}'s from the current state into the other state.
     * There are only two states:
     * - 'shown'
     * - 'hidden'
     *
     * @listens Player#loadstart
     */
    toggleDisplay() {
      if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {
        this.hide();
      } else {
        this.show();
      }
    }

    /**
     * Create the {@link Component}'s DOM element.
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      return super.createEl('div', {
        className: 'vjs-text-track-display'
      }, {
        'translate': 'yes',
        'aria-live': 'off',
        'aria-atomic': 'true'
      });
    }

    /**
     * Clear all displayed {@link TextTrack}s.
     */
    clearDisplay() {
      if (typeof window.WebVTT === 'function') {
        window.WebVTT.processCues(window, [], this.el_);
      }
    }

    /**
     * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or
     * a {@link Player#fullscreenchange} is fired.
     *
     * @listens Player#texttrackchange
     * @listens Player#fullscreenchange
     */
    updateDisplay() {
      const tracks = this.player_.textTracks();
      const allowMultipleShowingTracks = this.options_.allowMultipleShowingTracks;
      this.clearDisplay();
      if (allowMultipleShowingTracks) {
        const showingTracks = [];
        for (let i = 0; i < tracks.length; ++i) {
          const track = tracks[i];
          if (track.mode !== 'showing') {
            continue;
          }
          showingTracks.push(track);
        }
        this.updateForTrack(showingTracks);
        return;
      }

      //  Track display prioritization model: if multiple tracks are 'showing',
      //  display the first 'subtitles' or 'captions' track which is 'showing',
      //  otherwise display the first 'descriptions' track which is 'showing'

      let descriptionsTrack = null;
      let captionsSubtitlesTrack = null;
      let i = tracks.length;
      while (i--) {
        const track = tracks[i];
        if (track.mode === 'showing') {
          if (track.kind === 'descriptions') {
            descriptionsTrack = track;
          } else {
            captionsSubtitlesTrack = track;
          }
        }
      }
      if (captionsSubtitlesTrack) {
        if (this.getAttribute('aria-live') !== 'off') {
          this.setAttribute('aria-live', 'off');
        }
        this.updateForTrack(captionsSubtitlesTrack);
      } else if (descriptionsTrack) {
        if (this.getAttribute('aria-live') !== 'assertive') {
          this.setAttribute('aria-live', 'assertive');
        }
        this.updateForTrack(descriptionsTrack);
      }
    }

    /**
     * Style {@Link TextTrack} activeCues according to {@Link TextTrackSettings}.
     *
     * @param {TextTrack} track
     *        Text track object containing active cues to style.
     */
    updateDisplayState(track) {
      const overrides = this.player_.textTrackSettings.getValues();
      const cues = track.activeCues;
      let i = cues.length;
      while (i--) {
        const cue = cues[i];
        if (!cue) {
          continue;
        }
        const cueDiv = cue.displayState;
        if (overrides.color) {
          cueDiv.firstChild.style.color = overrides.color;
        }
        if (overrides.textOpacity) {
          tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));
        }
        if (overrides.backgroundColor) {
          cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;
        }
        if (overrides.backgroundOpacity) {
          tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));
        }
        if (overrides.windowColor) {
          if (overrides.windowOpacity) {
            tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));
          } else {
            cueDiv.style.backgroundColor = overrides.windowColor;
          }
        }
        if (overrides.edgeStyle) {
          if (overrides.edgeStyle === 'dropshadow') {
            cueDiv.firstChild.style.textShadow = `2px 2px 3px ${darkGray}, 2px 2px 4px ${darkGray}, 2px 2px 5px ${darkGray}`;
          } else if (overrides.edgeStyle === 'raised') {
            cueDiv.firstChild.style.textShadow = `1px 1px ${darkGray}, 2px 2px ${darkGray}, 3px 3px ${darkGray}`;
          } else if (overrides.edgeStyle === 'depressed') {
            cueDiv.firstChild.style.textShadow = `1px 1px ${lightGray}, 0 1px ${lightGray}, -1px -1px ${darkGray}, 0 -1px ${darkGray}`;
          } else if (overrides.edgeStyle === 'uniform') {
            cueDiv.firstChild.style.textShadow = `0 0 4px ${darkGray}, 0 0 4px ${darkGray}, 0 0 4px ${darkGray}, 0 0 4px ${darkGray}`;
          }
        }
        if (overrides.fontPercent && overrides.fontPercent !== 1) {
          const fontSize = window.parseFloat(cueDiv.style.fontSize);
          cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';
          cueDiv.style.height = 'auto';
          cueDiv.style.top = 'auto';
        }
        if (overrides.fontFamily && overrides.fontFamily !== 'default') {
          if (overrides.fontFamily === 'small-caps') {
            cueDiv.firstChild.style.fontVariant = 'small-caps';
          } else {
            cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];
          }
        }
      }
    }

    /**
     * Add an {@link TextTrack} to to the {@link Tech}s {@link TextTrackList}.
     *
     * @param {TextTrack|TextTrack[]} tracks
     *        Text track object or text track array to be added to the list.
     */
    updateForTrack(tracks) {
      if (!Array.isArray(tracks)) {
        tracks = [tracks];
      }
      if (typeof window.WebVTT !== 'function' || tracks.every(track => {
        return !track.activeCues;
      })) {
        return;
      }
      const cues = [];

      // push all active track cues
      for (let i = 0; i < tracks.length; ++i) {
        const track = tracks[i];
        for (let j = 0; j < track.activeCues.length; ++j) {
          cues.push(track.activeCues[j]);
        }
      }

      // removes all cues before it processes new ones
      window.WebVTT.processCues(window, cues, this.el_);

      // add unique class to each language text track & add settings styling if necessary
      for (let i = 0; i < tracks.length; ++i) {
        const track = tracks[i];
        for (let j = 0; j < track.activeCues.length; ++j) {
          const cueEl = track.activeCues[j].displayState;
          addClass(cueEl, 'vjs-text-track-cue', 'vjs-text-track-cue-' + (track.language ? track.language : i));
          if (track.language) {
            setAttribute(cueEl, 'lang', track.language);
          }
        }
        if (this.player_.textTrackSettings) {
          this.updateDisplayState(track);
        }
      }
    }
  }
  Component.registerComponent('TextTrackDisplay', TextTrackDisplay);

  /**
   * @file loading-spinner.js
   */

  /**
   * A loading spinner for use during waiting/loading events.
   *
   * @extends Component
   */
  class LoadingSpinner extends Component {
    /**
     * Create the `LoadingSpinner`s DOM element.
     *
     * @return {Element}
     *         The dom element that gets created.
     */
    createEl() {
      const isAudio = this.player_.isAudio();
      const playerType = this.localize(isAudio ? 'Audio Player' : 'Video Player');
      const controlText = createEl('span', {
        className: 'vjs-control-text',
        textContent: this.localize('{1} is loading.', [playerType])
      });
      const el = super.createEl('div', {
        className: 'vjs-loading-spinner',
        dir: 'ltr'
      });
      el.appendChild(controlText);
      return el;
    }

    /**
     * Update control text on languagechange
     */
    handleLanguagechange() {
      this.$('.vjs-control-text').textContent = this.localize('{1} is loading.', [this.player_.isAudio() ? 'Audio Player' : 'Video Player']);
    }
  }
  Component.registerComponent('LoadingSpinner', LoadingSpinner);

  /**
   * @file button.js
   */

  /**
   * Base class for all buttons.
   *
   * @extends ClickableComponent
   */
  class Button extends ClickableComponent {
    /**
     * Create the `Button`s DOM element.
     *
     * @param {string} [tag="button"]
     *        The element's node type. This argument is IGNORED: no matter what
     *        is passed, it will always create a `button` element.
     *
     * @param {Object} [props={}]
     *        An object of properties that should be set on the element.
     *
     * @param {Object} [attributes={}]
     *        An object of attributes that should be set on the element.
     *
     * @return {Element}
     *         The element that gets created.
     */
    createEl(tag, props = {}, attributes = {}) {
      tag = 'button';
      props = Object.assign({
        className: this.buildCSSClass()
      }, props);

      // Add attributes for button element
      attributes = Object.assign({
        // Necessary since the default button type is "submit"
        type: 'button'
      }, attributes);
      const el = createEl(tag, props, attributes);
      el.appendChild(createEl('span', {
        className: 'vjs-icon-placeholder'
      }, {
        'aria-hidden': true
      }));
      this.createControlTextEl(el);
      return el;
    }

    /**
     * Add a child `Component` inside of this `Button`.
     *
     * @param {string|Component} child
     *        The name or instance of a child to add.
     *
     * @param {Object} [options={}]
     *        The key/value store of options that will get passed to children of
     *        the child.
     *
     * @return {Component}
     *         The `Component` that gets added as a child. When using a string the
     *         `Component` will get created by this process.
     *
     * @deprecated since version 5
     */
    addChild(child, options = {}) {
      const className = this.constructor.name;
      log.warn(`Adding an actionable (user controllable) child to a Button (${className}) is not supported; use a ClickableComponent instead.`);

      // Avoid the error message generated by ClickableComponent's addChild method
      return Component.prototype.addChild.call(this, child, options);
    }

    /**
     * Enable the `Button` element so that it can be activated or clicked. Use this with
     * {@link Button#disable}.
     */
    enable() {
      super.enable();
      this.el_.removeAttribute('disabled');
    }

    /**
     * Disable the `Button` element so that it cannot be activated or clicked. Use this with
     * {@link Button#enable}.
     */
    disable() {
      super.disable();
      this.el_.setAttribute('disabled', 'disabled');
    }

    /**
     * This gets called when a `Button` has focus and `keydown` is triggered via a key
     * press.
     *
     * @param {Event} event
     *        The event that caused this function to get called.
     *
     * @listens keydown
     */
    handleKeyDown(event) {
      // Ignore Space or Enter key operation, which is handled by the browser for
      // a button - though not for its super class, ClickableComponent. Also,
      // prevent the event from propagating through the DOM and triggering Player
      // hotkeys. We do not preventDefault here because we _want_ the browser to
      // handle it.
      if (keycode.isEventKey(event, 'Space') || keycode.isEventKey(event, 'Enter')) {
        event.stopPropagation();
        return;
      }

      // Pass keypress handling up for unsupported keys
      super.handleKeyDown(event);
    }
  }
  Component.registerComponent('Button', Button);

  /**
   * @file big-play-button.js
   */

  /**
   * The initial play button that shows before the video has played. The hiding of the
   * `BigPlayButton` get done via CSS and `Player` states.
   *
   * @extends Button
   */
  class BigPlayButton extends Button {
    constructor(player, options) {
      super(player, options);
      this.mouseused_ = false;
      this.on('mousedown', e => this.handleMouseDown(e));
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object. Always returns 'vjs-big-play-button'.
     */
    buildCSSClass() {
      return 'vjs-big-play-button';
    }

    /**
     * This gets called when a `BigPlayButton` "clicked". See {@link ClickableComponent}
     * for more detailed information on what a click can be.
     *
     * @param {KeyboardEvent} event
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */
    handleClick(event) {
      const playPromise = this.player_.play();

      // exit early if clicked via the mouse
      if (this.mouseused_ && event.clientX && event.clientY) {
        silencePromise(playPromise);
        if (this.player_.tech(true)) {
          this.player_.tech(true).focus();
        }
        return;
      }
      const cb = this.player_.getChild('controlBar');
      const playToggle = cb && cb.getChild('playToggle');
      if (!playToggle) {
        this.player_.tech(true).focus();
        return;
      }
      const playFocus = () => playToggle.focus();
      if (isPromise(playPromise)) {
        playPromise.then(playFocus, () => {});
      } else {
        this.setTimeout(playFocus, 1);
      }
    }
    handleKeyDown(event) {
      this.mouseused_ = false;
      super.handleKeyDown(event);
    }
    handleMouseDown(event) {
      this.mouseused_ = true;
    }
  }

  /**
   * The text that should display over the `BigPlayButton`s controls. Added to for localization.
   *
   * @type {string}
   * @protected
   */
  BigPlayButton.prototype.controlText_ = 'Play Video';
  Component.registerComponent('BigPlayButton', BigPlayButton);

  /**
   * @file close-button.js
   */

  /**
   * The `CloseButton` is a `{@link Button}` that fires a `close` event when
   * it gets clicked.
   *
   * @extends Button
   */
  class CloseButton extends Button {
    /**
    * Creates an instance of the this class.
    *
    * @param  { import('./player').default } player
    *         The `Player` that this class should be attached to.
    *
    * @param  {Object} [options]
    *         The key/value store of player options.
    */
    constructor(player, options) {
      super(player, options);
      this.controlText(options && options.controlText || this.localize('Close'));
    }

    /**
    * Builds the default DOM `className`.
    *
    * @return {string}
    *         The DOM `className` for this object.
    */
    buildCSSClass() {
      return `vjs-close-button ${super.buildCSSClass()}`;
    }

    /**
     * This gets called when a `CloseButton` gets clicked. See
     * {@link ClickableComponent#handleClick} for more information on when
     * this will be triggered
     *
     * @param {Event} event
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     * @fires CloseButton#close
     */
    handleClick(event) {
      /**
       * Triggered when the a `CloseButton` is clicked.
       *
       * @event CloseButton#close
       * @type {Event}
       *
       * @property {boolean} [bubbles=false]
       *           set to false so that the close event does not
       *           bubble up to parents if there is no listener
       */
      this.trigger({
        type: 'close',
        bubbles: false
      });
    }
    /**
     * Event handler that is called when a `CloseButton` receives a
     * `keydown` event.
     *
     * By default, if the key is Esc, it will trigger a `click` event.
     *
     * @param {Event} event
     *        The `keydown` event that caused this function to be called.
     *
     * @listens keydown
     */
    handleKeyDown(event) {
      // Esc button will trigger `click` event
      if (keycode.isEventKey(event, 'Esc')) {
        event.preventDefault();
        event.stopPropagation();
        this.trigger('click');
      } else {
        // Pass keypress handling up for unsupported keys
        super.handleKeyDown(event);
      }
    }
  }
  Component.registerComponent('CloseButton', CloseButton);

  /**
   * @file play-toggle.js
   */

  /**
   * Button to toggle between play and pause.
   *
   * @extends Button
   */
  class PlayToggle extends Button {
    /**
     * Creates an instance of this class.
     *
     * @param { import('./player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options={}]
     *        The key/value store of player options.
     */
    constructor(player, options = {}) {
      super(player, options);

      // show or hide replay icon
      options.replay = options.replay === undefined || options.replay;
      this.on(player, 'play', e => this.handlePlay(e));
      this.on(player, 'pause', e => this.handlePause(e));
      if (options.replay) {
        this.on(player, 'ended', e => this.handleEnded(e));
      }
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */
    buildCSSClass() {
      return `vjs-play-control ${super.buildCSSClass()}`;
    }

    /**
     * This gets called when an `PlayToggle` is "clicked". See
     * {@link ClickableComponent} for more detailed information on what a click can be.
     *
     * @param {Event} [event]
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */
    handleClick(event) {
      if (this.player_.paused()) {
        silencePromise(this.player_.play());
      } else {
        this.player_.pause();
      }
    }

    /**
     * This gets called once after the video has ended and the user seeks so that
     * we can change the replay button back to a play button.
     *
     * @param {Event} [event]
     *        The event that caused this function to run.
     *
     * @listens Player#seeked
     */
    handleSeeked(event) {
      this.removeClass('vjs-ended');
      if (this.player_.paused()) {
        this.handlePause(event);
      } else {
        this.handlePlay(event);
      }
    }

    /**
     * Add the vjs-playing class to the element so it can change appearance.
     *
     * @param {Event} [event]
     *        The event that caused this function to run.
     *
     * @listens Player#play
     */
    handlePlay(event) {
      this.removeClass('vjs-ended', 'vjs-paused');
      this.addClass('vjs-playing');
      // change the button text to "Pause"
      this.controlText('Pause');
    }

    /**
     * Add the vjs-paused class to the element so it can change appearance.
     *
     * @param {Event} [event]
     *        The event that caused this function to run.
     *
     * @listens Player#pause
     */
    handlePause(event) {
      this.removeClass('vjs-playing');
      this.addClass('vjs-paused');
      // change the button text to "Play"
      this.controlText('Play');
    }

    /**
     * Add the vjs-ended class to the element so it can change appearance
     *
     * @param {Event} [event]
     *        The event that caused this function to run.
     *
     * @listens Player#ended
     */
    handleEnded(event) {
      this.removeClass('vjs-playing');
      this.addClass('vjs-ended');
      // change the button text to "Replay"
      this.controlText('Replay');

      // on the next seek remove the replay button
      this.one(this.player_, 'seeked', e => this.handleSeeked(e));
    }
  }

  /**
   * The text that should display over the `PlayToggle`s controls. Added for localization.
   *
   * @type {string}
   * @protected
   */
  PlayToggle.prototype.controlText_ = 'Play';
  Component.registerComponent('PlayToggle', PlayToggle);

  /**
   * @file time-display.js
   */

  /**
   * Displays time information about the video
   *
   * @extends Component
   */
  class TimeDisplay extends Component {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      super(player, options);
      this.on(player, ['timeupdate', 'ended'], e => this.updateContent(e));
      this.updateTextNode_();
    }

    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      const className = this.buildCSSClass();
      const el = super.createEl('div', {
        className: `${className} vjs-time-control vjs-control`
      });
      const span = createEl('span', {
        className: 'vjs-control-text',
        textContent: `${this.localize(this.labelText_)}\u00a0`
      }, {
        role: 'presentation'
      });
      el.appendChild(span);
      this.contentEl_ = createEl('span', {
        className: `${className}-display`
      }, {
        // span elements have no implicit role, but some screen readers (notably VoiceOver)
        // treat them as a break between items in the DOM when using arrow keys
        // (or left-to-right swipes on iOS) to read contents of a page. Using
        // role='presentation' causes VoiceOver to NOT treat this span as a break.
        role: 'presentation'
      });
      el.appendChild(this.contentEl_);
      return el;
    }
    dispose() {
      this.contentEl_ = null;
      this.textNode_ = null;
      super.dispose();
    }

    /**
     * Updates the time display text node with a new time
     *
     * @param {number} [time=0] the time to update to
     *
     * @private
     */
    updateTextNode_(time = 0) {
      time = formatTime(time);
      if (this.formattedTime_ === time) {
        return;
      }
      this.formattedTime_ = time;
      this.requestNamedAnimationFrame('TimeDisplay#updateTextNode_', () => {
        if (!this.contentEl_) {
          return;
        }
        let oldNode = this.textNode_;
        if (oldNode && this.contentEl_.firstChild !== oldNode) {
          oldNode = null;
          log.warn('TimeDisplay#updateTextnode_: Prevented replacement of text node element since it was no longer a child of this node. Appending a new node instead.');
        }
        this.textNode_ = document.createTextNode(this.formattedTime_);
        if (!this.textNode_) {
          return;
        }
        if (oldNode) {
          this.contentEl_.replaceChild(this.textNode_, oldNode);
        } else {
          this.contentEl_.appendChild(this.textNode_);
        }
      });
    }

    /**
     * To be filled out in the child class, should update the displayed time
     * in accordance with the fact that the current time has changed.
     *
     * @param {Event} [event]
     *        The `timeupdate`  event that caused this to run.
     *
     * @listens Player#timeupdate
     */
    updateContent(event) {}
  }

  /**
   * The text that is added to the `TimeDisplay` for screen reader users.
   *
   * @type {string}
   * @private
   */
  TimeDisplay.prototype.labelText_ = 'Time';

  /**
   * The text that should display over the `TimeDisplay`s controls. Added to for localization.
   *
   * @type {string}
   * @protected
   *
   * @deprecated in v7; controlText_ is not used in non-active display Components
   */
  TimeDisplay.prototype.controlText_ = 'Time';
  Component.registerComponent('TimeDisplay', TimeDisplay);

  /**
   * @file current-time-display.js
   */

  /**
   * Displays the current time
   *
   * @extends Component
   */
  class CurrentTimeDisplay extends TimeDisplay {
    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */
    buildCSSClass() {
      return 'vjs-current-time';
    }

    /**
     * Update current time display
     *
     * @param {Event} [event]
     *        The `timeupdate` event that caused this function to run.
     *
     * @listens Player#timeupdate
     */
    updateContent(event) {
      // Allows for smooth scrubbing, when player can't keep up.
      let time;
      if (this.player_.ended()) {
        time = this.player_.duration();
      } else {
        time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
      }
      this.updateTextNode_(time);
    }
  }

  /**
   * The text that is added to the `CurrentTimeDisplay` for screen reader users.
   *
   * @type {string}
   * @private
   */
  CurrentTimeDisplay.prototype.labelText_ = 'Current Time';

  /**
   * The text that should display over the `CurrentTimeDisplay`s controls. Added to for localization.
   *
   * @type {string}
   * @protected
   *
   * @deprecated in v7; controlText_ is not used in non-active display Components
   */
  CurrentTimeDisplay.prototype.controlText_ = 'Current Time';
  Component.registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);

  /**
   * @file duration-display.js
   */

  /**
   * Displays the duration
   *
   * @extends Component
   */
  class DurationDisplay extends TimeDisplay {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      super(player, options);
      const updateContent = e => this.updateContent(e);

      // we do not want to/need to throttle duration changes,
      // as they should always display the changed duration as
      // it has changed
      this.on(player, 'durationchange', updateContent);

      // Listen to loadstart because the player duration is reset when a new media element is loaded,
      // but the durationchange on the user agent will not fire.
      // @see [Spec]{@link https://www.w3.org/TR/2011/WD-html5-20110113/video.html#media-element-load-algorithm}
      this.on(player, 'loadstart', updateContent);

      // Also listen for timeupdate (in the parent) and loadedmetadata because removing those
      // listeners could have broken dependent applications/libraries. These
      // can likely be removed for 7.0.
      this.on(player, 'loadedmetadata', updateContent);
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */
    buildCSSClass() {
      return 'vjs-duration';
    }

    /**
     * Update duration time display.
     *
     * @param {Event} [event]
     *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused
     *        this function to be called.
     *
     * @listens Player#durationchange
     * @listens Player#timeupdate
     * @listens Player#loadedmetadata
     */
    updateContent(event) {
      const duration = this.player_.duration();
      this.updateTextNode_(duration);
    }
  }

  /**
   * The text that is added to the `DurationDisplay` for screen reader users.
   *
   * @type {string}
   * @private
   */
  DurationDisplay.prototype.labelText_ = 'Duration';

  /**
   * The text that should display over the `DurationDisplay`s controls. Added to for localization.
   *
   * @type {string}
   * @protected
   *
   * @deprecated in v7; controlText_ is not used in non-active display Components
   */
  DurationDisplay.prototype.controlText_ = 'Duration';
  Component.registerComponent('DurationDisplay', DurationDisplay);

  /**
   * @file time-divider.js
   */

  /**
   * The separator between the current time and duration.
   * Can be hidden if it's not needed in the design.
   *
   * @extends Component
   */
  class TimeDivider extends Component {
    /**
     * Create the component's DOM element
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      const el = super.createEl('div', {
        className: 'vjs-time-control vjs-time-divider'
      }, {
        // this element and its contents can be hidden from assistive techs since
        // it is made extraneous by the announcement of the control text
        // for the current time and duration displays
        'aria-hidden': true
      });
      const div = super.createEl('div');
      const span = super.createEl('span', {
        textContent: '/'
      });
      div.appendChild(span);
      el.appendChild(div);
      return el;
    }
  }
  Component.registerComponent('TimeDivider', TimeDivider);

  /**
   * @file remaining-time-display.js
   */

  /**
   * Displays the time left in the video
   *
   * @extends Component
   */
  class RemainingTimeDisplay extends TimeDisplay {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      super(player, options);
      this.on(player, 'durationchange', e => this.updateContent(e));
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */
    buildCSSClass() {
      return 'vjs-remaining-time';
    }

    /**
     * Create the `Component`'s DOM element with the "minus" character prepend to the time
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      const el = super.createEl();
      if (this.options_.displayNegative !== false) {
        el.insertBefore(createEl('span', {}, {
          'aria-hidden': true
        }, '-'), this.contentEl_);
      }
      return el;
    }

    /**
     * Update remaining time display.
     *
     * @param {Event} [event]
     *        The `timeupdate` or `durationchange` event that caused this to run.
     *
     * @listens Player#timeupdate
     * @listens Player#durationchange
     */
    updateContent(event) {
      if (typeof this.player_.duration() !== 'number') {
        return;
      }
      let time;

      // @deprecated We should only use remainingTimeDisplay
      // as of video.js 7
      if (this.player_.ended()) {
        time = 0;
      } else if (this.player_.remainingTimeDisplay) {
        time = this.player_.remainingTimeDisplay();
      } else {
        time = this.player_.remainingTime();
      }
      this.updateTextNode_(time);
    }
  }

  /**
   * The text that is added to the `RemainingTimeDisplay` for screen reader users.
   *
   * @type {string}
   * @private
   */
  RemainingTimeDisplay.prototype.labelText_ = 'Remaining Time';

  /**
   * The text that should display over the `RemainingTimeDisplay`s controls. Added to for localization.
   *
   * @type {string}
   * @protected
   *
   * @deprecated in v7; controlText_ is not used in non-active display Components
   */
  RemainingTimeDisplay.prototype.controlText_ = 'Remaining Time';
  Component.registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);

  /**
   * @file live-display.js
   */

  // TODO - Future make it click to snap to live

  /**
   * Displays the live indicator when duration is Infinity.
   *
   * @extends Component
   */
  class LiveDisplay extends Component {
    /**
     * Creates an instance of this class.
     *
     * @param { import('./player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      super(player, options);
      this.updateShowing();
      this.on(this.player(), 'durationchange', e => this.updateShowing(e));
    }

    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      const el = super.createEl('div', {
        className: 'vjs-live-control vjs-control'
      });
      this.contentEl_ = createEl('div', {
        className: 'vjs-live-display'
      }, {
        'aria-live': 'off'
      });
      this.contentEl_.appendChild(createEl('span', {
        className: 'vjs-control-text',
        textContent: `${this.localize('Stream Type')}\u00a0`
      }));
      this.contentEl_.appendChild(document.createTextNode(this.localize('LIVE')));
      el.appendChild(this.contentEl_);
      return el;
    }
    dispose() {
      this.contentEl_ = null;
      super.dispose();
    }

    /**
     * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide
     * it accordingly
     *
     * @param {Event} [event]
     *        The {@link Player#durationchange} event that caused this function to run.
     *
     * @listens Player#durationchange
     */
    updateShowing(event) {
      if (this.player().duration() === Infinity) {
        this.show();
      } else {
        this.hide();
      }
    }
  }
  Component.registerComponent('LiveDisplay', LiveDisplay);

  /**
   * @file seek-to-live.js
   */

  /**
   * Displays the live indicator when duration is Infinity.
   *
   * @extends Component
   */
  class SeekToLive extends Button {
    /**
     * Creates an instance of this class.
     *
     * @param { import('./player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      super(player, options);
      this.updateLiveEdgeStatus();
      if (this.player_.liveTracker) {
        this.updateLiveEdgeStatusHandler_ = e => this.updateLiveEdgeStatus(e);
        this.on(this.player_.liveTracker, 'liveedgechange', this.updateLiveEdgeStatusHandler_);
      }
    }

    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      const el = super.createEl('button', {
        className: 'vjs-seek-to-live-control vjs-control'
      });
      this.textEl_ = createEl('span', {
        className: 'vjs-seek-to-live-text',
        textContent: this.localize('LIVE')
      }, {
        'aria-hidden': 'true'
      });
      el.appendChild(this.textEl_);
      return el;
    }

    /**
     * Update the state of this button if we are at the live edge
     * or not
     */
    updateLiveEdgeStatus() {
      // default to live edge
      if (!this.player_.liveTracker || this.player_.liveTracker.atLiveEdge()) {
        this.setAttribute('aria-disabled', true);
        this.addClass('vjs-at-live-edge');
        this.controlText('Seek to live, currently playing live');
      } else {
        this.setAttribute('aria-disabled', false);
        this.removeClass('vjs-at-live-edge');
        this.controlText('Seek to live, currently behind live');
      }
    }

    /**
     * On click bring us as near to the live point as possible.
     * This requires that we wait for the next `live-seekable-change`
     * event which will happen every segment length seconds.
     */
    handleClick() {
      this.player_.liveTracker.seekToLiveEdge();
    }

    /**
     * Dispose of the element and stop tracking
     */
    dispose() {
      if (this.player_.liveTracker) {
        this.off(this.player_.liveTracker, 'liveedgechange', this.updateLiveEdgeStatusHandler_);
      }
      this.textEl_ = null;
      super.dispose();
    }
  }
  /**
   * The text that should display over the `SeekToLive`s control. Added for localization.
   *
   * @type {string}
   * @protected
   */
  SeekToLive.prototype.controlText_ = 'Seek to live, currently playing live';
  Component.registerComponent('SeekToLive', SeekToLive);

  /**
   * @file num.js
   * @module num
   */

  /**
   * Keep a number between a min and a max value
   *
   * @param {number} number
   *        The number to clamp
   *
   * @param {number} min
   *        The minimum value
   * @param {number} max
   *        The maximum value
   *
   * @return {number}
   *         the clamped number
   */
  function clamp(number, min, max) {
    number = Number(number);
    return Math.min(max, Math.max(min, isNaN(number) ? min : number));
  }

  var Num = /*#__PURE__*/Object.freeze({
    __proto__: null,
    clamp: clamp
  });

  /**
   * @file slider.js
   */

  /**
   * The base functionality for a slider. Can be vertical or horizontal.
   * For instance the volume bar or the seek bar on a video is a slider.
   *
   * @extends Component
   */
  class Slider extends Component {
    /**
    * Create an instance of this class
    *
    * @param { import('../player').default } player
    *        The `Player` that this class should be attached to.
    *
    * @param {Object} [options]
    *        The key/value store of player options.
    */
    constructor(player, options) {
      super(player, options);
      this.handleMouseDown_ = e => this.handleMouseDown(e);
      this.handleMouseUp_ = e => this.handleMouseUp(e);
      this.handleKeyDown_ = e => this.handleKeyDown(e);
      this.handleClick_ = e => this.handleClick(e);
      this.handleMouseMove_ = e => this.handleMouseMove(e);
      this.update_ = e => this.update(e);

      // Set property names to bar to match with the child Slider class is looking for
      this.bar = this.getChild(this.options_.barName);

      // Set a horizontal or vertical class on the slider depending on the slider type
      this.vertical(!!this.options_.vertical);
      this.enable();
    }

    /**
     * Are controls are currently enabled for this slider or not.
     *
     * @return {boolean}
     *         true if controls are enabled, false otherwise
     */
    enabled() {
      return this.enabled_;
    }

    /**
     * Enable controls for this slider if they are disabled
     */
    enable() {
      if (this.enabled()) {
        return;
      }
      this.on('mousedown', this.handleMouseDown_);
      this.on('touchstart', this.handleMouseDown_);
      this.on('keydown', this.handleKeyDown_);
      this.on('click', this.handleClick_);

      // TODO: deprecated, controlsvisible does not seem to be fired
      this.on(this.player_, 'controlsvisible', this.update);
      if (this.playerEvent) {
        this.on(this.player_, this.playerEvent, this.update);
      }
      this.removeClass('disabled');
      this.setAttribute('tabindex', 0);
      this.enabled_ = true;
    }

    /**
     * Disable controls for this slider if they are enabled
     */
    disable() {
      if (!this.enabled()) {
        return;
      }
      const doc = this.bar.el_.ownerDocument;
      this.off('mousedown', this.handleMouseDown_);
      this.off('touchstart', this.handleMouseDown_);
      this.off('keydown', this.handleKeyDown_);
      this.off('click', this.handleClick_);
      this.off(this.player_, 'controlsvisible', this.update_);
      this.off(doc, 'mousemove', this.handleMouseMove_);
      this.off(doc, 'mouseup', this.handleMouseUp_);
      this.off(doc, 'touchmove', this.handleMouseMove_);
      this.off(doc, 'touchend', this.handleMouseUp_);
      this.removeAttribute('tabindex');
      this.addClass('disabled');
      if (this.playerEvent) {
        this.off(this.player_, this.playerEvent, this.update);
      }
      this.enabled_ = false;
    }

    /**
     * Create the `Slider`s DOM element.
     *
     * @param {string} type
     *        Type of element to create.
     *
     * @param {Object} [props={}]
     *        List of properties in Object form.
     *
     * @param {Object} [attributes={}]
     *        list of attributes in Object form.
     *
     * @return {Element}
     *         The element that gets created.
     */
    createEl(type, props = {}, attributes = {}) {
      // Add the slider element class to all sub classes
      props.className = props.className + ' vjs-slider';
      props = Object.assign({
        tabIndex: 0
      }, props);
      attributes = Object.assign({
        'role': 'slider',
        'aria-valuenow': 0,
        'aria-valuemin': 0,
        'aria-valuemax': 100
      }, attributes);
      return super.createEl(type, props, attributes);
    }

    /**
     * Handle `mousedown` or `touchstart` events on the `Slider`.
     *
     * @param {MouseEvent} event
     *        `mousedown` or `touchstart` event that triggered this function
     *
     * @listens mousedown
     * @listens touchstart
     * @fires Slider#slideractive
     */
    handleMouseDown(event) {
      const doc = this.bar.el_.ownerDocument;
      if (event.type === 'mousedown') {
        event.preventDefault();
      }
      // Do not call preventDefault() on touchstart in Chrome
      // to avoid console warnings. Use a 'touch-action: none' style
      // instead to prevent unintended scrolling.
      // https://developers.google.com/web/updates/2017/01/scrolling-intervention
      if (event.type === 'touchstart' && !IS_CHROME) {
        event.preventDefault();
      }
      blockTextSelection();
      this.addClass('vjs-sliding');
      /**
       * Triggered when the slider is in an active state
       *
       * @event Slider#slideractive
       * @type {MouseEvent}
       */
      this.trigger('slideractive');
      this.on(doc, 'mousemove', this.handleMouseMove_);
      this.on(doc, 'mouseup', this.handleMouseUp_);
      this.on(doc, 'touchmove', this.handleMouseMove_);
      this.on(doc, 'touchend', this.handleMouseUp_);
      this.handleMouseMove(event, true);
    }

    /**
     * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.
     * The `mousemove` and `touchmove` events will only only trigger this function during
     * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and
     * {@link Slider#handleMouseUp}.
     *
     * @param {MouseEvent} event
     *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered
     *        this function
     * @param {boolean} mouseDown this is a flag that should be set to true if `handleMouseMove` is called directly. It allows us to skip things that should not happen if coming from mouse down but should happen on regular mouse move handler. Defaults to false.
     *
     * @listens mousemove
     * @listens touchmove
     */
    handleMouseMove(event) {}

    /**
     * Handle `mouseup` or `touchend` events on the `Slider`.
     *
     * @param {MouseEvent} event
     *        `mouseup` or `touchend` event that triggered this function.
     *
     * @listens touchend
     * @listens mouseup
     * @fires Slider#sliderinactive
     */
    handleMouseUp(event) {
      const doc = this.bar.el_.ownerDocument;
      unblockTextSelection();
      this.removeClass('vjs-sliding');
      /**
       * Triggered when the slider is no longer in an active state.
       *
       * @event Slider#sliderinactive
       * @type {Event}
       */
      this.trigger('sliderinactive');
      this.off(doc, 'mousemove', this.handleMouseMove_);
      this.off(doc, 'mouseup', this.handleMouseUp_);
      this.off(doc, 'touchmove', this.handleMouseMove_);
      this.off(doc, 'touchend', this.handleMouseUp_);
      this.update();
    }

    /**
     * Update the progress bar of the `Slider`.
     *
     * @return {number}
     *          The percentage of progress the progress bar represents as a
     *          number from 0 to 1.
     */
    update() {
      // In VolumeBar init we have a setTimeout for update that pops and update
      // to the end of the execution stack. The player is destroyed before then
      // update will cause an error
      // If there's no bar...
      if (!this.el_ || !this.bar) {
        return;
      }

      // clamp progress between 0 and 1
      // and only round to four decimal places, as we round to two below
      const progress = this.getProgress();
      if (progress === this.progress_) {
        return progress;
      }
      this.progress_ = progress;
      this.requestNamedAnimationFrame('Slider#update', () => {
        // Set the new bar width or height
        const sizeKey = this.vertical() ? 'height' : 'width';

        // Convert to a percentage for css value
        this.bar.el().style[sizeKey] = (progress * 100).toFixed(2) + '%';
      });
      return progress;
    }

    /**
     * Get the percentage of the bar that should be filled
     * but clamped and rounded.
     *
     * @return {number}
     *         percentage filled that the slider is
     */
    getProgress() {
      return Number(clamp(this.getPercent(), 0, 1).toFixed(4));
    }

    /**
     * Calculate distance for slider
     *
     * @param {Event} event
     *        The event that caused this function to run.
     *
     * @return {number}
     *         The current position of the Slider.
     *         - position.x for vertical `Slider`s
     *         - position.y for horizontal `Slider`s
     */
    calculateDistance(event) {
      const position = getPointerPosition(this.el_, event);
      if (this.vertical()) {
        return position.y;
      }
      return position.x;
    }

    /**
     * Handle a `keydown` event on the `Slider`. Watches for left, right, up, and down
     * arrow keys. This function will only be called when the slider has focus. See
     * {@link Slider#handleFocus} and {@link Slider#handleBlur}.
     *
     * @param {KeyboardEvent} event
     *        the `keydown` event that caused this function to run.
     *
     * @listens keydown
     */
    handleKeyDown(event) {
      // Left and Down Arrows
      if (keycode.isEventKey(event, 'Left') || keycode.isEventKey(event, 'Down')) {
        event.preventDefault();
        event.stopPropagation();
        this.stepBack();

        // Up and Right Arrows
      } else if (keycode.isEventKey(event, 'Right') || keycode.isEventKey(event, 'Up')) {
        event.preventDefault();
        event.stopPropagation();
        this.stepForward();
      } else {
        // Pass keydown handling up for unsupported keys
        super.handleKeyDown(event);
      }
    }

    /**
     * Listener for click events on slider, used to prevent clicks
     *   from bubbling up to parent elements like button menus.
     *
     * @param {Object} event
     *        Event that caused this object to run
     */
    handleClick(event) {
      event.stopPropagation();
      event.preventDefault();
    }

    /**
     * Get/set if slider is horizontal for vertical
     *
     * @param {boolean} [bool]
     *        - true if slider is vertical,
     *        - false is horizontal
     *
     * @return {boolean}
     *         - true if slider is vertical, and getting
     *         - false if the slider is horizontal, and getting
     */
    vertical(bool) {
      if (bool === undefined) {
        return this.vertical_ || false;
      }
      this.vertical_ = !!bool;
      if (this.vertical_) {
        this.addClass('vjs-slider-vertical');
      } else {
        this.addClass('vjs-slider-horizontal');
      }
    }
  }
  Component.registerComponent('Slider', Slider);

  /**
   * @file load-progress-bar.js
   */

  // get the percent width of a time compared to the total end
  const percentify = (time, end) => clamp(time / end * 100, 0, 100).toFixed(2) + '%';

  /**
   * Shows loading progress
   *
   * @extends Component
   */
  class LoadProgressBar extends Component {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      super(player, options);
      this.partEls_ = [];
      this.on(player, 'progress', e => this.update(e));
    }

    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      const el = super.createEl('div', {
        className: 'vjs-load-progress'
      });
      const wrapper = createEl('span', {
        className: 'vjs-control-text'
      });
      const loadedText = createEl('span', {
        textContent: this.localize('Loaded')
      });
      const separator = document.createTextNode(': ');
      this.percentageEl_ = createEl('span', {
        className: 'vjs-control-text-loaded-percentage',
        textContent: '0%'
      });
      el.appendChild(wrapper);
      wrapper.appendChild(loadedText);
      wrapper.appendChild(separator);
      wrapper.appendChild(this.percentageEl_);
      return el;
    }
    dispose() {
      this.partEls_ = null;
      this.percentageEl_ = null;
      super.dispose();
    }

    /**
     * Update progress bar
     *
     * @param {Event} [event]
     *        The `progress` event that caused this function to run.
     *
     * @listens Player#progress
     */
    update(event) {
      this.requestNamedAnimationFrame('LoadProgressBar#update', () => {
        const liveTracker = this.player_.liveTracker;
        const buffered = this.player_.buffered();
        const duration = liveTracker && liveTracker.isLive() ? liveTracker.seekableEnd() : this.player_.duration();
        const bufferedEnd = this.player_.bufferedEnd();
        const children = this.partEls_;
        const percent = percentify(bufferedEnd, duration);
        if (this.percent_ !== percent) {
          // update the width of the progress bar
          this.el_.style.width = percent;
          // update the control-text
          textContent(this.percentageEl_, percent);
          this.percent_ = percent;
        }

        // add child elements to represent the individual buffered time ranges
        for (let i = 0; i < buffered.length; i++) {
          const start = buffered.start(i);
          const end = buffered.end(i);
          let part = children[i];
          if (!part) {
            part = this.el_.appendChild(createEl());
            children[i] = part;
          }

          //  only update if changed
          if (part.dataset.start === start && part.dataset.end === end) {
            continue;
          }
          part.dataset.start = start;
          part.dataset.end = end;

          // set the percent based on the width of the progress bar (bufferedEnd)
          part.style.left = percentify(start, bufferedEnd);
          part.style.width = percentify(end - start, bufferedEnd);
        }

        // remove unused buffered range elements
        for (let i = children.length; i > buffered.length; i--) {
          this.el_.removeChild(children[i - 1]);
        }
        children.length = buffered.length;
      });
    }
  }
  Component.registerComponent('LoadProgressBar', LoadProgressBar);

  /**
   * @file time-tooltip.js
   */

  /**
   * Time tooltips display a time above the progress bar.
   *
   * @extends Component
   */
  class TimeTooltip extends Component {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The {@link Player} that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      super(player, options);
      this.update = throttle(bind_(this, this.update), UPDATE_REFRESH_INTERVAL);
    }

    /**
     * Create the time tooltip DOM element
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      return super.createEl('div', {
        className: 'vjs-time-tooltip'
      }, {
        'aria-hidden': 'true'
      });
    }

    /**
     * Updates the position of the time tooltip relative to the `SeekBar`.
     *
     * @param {Object} seekBarRect
     *        The `ClientRect` for the {@link SeekBar} element.
     *
     * @param {number} seekBarPoint
     *        A number from 0 to 1, representing a horizontal reference point
     *        from the left edge of the {@link SeekBar}
     */
    update(seekBarRect, seekBarPoint, content) {
      const tooltipRect = findPosition(this.el_);
      const playerRect = getBoundingClientRect(this.player_.el());
      const seekBarPointPx = seekBarRect.width * seekBarPoint;

      // do nothing if either rect isn't available
      // for example, if the player isn't in the DOM for testing
      if (!playerRect || !tooltipRect) {
        return;
      }

      // This is the space left of the `seekBarPoint` available within the bounds
      // of the player. We calculate any gap between the left edge of the player
      // and the left edge of the `SeekBar` and add the number of pixels in the
      // `SeekBar` before hitting the `seekBarPoint`
      const spaceLeftOfPoint = seekBarRect.left - playerRect.left + seekBarPointPx;

      // This is the space right of the `seekBarPoint` available within the bounds
      // of the player. We calculate the number of pixels from the `seekBarPoint`
      // to the right edge of the `SeekBar` and add to that any gap between the
      // right edge of the `SeekBar` and the player.
      const spaceRightOfPoint = seekBarRect.width - seekBarPointPx + (playerRect.right - seekBarRect.right);

      // This is the number of pixels by which the tooltip will need to be pulled
      // further to the right to center it over the `seekBarPoint`.
      let pullTooltipBy = tooltipRect.width / 2;

      // Adjust the `pullTooltipBy` distance to the left or right depending on
      // the results of the space calculations above.
      if (spaceLeftOfPoint < pullTooltipBy) {
        pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;
      } else if (spaceRightOfPoint < pullTooltipBy) {
        pullTooltipBy = spaceRightOfPoint;
      }

      // Due to the imprecision of decimal/ratio based calculations and varying
      // rounding behaviors, there are cases where the spacing adjustment is off
      // by a pixel or two. This adds insurance to these calculations.
      if (pullTooltipBy < 0) {
        pullTooltipBy = 0;
      } else if (pullTooltipBy > tooltipRect.width) {
        pullTooltipBy = tooltipRect.width;
      }

      // prevent small width fluctuations within 0.4px from
      // changing the value below.
      // This really helps for live to prevent the play
      // progress time tooltip from jittering
      pullTooltipBy = Math.round(pullTooltipBy);
      this.el_.style.right = `-${pullTooltipBy}px`;
      this.write(content);
    }

    /**
     * Write the time to the tooltip DOM element.
     *
     * @param {string} content
     *        The formatted time for the tooltip.
     */
    write(content) {
      textContent(this.el_, content);
    }

    /**
     * Updates the position of the time tooltip relative to the `SeekBar`.
     *
     * @param {Object} seekBarRect
     *        The `ClientRect` for the {@link SeekBar} element.
     *
     * @param {number} seekBarPoint
     *        A number from 0 to 1, representing a horizontal reference point
     *        from the left edge of the {@link SeekBar}
     *
     * @param {number} time
     *        The time to update the tooltip to, not used during live playback
     *
     * @param {Function} cb
     *        A function that will be called during the request animation frame
     *        for tooltips that need to do additional animations from the default
     */
    updateTime(seekBarRect, seekBarPoint, time, cb) {
      this.requestNamedAnimationFrame('TimeTooltip#updateTime', () => {
        let content;
        const duration = this.player_.duration();
        if (this.player_.liveTracker && this.player_.liveTracker.isLive()) {
          const liveWindow = this.player_.liveTracker.liveWindow();
          const secondsBehind = liveWindow - seekBarPoint * liveWindow;
          content = (secondsBehind < 1 ? '' : '-') + formatTime(secondsBehind, liveWindow);
        } else {
          content = formatTime(time, duration);
        }
        this.update(seekBarRect, seekBarPoint, content);
        if (cb) {
          cb();
        }
      });
    }
  }
  Component.registerComponent('TimeTooltip', TimeTooltip);

  /**
   * @file play-progress-bar.js
   */

  /**
   * Used by {@link SeekBar} to display media playback progress as part of the
   * {@link ProgressControl}.
   *
   * @extends Component
   */
  class PlayProgressBar extends Component {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The {@link Player} that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      super(player, options);
      this.update = throttle(bind_(this, this.update), UPDATE_REFRESH_INTERVAL);
    }

    /**
     * Create the the DOM element for this class.
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      return super.createEl('div', {
        className: 'vjs-play-progress vjs-slider-bar'
      }, {
        'aria-hidden': 'true'
      });
    }

    /**
     * Enqueues updates to its own DOM as well as the DOM of its
     * {@link TimeTooltip} child.
     *
     * @param {Object} seekBarRect
     *        The `ClientRect` for the {@link SeekBar} element.
     *
     * @param {number} seekBarPoint
     *        A number from 0 to 1, representing a horizontal reference point
     *        from the left edge of the {@link SeekBar}
     */
    update(seekBarRect, seekBarPoint) {
      const timeTooltip = this.getChild('timeTooltip');
      if (!timeTooltip) {
        return;
      }
      const time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
      timeTooltip.updateTime(seekBarRect, seekBarPoint, time);
    }
  }

  /**
   * Default options for {@link PlayProgressBar}.
   *
   * @type {Object}
   * @private
   */
  PlayProgressBar.prototype.options_ = {
    children: []
  };

  // Time tooltips should not be added to a player on mobile devices
  if (!IS_IOS && !IS_ANDROID) {
    PlayProgressBar.prototype.options_.children.push('timeTooltip');
  }
  Component.registerComponent('PlayProgressBar', PlayProgressBar);

  /**
   * @file mouse-time-display.js
   */

  /**
   * The {@link MouseTimeDisplay} component tracks mouse movement over the
   * {@link ProgressControl}. It displays an indicator and a {@link TimeTooltip}
   * indicating the time which is represented by a given point in the
   * {@link ProgressControl}.
   *
   * @extends Component
   */
  class MouseTimeDisplay extends Component {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The {@link Player} that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      super(player, options);
      this.update = throttle(bind_(this, this.update), UPDATE_REFRESH_INTERVAL);
    }

    /**
     * Create the DOM element for this class.
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      return super.createEl('div', {
        className: 'vjs-mouse-display'
      });
    }

    /**
     * Enqueues updates to its own DOM as well as the DOM of its
     * {@link TimeTooltip} child.
     *
     * @param {Object} seekBarRect
     *        The `ClientRect` for the {@link SeekBar} element.
     *
     * @param {number} seekBarPoint
     *        A number from 0 to 1, representing a horizontal reference point
     *        from the left edge of the {@link SeekBar}
     */
    update(seekBarRect, seekBarPoint) {
      const time = seekBarPoint * this.player_.duration();
      this.getChild('timeTooltip').updateTime(seekBarRect, seekBarPoint, time, () => {
        this.el_.style.left = `${seekBarRect.width * seekBarPoint}px`;
      });
    }
  }

  /**
   * Default options for `MouseTimeDisplay`
   *
   * @type {Object}
   * @private
   */
  MouseTimeDisplay.prototype.options_ = {
    children: ['timeTooltip']
  };
  Component.registerComponent('MouseTimeDisplay', MouseTimeDisplay);

  /**
   * @file seek-bar.js
   */

  // The number of seconds the `step*` functions move the timeline.
  const STEP_SECONDS = 5;

  // The multiplier of STEP_SECONDS that PgUp/PgDown move the timeline.
  const PAGE_KEY_MULTIPLIER = 12;

  /**
   * Seek bar and container for the progress bars. Uses {@link PlayProgressBar}
   * as its `bar`.
   *
   * @extends Slider
   */
  class SeekBar extends Slider {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      super(player, options);
      this.setEventHandlers_();
    }

    /**
     * Sets the event handlers
     *
     * @private
     */
    setEventHandlers_() {
      this.update_ = bind_(this, this.update);
      this.update = throttle(this.update_, UPDATE_REFRESH_INTERVAL);
      this.on(this.player_, ['ended', 'durationchange', 'timeupdate'], this.update);
      if (this.player_.liveTracker) {
        this.on(this.player_.liveTracker, 'liveedgechange', this.update);
      }

      // when playing, let's ensure we smoothly update the play progress bar
      // via an interval
      this.updateInterval = null;
      this.enableIntervalHandler_ = e => this.enableInterval_(e);
      this.disableIntervalHandler_ = e => this.disableInterval_(e);
      this.on(this.player_, ['playing'], this.enableIntervalHandler_);
      this.on(this.player_, ['ended', 'pause', 'waiting'], this.disableIntervalHandler_);

      // we don't need to update the play progress if the document is hidden,
      // also, this causes the CPU to spike and eventually crash the page on IE11.
      if ('hidden' in document && 'visibilityState' in document) {
        this.on(document, 'visibilitychange', this.toggleVisibility_);
      }
    }
    toggleVisibility_(e) {
      if (document.visibilityState === 'hidden') {
        this.cancelNamedAnimationFrame('SeekBar#update');
        this.cancelNamedAnimationFrame('Slider#update');
        this.disableInterval_(e);
      } else {
        if (!this.player_.ended() && !this.player_.paused()) {
          this.enableInterval_();
        }

        // we just switched back to the page and someone may be looking, so, update ASAP
        this.update();
      }
    }
    enableInterval_() {
      if (this.updateInterval) {
        return;
      }
      this.updateInterval = this.setInterval(this.update, UPDATE_REFRESH_INTERVAL);
    }
    disableInterval_(e) {
      if (this.player_.liveTracker && this.player_.liveTracker.isLive() && e && e.type !== 'ended') {
        return;
      }
      if (!this.updateInterval) {
        return;
      }
      this.clearInterval(this.updateInterval);
      this.updateInterval = null;
    }

    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      return super.createEl('div', {
        className: 'vjs-progress-holder'
      }, {
        'aria-label': this.localize('Progress Bar')
      });
    }

    /**
     * This function updates the play progress bar and accessibility
     * attributes to whatever is passed in.
     *
     * @param {Event} [event]
     *        The `timeupdate` or `ended` event that caused this to run.
     *
     * @listens Player#timeupdate
     *
     * @return {number}
     *          The current percent at a number from 0-1
     */
    update(event) {
      // ignore updates while the tab is hidden
      if (document.visibilityState === 'hidden') {
        return;
      }
      const percent = super.update();
      this.requestNamedAnimationFrame('SeekBar#update', () => {
        const currentTime = this.player_.ended() ? this.player_.duration() : this.getCurrentTime_();
        const liveTracker = this.player_.liveTracker;
        let duration = this.player_.duration();
        if (liveTracker && liveTracker.isLive()) {
          duration = this.player_.liveTracker.liveCurrentTime();
        }
        if (this.percent_ !== percent) {
          // machine readable value of progress bar (percentage complete)
          this.el_.setAttribute('aria-valuenow', (percent * 100).toFixed(2));
          this.percent_ = percent;
        }
        if (this.currentTime_ !== currentTime || this.duration_ !== duration) {
          // human readable value of progress bar (time complete)
          this.el_.setAttribute('aria-valuetext', this.localize('progress bar timing: currentTime={1} duration={2}', [formatTime(currentTime, duration), formatTime(duration, duration)], '{1} of {2}'));
          this.currentTime_ = currentTime;
          this.duration_ = duration;
        }

        // update the progress bar time tooltip with the current time
        if (this.bar) {
          this.bar.update(getBoundingClientRect(this.el()), this.getProgress());
        }
      });
      return percent;
    }

    /**
     * Prevent liveThreshold from causing seeks to seem like they
     * are not happening from a user perspective.
     *
     * @param {number} ct
     *        current time to seek to
     */
    userSeek_(ct) {
      if (this.player_.liveTracker && this.player_.liveTracker.isLive()) {
        this.player_.liveTracker.nextSeekedFromUser();
      }
      this.player_.currentTime(ct);
    }

    /**
     * Get the value of current time but allows for smooth scrubbing,
     * when player can't keep up.
     *
     * @return {number}
     *         The current time value to display
     *
     * @private
     */
    getCurrentTime_() {
      return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
    }

    /**
     * Get the percentage of media played so far.
     *
     * @return {number}
     *         The percentage of media played so far (0 to 1).
     */
    getPercent() {
      const currentTime = this.getCurrentTime_();
      let percent;
      const liveTracker = this.player_.liveTracker;
      if (liveTracker && liveTracker.isLive()) {
        percent = (currentTime - liveTracker.seekableStart()) / liveTracker.liveWindow();

        // prevent the percent from changing at the live edge
        if (liveTracker.atLiveEdge()) {
          percent = 1;
        }
      } else {
        percent = currentTime / this.player_.duration();
      }
      return percent;
    }

    /**
     * Handle mouse down on seek bar
     *
     * @param {MouseEvent} event
     *        The `mousedown` event that caused this to run.
     *
     * @listens mousedown
     */
    handleMouseDown(event) {
      if (!isSingleLeftClick(event)) {
        return;
      }

      // Stop event propagation to prevent double fire in progress-control.js
      event.stopPropagation();
      this.videoWasPlaying = !this.player_.paused();
      this.player_.pause();
      super.handleMouseDown(event);
    }

    /**
     * Handle mouse move on seek bar
     *
     * @param {MouseEvent} event
     *        The `mousemove` event that caused this to run.
     * @param {boolean} mouseDown this is a flag that should be set to true if `handleMouseMove` is called directly. It allows us to skip things that should not happen if coming from mouse down but should happen on regular mouse move handler. Defaults to false
     *
     * @listens mousemove
     */
    handleMouseMove(event, mouseDown = false) {
      if (!isSingleLeftClick(event)) {
        return;
      }
      if (!mouseDown && !this.player_.scrubbing()) {
        this.player_.scrubbing(true);
      }
      let newTime;
      const distance = this.calculateDistance(event);
      const liveTracker = this.player_.liveTracker;
      if (!liveTracker || !liveTracker.isLive()) {
        newTime = distance * this.player_.duration();

        // Don't let video end while scrubbing.
        if (newTime === this.player_.duration()) {
          newTime = newTime - 0.1;
        }
      } else {
        if (distance >= 0.99) {
          liveTracker.seekToLiveEdge();
          return;
        }
        const seekableStart = liveTracker.seekableStart();
        const seekableEnd = liveTracker.liveCurrentTime();
        newTime = seekableStart + distance * liveTracker.liveWindow();

        // Don't let video end while scrubbing.
        if (newTime >= seekableEnd) {
          newTime = seekableEnd;
        }

        // Compensate for precision differences so that currentTime is not less
        // than seekable start
        if (newTime <= seekableStart) {
          newTime = seekableStart + 0.1;
        }

        // On android seekableEnd can be Infinity sometimes,
        // this will cause newTime to be Infinity, which is
        // not a valid currentTime.
        if (newTime === Infinity) {
          return;
        }
      }

      // Set new time (tell player to seek to new time)
      this.userSeek_(newTime);
    }
    enable() {
      super.enable();
      const mouseTimeDisplay = this.getChild('mouseTimeDisplay');
      if (!mouseTimeDisplay) {
        return;
      }
      mouseTimeDisplay.show();
    }
    disable() {
      super.disable();
      const mouseTimeDisplay = this.getChild('mouseTimeDisplay');
      if (!mouseTimeDisplay) {
        return;
      }
      mouseTimeDisplay.hide();
    }

    /**
     * Handle mouse up on seek bar
     *
     * @param {MouseEvent} event
     *        The `mouseup` event that caused this to run.
     *
     * @listens mouseup
     */
    handleMouseUp(event) {
      super.handleMouseUp(event);

      // Stop event propagation to prevent double fire in progress-control.js
      if (event) {
        event.stopPropagation();
      }
      this.player_.scrubbing(false);

      /**
       * Trigger timeupdate because we're done seeking and the time has changed.
       * This is particularly useful for if the player is paused to time the time displays.
       *
       * @event Tech#timeupdate
       * @type {Event}
       */
      this.player_.trigger({
        type: 'timeupdate',
        target: this,
        manuallyTriggered: true
      });
      if (this.videoWasPlaying) {
        silencePromise(this.player_.play());
      } else {
        // We're done seeking and the time has changed.
        // If the player is paused, make sure we display the correct time on the seek bar.
        this.update_();
      }
    }

    /**
     * Move more quickly fast forward for keyboard-only users
     */
    stepForward() {
      this.userSeek_(this.player_.currentTime() + STEP_SECONDS);
    }

    /**
     * Move more quickly rewind for keyboard-only users
     */
    stepBack() {
      this.userSeek_(this.player_.currentTime() - STEP_SECONDS);
    }

    /**
     * Toggles the playback state of the player
     * This gets called when enter or space is used on the seekbar
     *
     * @param {KeyboardEvent} event
     *        The `keydown` event that caused this function to be called
     *
     */
    handleAction(event) {
      if (this.player_.paused()) {
        this.player_.play();
      } else {
        this.player_.pause();
      }
    }

    /**
     * Called when this SeekBar has focus and a key gets pressed down.
     * Supports the following keys:
     *
     *   Space or Enter key fire a click event
     *   Home key moves to start of the timeline
     *   End key moves to end of the timeline
     *   Digit "0" through "9" keys move to 0%, 10% ... 80%, 90% of the timeline
     *   PageDown key moves back a larger step than ArrowDown
     *   PageUp key moves forward a large step
     *
     * @param {KeyboardEvent} event
     *        The `keydown` event that caused this function to be called.
     *
     * @listens keydown
     */
    handleKeyDown(event) {
      const liveTracker = this.player_.liveTracker;
      if (keycode.isEventKey(event, 'Space') || keycode.isEventKey(event, 'Enter')) {
        event.preventDefault();
        event.stopPropagation();
        this.handleAction(event);
      } else if (keycode.isEventKey(event, 'Home')) {
        event.preventDefault();
        event.stopPropagation();
        this.userSeek_(0);
      } else if (keycode.isEventKey(event, 'End')) {
        event.preventDefault();
        event.stopPropagation();
        if (liveTracker && liveTracker.isLive()) {
          this.userSeek_(liveTracker.liveCurrentTime());
        } else {
          this.userSeek_(this.player_.duration());
        }
      } else if (/^[0-9]$/.test(keycode(event))) {
        event.preventDefault();
        event.stopPropagation();
        const gotoFraction = (keycode.codes[keycode(event)] - keycode.codes['0']) * 10.0 / 100.0;
        if (liveTracker && liveTracker.isLive()) {
          this.userSeek_(liveTracker.seekableStart() + liveTracker.liveWindow() * gotoFraction);
        } else {
          this.userSeek_(this.player_.duration() * gotoFraction);
        }
      } else if (keycode.isEventKey(event, 'PgDn')) {
        event.preventDefault();
        event.stopPropagation();
        this.userSeek_(this.player_.currentTime() - STEP_SECONDS * PAGE_KEY_MULTIPLIER);
      } else if (keycode.isEventKey(event, 'PgUp')) {
        event.preventDefault();
        event.stopPropagation();
        this.userSeek_(this.player_.currentTime() + STEP_SECONDS * PAGE_KEY_MULTIPLIER);
      } else {
        // Pass keydown handling up for unsupported keys
        super.handleKeyDown(event);
      }
    }
    dispose() {
      this.disableInterval_();
      this.off(this.player_, ['ended', 'durationchange', 'timeupdate'], this.update);
      if (this.player_.liveTracker) {
        this.off(this.player_.liveTracker, 'liveedgechange', this.update);
      }
      this.off(this.player_, ['playing'], this.enableIntervalHandler_);
      this.off(this.player_, ['ended', 'pause', 'waiting'], this.disableIntervalHandler_);

      // we don't need to update the play progress if the document is hidden,
      // also, this causes the CPU to spike and eventually crash the page on IE11.
      if ('hidden' in document && 'visibilityState' in document) {
        this.off(document, 'visibilitychange', this.toggleVisibility_);
      }
      super.dispose();
    }
  }

  /**
   * Default options for the `SeekBar`
   *
   * @type {Object}
   * @private
   */
  SeekBar.prototype.options_ = {
    children: ['loadProgressBar', 'playProgressBar'],
    barName: 'playProgressBar'
  };

  // MouseTimeDisplay tooltips should not be added to a player on mobile devices
  if (!IS_IOS && !IS_ANDROID) {
    SeekBar.prototype.options_.children.splice(1, 0, 'mouseTimeDisplay');
  }
  Component.registerComponent('SeekBar', SeekBar);

  /**
   * @file progress-control.js
   */

  /**
   * The Progress Control component contains the seek bar, load progress,
   * and play progress.
   *
   * @extends Component
   */
  class ProgressControl extends Component {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      super(player, options);
      this.handleMouseMove = throttle(bind_(this, this.handleMouseMove), UPDATE_REFRESH_INTERVAL);
      this.throttledHandleMouseSeek = throttle(bind_(this, this.handleMouseSeek), UPDATE_REFRESH_INTERVAL);
      this.handleMouseUpHandler_ = e => this.handleMouseUp(e);
      this.handleMouseDownHandler_ = e => this.handleMouseDown(e);
      this.enable();
    }

    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      return super.createEl('div', {
        className: 'vjs-progress-control vjs-control'
      });
    }

    /**
     * When the mouse moves over the `ProgressControl`, the pointer position
     * gets passed down to the `MouseTimeDisplay` component.
     *
     * @param {Event} event
     *        The `mousemove` event that caused this function to run.
     *
     * @listen mousemove
     */
    handleMouseMove(event) {
      const seekBar = this.getChild('seekBar');
      if (!seekBar) {
        return;
      }
      const playProgressBar = seekBar.getChild('playProgressBar');
      const mouseTimeDisplay = seekBar.getChild('mouseTimeDisplay');
      if (!playProgressBar && !mouseTimeDisplay) {
        return;
      }
      const seekBarEl = seekBar.el();
      const seekBarRect = findPosition(seekBarEl);
      let seekBarPoint = getPointerPosition(seekBarEl, event).x;

      // The default skin has a gap on either side of the `SeekBar`. This means
      // that it's possible to trigger this behavior outside the boundaries of
      // the `SeekBar`. This ensures we stay within it at all times.
      seekBarPoint = clamp(seekBarPoint, 0, 1);
      if (mouseTimeDisplay) {
        mouseTimeDisplay.update(seekBarRect, seekBarPoint);
      }
      if (playProgressBar) {
        playProgressBar.update(seekBarRect, seekBar.getProgress());
      }
    }

    /**
     * A throttled version of the {@link ProgressControl#handleMouseSeek} listener.
     *
     * @method ProgressControl#throttledHandleMouseSeek
     * @param {Event} event
     *        The `mousemove` event that caused this function to run.
     *
     * @listen mousemove
     * @listen touchmove
     */

    /**
     * Handle `mousemove` or `touchmove` events on the `ProgressControl`.
     *
     * @param {Event} event
     *        `mousedown` or `touchstart` event that triggered this function
     *
     * @listens mousemove
     * @listens touchmove
     */
    handleMouseSeek(event) {
      const seekBar = this.getChild('seekBar');
      if (seekBar) {
        seekBar.handleMouseMove(event);
      }
    }

    /**
     * Are controls are currently enabled for this progress control.
     *
     * @return {boolean}
     *         true if controls are enabled, false otherwise
     */
    enabled() {
      return this.enabled_;
    }

    /**
     * Disable all controls on the progress control and its children
     */
    disable() {
      this.children().forEach(child => child.disable && child.disable());
      if (!this.enabled()) {
        return;
      }
      this.off(['mousedown', 'touchstart'], this.handleMouseDownHandler_);
      this.off(this.el_, 'mousemove', this.handleMouseMove);
      this.removeListenersAddedOnMousedownAndTouchstart();
      this.addClass('disabled');
      this.enabled_ = false;

      // Restore normal playback state if controls are disabled while scrubbing
      if (this.player_.scrubbing()) {
        const seekBar = this.getChild('seekBar');
        this.player_.scrubbing(false);
        if (seekBar.videoWasPlaying) {
          silencePromise(this.player_.play());
        }
      }
    }

    /**
     * Enable all controls on the progress control and its children
     */
    enable() {
      this.children().forEach(child => child.enable && child.enable());
      if (this.enabled()) {
        return;
      }
      this.on(['mousedown', 'touchstart'], this.handleMouseDownHandler_);
      this.on(this.el_, 'mousemove', this.handleMouseMove);
      this.removeClass('disabled');
      this.enabled_ = true;
    }

    /**
     * Cleanup listeners after the user finishes interacting with the progress controls
     */
    removeListenersAddedOnMousedownAndTouchstart() {
      const doc = this.el_.ownerDocument;
      this.off(doc, 'mousemove', this.throttledHandleMouseSeek);
      this.off(doc, 'touchmove', this.throttledHandleMouseSeek);
      this.off(doc, 'mouseup', this.handleMouseUpHandler_);
      this.off(doc, 'touchend', this.handleMouseUpHandler_);
    }

    /**
     * Handle `mousedown` or `touchstart` events on the `ProgressControl`.
     *
     * @param {Event} event
     *        `mousedown` or `touchstart` event that triggered this function
     *
     * @listens mousedown
     * @listens touchstart
     */
    handleMouseDown(event) {
      const doc = this.el_.ownerDocument;
      const seekBar = this.getChild('seekBar');
      if (seekBar) {
        seekBar.handleMouseDown(event);
      }
      this.on(doc, 'mousemove', this.throttledHandleMouseSeek);
      this.on(doc, 'touchmove', this.throttledHandleMouseSeek);
      this.on(doc, 'mouseup', this.handleMouseUpHandler_);
      this.on(doc, 'touchend', this.handleMouseUpHandler_);
    }

    /**
     * Handle `mouseup` or `touchend` events on the `ProgressControl`.
     *
     * @param {Event} event
     *        `mouseup` or `touchend` event that triggered this function.
     *
     * @listens touchend
     * @listens mouseup
     */
    handleMouseUp(event) {
      const seekBar = this.getChild('seekBar');
      if (seekBar) {
        seekBar.handleMouseUp(event);
      }
      this.removeListenersAddedOnMousedownAndTouchstart();
    }
  }

  /**
   * Default options for `ProgressControl`
   *
   * @type {Object}
   * @private
   */
  ProgressControl.prototype.options_ = {
    children: ['seekBar']
  };
  Component.registerComponent('ProgressControl', ProgressControl);

  /**
   * @file picture-in-picture-toggle.js
   */

  /**
   * Toggle Picture-in-Picture mode
   *
   * @extends Button
   */
  class PictureInPictureToggle extends Button {
    /**
     * Creates an instance of this class.
     *
     * @param { import('./player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     *
     * @listens Player#enterpictureinpicture
     * @listens Player#leavepictureinpicture
     */
    constructor(player, options) {
      super(player, options);
      this.on(player, ['enterpictureinpicture', 'leavepictureinpicture'], e => this.handlePictureInPictureChange(e));
      this.on(player, ['disablepictureinpicturechanged', 'loadedmetadata'], e => this.handlePictureInPictureEnabledChange(e));
      this.on(player, ['loadedmetadata', 'audioonlymodechange', 'audiopostermodechange'], () => {
        // This audio detection will not detect HLS or DASH audio-only streams because there was no reliable way to detect them at the time
        const isSourceAudio = player.currentType().substring(0, 5) === 'audio';
        if (isSourceAudio || player.audioPosterMode() || player.audioOnlyMode()) {
          if (player.isInPictureInPicture()) {
            player.exitPictureInPicture();
          }
          this.hide();
        } else {
          this.show();
        }
      });

      // TODO: Deactivate button on player emptied event.
      this.disable();
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */
    buildCSSClass() {
      return `vjs-picture-in-picture-control ${super.buildCSSClass()}`;
    }

    /**
     * Enables or disables button based on availability of a Picture-In-Picture mode.
     *
     * Enabled if
     * - `player.options().enableDocumentPictureInPicture` is true and
     *   window.documentPictureInPicture is available; or
     * - `player.disablePictureInPicture()` is false and
     *   element.requestPictureInPicture is available
     */
    handlePictureInPictureEnabledChange() {
      if (document.pictureInPictureEnabled && this.player_.disablePictureInPicture() === false || this.player_.options_.enableDocumentPictureInPicture && 'documentPictureInPicture' in window) {
        this.enable();
      } else {
        this.disable();
      }
    }

    /**
     * Handles enterpictureinpicture and leavepictureinpicture on the player and change control text accordingly.
     *
     * @param {Event} [event]
     *        The {@link Player#enterpictureinpicture} or {@link Player#leavepictureinpicture} event that caused this function to be
     *        called.
     *
     * @listens Player#enterpictureinpicture
     * @listens Player#leavepictureinpicture
     */
    handlePictureInPictureChange(event) {
      if (this.player_.isInPictureInPicture()) {
        this.controlText('Exit Picture-in-Picture');
      } else {
        this.controlText('Picture-in-Picture');
      }
      this.handlePictureInPictureEnabledChange();
    }

    /**
     * This gets called when an `PictureInPictureToggle` is "clicked". See
     * {@link ClickableComponent} for more detailed information on what a click can be.
     *
     * @param {Event} [event]
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */
    handleClick(event) {
      if (!this.player_.isInPictureInPicture()) {
        this.player_.requestPictureInPicture();
      } else {
        this.player_.exitPictureInPicture();
      }
    }
  }

  /**
   * The text that should display over the `PictureInPictureToggle`s controls. Added for localization.
   *
   * @type {string}
   * @protected
   */
  PictureInPictureToggle.prototype.controlText_ = 'Picture-in-Picture';
  Component.registerComponent('PictureInPictureToggle', PictureInPictureToggle);

  /**
   * @file fullscreen-toggle.js
   */

  /**
   * Toggle fullscreen video
   *
   * @extends Button
   */
  class FullscreenToggle extends Button {
    /**
     * Creates an instance of this class.
     *
     * @param { import('./player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      super(player, options);
      this.on(player, 'fullscreenchange', e => this.handleFullscreenChange(e));
      if (document[player.fsApi_.fullscreenEnabled] === false) {
        this.disable();
      }
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */
    buildCSSClass() {
      return `vjs-fullscreen-control ${super.buildCSSClass()}`;
    }

    /**
     * Handles fullscreenchange on the player and change control text accordingly.
     *
     * @param {Event} [event]
     *        The {@link Player#fullscreenchange} event that caused this function to be
     *        called.
     *
     * @listens Player#fullscreenchange
     */
    handleFullscreenChange(event) {
      if (this.player_.isFullscreen()) {
        this.controlText('Exit Fullscreen');
      } else {
        this.controlText('Fullscreen');
      }
    }

    /**
     * This gets called when an `FullscreenToggle` is "clicked". See
     * {@link ClickableComponent} for more detailed information on what a click can be.
     *
     * @param {Event} [event]
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */
    handleClick(event) {
      if (!this.player_.isFullscreen()) {
        this.player_.requestFullscreen();
      } else {
        this.player_.exitFullscreen();
      }
    }
  }

  /**
   * The text that should display over the `FullscreenToggle`s controls. Added for localization.
   *
   * @type {string}
   * @protected
   */
  FullscreenToggle.prototype.controlText_ = 'Fullscreen';
  Component.registerComponent('FullscreenToggle', FullscreenToggle);

  /**
   * Check if volume control is supported and if it isn't hide the
   * `Component` that was passed  using the `vjs-hidden` class.
   *
   * @param { import('../../component').default } self
   *        The component that should be hidden if volume is unsupported
   *
   * @param { import('../../player').default } player
   *        A reference to the player
   *
   * @private
   */
  const checkVolumeSupport = function (self, player) {
    // hide volume controls when they're not supported by the current tech
    if (player.tech_ && !player.tech_.featuresVolumeControl) {
      self.addClass('vjs-hidden');
    }
    self.on(player, 'loadstart', function () {
      if (!player.tech_.featuresVolumeControl) {
        self.addClass('vjs-hidden');
      } else {
        self.removeClass('vjs-hidden');
      }
    });
  };

  /**
   * @file volume-level.js
   */

  /**
   * Shows volume level
   *
   * @extends Component
   */
  class VolumeLevel extends Component {
    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      const el = super.createEl('div', {
        className: 'vjs-volume-level'
      });
      el.appendChild(super.createEl('span', {
        className: 'vjs-control-text'
      }));
      return el;
    }
  }
  Component.registerComponent('VolumeLevel', VolumeLevel);

  /**
   * @file volume-level-tooltip.js
   */

  /**
   * Volume level tooltips display a volume above or side by side the volume bar.
   *
   * @extends Component
   */
  class VolumeLevelTooltip extends Component {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The {@link Player} that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      super(player, options);
      this.update = throttle(bind_(this, this.update), UPDATE_REFRESH_INTERVAL);
    }

    /**
     * Create the volume tooltip DOM element
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      return super.createEl('div', {
        className: 'vjs-volume-tooltip'
      }, {
        'aria-hidden': 'true'
      });
    }

    /**
     * Updates the position of the tooltip relative to the `VolumeBar` and
     * its content text.
     *
     * @param {Object} rangeBarRect
     *        The `ClientRect` for the {@link VolumeBar} element.
     *
     * @param {number} rangeBarPoint
     *        A number from 0 to 1, representing a horizontal/vertical reference point
     *        from the left edge of the {@link VolumeBar}
     *
     * @param {boolean} vertical
     *        Referees to the Volume control position
     *        in the control bar{@link VolumeControl}
     *
     */
    update(rangeBarRect, rangeBarPoint, vertical, content) {
      if (!vertical) {
        const tooltipRect = getBoundingClientRect(this.el_);
        const playerRect = getBoundingClientRect(this.player_.el());
        const volumeBarPointPx = rangeBarRect.width * rangeBarPoint;
        if (!playerRect || !tooltipRect) {
          return;
        }
        const spaceLeftOfPoint = rangeBarRect.left - playerRect.left + volumeBarPointPx;
        const spaceRightOfPoint = rangeBarRect.width - volumeBarPointPx + (playerRect.right - rangeBarRect.right);
        let pullTooltipBy = tooltipRect.width / 2;
        if (spaceLeftOfPoint < pullTooltipBy) {
          pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;
        } else if (spaceRightOfPoint < pullTooltipBy) {
          pullTooltipBy = spaceRightOfPoint;
        }
        if (pullTooltipBy < 0) {
          pullTooltipBy = 0;
        } else if (pullTooltipBy > tooltipRect.width) {
          pullTooltipBy = tooltipRect.width;
        }
        this.el_.style.right = `-${pullTooltipBy}px`;
      }
      this.write(`${content}%`);
    }

    /**
     * Write the volume to the tooltip DOM element.
     *
     * @param {string} content
     *        The formatted volume for the tooltip.
     */
    write(content) {
      textContent(this.el_, content);
    }

    /**
     * Updates the position of the volume tooltip relative to the `VolumeBar`.
     *
     * @param {Object} rangeBarRect
     *        The `ClientRect` for the {@link VolumeBar} element.
     *
     * @param {number} rangeBarPoint
     *        A number from 0 to 1, representing a horizontal/vertical reference point
     *        from the left edge of the {@link VolumeBar}
     *
     * @param {boolean} vertical
     *        Referees to the Volume control position
     *        in the control bar{@link VolumeControl}
     *
     * @param {number} volume
     *        The volume level to update the tooltip to
     *
     * @param {Function} cb
     *        A function that will be called during the request animation frame
     *        for tooltips that need to do additional animations from the default
     */
    updateVolume(rangeBarRect, rangeBarPoint, vertical, volume, cb) {
      this.requestNamedAnimationFrame('VolumeLevelTooltip#updateVolume', () => {
        this.update(rangeBarRect, rangeBarPoint, vertical, volume.toFixed(0));
        if (cb) {
          cb();
        }
      });
    }
  }
  Component.registerComponent('VolumeLevelTooltip', VolumeLevelTooltip);

  /**
   * @file mouse-volume-level-display.js
   */

  /**
   * The {@link MouseVolumeLevelDisplay} component tracks mouse movement over the
   * {@link VolumeControl}. It displays an indicator and a {@link VolumeLevelTooltip}
   * indicating the volume level which is represented by a given point in the
   * {@link VolumeBar}.
   *
   * @extends Component
   */
  class MouseVolumeLevelDisplay extends Component {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The {@link Player} that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      super(player, options);
      this.update = throttle(bind_(this, this.update), UPDATE_REFRESH_INTERVAL);
    }

    /**
     * Create the DOM element for this class.
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      return super.createEl('div', {
        className: 'vjs-mouse-display'
      });
    }

    /**
     * Enquires updates to its own DOM as well as the DOM of its
     * {@link VolumeLevelTooltip} child.
     *
     * @param {Object} rangeBarRect
     *        The `ClientRect` for the {@link VolumeBar} element.
     *
     * @param {number} rangeBarPoint
     *        A number from 0 to 1, representing a horizontal/vertical reference point
     *        from the left edge of the {@link VolumeBar}
     *
     * @param {boolean} vertical
     *        Referees to the Volume control position
     *        in the control bar{@link VolumeControl}
     *
     */
    update(rangeBarRect, rangeBarPoint, vertical) {
      const volume = 100 * rangeBarPoint;
      this.getChild('volumeLevelTooltip').updateVolume(rangeBarRect, rangeBarPoint, vertical, volume, () => {
        if (vertical) {
          this.el_.style.bottom = `${rangeBarRect.height * rangeBarPoint}px`;
        } else {
          this.el_.style.left = `${rangeBarRect.width * rangeBarPoint}px`;
        }
      });
    }
  }

  /**
   * Default options for `MouseVolumeLevelDisplay`
   *
   * @type {Object}
   * @private
   */
  MouseVolumeLevelDisplay.prototype.options_ = {
    children: ['volumeLevelTooltip']
  };
  Component.registerComponent('MouseVolumeLevelDisplay', MouseVolumeLevelDisplay);

  /**
   * @file volume-bar.js
   */

  /**
   * The bar that contains the volume level and can be clicked on to adjust the level
   *
   * @extends Slider
   */
  class VolumeBar extends Slider {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      super(player, options);
      this.on('slideractive', e => this.updateLastVolume_(e));
      this.on(player, 'volumechange', e => this.updateARIAAttributes(e));
      player.ready(() => this.updateARIAAttributes());
    }

    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      return super.createEl('div', {
        className: 'vjs-volume-bar vjs-slider-bar'
      }, {
        'aria-label': this.localize('Volume Level'),
        'aria-live': 'polite'
      });
    }

    /**
     * Handle mouse down on volume bar
     *
     * @param {Event} event
     *        The `mousedown` event that caused this to run.
     *
     * @listens mousedown
     */
    handleMouseDown(event) {
      if (!isSingleLeftClick(event)) {
        return;
      }
      super.handleMouseDown(event);
    }

    /**
     * Handle movement events on the {@link VolumeMenuButton}.
     *
     * @param {Event} event
     *        The event that caused this function to run.
     *
     * @listens mousemove
     */
    handleMouseMove(event) {
      const mouseVolumeLevelDisplay = this.getChild('mouseVolumeLevelDisplay');
      if (mouseVolumeLevelDisplay) {
        const volumeBarEl = this.el();
        const volumeBarRect = getBoundingClientRect(volumeBarEl);
        const vertical = this.vertical();
        let volumeBarPoint = getPointerPosition(volumeBarEl, event);
        volumeBarPoint = vertical ? volumeBarPoint.y : volumeBarPoint.x;
        // The default skin has a gap on either side of the `VolumeBar`. This means
        // that it's possible to trigger this behavior outside the boundaries of
        // the `VolumeBar`. This ensures we stay within it at all times.
        volumeBarPoint = clamp(volumeBarPoint, 0, 1);
        mouseVolumeLevelDisplay.update(volumeBarRect, volumeBarPoint, vertical);
      }
      if (!isSingleLeftClick(event)) {
        return;
      }
      this.checkMuted();
      this.player_.volume(this.calculateDistance(event));
    }

    /**
     * If the player is muted unmute it.
     */
    checkMuted() {
      if (this.player_.muted()) {
        this.player_.muted(false);
      }
    }

    /**
     * Get percent of volume level
     *
     * @return {number}
     *         Volume level percent as a decimal number.
     */
    getPercent() {
      if (this.player_.muted()) {
        return 0;
      }
      return this.player_.volume();
    }

    /**
     * Increase volume level for keyboard users
     */
    stepForward() {
      this.checkMuted();
      this.player_.volume(this.player_.volume() + 0.1);
    }

    /**
     * Decrease volume level for keyboard users
     */
    stepBack() {
      this.checkMuted();
      this.player_.volume(this.player_.volume() - 0.1);
    }

    /**
     * Update ARIA accessibility attributes
     *
     * @param {Event} [event]
     *        The `volumechange` event that caused this function to run.
     *
     * @listens Player#volumechange
     */
    updateARIAAttributes(event) {
      const ariaValue = this.player_.muted() ? 0 : this.volumeAsPercentage_();
      this.el_.setAttribute('aria-valuenow', ariaValue);
      this.el_.setAttribute('aria-valuetext', ariaValue + '%');
    }

    /**
     * Returns the current value of the player volume as a percentage
     *
     * @private
     */
    volumeAsPercentage_() {
      return Math.round(this.player_.volume() * 100);
    }

    /**
     * When user starts dragging the VolumeBar, store the volume and listen for
     * the end of the drag. When the drag ends, if the volume was set to zero,
     * set lastVolume to the stored volume.
     *
     * @listens slideractive
     * @private
     */
    updateLastVolume_() {
      const volumeBeforeDrag = this.player_.volume();
      this.one('sliderinactive', () => {
        if (this.player_.volume() === 0) {
          this.player_.lastVolume_(volumeBeforeDrag);
        }
      });
    }
  }

  /**
   * Default options for the `VolumeBar`
   *
   * @type {Object}
   * @private
   */
  VolumeBar.prototype.options_ = {
    children: ['volumeLevel'],
    barName: 'volumeLevel'
  };

  // MouseVolumeLevelDisplay tooltip should not be added to a player on mobile devices
  if (!IS_IOS && !IS_ANDROID) {
    VolumeBar.prototype.options_.children.splice(0, 0, 'mouseVolumeLevelDisplay');
  }

  /**
   * Call the update event for this Slider when this event happens on the player.
   *
   * @type {string}
   */
  VolumeBar.prototype.playerEvent = 'volumechange';
  Component.registerComponent('VolumeBar', VolumeBar);

  /**
   * @file volume-control.js
   */

  /**
   * The component for controlling the volume level
   *
   * @extends Component
   */
  class VolumeControl extends Component {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options={}]
     *        The key/value store of player options.
     */
    constructor(player, options = {}) {
      options.vertical = options.vertical || false;

      // Pass the vertical option down to the VolumeBar if
      // the VolumeBar is turned on.
      if (typeof options.volumeBar === 'undefined' || isPlain(options.volumeBar)) {
        options.volumeBar = options.volumeBar || {};
        options.volumeBar.vertical = options.vertical;
      }
      super(player, options);

      // hide this control if volume support is missing
      checkVolumeSupport(this, player);
      this.throttledHandleMouseMove = throttle(bind_(this, this.handleMouseMove), UPDATE_REFRESH_INTERVAL);
      this.handleMouseUpHandler_ = e => this.handleMouseUp(e);
      this.on('mousedown', e => this.handleMouseDown(e));
      this.on('touchstart', e => this.handleMouseDown(e));
      this.on('mousemove', e => this.handleMouseMove(e));

      // while the slider is active (the mouse has been pressed down and
      // is dragging) or in focus we do not want to hide the VolumeBar
      this.on(this.volumeBar, ['focus', 'slideractive'], () => {
        this.volumeBar.addClass('vjs-slider-active');
        this.addClass('vjs-slider-active');
        this.trigger('slideractive');
      });
      this.on(this.volumeBar, ['blur', 'sliderinactive'], () => {
        this.volumeBar.removeClass('vjs-slider-active');
        this.removeClass('vjs-slider-active');
        this.trigger('sliderinactive');
      });
    }

    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      let orientationClass = 'vjs-volume-horizontal';
      if (this.options_.vertical) {
        orientationClass = 'vjs-volume-vertical';
      }
      return super.createEl('div', {
        className: `vjs-volume-control vjs-control ${orientationClass}`
      });
    }

    /**
     * Handle `mousedown` or `touchstart` events on the `VolumeControl`.
     *
     * @param {Event} event
     *        `mousedown` or `touchstart` event that triggered this function
     *
     * @listens mousedown
     * @listens touchstart
     */
    handleMouseDown(event) {
      const doc = this.el_.ownerDocument;
      this.on(doc, 'mousemove', this.throttledHandleMouseMove);
      this.on(doc, 'touchmove', this.throttledHandleMouseMove);
      this.on(doc, 'mouseup', this.handleMouseUpHandler_);
      this.on(doc, 'touchend', this.handleMouseUpHandler_);
    }

    /**
     * Handle `mouseup` or `touchend` events on the `VolumeControl`.
     *
     * @param {Event} event
     *        `mouseup` or `touchend` event that triggered this function.
     *
     * @listens touchend
     * @listens mouseup
     */
    handleMouseUp(event) {
      const doc = this.el_.ownerDocument;
      this.off(doc, 'mousemove', this.throttledHandleMouseMove);
      this.off(doc, 'touchmove', this.throttledHandleMouseMove);
      this.off(doc, 'mouseup', this.handleMouseUpHandler_);
      this.off(doc, 'touchend', this.handleMouseUpHandler_);
    }

    /**
     * Handle `mousedown` or `touchstart` events on the `VolumeControl`.
     *
     * @param {Event} event
     *        `mousedown` or `touchstart` event that triggered this function
     *
     * @listens mousedown
     * @listens touchstart
     */
    handleMouseMove(event) {
      this.volumeBar.handleMouseMove(event);
    }
  }

  /**
   * Default options for the `VolumeControl`
   *
   * @type {Object}
   * @private
   */
  VolumeControl.prototype.options_ = {
    children: ['volumeBar']
  };
  Component.registerComponent('VolumeControl', VolumeControl);

  /**
   * Check if muting volume is supported and if it isn't hide the mute toggle
   * button.
   *
   * @param { import('../../component').default } self
   *        A reference to the mute toggle button
   *
   * @param { import('../../player').default } player
   *        A reference to the player
   *
   * @private
   */
  const checkMuteSupport = function (self, player) {
    // hide mute toggle button if it's not supported by the current tech
    if (player.tech_ && !player.tech_.featuresMuteControl) {
      self.addClass('vjs-hidden');
    }
    self.on(player, 'loadstart', function () {
      if (!player.tech_.featuresMuteControl) {
        self.addClass('vjs-hidden');
      } else {
        self.removeClass('vjs-hidden');
      }
    });
  };

  /**
   * @file mute-toggle.js
   */

  /**
   * A button component for muting the audio.
   *
   * @extends Button
   */
  class MuteToggle extends Button {
    /**
     * Creates an instance of this class.
     *
     * @param { import('./player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      super(player, options);

      // hide this control if volume support is missing
      checkMuteSupport(this, player);
      this.on(player, ['loadstart', 'volumechange'], e => this.update(e));
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */
    buildCSSClass() {
      return `vjs-mute-control ${super.buildCSSClass()}`;
    }

    /**
     * This gets called when an `MuteToggle` is "clicked". See
     * {@link ClickableComponent} for more detailed information on what a click can be.
     *
     * @param {Event} [event]
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */
    handleClick(event) {
      const vol = this.player_.volume();
      const lastVolume = this.player_.lastVolume_();
      if (vol === 0) {
        const volumeToSet = lastVolume < 0.1 ? 0.1 : lastVolume;
        this.player_.volume(volumeToSet);
        this.player_.muted(false);
      } else {
        this.player_.muted(this.player_.muted() ? false : true);
      }
    }

    /**
     * Update the `MuteToggle` button based on the state of `volume` and `muted`
     * on the player.
     *
     * @param {Event} [event]
     *        The {@link Player#loadstart} event if this function was called
     *        through an event.
     *
     * @listens Player#loadstart
     * @listens Player#volumechange
     */
    update(event) {
      this.updateIcon_();
      this.updateControlText_();
    }

    /**
     * Update the appearance of the `MuteToggle` icon.
     *
     * Possible states (given `level` variable below):
     * - 0: crossed out
     * - 1: zero bars of volume
     * - 2: one bar of volume
     * - 3: two bars of volume
     *
     * @private
     */
    updateIcon_() {
      const vol = this.player_.volume();
      let level = 3;

      // in iOS when a player is loaded with muted attribute
      // and volume is changed with a native mute button
      // we want to make sure muted state is updated
      if (IS_IOS && this.player_.tech_ && this.player_.tech_.el_) {
        this.player_.muted(this.player_.tech_.el_.muted);
      }
      if (vol === 0 || this.player_.muted()) {
        level = 0;
      } else if (vol < 0.33) {
        level = 1;
      } else if (vol < 0.67) {
        level = 2;
      }
      removeClass(this.el_, [0, 1, 2, 3].reduce((str, i) => str + `${i ? ' ' : ''}vjs-vol-${i}`, ''));
      addClass(this.el_, `vjs-vol-${level}`);
    }

    /**
     * If `muted` has changed on the player, update the control text
     * (`title` attribute on `vjs-mute-control` element and content of
     * `vjs-control-text` element).
     *
     * @private
     */
    updateControlText_() {
      const soundOff = this.player_.muted() || this.player_.volume() === 0;
      const text = soundOff ? 'Unmute' : 'Mute';
      if (this.controlText() !== text) {
        this.controlText(text);
      }
    }
  }

  /**
   * The text that should display over the `MuteToggle`s controls. Added for localization.
   *
   * @type {string}
   * @protected
   */
  MuteToggle.prototype.controlText_ = 'Mute';
  Component.registerComponent('MuteToggle', MuteToggle);

  /**
   * @file volume-control.js
   */

  /**
   * A Component to contain the MuteToggle and VolumeControl so that
   * they can work together.
   *
   * @extends Component
   */
  class VolumePanel extends Component {
    /**
     * Creates an instance of this class.
     *
     * @param { import('./player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options={}]
     *        The key/value store of player options.
     */
    constructor(player, options = {}) {
      if (typeof options.inline !== 'undefined') {
        options.inline = options.inline;
      } else {
        options.inline = true;
      }

      // pass the inline option down to the VolumeControl as vertical if
      // the VolumeControl is on.
      if (typeof options.volumeControl === 'undefined' || isPlain(options.volumeControl)) {
        options.volumeControl = options.volumeControl || {};
        options.volumeControl.vertical = !options.inline;
      }
      super(player, options);

      // this handler is used by mouse handler methods below
      this.handleKeyPressHandler_ = e => this.handleKeyPress(e);
      this.on(player, ['loadstart'], e => this.volumePanelState_(e));
      this.on(this.muteToggle, 'keyup', e => this.handleKeyPress(e));
      this.on(this.volumeControl, 'keyup', e => this.handleVolumeControlKeyUp(e));
      this.on('keydown', e => this.handleKeyPress(e));
      this.on('mouseover', e => this.handleMouseOver(e));
      this.on('mouseout', e => this.handleMouseOut(e));

      // while the slider is active (the mouse has been pressed down and
      // is dragging) we do not want to hide the VolumeBar
      this.on(this.volumeControl, ['slideractive'], this.sliderActive_);
      this.on(this.volumeControl, ['sliderinactive'], this.sliderInactive_);
    }

    /**
     * Add vjs-slider-active class to the VolumePanel
     *
     * @listens VolumeControl#slideractive
     * @private
     */
    sliderActive_() {
      this.addClass('vjs-slider-active');
    }

    /**
     * Removes vjs-slider-active class to the VolumePanel
     *
     * @listens VolumeControl#sliderinactive
     * @private
     */
    sliderInactive_() {
      this.removeClass('vjs-slider-active');
    }

    /**
     * Adds vjs-hidden or vjs-mute-toggle-only to the VolumePanel
     * depending on MuteToggle and VolumeControl state
     *
     * @listens Player#loadstart
     * @private
     */
    volumePanelState_() {
      // hide volume panel if neither volume control or mute toggle
      // are displayed
      if (this.volumeControl.hasClass('vjs-hidden') && this.muteToggle.hasClass('vjs-hidden')) {
        this.addClass('vjs-hidden');
      }

      // if only mute toggle is visible we don't want
      // volume panel expanding when hovered or active
      if (this.volumeControl.hasClass('vjs-hidden') && !this.muteToggle.hasClass('vjs-hidden')) {
        this.addClass('vjs-mute-toggle-only');
      }
    }

    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      let orientationClass = 'vjs-volume-panel-horizontal';
      if (!this.options_.inline) {
        orientationClass = 'vjs-volume-panel-vertical';
      }
      return super.createEl('div', {
        className: `vjs-volume-panel vjs-control ${orientationClass}`
      });
    }

    /**
     * Dispose of the `volume-panel` and all child components.
     */
    dispose() {
      this.handleMouseOut();
      super.dispose();
    }

    /**
     * Handles `keyup` events on the `VolumeControl`, looking for ESC, which closes
     * the volume panel and sets focus on `MuteToggle`.
     *
     * @param {Event} event
     *        The `keyup` event that caused this function to be called.
     *
     * @listens keyup
     */
    handleVolumeControlKeyUp(event) {
      if (keycode.isEventKey(event, 'Esc')) {
        this.muteToggle.focus();
      }
    }

    /**
     * This gets called when a `VolumePanel` gains hover via a `mouseover` event.
     * Turns on listening for `mouseover` event. When they happen it
     * calls `this.handleMouseOver`.
     *
     * @param {Event} event
     *        The `mouseover` event that caused this function to be called.
     *
     * @listens mouseover
     */
    handleMouseOver(event) {
      this.addClass('vjs-hover');
      on(document, 'keyup', this.handleKeyPressHandler_);
    }

    /**
     * This gets called when a `VolumePanel` gains hover via a `mouseout` event.
     * Turns on listening for `mouseout` event. When they happen it
     * calls `this.handleMouseOut`.
     *
     * @param {Event} event
     *        The `mouseout` event that caused this function to be called.
     *
     * @listens mouseout
     */
    handleMouseOut(event) {
      this.removeClass('vjs-hover');
      off(document, 'keyup', this.handleKeyPressHandler_);
    }

    /**
     * Handles `keyup` event on the document or `keydown` event on the `VolumePanel`,
     * looking for ESC, which hides the `VolumeControl`.
     *
     * @param {Event} event
     *        The keypress that triggered this event.
     *
     * @listens keydown | keyup
     */
    handleKeyPress(event) {
      if (keycode.isEventKey(event, 'Esc')) {
        this.handleMouseOut();
      }
    }
  }

  /**
   * Default options for the `VolumeControl`
   *
   * @type {Object}
   * @private
   */
  VolumePanel.prototype.options_ = {
    children: ['muteToggle', 'volumeControl']
  };
  Component.registerComponent('VolumePanel', VolumePanel);

  /**
   * Button to skip forward a configurable amount of time
   * through a video. Renders in the control bar.
   *
   * e.g. options: {controlBar: {skipButtons: forward: 5}}
   *
   * @extends Button
   */
  class SkipForward extends Button {
    constructor(player, options) {
      super(player, options);
      this.validOptions = [5, 10, 30];
      this.skipTime = this.getSkipForwardTime();
      if (this.skipTime && this.validOptions.includes(this.skipTime)) {
        this.controlText(this.localize('Skip forward {1} seconds', [this.skipTime]));
        this.show();
      } else {
        this.hide();
      }
    }
    getSkipForwardTime() {
      const playerOptions = this.options_.playerOptions;
      return playerOptions.controlBar && playerOptions.controlBar.skipButtons && playerOptions.controlBar.skipButtons.forward;
    }
    buildCSSClass() {
      return `vjs-skip-forward-${this.getSkipForwardTime()} ${super.buildCSSClass()}`;
    }

    /**
     * On click, skips forward in the duration/seekable range by a configurable amount of seconds.
     * If the time left in the duration/seekable range is less than the configured 'skip forward' time,
     * skips to end of duration/seekable range.
     *
     * Handle a click on a `SkipForward` button
     *
     * @param {EventTarget~Event} event
     *        The `click` event that caused this function
     *        to be called
     */
    handleClick(event) {
      const currentVideoTime = this.player_.currentTime();
      const liveTracker = this.player_.liveTracker;
      const duration = liveTracker && liveTracker.isLive() ? liveTracker.seekableEnd() : this.player_.duration();
      let newTime;
      if (currentVideoTime + this.skipTime <= duration) {
        newTime = currentVideoTime + this.skipTime;
      } else {
        newTime = duration;
      }
      this.player_.currentTime(newTime);
    }

    /**
     * Update control text on languagechange
     */
    handleLanguagechange() {
      this.controlText(this.localize('Skip forward {1} seconds', [this.skipTime]));
    }
  }
  Component.registerComponent('SkipForward', SkipForward);

  /**
   * Button to skip backward a configurable amount of time
   * through a video. Renders in the control bar.
   *
   *  * e.g. options: {controlBar: {skipButtons: backward: 5}}
   *
   * @extends Button
   */
  class SkipBackward extends Button {
    constructor(player, options) {
      super(player, options);
      this.validOptions = [5, 10, 30];
      this.skipTime = this.getSkipBackwardTime();
      if (this.skipTime && this.validOptions.includes(this.skipTime)) {
        this.controlText(this.localize('Skip backward {1} seconds', [this.skipTime]));
        this.show();
      } else {
        this.hide();
      }
    }
    getSkipBackwardTime() {
      const playerOptions = this.options_.playerOptions;
      return playerOptions.controlBar && playerOptions.controlBar.skipButtons && playerOptions.controlBar.skipButtons.backward;
    }
    buildCSSClass() {
      return `vjs-skip-backward-${this.getSkipBackwardTime()} ${super.buildCSSClass()}`;
    }

    /**
     * On click, skips backward in the video by a configurable amount of seconds.
     * If the current time in the video is less than the configured 'skip backward' time,
     * skips to beginning of video or seekable range.
     *
     * Handle a click on a `SkipBackward` button
     *
     * @param {EventTarget~Event} event
     *        The `click` event that caused this function
     *        to be called
     */
    handleClick(event) {
      const currentVideoTime = this.player_.currentTime();
      const liveTracker = this.player_.liveTracker;
      const seekableStart = liveTracker && liveTracker.isLive() && liveTracker.seekableStart();
      let newTime;
      if (seekableStart && currentVideoTime - this.skipTime <= seekableStart) {
        newTime = seekableStart;
      } else if (currentVideoTime >= this.skipTime) {
        newTime = currentVideoTime - this.skipTime;
      } else {
        newTime = 0;
      }
      this.player_.currentTime(newTime);
    }

    /**
     * Update control text on languagechange
     */
    handleLanguagechange() {
      this.controlText(this.localize('Skip backward {1} seconds', [this.skipTime]));
    }
  }
  SkipBackward.prototype.controlText_ = 'Skip Backward';
  Component.registerComponent('SkipBackward', SkipBackward);

  /**
   * @file menu.js
   */

  /**
   * The Menu component is used to build popup menus, including subtitle and
   * captions selection menus.
   *
   * @extends Component
   */
  class Menu extends Component {
    /**
     * Create an instance of this class.
     *
     * @param { import('../player').default } player
     *        the player that this component should attach to
     *
     * @param {Object} [options]
     *        Object of option names and values
     *
     */
    constructor(player, options) {
      super(player, options);
      if (options) {
        this.menuButton_ = options.menuButton;
      }
      this.focusedChild_ = -1;
      this.on('keydown', e => this.handleKeyDown(e));

      // All the menu item instances share the same blur handler provided by the menu container.
      this.boundHandleBlur_ = e => this.handleBlur(e);
      this.boundHandleTapClick_ = e => this.handleTapClick(e);
    }

    /**
     * Add event listeners to the {@link MenuItem}.
     *
     * @param {Object} component
     *        The instance of the `MenuItem` to add listeners to.
     *
     */
    addEventListenerForItem(component) {
      if (!(component instanceof Component)) {
        return;
      }
      this.on(component, 'blur', this.boundHandleBlur_);
      this.on(component, ['tap', 'click'], this.boundHandleTapClick_);
    }

    /**
     * Remove event listeners from the {@link MenuItem}.
     *
     * @param {Object} component
     *        The instance of the `MenuItem` to remove listeners.
     *
     */
    removeEventListenerForItem(component) {
      if (!(component instanceof Component)) {
        return;
      }
      this.off(component, 'blur', this.boundHandleBlur_);
      this.off(component, ['tap', 'click'], this.boundHandleTapClick_);
    }

    /**
     * This method will be called indirectly when the component has been added
     * before the component adds to the new menu instance by `addItem`.
     * In this case, the original menu instance will remove the component
     * by calling `removeChild`.
     *
     * @param {Object} component
     *        The instance of the `MenuItem`
     */
    removeChild(component) {
      if (typeof component === 'string') {
        component = this.getChild(component);
      }
      this.removeEventListenerForItem(component);
      super.removeChild(component);
    }

    /**
     * Add a {@link MenuItem} to the menu.
     *
     * @param {Object|string} component
     *        The name or instance of the `MenuItem` to add.
     *
     */
    addItem(component) {
      const childComponent = this.addChild(component);
      if (childComponent) {
        this.addEventListenerForItem(childComponent);
      }
    }

    /**
     * Create the `Menu`s DOM element.
     *
     * @return {Element}
     *         the element that was created
     */
    createEl() {
      const contentElType = this.options_.contentElType || 'ul';
      this.contentEl_ = createEl(contentElType, {
        className: 'vjs-menu-content'
      });
      this.contentEl_.setAttribute('role', 'menu');
      const el = super.createEl('div', {
        append: this.contentEl_,
        className: 'vjs-menu'
      });
      el.appendChild(this.contentEl_);

      // Prevent clicks from bubbling up. Needed for Menu Buttons,
      // where a click on the parent is significant
      on(el, 'click', function (event) {
        event.preventDefault();
        event.stopImmediatePropagation();
      });
      return el;
    }
    dispose() {
      this.contentEl_ = null;
      this.boundHandleBlur_ = null;
      this.boundHandleTapClick_ = null;
      super.dispose();
    }

    /**
     * Called when a `MenuItem` loses focus.
     *
     * @param {Event} event
     *        The `blur` event that caused this function to be called.
     *
     * @listens blur
     */
    handleBlur(event) {
      const relatedTarget = event.relatedTarget || document.activeElement;

      // Close menu popup when a user clicks outside the menu
      if (!this.children().some(element => {
        return element.el() === relatedTarget;
      })) {
        const btn = this.menuButton_;
        if (btn && btn.buttonPressed_ && relatedTarget !== btn.el().firstChild) {
          btn.unpressButton();
        }
      }
    }

    /**
     * Called when a `MenuItem` gets clicked or tapped.
     *
     * @param {Event} event
     *        The `click` or `tap` event that caused this function to be called.
     *
     * @listens click,tap
     */
    handleTapClick(event) {
      // Unpress the associated MenuButton, and move focus back to it
      if (this.menuButton_) {
        this.menuButton_.unpressButton();
        const childComponents = this.children();
        if (!Array.isArray(childComponents)) {
          return;
        }
        const foundComponent = childComponents.filter(component => component.el() === event.target)[0];
        if (!foundComponent) {
          return;
        }

        // don't focus menu button if item is a caption settings item
        // because focus will move elsewhere
        if (foundComponent.name() !== 'CaptionSettingsMenuItem') {
          this.menuButton_.focus();
        }
      }
    }

    /**
     * Handle a `keydown` event on this menu. This listener is added in the constructor.
     *
     * @param {Event} event
     *        A `keydown` event that happened on the menu.
     *
     * @listens keydown
     */
    handleKeyDown(event) {
      // Left and Down Arrows
      if (keycode.isEventKey(event, 'Left') || keycode.isEventKey(event, 'Down')) {
        event.preventDefault();
        event.stopPropagation();
        this.stepForward();

        // Up and Right Arrows
      } else if (keycode.isEventKey(event, 'Right') || keycode.isEventKey(event, 'Up')) {
        event.preventDefault();
        event.stopPropagation();
        this.stepBack();
      }
    }

    /**
     * Move to next (lower) menu item for keyboard users.
     */
    stepForward() {
      let stepChild = 0;
      if (this.focusedChild_ !== undefined) {
        stepChild = this.focusedChild_ + 1;
      }
      this.focus(stepChild);
    }

    /**
     * Move to previous (higher) menu item for keyboard users.
     */
    stepBack() {
      let stepChild = 0;
      if (this.focusedChild_ !== undefined) {
        stepChild = this.focusedChild_ - 1;
      }
      this.focus(stepChild);
    }

    /**
     * Set focus on a {@link MenuItem} in the `Menu`.
     *
     * @param {Object|string} [item=0]
     *        Index of child item set focus on.
     */
    focus(item = 0) {
      const children = this.children().slice();
      const haveTitle = children.length && children[0].hasClass('vjs-menu-title');
      if (haveTitle) {
        children.shift();
      }
      if (children.length > 0) {
        if (item < 0) {
          item = 0;
        } else if (item >= children.length) {
          item = children.length - 1;
        }
        this.focusedChild_ = item;
        children[item].el_.focus();
      }
    }
  }
  Component.registerComponent('Menu', Menu);

  /**
   * @file menu-button.js
   */

  /**
   * A `MenuButton` class for any popup {@link Menu}.
   *
   * @extends Component
   */
  class MenuButton extends Component {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options={}]
     *        The key/value store of player options.
     */
    constructor(player, options = {}) {
      super(player, options);
      this.menuButton_ = new Button(player, options);
      this.menuButton_.controlText(this.controlText_);
      this.menuButton_.el_.setAttribute('aria-haspopup', 'true');

      // Add buildCSSClass values to the button, not the wrapper
      const buttonClass = Button.prototype.buildCSSClass();
      this.menuButton_.el_.className = this.buildCSSClass() + ' ' + buttonClass;
      this.menuButton_.removeClass('vjs-control');
      this.addChild(this.menuButton_);
      this.update();
      this.enabled_ = true;
      const handleClick = e => this.handleClick(e);
      this.handleMenuKeyUp_ = e => this.handleMenuKeyUp(e);
      this.on(this.menuButton_, 'tap', handleClick);
      this.on(this.menuButton_, 'click', handleClick);
      this.on(this.menuButton_, 'keydown', e => this.handleKeyDown(e));
      this.on(this.menuButton_, 'mouseenter', () => {
        this.addClass('vjs-hover');
        this.menu.show();
        on(document, 'keyup', this.handleMenuKeyUp_);
      });
      this.on('mouseleave', e => this.handleMouseLeave(e));
      this.on('keydown', e => this.handleSubmenuKeyDown(e));
    }

    /**
     * Update the menu based on the current state of its items.
     */
    update() {
      const menu = this.createMenu();
      if (this.menu) {
        this.menu.dispose();
        this.removeChild(this.menu);
      }
      this.menu = menu;
      this.addChild(menu);

      /**
       * Track the state of the menu button
       *
       * @type {Boolean}
       * @private
       */
      this.buttonPressed_ = false;
      this.menuButton_.el_.setAttribute('aria-expanded', 'false');
      if (this.items && this.items.length <= this.hideThreshold_) {
        this.hide();
        this.menu.contentEl_.removeAttribute('role');
      } else {
        this.show();
        this.menu.contentEl_.setAttribute('role', 'menu');
      }
    }

    /**
     * Create the menu and add all items to it.
     *
     * @return {Menu}
     *         The constructed menu
     */
    createMenu() {
      const menu = new Menu(this.player_, {
        menuButton: this
      });

      /**
       * Hide the menu if the number of items is less than or equal to this threshold. This defaults
       * to 0 and whenever we add items which can be hidden to the menu we'll increment it. We list
       * it here because every time we run `createMenu` we need to reset the value.
       *
       * @protected
       * @type {Number}
       */
      this.hideThreshold_ = 0;

      // Add a title list item to the top
      if (this.options_.title) {
        const titleEl = createEl('li', {
          className: 'vjs-menu-title',
          textContent: toTitleCase(this.options_.title),
          tabIndex: -1
        });
        const titleComponent = new Component(this.player_, {
          el: titleEl
        });
        menu.addItem(titleComponent);
      }
      this.items = this.createItems();
      if (this.items) {
        // Add menu items to the menu
        for (let i = 0; i < this.items.length; i++) {
          menu.addItem(this.items[i]);
        }
      }
      return menu;
    }

    /**
     * Create the list of menu items. Specific to each subclass.
     *
     * @abstract
     */
    createItems() {}

    /**
     * Create the `MenuButtons`s DOM element.
     *
     * @return {Element}
     *         The element that gets created.
     */
    createEl() {
      return super.createEl('div', {
        className: this.buildWrapperCSSClass()
      }, {});
    }

    /**
     * Allow sub components to stack CSS class names for the wrapper element
     *
     * @return {string}
     *         The constructed wrapper DOM `className`
     */
    buildWrapperCSSClass() {
      let menuButtonClass = 'vjs-menu-button';

      // If the inline option is passed, we want to use different styles altogether.
      if (this.options_.inline === true) {
        menuButtonClass += '-inline';
      } else {
        menuButtonClass += '-popup';
      }

      // TODO: Fix the CSS so that this isn't necessary
      const buttonClass = Button.prototype.buildCSSClass();
      return `vjs-menu-button ${menuButtonClass} ${buttonClass} ${super.buildCSSClass()}`;
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */
    buildCSSClass() {
      let menuButtonClass = 'vjs-menu-button';

      // If the inline option is passed, we want to use different styles altogether.
      if (this.options_.inline === true) {
        menuButtonClass += '-inline';
      } else {
        menuButtonClass += '-popup';
      }
      return `vjs-menu-button ${menuButtonClass} ${super.buildCSSClass()}`;
    }

    /**
     * Get or set the localized control text that will be used for accessibility.
     *
     * > NOTE: This will come from the internal `menuButton_` element.
     *
     * @param {string} [text]
     *        Control text for element.
     *
     * @param {Element} [el=this.menuButton_.el()]
     *        Element to set the title on.
     *
     * @return {string}
     *         - The control text when getting
     */
    controlText(text, el = this.menuButton_.el()) {
      return this.menuButton_.controlText(text, el);
    }

    /**
     * Dispose of the `menu-button` and all child components.
     */
    dispose() {
      this.handleMouseLeave();
      super.dispose();
    }

    /**
     * Handle a click on a `MenuButton`.
     * See {@link ClickableComponent#handleClick} for instances where this is called.
     *
     * @param {Event} event
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */
    handleClick(event) {
      if (this.buttonPressed_) {
        this.unpressButton();
      } else {
        this.pressButton();
      }
    }

    /**
     * Handle `mouseleave` for `MenuButton`.
     *
     * @param {Event} event
     *        The `mouseleave` event that caused this function to be called.
     *
     * @listens mouseleave
     */
    handleMouseLeave(event) {
      this.removeClass('vjs-hover');
      off(document, 'keyup', this.handleMenuKeyUp_);
    }

    /**
     * Set the focus to the actual button, not to this element
     */
    focus() {
      this.menuButton_.focus();
    }

    /**
     * Remove the focus from the actual button, not this element
     */
    blur() {
      this.menuButton_.blur();
    }

    /**
     * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See
     * {@link ClickableComponent#handleKeyDown} for instances where this is called.
     *
     * @param {Event} event
     *        The `keydown` event that caused this function to be called.
     *
     * @listens keydown
     */
    handleKeyDown(event) {
      // Escape or Tab unpress the 'button'
      if (keycode.isEventKey(event, 'Esc') || keycode.isEventKey(event, 'Tab')) {
        if (this.buttonPressed_) {
          this.unpressButton();
        }

        // Don't preventDefault for Tab key - we still want to lose focus
        if (!keycode.isEventKey(event, 'Tab')) {
          event.preventDefault();
          // Set focus back to the menu button's button
          this.menuButton_.focus();
        }
        // Up Arrow or Down Arrow also 'press' the button to open the menu
      } else if (keycode.isEventKey(event, 'Up') || keycode.isEventKey(event, 'Down')) {
        if (!this.buttonPressed_) {
          event.preventDefault();
          this.pressButton();
        }
      }
    }

    /**
     * Handle a `keyup` event on a `MenuButton`. The listener for this is added in
     * the constructor.
     *
     * @param {Event} event
     *        Key press event
     *
     * @listens keyup
     */
    handleMenuKeyUp(event) {
      // Escape hides popup menu
      if (keycode.isEventKey(event, 'Esc') || keycode.isEventKey(event, 'Tab')) {
        this.removeClass('vjs-hover');
      }
    }

    /**
     * This method name now delegates to `handleSubmenuKeyDown`. This means
     * anyone calling `handleSubmenuKeyPress` will not see their method calls
     * stop working.
     *
     * @param {Event} event
     *        The event that caused this function to be called.
     */
    handleSubmenuKeyPress(event) {
      this.handleSubmenuKeyDown(event);
    }

    /**
     * Handle a `keydown` event on a sub-menu. The listener for this is added in
     * the constructor.
     *
     * @param {Event} event
     *        Key press event
     *
     * @listens keydown
     */
    handleSubmenuKeyDown(event) {
      // Escape or Tab unpress the 'button'
      if (keycode.isEventKey(event, 'Esc') || keycode.isEventKey(event, 'Tab')) {
        if (this.buttonPressed_) {
          this.unpressButton();
        }
        // Don't preventDefault for Tab key - we still want to lose focus
        if (!keycode.isEventKey(event, 'Tab')) {
          event.preventDefault();
          // Set focus back to the menu button's button
          this.menuButton_.focus();
        }
      }
    }

    /**
     * Put the current `MenuButton` into a pressed state.
     */
    pressButton() {
      if (this.enabled_) {
        this.buttonPressed_ = true;
        this.menu.show();
        this.menu.lockShowing();
        this.menuButton_.el_.setAttribute('aria-expanded', 'true');

        // set the focus into the submenu, except on iOS where it is resulting in
        // undesired scrolling behavior when the player is in an iframe
        if (IS_IOS && isInFrame()) {
          // Return early so that the menu isn't focused
          return;
        }
        this.menu.focus();
      }
    }

    /**
     * Take the current `MenuButton` out of a pressed state.
     */
    unpressButton() {
      if (this.enabled_) {
        this.buttonPressed_ = false;
        this.menu.unlockShowing();
        this.menu.hide();
        this.menuButton_.el_.setAttribute('aria-expanded', 'false');
      }
    }

    /**
     * Disable the `MenuButton`. Don't allow it to be clicked.
     */
    disable() {
      this.unpressButton();
      this.enabled_ = false;
      this.addClass('vjs-disabled');
      this.menuButton_.disable();
    }

    /**
     * Enable the `MenuButton`. Allow it to be clicked.
     */
    enable() {
      this.enabled_ = true;
      this.removeClass('vjs-disabled');
      this.menuButton_.enable();
    }
  }
  Component.registerComponent('MenuButton', MenuButton);

  /**
   * @file track-button.js
   */

  /**
   * The base class for buttons that toggle specific  track types (e.g. subtitles).
   *
   * @extends MenuButton
   */
  class TrackButton extends MenuButton {
    /**
     * Creates an instance of this class.
     *
     * @param { import('./player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      const tracks = options.tracks;
      super(player, options);
      if (this.items.length <= 1) {
        this.hide();
      }
      if (!tracks) {
        return;
      }
      const updateHandler = bind_(this, this.update);
      tracks.addEventListener('removetrack', updateHandler);
      tracks.addEventListener('addtrack', updateHandler);
      tracks.addEventListener('labelchange', updateHandler);
      this.player_.on('ready', updateHandler);
      this.player_.on('dispose', function () {
        tracks.removeEventListener('removetrack', updateHandler);
        tracks.removeEventListener('addtrack', updateHandler);
        tracks.removeEventListener('labelchange', updateHandler);
      });
    }
  }
  Component.registerComponent('TrackButton', TrackButton);

  /**
   * @file menu-keys.js
   */

  /**
    * All keys used for operation of a menu (`MenuButton`, `Menu`, and `MenuItem`)
    * Note that 'Enter' and 'Space' are not included here (otherwise they would
    * prevent the `MenuButton` and `MenuItem` from being keyboard-clickable)
   *
    * @typedef MenuKeys
    * @array
    */
  const MenuKeys = ['Tab', 'Esc', 'Up', 'Down', 'Right', 'Left'];

  /**
   * @file menu-item.js
   */

  /**
   * The component for a menu item. `<li>`
   *
   * @extends ClickableComponent
   */
  class MenuItem extends ClickableComponent {
    /**
     * Creates an instance of the this class.
     *
     * @param { import('../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options={}]
     *        The key/value store of player options.
     *
     */
    constructor(player, options) {
      super(player, options);
      this.selectable = options.selectable;
      this.isSelected_ = options.selected || false;
      this.multiSelectable = options.multiSelectable;
      this.selected(this.isSelected_);
      if (this.selectable) {
        if (this.multiSelectable) {
          this.el_.setAttribute('role', 'menuitemcheckbox');
        } else {
          this.el_.setAttribute('role', 'menuitemradio');
        }
      } else {
        this.el_.setAttribute('role', 'menuitem');
      }
    }

    /**
     * Create the `MenuItem's DOM element
     *
     * @param {string} [type=li]
     *        Element's node type, not actually used, always set to `li`.
     *
     * @param {Object} [props={}]
     *        An object of properties that should be set on the element
     *
     * @param {Object} [attrs={}]
     *        An object of attributes that should be set on the element
     *
     * @return {Element}
     *         The element that gets created.
     */
    createEl(type, props, attrs) {
      // The control is textual, not just an icon
      this.nonIconControl = true;
      const el = super.createEl('li', Object.assign({
        className: 'vjs-menu-item',
        tabIndex: -1
      }, props), attrs);

      // swap icon with menu item text.
      el.replaceChild(createEl('span', {
        className: 'vjs-menu-item-text',
        textContent: this.localize(this.options_.label)
      }), el.querySelector('.vjs-icon-placeholder'));
      return el;
    }

    /**
     * Ignore keys which are used by the menu, but pass any other ones up. See
     * {@link ClickableComponent#handleKeyDown} for instances where this is called.
     *
     * @param {Event} event
     *        The `keydown` event that caused this function to be called.
     *
     * @listens keydown
     */
    handleKeyDown(event) {
      if (!MenuKeys.some(key => keycode.isEventKey(event, key))) {
        // Pass keydown handling up for unused keys
        super.handleKeyDown(event);
      }
    }

    /**
     * Any click on a `MenuItem` puts it into the selected state.
     * See {@link ClickableComponent#handleClick} for instances where this is called.
     *
     * @param {Event} event
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */
    handleClick(event) {
      this.selected(true);
    }

    /**
     * Set the state for this menu item as selected or not.
     *
     * @param {boolean} selected
     *        if the menu item is selected or not
     */
    selected(selected) {
      if (this.selectable) {
        if (selected) {
          this.addClass('vjs-selected');
          this.el_.setAttribute('aria-checked', 'true');
          // aria-checked isn't fully supported by browsers/screen readers,
          // so indicate selected state to screen reader in the control text.
          this.controlText(', selected');
          this.isSelected_ = true;
        } else {
          this.removeClass('vjs-selected');
          this.el_.setAttribute('aria-checked', 'false');
          // Indicate un-selected state to screen reader
          this.controlText('');
          this.isSelected_ = false;
        }
      }
    }
  }
  Component.registerComponent('MenuItem', MenuItem);

  /**
   * @file text-track-menu-item.js
   */

  /**
   * The specific menu item type for selecting a language within a text track kind
   *
   * @extends MenuItem
   */
  class TextTrackMenuItem extends MenuItem {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      const track = options.track;
      const tracks = player.textTracks();

      // Modify options for parent MenuItem class's init.
      options.label = track.label || track.language || 'Unknown';
      options.selected = track.mode === 'showing';
      super(player, options);
      this.track = track;
      // Determine the relevant kind(s) of tracks for this component and filter
      // out empty kinds.
      this.kinds = (options.kinds || [options.kind || this.track.kind]).filter(Boolean);
      const changeHandler = (...args) => {
        this.handleTracksChange.apply(this, args);
      };
      const selectedLanguageChangeHandler = (...args) => {
        this.handleSelectedLanguageChange.apply(this, args);
      };
      player.on(['loadstart', 'texttrackchange'], changeHandler);
      tracks.addEventListener('change', changeHandler);
      tracks.addEventListener('selectedlanguagechange', selectedLanguageChangeHandler);
      this.on('dispose', function () {
        player.off(['loadstart', 'texttrackchange'], changeHandler);
        tracks.removeEventListener('change', changeHandler);
        tracks.removeEventListener('selectedlanguagechange', selectedLanguageChangeHandler);
      });

      // iOS7 doesn't dispatch change events to TextTrackLists when an
      // associated track's mode changes. Without something like
      // Object.observe() (also not present on iOS7), it's not
      // possible to detect changes to the mode attribute and polyfill
      // the change event. As a poor substitute, we manually dispatch
      // change events whenever the controls modify the mode.
      if (tracks.onchange === undefined) {
        let event;
        this.on(['tap', 'click'], function () {
          if (typeof window.Event !== 'object') {
            // Android 2.3 throws an Illegal Constructor error for window.Event
            try {
              event = new window.Event('change');
            } catch (err) {
              // continue regardless of error
            }
          }
          if (!event) {
            event = document.createEvent('Event');
            event.initEvent('change', true, true);
          }
          tracks.dispatchEvent(event);
        });
      }

      // set the default state based on current tracks
      this.handleTracksChange();
    }

    /**
     * This gets called when an `TextTrackMenuItem` is "clicked". See
     * {@link ClickableComponent} for more detailed information on what a click can be.
     *
     * @param {Event} event
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */
    handleClick(event) {
      const referenceTrack = this.track;
      const tracks = this.player_.textTracks();
      super.handleClick(event);
      if (!tracks) {
        return;
      }
      for (let i = 0; i < tracks.length; i++) {
        const track = tracks[i];

        // If the track from the text tracks list is not of the right kind,
        // skip it. We do not want to affect tracks of incompatible kind(s).
        if (this.kinds.indexOf(track.kind) === -1) {
          continue;
        }

        // If this text track is the component's track and it is not showing,
        // set it to showing.
        if (track === referenceTrack) {
          if (track.mode !== 'showing') {
            track.mode = 'showing';
          }

          // If this text track is not the component's track and it is not
          // disabled, set it to disabled.
        } else if (track.mode !== 'disabled') {
          track.mode = 'disabled';
        }
      }
    }

    /**
     * Handle text track list change
     *
     * @param {Event} event
     *        The `change` event that caused this function to be called.
     *
     * @listens TextTrackList#change
     */
    handleTracksChange(event) {
      const shouldBeSelected = this.track.mode === 'showing';

      // Prevent redundant selected() calls because they may cause
      // screen readers to read the appended control text unnecessarily
      if (shouldBeSelected !== this.isSelected_) {
        this.selected(shouldBeSelected);
      }
    }
    handleSelectedLanguageChange(event) {
      if (this.track.mode === 'showing') {
        const selectedLanguage = this.player_.cache_.selectedLanguage;

        // Don't replace the kind of track across the same language
        if (selectedLanguage && selectedLanguage.enabled && selectedLanguage.language === this.track.language && selectedLanguage.kind !== this.track.kind) {
          return;
        }
        this.player_.cache_.selectedLanguage = {
          enabled: true,
          language: this.track.language,
          kind: this.track.kind
        };
      }
    }
    dispose() {
      // remove reference to track object on dispose
      this.track = null;
      super.dispose();
    }
  }
  Component.registerComponent('TextTrackMenuItem', TextTrackMenuItem);

  /**
   * @file off-text-track-menu-item.js
   */

  /**
   * A special menu item for turning of a specific type of text track
   *
   * @extends TextTrackMenuItem
   */
  class OffTextTrackMenuItem extends TextTrackMenuItem {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      // Create pseudo track info
      // Requires options['kind']
      options.track = {
        player,
        // it is no longer necessary to store `kind` or `kinds` on the track itself
        // since they are now stored in the `kinds` property of all instances of
        // TextTrackMenuItem, but this will remain for backwards compatibility
        kind: options.kind,
        kinds: options.kinds,
        default: false,
        mode: 'disabled'
      };
      if (!options.kinds) {
        options.kinds = [options.kind];
      }
      if (options.label) {
        options.track.label = options.label;
      } else {
        options.track.label = options.kinds.join(' and ') + ' off';
      }

      // MenuItem is selectable
      options.selectable = true;
      // MenuItem is NOT multiSelectable (i.e. only one can be marked "selected" at a time)
      options.multiSelectable = false;
      super(player, options);
    }

    /**
     * Handle text track change
     *
     * @param {Event} event
     *        The event that caused this function to run
     */
    handleTracksChange(event) {
      const tracks = this.player().textTracks();
      let shouldBeSelected = true;
      for (let i = 0, l = tracks.length; i < l; i++) {
        const track = tracks[i];
        if (this.options_.kinds.indexOf(track.kind) > -1 && track.mode === 'showing') {
          shouldBeSelected = false;
          break;
        }
      }

      // Prevent redundant selected() calls because they may cause
      // screen readers to read the appended control text unnecessarily
      if (shouldBeSelected !== this.isSelected_) {
        this.selected(shouldBeSelected);
      }
    }
    handleSelectedLanguageChange(event) {
      const tracks = this.player().textTracks();
      let allHidden = true;
      for (let i = 0, l = tracks.length; i < l; i++) {
        const track = tracks[i];
        if (['captions', 'descriptions', 'subtitles'].indexOf(track.kind) > -1 && track.mode === 'showing') {
          allHidden = false;
          break;
        }
      }
      if (allHidden) {
        this.player_.cache_.selectedLanguage = {
          enabled: false
        };
      }
    }

    /**
     * Update control text and label on languagechange
     */
    handleLanguagechange() {
      this.$('.vjs-menu-item-text').textContent = this.player_.localize(this.options_.label);
      super.handleLanguagechange();
    }
  }
  Component.registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);

  /**
   * @file text-track-button.js
   */

  /**
   * The base class for buttons that toggle specific text track types (e.g. subtitles)
   *
   * @extends MenuButton
   */
  class TextTrackButton extends TrackButton {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options={}]
     *        The key/value store of player options.
     */
    constructor(player, options = {}) {
      options.tracks = player.textTracks();
      super(player, options);
    }

    /**
     * Create a menu item for each text track
     *
     * @param {TextTrackMenuItem[]} [items=[]]
     *        Existing array of items to use during creation
     *
     * @return {TextTrackMenuItem[]}
     *         Array of menu items that were created
     */
    createItems(items = [], TrackMenuItem = TextTrackMenuItem) {
      // Label is an override for the [track] off label
      // USed to localise captions/subtitles
      let label;
      if (this.label_) {
        label = `${this.label_} off`;
      }
      // Add an OFF menu item to turn all tracks off
      items.push(new OffTextTrackMenuItem(this.player_, {
        kinds: this.kinds_,
        kind: this.kind_,
        label
      }));
      this.hideThreshold_ += 1;
      const tracks = this.player_.textTracks();
      if (!Array.isArray(this.kinds_)) {
        this.kinds_ = [this.kind_];
      }
      for (let i = 0; i < tracks.length; i++) {
        const track = tracks[i];

        // only add tracks that are of an appropriate kind and have a label
        if (this.kinds_.indexOf(track.kind) > -1) {
          const item = new TrackMenuItem(this.player_, {
            track,
            kinds: this.kinds_,
            kind: this.kind_,
            // MenuItem is selectable
            selectable: true,
            // MenuItem is NOT multiSelectable (i.e. only one can be marked "selected" at a time)
            multiSelectable: false
          });
          item.addClass(`vjs-${track.kind}-menu-item`);
          items.push(item);
        }
      }
      return items;
    }
  }
  Component.registerComponent('TextTrackButton', TextTrackButton);

  /**
   * @file chapters-track-menu-item.js
   */

  /**
   * The chapter track menu item
   *
   * @extends MenuItem
   */
  class ChaptersTrackMenuItem extends MenuItem {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      const track = options.track;
      const cue = options.cue;
      const currentTime = player.currentTime();

      // Modify options for parent MenuItem class's init.
      options.selectable = true;
      options.multiSelectable = false;
      options.label = cue.text;
      options.selected = cue.startTime <= currentTime && currentTime < cue.endTime;
      super(player, options);
      this.track = track;
      this.cue = cue;
    }

    /**
     * This gets called when an `ChaptersTrackMenuItem` is "clicked". See
     * {@link ClickableComponent} for more detailed information on what a click can be.
     *
     * @param {Event} [event]
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */
    handleClick(event) {
      super.handleClick();
      this.player_.currentTime(this.cue.startTime);
    }
  }
  Component.registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);

  /**
   * @file chapters-button.js
   */

  /**
   * The button component for toggling and selecting chapters
   * Chapters act much differently than other text tracks
   * Cues are navigation vs. other tracks of alternative languages
   *
   * @extends TextTrackButton
   */
  class ChaptersButton extends TextTrackButton {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     *
     * @param {Function} [ready]
     *        The function to call when this function is ready.
     */
    constructor(player, options, ready) {
      super(player, options, ready);
      this.selectCurrentItem_ = () => {
        this.items.forEach(item => {
          item.selected(this.track_.activeCues[0] === item.cue);
        });
      };
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */
    buildCSSClass() {
      return `vjs-chapters-button ${super.buildCSSClass()}`;
    }
    buildWrapperCSSClass() {
      return `vjs-chapters-button ${super.buildWrapperCSSClass()}`;
    }

    /**
     * Update the menu based on the current state of its items.
     *
     * @param {Event} [event]
     *        An event that triggered this function to run.
     *
     * @listens TextTrackList#addtrack
     * @listens TextTrackList#removetrack
     * @listens TextTrackList#change
     */
    update(event) {
      if (event && event.track && event.track.kind !== 'chapters') {
        return;
      }
      const track = this.findChaptersTrack();
      if (track !== this.track_) {
        this.setTrack(track);
        super.update();
      } else if (!this.items || track && track.cues && track.cues.length !== this.items.length) {
        // Update the menu initially or if the number of cues has changed since set
        super.update();
      }
    }

    /**
     * Set the currently selected track for the chapters button.
     *
     * @param {TextTrack} track
     *        The new track to select. Nothing will change if this is the currently selected
     *        track.
     */
    setTrack(track) {
      if (this.track_ === track) {
        return;
      }
      if (!this.updateHandler_) {
        this.updateHandler_ = this.update.bind(this);
      }

      // here this.track_ refers to the old track instance
      if (this.track_) {
        const remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
        if (remoteTextTrackEl) {
          remoteTextTrackEl.removeEventListener('load', this.updateHandler_);
        }
        this.track_.removeEventListener('cuechange', this.selectCurrentItem_);
        this.track_ = null;
      }
      this.track_ = track;

      // here this.track_ refers to the new track instance
      if (this.track_) {
        this.track_.mode = 'hidden';
        const remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
        if (remoteTextTrackEl) {
          remoteTextTrackEl.addEventListener('load', this.updateHandler_);
        }
        this.track_.addEventListener('cuechange', this.selectCurrentItem_);
      }
    }

    /**
     * Find the track object that is currently in use by this ChaptersButton
     *
     * @return {TextTrack|undefined}
     *         The current track or undefined if none was found.
     */
    findChaptersTrack() {
      const tracks = this.player_.textTracks() || [];
      for (let i = tracks.length - 1; i >= 0; i--) {
        // We will always choose the last track as our chaptersTrack
        const track = tracks[i];
        if (track.kind === this.kind_) {
          return track;
        }
      }
    }

    /**
     * Get the caption for the ChaptersButton based on the track label. This will also
     * use the current tracks localized kind as a fallback if a label does not exist.
     *
     * @return {string}
     *         The tracks current label or the localized track kind.
     */
    getMenuCaption() {
      if (this.track_ && this.track_.label) {
        return this.track_.label;
      }
      return this.localize(toTitleCase(this.kind_));
    }

    /**
     * Create menu from chapter track
     *
     * @return { import('../../menu/menu').default }
     *         New menu for the chapter buttons
     */
    createMenu() {
      this.options_.title = this.getMenuCaption();
      return super.createMenu();
    }

    /**
     * Create a menu item for each text track
     *
     * @return  { import('./text-track-menu-item').default[] }
     *         Array of menu items
     */
    createItems() {
      const items = [];
      if (!this.track_) {
        return items;
      }
      const cues = this.track_.cues;
      if (!cues) {
        return items;
      }
      for (let i = 0, l = cues.length; i < l; i++) {
        const cue = cues[i];
        const mi = new ChaptersTrackMenuItem(this.player_, {
          track: this.track_,
          cue
        });
        items.push(mi);
      }
      return items;
    }
  }

  /**
   * `kind` of TextTrack to look for to associate it with this menu.
   *
   * @type {string}
   * @private
   */
  ChaptersButton.prototype.kind_ = 'chapters';

  /**
   * The text that should display over the `ChaptersButton`s controls. Added for localization.
   *
   * @type {string}
   * @protected
   */
  ChaptersButton.prototype.controlText_ = 'Chapters';
  Component.registerComponent('ChaptersButton', ChaptersButton);

  /**
   * @file descriptions-button.js
   */

  /**
   * The button component for toggling and selecting descriptions
   *
   * @extends TextTrackButton
   */
  class DescriptionsButton extends TextTrackButton {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     *
     * @param {Function} [ready]
     *        The function to call when this component is ready.
     */
    constructor(player, options, ready) {
      super(player, options, ready);
      const tracks = player.textTracks();
      const changeHandler = bind_(this, this.handleTracksChange);
      tracks.addEventListener('change', changeHandler);
      this.on('dispose', function () {
        tracks.removeEventListener('change', changeHandler);
      });
    }

    /**
     * Handle text track change
     *
     * @param {Event} event
     *        The event that caused this function to run
     *
     * @listens TextTrackList#change
     */
    handleTracksChange(event) {
      const tracks = this.player().textTracks();
      let disabled = false;

      // Check whether a track of a different kind is showing
      for (let i = 0, l = tracks.length; i < l; i++) {
        const track = tracks[i];
        if (track.kind !== this.kind_ && track.mode === 'showing') {
          disabled = true;
          break;
        }
      }

      // If another track is showing, disable this menu button
      if (disabled) {
        this.disable();
      } else {
        this.enable();
      }
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */
    buildCSSClass() {
      return `vjs-descriptions-button ${super.buildCSSClass()}`;
    }
    buildWrapperCSSClass() {
      return `vjs-descriptions-button ${super.buildWrapperCSSClass()}`;
    }
  }

  /**
   * `kind` of TextTrack to look for to associate it with this menu.
   *
   * @type {string}
   * @private
   */
  DescriptionsButton.prototype.kind_ = 'descriptions';

  /**
   * The text that should display over the `DescriptionsButton`s controls. Added for localization.
   *
   * @type {string}
   * @protected
   */
  DescriptionsButton.prototype.controlText_ = 'Descriptions';
  Component.registerComponent('DescriptionsButton', DescriptionsButton);

  /**
   * @file subtitles-button.js
   */

  /**
   * The button component for toggling and selecting subtitles
   *
   * @extends TextTrackButton
   */
  class SubtitlesButton extends TextTrackButton {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     *
     * @param {Function} [ready]
     *        The function to call when this component is ready.
     */
    constructor(player, options, ready) {
      super(player, options, ready);
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */
    buildCSSClass() {
      return `vjs-subtitles-button ${super.buildCSSClass()}`;
    }
    buildWrapperCSSClass() {
      return `vjs-subtitles-button ${super.buildWrapperCSSClass()}`;
    }
  }

  /**
   * `kind` of TextTrack to look for to associate it with this menu.
   *
   * @type {string}
   * @private
   */
  SubtitlesButton.prototype.kind_ = 'subtitles';

  /**
   * The text that should display over the `SubtitlesButton`s controls. Added for localization.
   *
   * @type {string}
   * @protected
   */
  SubtitlesButton.prototype.controlText_ = 'Subtitles';
  Component.registerComponent('SubtitlesButton', SubtitlesButton);

  /**
   * @file caption-settings-menu-item.js
   */

  /**
   * The menu item for caption track settings menu
   *
   * @extends TextTrackMenuItem
   */
  class CaptionSettingsMenuItem extends TextTrackMenuItem {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      options.track = {
        player,
        kind: options.kind,
        label: options.kind + ' settings',
        selectable: false,
        default: false,
        mode: 'disabled'
      };

      // CaptionSettingsMenuItem has no concept of 'selected'
      options.selectable = false;
      options.name = 'CaptionSettingsMenuItem';
      super(player, options);
      this.addClass('vjs-texttrack-settings');
      this.controlText(', opens ' + options.kind + ' settings dialog');
    }

    /**
     * This gets called when an `CaptionSettingsMenuItem` is "clicked". See
     * {@link ClickableComponent} for more detailed information on what a click can be.
     *
     * @param {Event} [event]
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */
    handleClick(event) {
      this.player().getChild('textTrackSettings').open();
    }

    /**
     * Update control text and label on languagechange
     */
    handleLanguagechange() {
      this.$('.vjs-menu-item-text').textContent = this.player_.localize(this.options_.kind + ' settings');
      super.handleLanguagechange();
    }
  }
  Component.registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);

  /**
   * @file captions-button.js
   */

  /**
   * The button component for toggling and selecting captions
   *
   * @extends TextTrackButton
   */
  class CaptionsButton extends TextTrackButton {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     *
     * @param {Function} [ready]
     *        The function to call when this component is ready.
     */
    constructor(player, options, ready) {
      super(player, options, ready);
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */
    buildCSSClass() {
      return `vjs-captions-button ${super.buildCSSClass()}`;
    }
    buildWrapperCSSClass() {
      return `vjs-captions-button ${super.buildWrapperCSSClass()}`;
    }

    /**
     * Create caption menu items
     *
     * @return {CaptionSettingsMenuItem[]}
     *         The array of current menu items.
     */
    createItems() {
      const items = [];
      if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {
        items.push(new CaptionSettingsMenuItem(this.player_, {
          kind: this.kind_
        }));
        this.hideThreshold_ += 1;
      }
      return super.createItems(items);
    }
  }

  /**
   * `kind` of TextTrack to look for to associate it with this menu.
   *
   * @type {string}
   * @private
   */
  CaptionsButton.prototype.kind_ = 'captions';

  /**
   * The text that should display over the `CaptionsButton`s controls. Added for localization.
   *
   * @type {string}
   * @protected
   */
  CaptionsButton.prototype.controlText_ = 'Captions';
  Component.registerComponent('CaptionsButton', CaptionsButton);

  /**
   * @file subs-caps-menu-item.js
   */

  /**
   * SubsCapsMenuItem has an [cc] icon to distinguish captions from subtitles
   * in the SubsCapsMenu.
   *
   * @extends TextTrackMenuItem
   */
  class SubsCapsMenuItem extends TextTrackMenuItem {
    createEl(type, props, attrs) {
      const el = super.createEl(type, props, attrs);
      const parentSpan = el.querySelector('.vjs-menu-item-text');
      if (this.options_.track.kind === 'captions') {
        parentSpan.appendChild(createEl('span', {
          className: 'vjs-icon-placeholder'
        }, {
          'aria-hidden': true
        }));
        parentSpan.appendChild(createEl('span', {
          className: 'vjs-control-text',
          // space added as the text will visually flow with the
          // label
          textContent: ` ${this.localize('Captions')}`
        }));
      }
      return el;
    }
  }
  Component.registerComponent('SubsCapsMenuItem', SubsCapsMenuItem);

  /**
   * @file sub-caps-button.js
   */

  /**
   * The button component for toggling and selecting captions and/or subtitles
   *
   * @extends TextTrackButton
   */
  class SubsCapsButton extends TextTrackButton {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     *
     * @param {Function} [ready]
     *        The function to call when this component is ready.
     */
    constructor(player, options = {}) {
      super(player, options);

      // Although North America uses "captions" in most cases for
      // "captions and subtitles" other locales use "subtitles"
      this.label_ = 'subtitles';
      if (['en', 'en-us', 'en-ca', 'fr-ca'].indexOf(this.player_.language_) > -1) {
        this.label_ = 'captions';
      }
      this.menuButton_.controlText(toTitleCase(this.label_));
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */
    buildCSSClass() {
      return `vjs-subs-caps-button ${super.buildCSSClass()}`;
    }
    buildWrapperCSSClass() {
      return `vjs-subs-caps-button ${super.buildWrapperCSSClass()}`;
    }

    /**
     * Create caption/subtitles menu items
     *
     * @return {CaptionSettingsMenuItem[]}
     *         The array of current menu items.
     */
    createItems() {
      let items = [];
      if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {
        items.push(new CaptionSettingsMenuItem(this.player_, {
          kind: this.label_
        }));
        this.hideThreshold_ += 1;
      }
      items = super.createItems(items, SubsCapsMenuItem);
      return items;
    }
  }

  /**
   * `kind`s of TextTrack to look for to associate it with this menu.
   *
   * @type {array}
   * @private
   */
  SubsCapsButton.prototype.kinds_ = ['captions', 'subtitles'];

  /**
   * The text that should display over the `SubsCapsButton`s controls.
   *
   *
   * @type {string}
   * @protected
   */
  SubsCapsButton.prototype.controlText_ = 'Subtitles';
  Component.registerComponent('SubsCapsButton', SubsCapsButton);

  /**
   * @file audio-track-menu-item.js
   */

  /**
   * An {@link AudioTrack} {@link MenuItem}
   *
   * @extends MenuItem
   */
  class AudioTrackMenuItem extends MenuItem {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      const track = options.track;
      const tracks = player.audioTracks();

      // Modify options for parent MenuItem class's init.
      options.label = track.label || track.language || 'Unknown';
      options.selected = track.enabled;
      super(player, options);
      this.track = track;
      this.addClass(`vjs-${track.kind}-menu-item`);
      const changeHandler = (...args) => {
        this.handleTracksChange.apply(this, args);
      };
      tracks.addEventListener('change', changeHandler);
      this.on('dispose', () => {
        tracks.removeEventListener('change', changeHandler);
      });
    }
    createEl(type, props, attrs) {
      const el = super.createEl(type, props, attrs);
      const parentSpan = el.querySelector('.vjs-menu-item-text');
      if (this.options_.track.kind === 'main-desc') {
        parentSpan.appendChild(createEl('span', {
          className: 'vjs-icon-placeholder'
        }, {
          'aria-hidden': true
        }));
        parentSpan.appendChild(createEl('span', {
          className: 'vjs-control-text',
          textContent: ' ' + this.localize('Descriptions')
        }));
      }
      return el;
    }

    /**
     * This gets called when an `AudioTrackMenuItem is "clicked". See {@link ClickableComponent}
     * for more detailed information on what a click can be.
     *
     * @param {Event} [event]
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */
    handleClick(event) {
      super.handleClick(event);

      // the audio track list will automatically toggle other tracks
      // off for us.
      this.track.enabled = true;

      // when native audio tracks are used, we want to make sure that other tracks are turned off
      if (this.player_.tech_.featuresNativeAudioTracks) {
        const tracks = this.player_.audioTracks();
        for (let i = 0; i < tracks.length; i++) {
          const track = tracks[i];

          // skip the current track since we enabled it above
          if (track === this.track) {
            continue;
          }
          track.enabled = track === this.track;
        }
      }
    }

    /**
     * Handle any {@link AudioTrack} change.
     *
     * @param {Event} [event]
     *        The {@link AudioTrackList#change} event that caused this to run.
     *
     * @listens AudioTrackList#change
     */
    handleTracksChange(event) {
      this.selected(this.track.enabled);
    }
  }
  Component.registerComponent('AudioTrackMenuItem', AudioTrackMenuItem);

  /**
   * @file audio-track-button.js
   */

  /**
   * The base class for buttons that toggle specific {@link AudioTrack} types.
   *
   * @extends TrackButton
   */
  class AudioTrackButton extends TrackButton {
    /**
     * Creates an instance of this class.
     *
     * @param {Player} player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options={}]
     *        The key/value store of player options.
     */
    constructor(player, options = {}) {
      options.tracks = player.audioTracks();
      super(player, options);
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */
    buildCSSClass() {
      return `vjs-audio-button ${super.buildCSSClass()}`;
    }
    buildWrapperCSSClass() {
      return `vjs-audio-button ${super.buildWrapperCSSClass()}`;
    }

    /**
     * Create a menu item for each audio track
     *
     * @param {AudioTrackMenuItem[]} [items=[]]
     *        An array of existing menu items to use.
     *
     * @return {AudioTrackMenuItem[]}
     *         An array of menu items
     */
    createItems(items = []) {
      // if there's only one audio track, there no point in showing it
      this.hideThreshold_ = 1;
      const tracks = this.player_.audioTracks();
      for (let i = 0; i < tracks.length; i++) {
        const track = tracks[i];
        items.push(new AudioTrackMenuItem(this.player_, {
          track,
          // MenuItem is selectable
          selectable: true,
          // MenuItem is NOT multiSelectable (i.e. only one can be marked "selected" at a time)
          multiSelectable: false
        }));
      }
      return items;
    }
  }

  /**
   * The text that should display over the `AudioTrackButton`s controls. Added for localization.
   *
   * @type {string}
   * @protected
   */
  AudioTrackButton.prototype.controlText_ = 'Audio Track';
  Component.registerComponent('AudioTrackButton', AudioTrackButton);

  /**
   * @file playback-rate-menu-item.js
   */

  /**
   * The specific menu item type for selecting a playback rate.
   *
   * @extends MenuItem
   */
  class PlaybackRateMenuItem extends MenuItem {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      const label = options.rate;
      const rate = parseFloat(label, 10);

      // Modify options for parent MenuItem class's init.
      options.label = label;
      options.selected = rate === player.playbackRate();
      options.selectable = true;
      options.multiSelectable = false;
      super(player, options);
      this.label = label;
      this.rate = rate;
      this.on(player, 'ratechange', e => this.update(e));
    }

    /**
     * This gets called when an `PlaybackRateMenuItem` is "clicked". See
     * {@link ClickableComponent} for more detailed information on what a click can be.
     *
     * @param {Event} [event]
     *        The `keydown`, `tap`, or `click` event that caused this function to be
     *        called.
     *
     * @listens tap
     * @listens click
     */
    handleClick(event) {
      super.handleClick();
      this.player().playbackRate(this.rate);
    }

    /**
     * Update the PlaybackRateMenuItem when the playbackrate changes.
     *
     * @param {Event} [event]
     *        The `ratechange` event that caused this function to run.
     *
     * @listens Player#ratechange
     */
    update(event) {
      this.selected(this.player().playbackRate() === this.rate);
    }
  }

  /**
   * The text that should display over the `PlaybackRateMenuItem`s controls. Added for localization.
   *
   * @type {string}
   * @private
   */
  PlaybackRateMenuItem.prototype.contentElType = 'button';
  Component.registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);

  /**
   * @file playback-rate-menu-button.js
   */

  /**
   * The component for controlling the playback rate.
   *
   * @extends MenuButton
   */
  class PlaybackRateMenuButton extends MenuButton {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../../player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     */
    constructor(player, options) {
      super(player, options);
      this.menuButton_.el_.setAttribute('aria-describedby', this.labelElId_);
      this.updateVisibility();
      this.updateLabel();
      this.on(player, 'loadstart', e => this.updateVisibility(e));
      this.on(player, 'ratechange', e => this.updateLabel(e));
      this.on(player, 'playbackrateschange', e => this.handlePlaybackRateschange(e));
    }

    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      const el = super.createEl();
      this.labelElId_ = 'vjs-playback-rate-value-label-' + this.id_;
      this.labelEl_ = createEl('div', {
        className: 'vjs-playback-rate-value',
        id: this.labelElId_,
        textContent: '1x'
      });
      el.appendChild(this.labelEl_);
      return el;
    }
    dispose() {
      this.labelEl_ = null;
      super.dispose();
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */
    buildCSSClass() {
      return `vjs-playback-rate ${super.buildCSSClass()}`;
    }
    buildWrapperCSSClass() {
      return `vjs-playback-rate ${super.buildWrapperCSSClass()}`;
    }

    /**
     * Create the list of menu items. Specific to each subclass.
     *
     */
    createItems() {
      const rates = this.playbackRates();
      const items = [];
      for (let i = rates.length - 1; i >= 0; i--) {
        items.push(new PlaybackRateMenuItem(this.player(), {
          rate: rates[i] + 'x'
        }));
      }
      return items;
    }

    /**
     * On playbackrateschange, update the menu to account for the new items.
     *
     * @listens Player#playbackrateschange
     */
    handlePlaybackRateschange(event) {
      this.update();
    }

    /**
     * Get possible playback rates
     *
     * @return {Array}
     *         All possible playback rates
     */
    playbackRates() {
      const player = this.player();
      return player.playbackRates && player.playbackRates() || [];
    }

    /**
     * Get whether playback rates is supported by the tech
     * and an array of playback rates exists
     *
     * @return {boolean}
     *         Whether changing playback rate is supported
     */
    playbackRateSupported() {
      return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;
    }

    /**
     * Hide playback rate controls when they're no playback rate options to select
     *
     * @param {Event} [event]
     *        The event that caused this function to run.
     *
     * @listens Player#loadstart
     */
    updateVisibility(event) {
      if (this.playbackRateSupported()) {
        this.removeClass('vjs-hidden');
      } else {
        this.addClass('vjs-hidden');
      }
    }

    /**
     * Update button label when rate changed
     *
     * @param {Event} [event]
     *        The event that caused this function to run.
     *
     * @listens Player#ratechange
     */
    updateLabel(event) {
      if (this.playbackRateSupported()) {
        this.labelEl_.textContent = this.player().playbackRate() + 'x';
      }
    }
  }

  /**
   * The text that should display over the `PlaybackRateMenuButton`s controls.
   *
   * Added for localization.
   *
   * @type {string}
   * @protected
   */
  PlaybackRateMenuButton.prototype.controlText_ = 'Playback Rate';
  Component.registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);

  /**
   * @file spacer.js
   */

  /**
   * Just an empty spacer element that can be used as an append point for plugins, etc.
   * Also can be used to create space between elements when necessary.
   *
   * @extends Component
   */
  class Spacer extends Component {
    /**
    * Builds the default DOM `className`.
    *
    * @return {string}
    *         The DOM `className` for this object.
    */
    buildCSSClass() {
      return `vjs-spacer ${super.buildCSSClass()}`;
    }

    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl(tag = 'div', props = {}, attributes = {}) {
      if (!props.className) {
        props.className = this.buildCSSClass();
      }
      return super.createEl(tag, props, attributes);
    }
  }
  Component.registerComponent('Spacer', Spacer);

  /**
   * @file custom-control-spacer.js
   */

  /**
   * Spacer specifically meant to be used as an insertion point for new plugins, etc.
   *
   * @extends Spacer
   */
  class CustomControlSpacer extends Spacer {
    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     */
    buildCSSClass() {
      return `vjs-custom-control-spacer ${super.buildCSSClass()}`;
    }

    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      return super.createEl('div', {
        className: this.buildCSSClass(),
        // No-flex/table-cell mode requires there be some content
        // in the cell to fill the remaining space of the table.
        textContent: '\u00a0'
      });
    }
  }
  Component.registerComponent('CustomControlSpacer', CustomControlSpacer);

  /**
   * @file control-bar.js
   */

  /**
   * Container of main controls.
   *
   * @extends Component
   */
  class ControlBar extends Component {
    /**
     * Create the `Component`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      return super.createEl('div', {
        className: 'vjs-control-bar',
        dir: 'ltr'
      });
    }
  }

  /**
   * Default options for `ControlBar`
   *
   * @type {Object}
   * @private
   */
  ControlBar.prototype.options_ = {
    children: ['playToggle', 'skipBackward', 'skipForward', 'volumePanel', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'seekToLive', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'chaptersButton', 'descriptionsButton', 'subsCapsButton', 'audioTrackButton', 'fullscreenToggle']
  };
  if ('exitPictureInPicture' in document) {
    ControlBar.prototype.options_.children.splice(ControlBar.prototype.options_.children.length - 1, 0, 'pictureInPictureToggle');
  }
  Component.registerComponent('ControlBar', ControlBar);

  /**
   * @file error-display.js
   */

  /**
   * A display that indicates an error has occurred. This means that the video
   * is unplayable.
   *
   * @extends ModalDialog
   */
  class ErrorDisplay extends ModalDialog {
    /**
     * Creates an instance of this class.
     *
     * @param  { import('./player').default } player
     *         The `Player` that this class should be attached to.
     *
     * @param  {Object} [options]
     *         The key/value store of player options.
     */
    constructor(player, options) {
      super(player, options);
      this.on(player, 'error', e => this.open(e));
    }

    /**
     * Builds the default DOM `className`.
     *
     * @return {string}
     *         The DOM `className` for this object.
     *
     * @deprecated Since version 5.
     */
    buildCSSClass() {
      return `vjs-error-display ${super.buildCSSClass()}`;
    }

    /**
     * Gets the localized error message based on the `Player`s error.
     *
     * @return {string}
     *         The `Player`s error message localized or an empty string.
     */
    content() {
      const error = this.player().error();
      return error ? this.localize(error.message) : '';
    }
  }

  /**
   * The default options for an `ErrorDisplay`.
   *
   * @private
   */
  ErrorDisplay.prototype.options_ = Object.assign({}, ModalDialog.prototype.options_, {
    pauseOnOpen: false,
    fillAlways: true,
    temporary: false,
    uncloseable: true
  });
  Component.registerComponent('ErrorDisplay', ErrorDisplay);

  /**
   * @file text-track-settings.js
   */
  const LOCAL_STORAGE_KEY = 'vjs-text-track-settings';
  const COLOR_BLACK = ['#000', 'Black'];
  const COLOR_BLUE = ['#00F', 'Blue'];
  const COLOR_CYAN = ['#0FF', 'Cyan'];
  const COLOR_GREEN = ['#0F0', 'Green'];
  const COLOR_MAGENTA = ['#F0F', 'Magenta'];
  const COLOR_RED = ['#F00', 'Red'];
  const COLOR_WHITE = ['#FFF', 'White'];
  const COLOR_YELLOW = ['#FF0', 'Yellow'];
  const OPACITY_OPAQUE = ['1', 'Opaque'];
  const OPACITY_SEMI = ['0.5', 'Semi-Transparent'];
  const OPACITY_TRANS = ['0', 'Transparent'];

  // Configuration for the various <select> elements in the DOM of this component.
  //
  // Possible keys include:
  //
  // `default`:
  //   The default option index. Only needs to be provided if not zero.
  // `parser`:
  //   A function which is used to parse the value from the selected option in
  //   a customized way.
  // `selector`:
  //   The selector used to find the associated <select> element.
  const selectConfigs = {
    backgroundColor: {
      selector: '.vjs-bg-color > select',
      id: 'captions-background-color-%s',
      label: 'Color',
      options: [COLOR_BLACK, COLOR_WHITE, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
    },
    backgroundOpacity: {
      selector: '.vjs-bg-opacity > select',
      id: 'captions-background-opacity-%s',
      label: 'Opacity',
      options: [OPACITY_OPAQUE, OPACITY_SEMI, OPACITY_TRANS]
    },
    color: {
      selector: '.vjs-text-color > select',
      id: 'captions-foreground-color-%s',
      label: 'Color',
      options: [COLOR_WHITE, COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
    },
    edgeStyle: {
      selector: '.vjs-edge-style > select',
      id: '%s',
      label: 'Text Edge Style',
      options: [['none', 'None'], ['raised', 'Raised'], ['depressed', 'Depressed'], ['uniform', 'Uniform'], ['dropshadow', 'Dropshadow']]
    },
    fontFamily: {
      selector: '.vjs-font-family > select',
      id: 'captions-font-family-%s',
      label: 'Font Family',
      options: [['proportionalSansSerif', 'Proportional Sans-Serif'], ['monospaceSansSerif', 'Monospace Sans-Serif'], ['proportionalSerif', 'Proportional Serif'], ['monospaceSerif', 'Monospace Serif'], ['casual', 'Casual'], ['script', 'Script'], ['small-caps', 'Small Caps']]
    },
    fontPercent: {
      selector: '.vjs-font-percent > select',
      id: 'captions-font-size-%s',
      label: 'Font Size',
      options: [['0.50', '50%'], ['0.75', '75%'], ['1.00', '100%'], ['1.25', '125%'], ['1.50', '150%'], ['1.75', '175%'], ['2.00', '200%'], ['3.00', '300%'], ['4.00', '400%']],
      default: 2,
      parser: v => v === '1.00' ? null : Number(v)
    },
    textOpacity: {
      selector: '.vjs-text-opacity > select',
      id: 'captions-foreground-opacity-%s',
      label: 'Opacity',
      options: [OPACITY_OPAQUE, OPACITY_SEMI]
    },
    // Options for this object are defined below.
    windowColor: {
      selector: '.vjs-window-color > select',
      id: 'captions-window-color-%s',
      label: 'Color'
    },
    // Options for this object are defined below.
    windowOpacity: {
      selector: '.vjs-window-opacity > select',
      id: 'captions-window-opacity-%s',
      label: 'Opacity',
      options: [OPACITY_TRANS, OPACITY_SEMI, OPACITY_OPAQUE]
    }
  };
  selectConfigs.windowColor.options = selectConfigs.backgroundColor.options;

  /**
   * Get the actual value of an option.
   *
   * @param  {string} value
   *         The value to get
   *
   * @param  {Function} [parser]
   *         Optional function to adjust the value.
   *
   * @return {*}
   *         - Will be `undefined` if no value exists
   *         - Will be `undefined` if the given value is "none".
   *         - Will be the actual value otherwise.
   *
   * @private
   */
  function parseOptionValue(value, parser) {
    if (parser) {
      value = parser(value);
    }
    if (value && value !== 'none') {
      return value;
    }
  }

  /**
   * Gets the value of the selected <option> element within a <select> element.
   *
   * @param  {Element} el
   *         the element to look in
   *
   * @param  {Function} [parser]
   *         Optional function to adjust the value.
   *
   * @return {*}
   *         - Will be `undefined` if no value exists
   *         - Will be `undefined` if the given value is "none".
   *         - Will be the actual value otherwise.
   *
   * @private
   */
  function getSelectedOptionValue(el, parser) {
    const value = el.options[el.options.selectedIndex].value;
    return parseOptionValue(value, parser);
  }

  /**
   * Sets the selected <option> element within a <select> element based on a
   * given value.
   *
   * @param {Element} el
   *        The element to look in.
   *
   * @param {string} value
   *        the property to look on.
   *
   * @param {Function} [parser]
   *        Optional function to adjust the value before comparing.
   *
   * @private
   */
  function setSelectedOption(el, value, parser) {
    if (!value) {
      return;
    }
    for (let i = 0; i < el.options.length; i++) {
      if (parseOptionValue(el.options[i].value, parser) === value) {
        el.selectedIndex = i;
        break;
      }
    }
  }

  /**
   * Manipulate Text Tracks settings.
   *
   * @extends ModalDialog
   */
  class TextTrackSettings extends ModalDialog {
    /**
     * Creates an instance of this class.
     *
     * @param { import('../player').default } player
     *         The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *         The key/value store of player options.
     */
    constructor(player, options) {
      options.temporary = false;
      super(player, options);
      this.updateDisplay = this.updateDisplay.bind(this);

      // fill the modal and pretend we have opened it
      this.fill();
      this.hasBeenOpened_ = this.hasBeenFilled_ = true;
      this.endDialog = createEl('p', {
        className: 'vjs-control-text',
        textContent: this.localize('End of dialog window.')
      });
      this.el().appendChild(this.endDialog);
      this.setDefaults();

      // Grab `persistTextTrackSettings` from the player options if not passed in child options
      if (options.persistTextTrackSettings === undefined) {
        this.options_.persistTextTrackSettings = this.options_.playerOptions.persistTextTrackSettings;
      }
      this.on(this.$('.vjs-done-button'), 'click', () => {
        this.saveSettings();
        this.close();
      });
      this.on(this.$('.vjs-default-button'), 'click', () => {
        this.setDefaults();
        this.updateDisplay();
      });
      each(selectConfigs, config => {
        this.on(this.$(config.selector), 'change', this.updateDisplay);
      });
      if (this.options_.persistTextTrackSettings) {
        this.restoreSettings();
      }
    }
    dispose() {
      this.endDialog = null;
      super.dispose();
    }

    /**
     * Create a <select> element with configured options.
     *
     * @param {string} key
     *        Configuration key to use during creation.
     *
     * @return {string}
     *         An HTML string.
     *
     * @private
     */
    createElSelect_(key, legendId = '', type = 'label') {
      const config = selectConfigs[key];
      const id = config.id.replace('%s', this.id_);
      const selectLabelledbyIds = [legendId, id].join(' ').trim();
      return [`<${type} id="${id}" class="${type === 'label' ? 'vjs-label' : ''}">`, this.localize(config.label), `</${type}>`, `<select aria-labelledby="${selectLabelledbyIds}">`].concat(config.options.map(o => {
        const optionId = id + '-' + o[1].replace(/\W+/g, '');
        return [`<option id="${optionId}" value="${o[0]}" `, `aria-labelledby="${selectLabelledbyIds} ${optionId}">`, this.localize(o[1]), '</option>'].join('');
      })).concat('</select>').join('');
    }

    /**
     * Create foreground color element for the component
     *
     * @return {string}
     *         An HTML string.
     *
     * @private
     */
    createElFgColor_() {
      const legendId = `captions-text-legend-${this.id_}`;
      return ['<fieldset class="vjs-fg vjs-track-setting">', `<legend id="${legendId}">`, this.localize('Text'), '</legend>', '<span class="vjs-text-color">', this.createElSelect_('color', legendId), '</span>', '<span class="vjs-text-opacity vjs-opacity">', this.createElSelect_('textOpacity', legendId), '</span>', '</fieldset>'].join('');
    }

    /**
     * Create background color element for the component
     *
     * @return {string}
     *         An HTML string.
     *
     * @private
     */
    createElBgColor_() {
      const legendId = `captions-background-${this.id_}`;
      return ['<fieldset class="vjs-bg vjs-track-setting">', `<legend id="${legendId}">`, this.localize('Text Background'), '</legend>', '<span class="vjs-bg-color">', this.createElSelect_('backgroundColor', legendId), '</span>', '<span class="vjs-bg-opacity vjs-opacity">', this.createElSelect_('backgroundOpacity', legendId), '</span>', '</fieldset>'].join('');
    }

    /**
     * Create window color element for the component
     *
     * @return {string}
     *         An HTML string.
     *
     * @private
     */
    createElWinColor_() {
      const legendId = `captions-window-${this.id_}`;
      return ['<fieldset class="vjs-window vjs-track-setting">', `<legend id="${legendId}">`, this.localize('Caption Area Background'), '</legend>', '<span class="vjs-window-color">', this.createElSelect_('windowColor', legendId), '</span>', '<span class="vjs-window-opacity vjs-opacity">', this.createElSelect_('windowOpacity', legendId), '</span>', '</fieldset>'].join('');
    }

    /**
     * Create color elements for the component
     *
     * @return {Element}
     *         The element that was created
     *
     * @private
     */
    createElColors_() {
      return createEl('div', {
        className: 'vjs-track-settings-colors',
        innerHTML: [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()].join('')
      });
    }

    /**
     * Create font elements for the component
     *
     * @return {Element}
     *         The element that was created.
     *
     * @private
     */
    createElFont_() {
      return createEl('div', {
        className: 'vjs-track-settings-font',
        innerHTML: ['<fieldset class="vjs-font-percent vjs-track-setting">', this.createElSelect_('fontPercent', '', 'legend'), '</fieldset>', '<fieldset class="vjs-edge-style vjs-track-setting">', this.createElSelect_('edgeStyle', '', 'legend'), '</fieldset>', '<fieldset class="vjs-font-family vjs-track-setting">', this.createElSelect_('fontFamily', '', 'legend'), '</fieldset>'].join('')
      });
    }

    /**
     * Create controls for the component
     *
     * @return {Element}
     *         The element that was created.
     *
     * @private
     */
    createElControls_() {
      const defaultsDescription = this.localize('restore all settings to the default values');
      return createEl('div', {
        className: 'vjs-track-settings-controls',
        innerHTML: [`<button type="button" class="vjs-default-button" title="${defaultsDescription}">`, this.localize('Reset'), `<span class="vjs-control-text"> ${defaultsDescription}</span>`, '</button>', `<button type="button" class="vjs-done-button">${this.localize('Done')}</button>`].join('')
      });
    }
    content() {
      return [this.createElColors_(), this.createElFont_(), this.createElControls_()];
    }
    label() {
      return this.localize('Caption Settings Dialog');
    }
    description() {
      return this.localize('Beginning of dialog window. Escape will cancel and close the window.');
    }
    buildCSSClass() {
      return super.buildCSSClass() + ' vjs-text-track-settings';
    }

    /**
     * Gets an object of text track settings (or null).
     *
     * @return {Object}
     *         An object with config values parsed from the DOM or localStorage.
     */
    getValues() {
      return reduce(selectConfigs, (accum, config, key) => {
        const value = getSelectedOptionValue(this.$(config.selector), config.parser);
        if (value !== undefined) {
          accum[key] = value;
        }
        return accum;
      }, {});
    }

    /**
     * Sets text track settings from an object of values.
     *
     * @param {Object} values
     *        An object with config values parsed from the DOM or localStorage.
     */
    setValues(values) {
      each(selectConfigs, (config, key) => {
        setSelectedOption(this.$(config.selector), values[key], config.parser);
      });
    }

    /**
     * Sets all `<select>` elements to their default values.
     */
    setDefaults() {
      each(selectConfigs, config => {
        const index = config.hasOwnProperty('default') ? config.default : 0;
        this.$(config.selector).selectedIndex = index;
      });
    }

    /**
     * Restore texttrack settings from localStorage
     */
    restoreSettings() {
      let values;
      try {
        values = JSON.parse(window.localStorage.getItem(LOCAL_STORAGE_KEY));
      } catch (err) {
        log.warn(err);
      }
      if (values) {
        this.setValues(values);
      }
    }

    /**
     * Save text track settings to localStorage
     */
    saveSettings() {
      if (!this.options_.persistTextTrackSettings) {
        return;
      }
      const values = this.getValues();
      try {
        if (Object.keys(values).length) {
          window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(values));
        } else {
          window.localStorage.removeItem(LOCAL_STORAGE_KEY);
        }
      } catch (err) {
        log.warn(err);
      }
    }

    /**
     * Update display of text track settings
     */
    updateDisplay() {
      const ttDisplay = this.player_.getChild('textTrackDisplay');
      if (ttDisplay) {
        ttDisplay.updateDisplay();
      }
    }

    /**
     * conditionally blur the element and refocus the captions button
     *
     * @private
     */
    conditionalBlur_() {
      this.previouslyActiveEl_ = null;
      const cb = this.player_.controlBar;
      const subsCapsBtn = cb && cb.subsCapsButton;
      const ccBtn = cb && cb.captionsButton;
      if (subsCapsBtn) {
        subsCapsBtn.focus();
      } else if (ccBtn) {
        ccBtn.focus();
      }
    }

    /**
     * Repopulate dialog with new localizations on languagechange
     */
    handleLanguagechange() {
      this.fill();
    }
  }
  Component.registerComponent('TextTrackSettings', TextTrackSettings);

  /**
   * @file resize-manager.js
   */

  /**
   * A Resize Manager. It is in charge of triggering `playerresize` on the player in the right conditions.
   *
   * It'll either create an iframe and use a debounced resize handler on it or use the new {@link https://wicg.github.io/ResizeObserver/|ResizeObserver}.
   *
   * If the ResizeObserver is available natively, it will be used. A polyfill can be passed in as an option.
   * If a `playerresize` event is not needed, the ResizeManager component can be removed from the player, see the example below.
   *
   * @example <caption>How to disable the resize manager</caption>
   * const player = videojs('#vid', {
   *   resizeManager: false
   * });
   *
   * @see {@link https://wicg.github.io/ResizeObserver/|ResizeObserver specification}
   *
   * @extends Component
   */
  class ResizeManager extends Component {
    /**
     * Create the ResizeManager.
     *
     * @param {Object} player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of ResizeManager options.
     *
     * @param {Object} [options.ResizeObserver]
     *        A polyfill for ResizeObserver can be passed in here.
     *        If this is set to null it will ignore the native ResizeObserver and fall back to the iframe fallback.
     */
    constructor(player, options) {
      let RESIZE_OBSERVER_AVAILABLE = options.ResizeObserver || window.ResizeObserver;

      // if `null` was passed, we want to disable the ResizeObserver
      if (options.ResizeObserver === null) {
        RESIZE_OBSERVER_AVAILABLE = false;
      }

      // Only create an element when ResizeObserver isn't available
      const options_ = merge({
        createEl: !RESIZE_OBSERVER_AVAILABLE,
        reportTouchActivity: false
      }, options);
      super(player, options_);
      this.ResizeObserver = options.ResizeObserver || window.ResizeObserver;
      this.loadListener_ = null;
      this.resizeObserver_ = null;
      this.debouncedHandler_ = debounce(() => {
        this.resizeHandler();
      }, 100, false, this);
      if (RESIZE_OBSERVER_AVAILABLE) {
        this.resizeObserver_ = new this.ResizeObserver(this.debouncedHandler_);
        this.resizeObserver_.observe(player.el());
      } else {
        this.loadListener_ = () => {
          if (!this.el_ || !this.el_.contentWindow) {
            return;
          }
          const debouncedHandler_ = this.debouncedHandler_;
          let unloadListener_ = this.unloadListener_ = function () {
            off(this, 'resize', debouncedHandler_);
            off(this, 'unload', unloadListener_);
            unloadListener_ = null;
          };

          // safari and edge can unload the iframe before resizemanager dispose
          // we have to dispose of event handlers correctly before that happens
          on(this.el_.contentWindow, 'unload', unloadListener_);
          on(this.el_.contentWindow, 'resize', debouncedHandler_);
        };
        this.one('load', this.loadListener_);
      }
    }
    createEl() {
      return super.createEl('iframe', {
        className: 'vjs-resize-manager',
        tabIndex: -1,
        title: this.localize('No content')
      }, {
        'aria-hidden': 'true'
      });
    }

    /**
     * Called when a resize is triggered on the iframe or a resize is observed via the ResizeObserver
     *
     * @fires Player#playerresize
     */
    resizeHandler() {
      /**
       * Called when the player size has changed
       *
       * @event Player#playerresize
       * @type {Event}
       */
      // make sure player is still around to trigger
      // prevents this from causing an error after dispose
      if (!this.player_ || !this.player_.trigger) {
        return;
      }
      this.player_.trigger('playerresize');
    }
    dispose() {
      if (this.debouncedHandler_) {
        this.debouncedHandler_.cancel();
      }
      if (this.resizeObserver_) {
        if (this.player_.el()) {
          this.resizeObserver_.unobserve(this.player_.el());
        }
        this.resizeObserver_.disconnect();
      }
      if (this.loadListener_) {
        this.off('load', this.loadListener_);
      }
      if (this.el_ && this.el_.contentWindow && this.unloadListener_) {
        this.unloadListener_.call(this.el_.contentWindow);
      }
      this.ResizeObserver = null;
      this.resizeObserver = null;
      this.debouncedHandler_ = null;
      this.loadListener_ = null;
      super.dispose();
    }
  }
  Component.registerComponent('ResizeManager', ResizeManager);

  const defaults = {
    trackingThreshold: 20,
    liveTolerance: 15
  };

  /*
    track when we are at the live edge, and other helpers for live playback */

  /**
   * A class for checking live current time and determining when the player
   * is at or behind the live edge.
   */
  class LiveTracker extends Component {
    /**
     * Creates an instance of this class.
     *
     * @param { import('./player').default } player
     *        The `Player` that this class should be attached to.
     *
     * @param {Object} [options]
     *        The key/value store of player options.
     *
     * @param {number} [options.trackingThreshold=20]
     *        Number of seconds of live window (seekableEnd - seekableStart) that
     *        media needs to have before the liveui will be shown.
     *
     * @param {number} [options.liveTolerance=15]
     *        Number of seconds behind live that we have to be
     *        before we will be considered non-live. Note that this will only
     *        be used when playing at the live edge. This allows large seekable end
     *        changes to not effect whether we are live or not.
     */
    constructor(player, options) {
      // LiveTracker does not need an element
      const options_ = merge(defaults, options, {
        createEl: false
      });
      super(player, options_);
      this.trackLiveHandler_ = () => this.trackLive_();
      this.handlePlay_ = e => this.handlePlay(e);
      this.handleFirstTimeupdate_ = e => this.handleFirstTimeupdate(e);
      this.handleSeeked_ = e => this.handleSeeked(e);
      this.seekToLiveEdge_ = e => this.seekToLiveEdge(e);
      this.reset_();
      this.on(this.player_, 'durationchange', e => this.handleDurationchange(e));
      // we should try to toggle tracking on canplay as native playback engines, like Safari
      // may not have the proper values for things like seekableEnd until then
      this.on(this.player_, 'canplay', () => this.toggleTracking());
    }

    /**
     * all the functionality for tracking when seek end changes
     * and for tracking how far past seek end we should be
     */
    trackLive_() {
      const seekable = this.player_.seekable();

      // skip undefined seekable
      if (!seekable || !seekable.length) {
        return;
      }
      const newTime = Number(window.performance.now().toFixed(4));
      const deltaTime = this.lastTime_ === -1 ? 0 : (newTime - this.lastTime_) / 1000;
      this.lastTime_ = newTime;
      this.pastSeekEnd_ = this.pastSeekEnd() + deltaTime;
      const liveCurrentTime = this.liveCurrentTime();
      const currentTime = this.player_.currentTime();

      // we are behind live if any are true
      // 1. the player is paused
      // 2. the user seeked to a location 2 seconds away from live
      // 3. the difference between live and current time is greater
      //    liveTolerance which defaults to 15s
      let isBehind = this.player_.paused() || this.seekedBehindLive_ || Math.abs(liveCurrentTime - currentTime) > this.options_.liveTolerance;

      // we cannot be behind if
      // 1. until we have not seen a timeupdate yet
      // 2. liveCurrentTime is Infinity, which happens on Android and Native Safari
      if (!this.timeupdateSeen_ || liveCurrentTime === Infinity) {
        isBehind = false;
      }
      if (isBehind !== this.behindLiveEdge_) {
        this.behindLiveEdge_ = isBehind;
        this.trigger('liveedgechange');
      }
    }

    /**
     * handle a durationchange event on the player
     * and start/stop tracking accordingly.
     */
    handleDurationchange() {
      this.toggleTracking();
    }

    /**
     * start/stop tracking
     */
    toggleTracking() {
      if (this.player_.duration() === Infinity && this.liveWindow() >= this.options_.trackingThreshold) {
        if (this.player_.options_.liveui) {
          this.player_.addClass('vjs-liveui');
        }
        this.startTracking();
      } else {
        this.player_.removeClass('vjs-liveui');
        this.stopTracking();
      }
    }

    /**
     * start tracking live playback
     */
    startTracking() {
      if (this.isTracking()) {
        return;
      }

      // If we haven't seen a timeupdate, we need to check whether playback
      // began before this component started tracking. This can happen commonly
      // when using autoplay.
      if (!this.timeupdateSeen_) {
        this.timeupdateSeen_ = this.player_.hasStarted();
      }
      this.trackingInterval_ = this.setInterval(this.trackLiveHandler_, UPDATE_REFRESH_INTERVAL);
      this.trackLive_();
      this.on(this.player_, ['play', 'pause'], this.trackLiveHandler_);
      if (!this.timeupdateSeen_) {
        this.one(this.player_, 'play', this.handlePlay_);
        this.one(this.player_, 'timeupdate', this.handleFirstTimeupdate_);
      } else {
        this.on(this.player_, 'seeked', this.handleSeeked_);
      }
    }

    /**
     * handle the first timeupdate on the player if it wasn't already playing
     * when live tracker started tracking.
     */
    handleFirstTimeupdate() {
      this.timeupdateSeen_ = true;
      this.on(this.player_, 'seeked', this.handleSeeked_);
    }

    /**
     * Keep track of what time a seek starts, and listen for seeked
     * to find where a seek ends.
     */
    handleSeeked() {
      const timeDiff = Math.abs(this.liveCurrentTime() - this.player_.currentTime());
      this.seekedBehindLive_ = this.nextSeekedFromUser_ && timeDiff > 2;
      this.nextSeekedFromUser_ = false;
      this.trackLive_();
    }

    /**
     * handle the first play on the player, and make sure that we seek
     * right to the live edge.
     */
    handlePlay() {
      this.one(this.player_, 'timeupdate', this.seekToLiveEdge_);
    }

    /**
     * Stop tracking, and set all internal variables to
     * their initial value.
     */
    reset_() {
      this.lastTime_ = -1;
      this.pastSeekEnd_ = 0;
      this.lastSeekEnd_ = -1;
      this.behindLiveEdge_ = true;
      this.timeupdateSeen_ = false;
      this.seekedBehindLive_ = false;
      this.nextSeekedFromUser_ = false;
      this.clearInterval(this.trackingInterval_);
      this.trackingInterval_ = null;
      this.off(this.player_, ['play', 'pause'], this.trackLiveHandler_);
      this.off(this.player_, 'seeked', this.handleSeeked_);
      this.off(this.player_, 'play', this.handlePlay_);
      this.off(this.player_, 'timeupdate', this.handleFirstTimeupdate_);
      this.off(this.player_, 'timeupdate', this.seekToLiveEdge_);
    }

    /**
     * The next seeked event is from the user. Meaning that any seek
     * > 2s behind live will be considered behind live for real and
     * liveTolerance will be ignored.
     */
    nextSeekedFromUser() {
      this.nextSeekedFromUser_ = true;
    }

    /**
     * stop tracking live playback
     */
    stopTracking() {
      if (!this.isTracking()) {
        return;
      }
      this.reset_();
      this.trigger('liveedgechange');
    }

    /**
     * A helper to get the player seekable end
     * so that we don't have to null check everywhere
     *
     * @return {number}
     *         The furthest seekable end or Infinity.
     */
    seekableEnd() {
      const seekable = this.player_.seekable();
      const seekableEnds = [];
      let i = seekable ? seekable.length : 0;
      while (i--) {
        seekableEnds.push(seekable.end(i));
      }

      // grab the furthest seekable end after sorting, or if there are none
      // default to Infinity
      return seekableEnds.length ? seekableEnds.sort()[seekableEnds.length - 1] : Infinity;
    }

    /**
     * A helper to get the player seekable start
     * so that we don't have to null check everywhere
     *
     * @return {number}
     *         The earliest seekable start or 0.
     */
    seekableStart() {
      const seekable = this.player_.seekable();
      const seekableStarts = [];
      let i = seekable ? seekable.length : 0;
      while (i--) {
        seekableStarts.push(seekable.start(i));
      }

      // grab the first seekable start after sorting, or if there are none
      // default to 0
      return seekableStarts.length ? seekableStarts.sort()[0] : 0;
    }

    /**
     * Get the live time window aka
     * the amount of time between seekable start and
     * live current time.
     *
     * @return {number}
     *         The amount of seconds that are seekable in
     *         the live video.
     */
    liveWindow() {
      const liveCurrentTime = this.liveCurrentTime();

      // if liveCurrenTime is Infinity then we don't have a liveWindow at all
      if (liveCurrentTime === Infinity) {
        return 0;
      }
      return liveCurrentTime - this.seekableStart();
    }

    /**
     * Determines if the player is live, only checks if this component
     * is tracking live playback or not
     *
     * @return {boolean}
     *         Whether liveTracker is tracking
     */
    isLive() {
      return this.isTracking();
    }

    /**
     * Determines if currentTime is at the live edge and won't fall behind
     * on each seekableendchange
     *
     * @return {boolean}
     *         Whether playback is at the live edge
     */
    atLiveEdge() {
      return !this.behindLiveEdge();
    }

    /**
     * get what we expect the live current time to be
     *
     * @return {number}
     *         The expected live current time
     */
    liveCurrentTime() {
      return this.pastSeekEnd() + this.seekableEnd();
    }

    /**
     * The number of seconds that have occurred after seekable end
     * changed. This will be reset to 0 once seekable end changes.
     *
     * @return {number}
     *         Seconds past the current seekable end
     */
    pastSeekEnd() {
      const seekableEnd = this.seekableEnd();
      if (this.lastSeekEnd_ !== -1 && seekableEnd !== this.lastSeekEnd_) {
        this.pastSeekEnd_ = 0;
      }
      this.lastSeekEnd_ = seekableEnd;
      return this.pastSeekEnd_;
    }

    /**
     * If we are currently behind the live edge, aka currentTime will be
     * behind on a seekableendchange
     *
     * @return {boolean}
     *         If we are behind the live edge
     */
    behindLiveEdge() {
      return this.behindLiveEdge_;
    }

    /**
     * Whether live tracker is currently tracking or not.
     */
    isTracking() {
      return typeof this.trackingInterval_ === 'number';
    }

    /**
     * Seek to the live edge if we are behind the live edge
     */
    seekToLiveEdge() {
      this.seekedBehindLive_ = false;
      if (this.atLiveEdge()) {
        return;
      }
      this.nextSeekedFromUser_ = false;
      this.player_.currentTime(this.liveCurrentTime());
    }

    /**
     * Dispose of liveTracker
     */
    dispose() {
      this.stopTracking();
      super.dispose();
    }
  }
  Component.registerComponent('LiveTracker', LiveTracker);

  /**
   * Displays an element over the player which contains an optional title and
   * description for the current content.
   *
   * Much of the code for this component originated in the now obsolete
   * videojs-dock plugin: https://github.com/brightcove/videojs-dock/
   *
   * @extends Component
   */
  class TitleBar extends Component {
    constructor(player, options) {
      super(player, options);
      this.on('statechanged', e => this.updateDom_());
      this.updateDom_();
    }

    /**
     * Create the `TitleBar`'s DOM element
     *
     * @return {Element}
     *         The element that was created.
     */
    createEl() {
      this.els = {
        title: createEl('div', {
          className: 'vjs-title-bar-title',
          id: `vjs-title-bar-title-${newGUID()}`
        }),
        description: createEl('div', {
          className: 'vjs-title-bar-description',
          id: `vjs-title-bar-description-${newGUID()}`
        })
      };
      return createEl('div', {
        className: 'vjs-title-bar'
      }, {}, Object.values(this.els));
    }

    /**
     * Updates the DOM based on the component's state object.
     */
    updateDom_() {
      const tech = this.player_.tech_;
      const techEl = tech && tech.el_;
      const techAriaAttrs = {
        title: 'aria-labelledby',
        description: 'aria-describedby'
      };
      ['title', 'description'].forEach(k => {
        const value = this.state[k];
        const el = this.els[k];
        const techAriaAttr = techAriaAttrs[k];
        emptyEl(el);
        if (value) {
          textContent(el, value);
        }

        // If there is a tech element available, update its ARIA attributes
        // according to whether a title and/or description have been provided.
        if (techEl) {
          techEl.removeAttribute(techAriaAttr);
          if (value) {
            techEl.setAttribute(techAriaAttr, el.id);
          }
        }
      });
      if (this.state.title || this.state.description) {
        this.show();
      } else {
        this.hide();
      }
    }

    /**
     * Update the contents of the title bar component with new title and
     * description text.
     *
     * If both title and description are missing, the title bar will be hidden.
     *
     * If either title or description are present, the title bar will be visible.
     *
     * NOTE: Any previously set value will be preserved. To unset a previously
     * set value, you must pass an empty string or null.
     *
     * For example:
     *
     * ```
     * update({title: 'foo', description: 'bar'}) // title: 'foo', description: 'bar'
     * update({description: 'bar2'}) // title: 'foo', description: 'bar2'
     * update({title: ''}) // title: '', description: 'bar2'
     * update({title: 'foo', description: null}) // title: 'foo', description: null
     * ```
     *
     * @param  {Object} [options={}]
     *         An options object. When empty, the title bar will be hidden.
     *
     * @param  {string} [options.title]
     *         A title to display in the title bar.
     *
     * @param  {string} [options.description]
     *         A description to display in the title bar.
     */
    update(options) {
      this.setState(options);
    }

    /**
     * Dispose the component.
     */
    dispose() {
      const tech = this.player_.tech_;
      const techEl = tech && tech.el_;
      if (techEl) {
        techEl.removeAttribute('aria-labelledby');
        techEl.removeAttribute('aria-describedby');
      }
      super.dispose();
      this.els = null;
    }
  }
  Component.registerComponent('TitleBar', TitleBar);

  /**
   * This function is used to fire a sourceset when there is something
   * similar to `mediaEl.load()` being called. It will try to find the source via
   * the `src` attribute and then the `<source>` elements. It will then fire `sourceset`
   * with the source that was found or empty string if we cannot know. If it cannot
   * find a source then `sourceset` will not be fired.
   *
   * @param { import('./html5').default } tech
   *        The tech object that sourceset was setup on
   *
   * @return {boolean}
   *         returns false if the sourceset was not fired and true otherwise.
   */
  const sourcesetLoad = tech => {
    const el = tech.el();

    // if `el.src` is set, that source will be loaded.
    if (el.hasAttribute('src')) {
      tech.triggerSourceset(el.src);
      return true;
    }

    /**
     * Since there isn't a src property on the media element, source elements will be used for
     * implementing the source selection algorithm. This happens asynchronously and
     * for most cases were there is more than one source we cannot tell what source will
     * be loaded, without re-implementing the source selection algorithm. At this time we are not
     * going to do that. There are three special cases that we do handle here though:
     *
     * 1. If there are no sources, do not fire `sourceset`.
     * 2. If there is only one `<source>` with a `src` property/attribute that is our `src`
     * 3. If there is more than one `<source>` but all of them have the same `src` url.
     *    That will be our src.
     */
    const sources = tech.$$('source');
    const srcUrls = [];
    let src = '';

    // if there are no sources, do not fire sourceset
    if (!sources.length) {
      return false;
    }

    // only count valid/non-duplicate source elements
    for (let i = 0; i < sources.length; i++) {
      const url = sources[i].src;
      if (url && srcUrls.indexOf(url) === -1) {
        srcUrls.push(url);
      }
    }

    // there were no valid sources
    if (!srcUrls.length) {
      return false;
    }

    // there is only one valid source element url
    // use that
    if (srcUrls.length === 1) {
      src = srcUrls[0];
    }
    tech.triggerSourceset(src);
    return true;
  };

  /**
   * our implementation of an `innerHTML` descriptor for browsers
   * that do not have one.
   */
  const innerHTMLDescriptorPolyfill = Object.defineProperty({}, 'innerHTML', {
    get() {
      return this.cloneNode(true).innerHTML;
    },
    set(v) {
      // make a dummy node to use innerHTML on
      const dummy = document.createElement(this.nodeName.toLowerCase());

      // set innerHTML to the value provided
      dummy.innerHTML = v;

      // make a document fragment to hold the nodes from dummy
      const docFrag = document.createDocumentFragment();

      // copy all of the nodes created by the innerHTML on dummy
      // to the document fragment
      while (dummy.childNodes.length) {
        docFrag.appendChild(dummy.childNodes[0]);
      }

      // remove content
      this.innerText = '';

      // now we add all of that html in one by appending the
      // document fragment. This is how innerHTML does it.
      window.Element.prototype.appendChild.call(this, docFrag);

      // then return the result that innerHTML's setter would
      return this.innerHTML;
    }
  });

  /**
   * Get a property descriptor given a list of priorities and the
   * property to get.
   */
  const getDescriptor = (priority, prop) => {
    let descriptor = {};
    for (let i = 0; i < priority.length; i++) {
      descriptor = Object.getOwnPropertyDescriptor(priority[i], prop);
      if (descriptor && descriptor.set && descriptor.get) {
        break;
      }
    }
    descriptor.enumerable = true;
    descriptor.configurable = true;
    return descriptor;
  };
  const getInnerHTMLDescriptor = tech => getDescriptor([tech.el(), window.HTMLMediaElement.prototype, window.Element.prototype, innerHTMLDescriptorPolyfill], 'innerHTML');

  /**
   * Patches browser internal functions so that we can tell synchronously
   * if a `<source>` was appended to the media element. For some reason this
   * causes a `sourceset` if the the media element is ready and has no source.
   * This happens when:
   * - The page has just loaded and the media element does not have a source.
   * - The media element was emptied of all sources, then `load()` was called.
   *
   * It does this by patching the following functions/properties when they are supported:
   *
   * - `append()` - can be used to add a `<source>` element to the media element
   * - `appendChild()` - can be used to add a `<source>` element to the media element
   * - `insertAdjacentHTML()` -  can be used to add a `<source>` element to the media element
   * - `innerHTML` -  can be used to add a `<source>` element to the media element
   *
   * @param {Html5} tech
   *        The tech object that sourceset is being setup on.
   */
  const firstSourceWatch = function (tech) {
    const el = tech.el();

    // make sure firstSourceWatch isn't setup twice.
    if (el.resetSourceWatch_) {
      return;
    }
    const old = {};
    const innerDescriptor = getInnerHTMLDescriptor(tech);
    const appendWrapper = appendFn => (...args) => {
      const retval = appendFn.apply(el, args);
      sourcesetLoad(tech);
      return retval;
    };
    ['append', 'appendChild', 'insertAdjacentHTML'].forEach(k => {
      if (!el[k]) {
        return;
      }

      // store the old function
      old[k] = el[k];

      // call the old function with a sourceset if a source
      // was loaded
      el[k] = appendWrapper(old[k]);
    });
    Object.defineProperty(el, 'innerHTML', merge(innerDescriptor, {
      set: appendWrapper(innerDescriptor.set)
    }));
    el.resetSourceWatch_ = () => {
      el.resetSourceWatch_ = null;
      Object.keys(old).forEach(k => {
        el[k] = old[k];
      });
      Object.defineProperty(el, 'innerHTML', innerDescriptor);
    };

    // on the first sourceset, we need to revert our changes
    tech.one('sourceset', el.resetSourceWatch_);
  };

  /**
   * our implementation of a `src` descriptor for browsers
   * that do not have one
   */
  const srcDescriptorPolyfill = Object.defineProperty({}, 'src', {
    get() {
      if (this.hasAttribute('src')) {
        return getAbsoluteURL(window.Element.prototype.getAttribute.call(this, 'src'));
      }
      return '';
    },
    set(v) {
      window.Element.prototype.setAttribute.call(this, 'src', v);
      return v;
    }
  });
  const getSrcDescriptor = tech => getDescriptor([tech.el(), window.HTMLMediaElement.prototype, srcDescriptorPolyfill], 'src');

  /**
   * setup `sourceset` handling on the `Html5` tech. This function
   * patches the following element properties/functions:
   *
   * - `src` - to determine when `src` is set
   * - `setAttribute()` - to determine when `src` is set
   * - `load()` - this re-triggers the source selection algorithm, and can
   *              cause a sourceset.
   *
   * If there is no source when we are adding `sourceset` support or during a `load()`
   * we also patch the functions listed in `firstSourceWatch`.
   *
   * @param {Html5} tech
   *        The tech to patch
   */
  const setupSourceset = function (tech) {
    if (!tech.featuresSourceset) {
      return;
    }
    const el = tech.el();

    // make sure sourceset isn't setup twice.
    if (el.resetSourceset_) {
      return;
    }
    const srcDescriptor = getSrcDescriptor(tech);
    const oldSetAttribute = el.setAttribute;
    const oldLoad = el.load;
    Object.defineProperty(el, 'src', merge(srcDescriptor, {
      set: v => {
        const retval = srcDescriptor.set.call(el, v);

        // we use the getter here to get the actual value set on src
        tech.triggerSourceset(el.src);
        return retval;
      }
    }));
    el.setAttribute = (n, v) => {
      const retval = oldSetAttribute.call(el, n, v);
      if (/src/i.test(n)) {
        tech.triggerSourceset(el.src);
      }
      return retval;
    };
    el.load = () => {
      const retval = oldLoad.call(el);

      // if load was called, but there was no source to fire
      // sourceset on. We have to watch for a source append
      // as that can trigger a `sourceset` when the media element
      // has no source
      if (!sourcesetLoad(tech)) {
        tech.triggerSourceset('');
        firstSourceWatch(tech);
      }
      return retval;
    };
    if (el.currentSrc) {
      tech.triggerSourceset(el.currentSrc);
    } else if (!sourcesetLoad(tech)) {
      firstSourceWatch(tech);
    }
    el.resetSourceset_ = () => {
      el.resetSourceset_ = null;
      el.load = oldLoad;
      el.setAttribute = oldSetAttribute;
      Object.defineProperty(el, 'src', srcDescriptor);
      if (el.resetSourceWatch_) {
        el.resetSourceWatch_();
      }
    };
  };

  /**
   * @file html5.js
   */

  /**
   * HTML5 Media Controller - Wrapper for HTML5 Media API
   *
   * @mixes Tech~SourceHandlerAdditions
   * @extends Tech
   */
  class Html5 extends Tech {
    /**
    * Create an instance of this Tech.
    *
    * @param {Object} [options]
    *        The key/value store of player options.
    *
    * @param {Function} [ready]
    *        Callback function to call when the `HTML5` Tech is ready.
    */
    constructor(options, ready) {
      super(options, ready);
      const source = options.source;
      let crossoriginTracks = false;
      this.featuresVideoFrameCallback = this.featuresVideoFrameCallback && this.el_.tagName === 'VIDEO';

      // Set the source if one is provided
      // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)
      // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source
      // anyway so the error gets fired.
      if (source && (this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {
        this.setSource(source);
      } else {
        this.handleLateInit_(this.el_);
      }

      // setup sourceset after late sourceset/init
      if (options.enableSourceset) {
        this.setupSourcesetHandling_();
      }
      this.isScrubbing_ = false;
      if (this.el_.hasChildNodes()) {
        const nodes = this.el_.childNodes;
        let nodesLength = nodes.length;
        const removeNodes = [];
        while (nodesLength--) {
          const node = nodes[nodesLength];
          const nodeName = node.nodeName.toLowerCase();
          if (nodeName === 'track') {
            if (!this.featuresNativeTextTracks) {
              // Empty video tag tracks so the built-in player doesn't use them also.
              // This may not be fast enough to stop HTML5 browsers from reading the tags
              // so we'll need to turn off any default tracks if we're manually doing
              // captions and subtitles. videoElement.textTracks
              removeNodes.push(node);
            } else {
              // store HTMLTrackElement and TextTrack to remote list
              this.remoteTextTrackEls().addTrackElement_(node);
              this.remoteTextTracks().addTrack(node.track);
              this.textTracks().addTrack(node.track);
              if (!crossoriginTracks && !this.el_.hasAttribute('crossorigin') && isCrossOrigin(node.src)) {
                crossoriginTracks = true;
              }
            }
          }
        }
        for (let i = 0; i < removeNodes.length; i++) {
          this.el_.removeChild(removeNodes[i]);
        }
      }
      this.proxyNativeTracks_();
      if (this.featuresNativeTextTracks && crossoriginTracks) {
        log.warn('Text Tracks are being loaded from another origin but the crossorigin attribute isn\'t used.\n' + 'This may prevent text tracks from loading.');
      }

      // prevent iOS Safari from disabling metadata text tracks during native playback
      this.restoreMetadataTracksInIOSNativePlayer_();

      // Determine if native controls should be used
      // Our goal should be to get the custom controls on mobile solid everywhere
      // so we can remove this all together. Right now this will block custom
      // controls on touch enabled laptops like the Chrome Pixel
      if ((TOUCH_ENABLED || IS_IPHONE) && options.nativeControlsForTouch === true) {
        this.setControls(true);
      }

      // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`
      // into a `fullscreenchange` event
      this.proxyWebkitFullscreen_();
      this.triggerReady();
    }

    /**
     * Dispose of `HTML5` media element and remove all tracks.
     */
    dispose() {
      if (this.el_ && this.el_.resetSourceset_) {
        this.el_.resetSourceset_();
      }
      Html5.disposeMediaElement(this.el_);
      this.options_ = null;

      // tech will handle clearing of the emulated track list
      super.dispose();
    }

    /**
     * Modify the media element so that we can detect when
     * the source is changed. Fires `sourceset` just after the source has changed
     */
    setupSourcesetHandling_() {
      setupSourceset(this);
    }

    /**
     * When a captions track is enabled in the iOS Safari native player, all other
     * tracks are disabled (including metadata tracks), which nulls all of their
     * associated cue points. This will restore metadata tracks to their pre-fullscreen
     * state in those cases so that cue points are not needlessly lost.
     *
     * @private
     */
    restoreMetadataTracksInIOSNativePlayer_() {
      const textTracks = this.textTracks();
      let metadataTracksPreFullscreenState;

      // captures a snapshot of every metadata track's current state
      const takeMetadataTrackSnapshot = () => {
        metadataTracksPreFullscreenState = [];
        for (let i = 0; i < textTracks.length; i++) {
          const track = textTracks[i];
          if (track.kind === 'metadata') {
            metadataTracksPreFullscreenState.push({
              track,
              storedMode: track.mode
            });
          }
        }
      };

      // snapshot each metadata track's initial state, and update the snapshot
      // each time there is a track 'change' event
      takeMetadataTrackSnapshot();
      textTracks.addEventListener('change', takeMetadataTrackSnapshot);
      this.on('dispose', () => textTracks.removeEventListener('change', takeMetadataTrackSnapshot));
      const restoreTrackMode = () => {
        for (let i = 0; i < metadataTracksPreFullscreenState.length; i++) {
          const storedTrack = metadataTracksPreFullscreenState[i];
          if (storedTrack.track.mode === 'disabled' && storedTrack.track.mode !== storedTrack.storedMode) {
            storedTrack.track.mode = storedTrack.storedMode;
          }
        }
        // we only want this handler to be executed on the first 'change' event
        textTracks.removeEventListener('change', restoreTrackMode);
      };

      // when we enter fullscreen playback, stop updating the snapshot and
      // restore all track modes to their pre-fullscreen state
      this.on('webkitbeginfullscreen', () => {
        textTracks.removeEventListener('change', takeMetadataTrackSnapshot);

        // remove the listener before adding it just in case it wasn't previously removed
        textTracks.removeEventListener('change', restoreTrackMode);
        textTracks.addEventListener('change', restoreTrackMode);
      });

      // start updating the snapshot again after leaving fullscreen
      this.on('webkitendfullscreen', () => {
        // remove the listener before adding it just in case it wasn't previously removed
        textTracks.removeEventListener('change', takeMetadataTrackSnapshot);
        textTracks.addEventListener('change', takeMetadataTrackSnapshot);

        // remove the restoreTrackMode handler in case it wasn't triggered during fullscreen playback
        textTracks.removeEventListener('change', restoreTrackMode);
      });
    }

    /**
     * Attempt to force override of tracks for the given type
     *
     * @param {string} type - Track type to override, possible values include 'Audio',
     * 'Video', and 'Text'.
     * @param {boolean} override - If set to true native audio/video will be overridden,
     * otherwise native audio/video will potentially be used.
     * @private
     */
    overrideNative_(type, override) {
      // If there is no behavioral change don't add/remove listeners
      if (override !== this[`featuresNative${type}Tracks`]) {
        return;
      }
      const lowerCaseType = type.toLowerCase();
      if (this[`${lowerCaseType}TracksListeners_`]) {
        Object.keys(this[`${lowerCaseType}TracksListeners_`]).forEach(eventName => {
          const elTracks = this.el()[`${lowerCaseType}Tracks`];
          elTracks.removeEventListener(eventName, this[`${lowerCaseType}TracksListeners_`][eventName]);
        });
      }
      this[`featuresNative${type}Tracks`] = !override;
      this[`${lowerCaseType}TracksListeners_`] = null;
      this.proxyNativeTracksForType_(lowerCaseType);
    }

    /**
     * Attempt to force override of native audio tracks.
     *
     * @param {boolean} override - If set to true native audio will be overridden,
     * otherwise native audio will potentially be used.
     */
    overrideNativeAudioTracks(override) {
      this.overrideNative_('Audio', override);
    }

    /**
     * Attempt to force override of native video tracks.
     *
     * @param {boolean} override - If set to true native video will be overridden,
     * otherwise native video will potentially be used.
     */
    overrideNativeVideoTracks(override) {
      this.overrideNative_('Video', override);
    }

    /**
     * Proxy native track list events for the given type to our track
     * lists if the browser we are playing in supports that type of track list.
     *
     * @param {string} name - Track type; values include 'audio', 'video', and 'text'
     * @private
     */
    proxyNativeTracksForType_(name) {
      const props = NORMAL[name];
      const elTracks = this.el()[props.getterName];
      const techTracks = this[props.getterName]();
      if (!this[`featuresNative${props.capitalName}Tracks`] || !elTracks || !elTracks.addEventListener) {
        return;
      }
      const listeners = {
        change: e => {
          const event = {
            type: 'change',
            target: techTracks,
            currentTarget: techTracks,
            srcElement: techTracks
          };
          techTracks.trigger(event);

          // if we are a text track change event, we should also notify the
          // remote text track list. This can potentially cause a false positive
          // if we were to get a change event on a non-remote track and
          // we triggered the event on the remote text track list which doesn't
          // contain that track. However, best practices mean looping through the
          // list of tracks and searching for the appropriate mode value, so,
          // this shouldn't pose an issue
          if (name === 'text') {
            this[REMOTE.remoteText.getterName]().trigger(event);
          }
        },
        addtrack(e) {
          techTracks.addTrack(e.track);
        },
        removetrack(e) {
          techTracks.removeTrack(e.track);
        }
      };
      const removeOldTracks = function () {
        const removeTracks = [];
        for (let i = 0; i < techTracks.length; i++) {
          let found = false;
          for (let j = 0; j < elTracks.length; j++) {
            if (elTracks[j] === techTracks[i]) {
              found = true;
              break;
            }
          }
          if (!found) {
            removeTracks.push(techTracks[i]);
          }
        }
        while (removeTracks.length) {
          techTracks.removeTrack(removeTracks.shift());
        }
      };
      this[props.getterName + 'Listeners_'] = listeners;
      Object.keys(listeners).forEach(eventName => {
        const listener = listeners[eventName];
        elTracks.addEventListener(eventName, listener);
        this.on('dispose', e => elTracks.removeEventListener(eventName, listener));
      });

      // Remove (native) tracks that are not used anymore
      this.on('loadstart', removeOldTracks);
      this.on('dispose', e => this.off('loadstart', removeOldTracks));
    }

    /**
     * Proxy all native track list events to our track lists if the browser we are playing
     * in supports that type of track list.
     *
     * @private
     */
    proxyNativeTracks_() {
      NORMAL.names.forEach(name => {
        this.proxyNativeTracksForType_(name);
      });
    }

    /**
     * Create the `Html5` Tech's DOM element.
     *
     * @return {Element}
     *         The element that gets created.
     */
    createEl() {
      let el = this.options_.tag;

      // Check if this browser supports moving the element into the box.
      // On the iPhone video will break if you move the element,
      // So we have to create a brand new element.
      // If we ingested the player div, we do not need to move the media element.
      if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {
        // If the original tag is still there, clone and remove it.
        if (el) {
          const clone = el.cloneNode(true);
          if (el.parentNode) {
            el.parentNode.insertBefore(clone, el);
          }
          Html5.disposeMediaElement(el);
          el = clone;
        } else {
          el = document.createElement('video');

          // determine if native controls should be used
          const tagAttributes = this.options_.tag && getAttributes(this.options_.tag);
          const attributes = merge({}, tagAttributes);
          if (!TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {
            delete attributes.controls;
          }
          setAttributes(el, Object.assign(attributes, {
            id: this.options_.techId,
            class: 'vjs-tech'
          }));
        }
        el.playerId = this.options_.playerId;
      }
      if (typeof this.options_.preload !== 'undefined') {
        setAttribute(el, 'preload', this.options_.preload);
      }
      if (this.options_.disablePictureInPicture !== undefined) {
        el.disablePictureInPicture = this.options_.disablePictureInPicture;
      }

      // Update specific tag settings, in case they were overridden
      // `autoplay` has to be *last* so that `muted` and `playsinline` are present
      // when iOS/Safari or other browsers attempt to autoplay.
      const settingsAttrs = ['loop', 'muted', 'playsinline', 'autoplay'];
      for (let i = 0; i < settingsAttrs.length; i++) {
        const attr = settingsAttrs[i];
        const value = this.options_[attr];
        if (typeof value !== 'undefined') {
          if (value) {
            setAttribute(el, attr, attr);
          } else {
            removeAttribute(el, attr);
          }
          el[attr] = value;
        }
      }
      return el;
    }

    /**
     * This will be triggered if the loadstart event has already fired, before videojs was
     * ready. Two known examples of when this can happen are:
     * 1. If we're loading the playback object after it has started loading
     * 2. The media is already playing the (often with autoplay on) then
     *
     * This function will fire another loadstart so that videojs can catchup.
     *
     * @fires Tech#loadstart
     *
     * @return {undefined}
     *         returns nothing.
     */
    handleLateInit_(el) {
      if (el.networkState === 0 || el.networkState === 3) {
        // The video element hasn't started loading the source yet
        // or didn't find a source
        return;
      }
      if (el.readyState === 0) {
        // NetworkState is set synchronously BUT loadstart is fired at the
        // end of the current stack, usually before setInterval(fn, 0).
        // So at this point we know loadstart may have already fired or is
        // about to fire, and either way the player hasn't seen it yet.
        // We don't want to fire loadstart prematurely here and cause a
        // double loadstart so we'll wait and see if it happens between now
        // and the next loop, and fire it if not.
        // HOWEVER, we also want to make sure it fires before loadedmetadata
        // which could also happen between now and the next loop, so we'll
        // watch for that also.
        let loadstartFired = false;
        const setLoadstartFired = function () {
          loadstartFired = true;
        };
        this.on('loadstart', setLoadstartFired);
        const triggerLoadstart = function () {
          // We did miss the original loadstart. Make sure the player
          // sees loadstart before loadedmetadata
          if (!loadstartFired) {
            this.trigger('loadstart');
          }
        };
        this.on('loadedmetadata', triggerLoadstart);
        this.ready(function () {
          this.off('loadstart', setLoadstartFired);
          this.off('loadedmetadata', triggerLoadstart);
          if (!loadstartFired) {
            // We did miss the original native loadstart. Fire it now.
            this.trigger('loadstart');
          }
        });
        return;
      }

      // From here on we know that loadstart already fired and we missed it.
      // The other readyState events aren't as much of a problem if we double
      // them, so not going to go to as much trouble as loadstart to prevent
      // that unless we find reason to.
      const eventsToTrigger = ['loadstart'];

      // loadedmetadata: newly equal to HAVE_METADATA (1) or greater
      eventsToTrigger.push('loadedmetadata');

      // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater
      if (el.readyState >= 2) {
        eventsToTrigger.push('loadeddata');
      }

      // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater
      if (el.readyState >= 3) {
        eventsToTrigger.push('canplay');
      }

      // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)
      if (el.readyState >= 4) {
        eventsToTrigger.push('canplaythrough');
      }

      // We still need to give the player time to add event listeners
      this.ready(function () {
        eventsToTrigger.forEach(function (type) {
          this.trigger(type);
        }, this);
      });
    }

    /**
     * Set whether we are scrubbing or not.
     * This is used to decide whether we should use `fastSeek` or not.
     * `fastSeek` is used to provide trick play on Safari browsers.
     *
     * @param {boolean} isScrubbing
     *                  - true for we are currently scrubbing
     *                  - false for we are no longer scrubbing
     */
    setScrubbing(isScrubbing) {
      this.isScrubbing_ = isScrubbing;
    }

    /**
     * Get whether we are scrubbing or not.
     *
     * @return {boolean} isScrubbing
     *                  - true for we are currently scrubbing
     *                  - false for we are no longer scrubbing
     */
    scrubbing() {
      return this.isScrubbing_;
    }

    /**
     * Set current time for the `HTML5` tech.
     *
     * @param {number} seconds
     *        Set the current time of the media to this.
     */
    setCurrentTime(seconds) {
      try {
        if (this.isScrubbing_ && this.el_.fastSeek && IS_ANY_SAFARI) {
          this.el_.fastSeek(seconds);
        } else {
          this.el_.currentTime = seconds;
        }
      } catch (e) {
        log(e, 'Video is not ready. (Video.js)');
        // this.warning(VideoJS.warnings.videoNotReady);
      }
    }

    /**
     * Get the current duration of the HTML5 media element.
     *
     * @return {number}
     *         The duration of the media or 0 if there is no duration.
     */
    duration() {
      // Android Chrome will report duration as Infinity for VOD HLS until after
      // playback has started, which triggers the live display erroneously.
      // Return NaN if playback has not started and trigger a durationupdate once
      // the duration can be reliably known.
      if (this.el_.duration === Infinity && IS_ANDROID && IS_CHROME && this.el_.currentTime === 0) {
        // Wait for the first `timeupdate` with currentTime > 0 - there may be
        // several with 0
        const checkProgress = () => {
          if (this.el_.currentTime > 0) {
            // Trigger durationchange for genuinely live video
            if (this.el_.duration === Infinity) {
              this.trigger('durationchange');
            }
            this.off('timeupdate', checkProgress);
          }
        };
        this.on('timeupdate', checkProgress);
        return NaN;
      }
      return this.el_.duration || NaN;
    }

    /**
     * Get the current width of the HTML5 media element.
     *
     * @return {number}
     *         The width of the HTML5 media element.
     */
    width() {
      return this.el_.offsetWidth;
    }

    /**
     * Get the current height of the HTML5 media element.
     *
     * @return {number}
     *         The height of the HTML5 media element.
     */
    height() {
      return this.el_.offsetHeight;
    }

    /**
     * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into
     * `fullscreenchange` event.
     *
     * @private
     * @fires fullscreenchange
     * @listens webkitendfullscreen
     * @listens webkitbeginfullscreen
     * @listens webkitbeginfullscreen
     */
    proxyWebkitFullscreen_() {
      if (!('webkitDisplayingFullscreen' in this.el_)) {
        return;
      }
      const endFn = function () {
        this.trigger('fullscreenchange', {
          isFullscreen: false
        });
        // Safari will sometimes set controls on the videoelement when existing fullscreen.
        if (this.el_.controls && !this.options_.nativeControlsForTouch && this.controls()) {
          this.el_.controls = false;
        }
      };
      const beginFn = function () {
        if ('webkitPresentationMode' in this.el_ && this.el_.webkitPresentationMode !== 'picture-in-picture') {
          this.one('webkitendfullscreen', endFn);
          this.trigger('fullscreenchange', {
            isFullscreen: true,
            // set a flag in case another tech triggers fullscreenchange
            nativeIOSFullscreen: true
          });
        }
      };
      this.on('webkitbeginfullscreen', beginFn);
      this.on('dispose', () => {
        this.off('webkitbeginfullscreen', beginFn);
        this.off('webkitendfullscreen', endFn);
      });
    }

    /**
     * Check if fullscreen is supported on the video el.
     *
     * @return {boolean}
     *         - True if fullscreen is supported.
     *         - False if fullscreen is not supported.
     */
    supportsFullScreen() {
      return typeof this.el_.webkitEnterFullScreen === 'function';
    }

    /**
     * Request that the `HTML5` Tech enter fullscreen.
     */
    enterFullScreen() {
      const video = this.el_;
      if (video.paused && video.networkState <= video.HAVE_METADATA) {
        // attempt to prime the video element for programmatic access
        // this isn't necessary on the desktop but shouldn't hurt
        silencePromise(this.el_.play());

        // playing and pausing synchronously during the transition to fullscreen
        // can get iOS ~6.1 devices into a play/pause loop
        this.setTimeout(function () {
          video.pause();
          try {
            video.webkitEnterFullScreen();
          } catch (e) {
            this.trigger('fullscreenerror', e);
          }
        }, 0);
      } else {
        try {
          video.webkitEnterFullScreen();
        } catch (e) {
          this.trigger('fullscreenerror', e);
        }
      }
    }

    /**
     * Request that the `HTML5` Tech exit fullscreen.
     */
    exitFullScreen() {
      if (!this.el_.webkitDisplayingFullscreen) {
        this.trigger('fullscreenerror', new Error('The video is not fullscreen'));
        return;
      }
      this.el_.webkitExitFullScreen();
    }

    /**
     * Create a floating video window always on top of other windows so that users may
     * continue consuming media while they interact with other content sites, or
     * applications on their device.
     *
     * @see [Spec]{@link https://wicg.github.io/picture-in-picture}
     *
     * @return {Promise}
     *         A promise with a Picture-in-Picture window.
     */
    requestPictureInPicture() {
      return this.el_.requestPictureInPicture();
    }

    /**
     * Native requestVideoFrameCallback if supported by browser/tech, or fallback
     * Don't use rVCF on Safari when DRM is playing, as it doesn't fire
     * Needs to be checked later than the constructor
     * This will be a false positive for clear sources loaded after a Fairplay source
     *
     * @param {function} cb function to call
     * @return {number} id of request
     */
    requestVideoFrameCallback(cb) {
      if (this.featuresVideoFrameCallback && !this.el_.webkitKeys) {
        return this.el_.requestVideoFrameCallback(cb);
      }
      return super.requestVideoFrameCallback(cb);
    }

    /**
     * Native or fallback requestVideoFrameCallback
     *
     * @param {number} id request id to cancel
     */
    cancelVideoFrameCallback(id) {
      if (this.featuresVideoFrameCallback && !this.el_.webkitKeys) {
        this.el_.cancelVideoFrameCallback(id);
      } else {
        super.cancelVideoFrameCallback(id);
      }
    }

    /**
     * A getter/setter for the `Html5` Tech's source object.
     * > Note: Please use {@link Html5#setSource}
     *
     * @param {Tech~SourceObject} [src]
     *        The source object you want to set on the `HTML5` techs element.
     *
     * @return {Tech~SourceObject|undefined}
     *         - The current source object when a source is not passed in.
     *         - undefined when setting
     *
     * @deprecated Since version 5.
     */
    src(src) {
      if (src === undefined) {
        return this.el_.src;
      }

      // Setting src through `src` instead of `setSrc` will be deprecated
      this.setSrc(src);
    }

    /**
     * Reset the tech by removing all sources and then calling
     * {@link Html5.resetMediaElement}.
     */
    reset() {
      Html5.resetMediaElement(this.el_);
    }

    /**
     * Get the current source on the `HTML5` Tech. Falls back to returning the source from
     * the HTML5 media element.
     *
     * @return {Tech~SourceObject}
     *         The current source object from the HTML5 tech. With a fallback to the
     *         elements source.
     */
    currentSrc() {
      if (this.currentSource_) {
        return this.currentSource_.src;
      }
      return this.el_.currentSrc;
    }

    /**
     * Set controls attribute for the HTML5 media Element.
     *
     * @param {string} val
     *        Value to set the controls attribute to
     */
    setControls(val) {
      this.el_.controls = !!val;
    }

    /**
     * Create and returns a remote {@link TextTrack} object.
     *
     * @param {string} kind
     *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
     *
     * @param {string} [label]
     *        Label to identify the text track
     *
     * @param {string} [language]
     *        Two letter language abbreviation
     *
     * @return {TextTrack}
     *         The TextTrack that gets created.
     */
    addTextTrack(kind, label, language) {
      if (!this.featuresNativeTextTracks) {
        return super.addTextTrack(kind, label, language);
      }
      return this.el_.addTextTrack(kind, label, language);
    }

    /**
     * Creates either native TextTrack or an emulated TextTrack depending
     * on the value of `featuresNativeTextTracks`
     *
     * @param {Object} options
     *        The object should contain the options to initialize the TextTrack with.
     *
     * @param {string} [options.kind]
     *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
     *
     * @param {string} [options.label]
     *        Label to identify the text track
     *
     * @param {string} [options.language]
     *        Two letter language abbreviation.
     *
     * @param {boolean} [options.default]
     *        Default this track to on.
     *
     * @param {string} [options.id]
     *        The internal id to assign this track.
     *
     * @param {string} [options.src]
     *        A source url for the track.
     *
     * @return {HTMLTrackElement}
     *         The track element that gets created.
     */
    createRemoteTextTrack(options) {
      if (!this.featuresNativeTextTracks) {
        return super.createRemoteTextTrack(options);
      }
      const htmlTrackElement = document.createElement('track');
      if (options.kind) {
        htmlTrackElement.kind = options.kind;
      }
      if (options.label) {
        htmlTrackElement.label = options.label;
      }
      if (options.language || options.srclang) {
        htmlTrackElement.srclang = options.language || options.srclang;
      }
      if (options.default) {
        htmlTrackElement.default = options.default;
      }
      if (options.id) {
        htmlTrackElement.id = options.id;
      }
      if (options.src) {
        htmlTrackElement.src = options.src;
      }
      return htmlTrackElement;
    }

    /**
     * Creates a remote text track object and returns an html track element.
     *
     * @param {Object} options The object should contain values for
     * kind, language, label, and src (location of the WebVTT file)
     * @param {boolean} [manualCleanup=false] if set to true, the TextTrack
     * will not be removed from the TextTrackList and HtmlTrackElementList
     * after a source change
     * @return {HTMLTrackElement} An Html Track Element.
     * This can be an emulated {@link HTMLTrackElement} or a native one.
     *
     */
    addRemoteTextTrack(options, manualCleanup) {
      const htmlTrackElement = super.addRemoteTextTrack(options, manualCleanup);
      if (this.featuresNativeTextTracks) {
        this.el().appendChild(htmlTrackElement);
      }
      return htmlTrackElement;
    }

    /**
     * Remove remote `TextTrack` from `TextTrackList` object
     *
     * @param {TextTrack} track
     *        `TextTrack` object to remove
     */
    removeRemoteTextTrack(track) {
      super.removeRemoteTextTrack(track);
      if (this.featuresNativeTextTracks) {
        const tracks = this.$$('track');
        let i = tracks.length;
        while (i--) {
          if (track === tracks[i] || track === tracks[i].track) {
            this.el().removeChild(tracks[i]);
          }
        }
      }
    }

    /**
     * Gets available media playback quality metrics as specified by the W3C's Media
     * Playback Quality API.
     *
     * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
     *
     * @return {Object}
     *         An object with supported media playback quality metrics
     */
    getVideoPlaybackQuality() {
      if (typeof this.el().getVideoPlaybackQuality === 'function') {
        return this.el().getVideoPlaybackQuality();
      }
      const videoPlaybackQuality = {};
      if (typeof this.el().webkitDroppedFrameCount !== 'undefined' && typeof this.el().webkitDecodedFrameCount !== 'undefined') {
        videoPlaybackQuality.droppedVideoFrames = this.el().webkitDroppedFrameCount;
        videoPlaybackQuality.totalVideoFrames = this.el().webkitDecodedFrameCount;
      }
      if (window.performance) {
        videoPlaybackQuality.creationTime = window.performance.now();
      }
      return videoPlaybackQuality;
    }
  }

  /* HTML5 Support Testing ---------------------------------------------------- */

  /**
   * Element for testing browser HTML5 media capabilities
   *
   * @type {Element}
   * @constant
   * @private
   */
  defineLazyProperty(Html5, 'TEST_VID', function () {
    if (!isReal()) {
      return;
    }
    const video = document.createElement('video');
    const track = document.createElement('track');
    track.kind = 'captions';
    track.srclang = 'en';
    track.label = 'English';
    video.appendChild(track);
    return video;
  });

  /**
   * Check if HTML5 media is supported by this browser/device.
   *
   * @return {boolean}
   *         - True if HTML5 media is supported.
   *         - False if HTML5 media is not supported.
   */
  Html5.isSupported = function () {
    // IE with no Media Player is a LIAR! (#984)
    try {
      Html5.TEST_VID.volume = 0.5;
    } catch (e) {
      return false;
    }
    return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);
  };

  /**
   * Check if the tech can support the given type
   *
   * @param {string} type
   *        The mimetype to check
   * @return {string} 'probably', 'maybe', or '' (empty string)
   */
  Html5.canPlayType = function (type) {
    return Html5.TEST_VID.canPlayType(type);
  };

  /**
   * Check if the tech can support the given source
   *
   * @param {Object} srcObj
   *        The source object
   * @param {Object} options
   *        The options passed to the tech
   * @return {string} 'probably', 'maybe', or '' (empty string)
   */
  Html5.canPlaySource = function (srcObj, options) {
    return Html5.canPlayType(srcObj.type);
  };

  /**
   * Check if the volume can be changed in this browser/device.
   * Volume cannot be changed in a lot of mobile devices.
   * Specifically, it can't be changed from 1 on iOS.
   *
   * @return {boolean}
   *         - True if volume can be controlled
   *         - False otherwise
   */
  Html5.canControlVolume = function () {
    // IE will error if Windows Media Player not installed #3315
    try {
      const volume = Html5.TEST_VID.volume;
      Html5.TEST_VID.volume = volume / 2 + 0.1;
      const canControl = volume !== Html5.TEST_VID.volume;

      // With the introduction of iOS 15, there are cases where the volume is read as
      // changed but reverts back to its original state at the start of the next tick.
      // To determine whether volume can be controlled on iOS,
      // a timeout is set and the volume is checked asynchronously.
      // Since `features` doesn't currently work asynchronously, the value is manually set.
      if (canControl && IS_IOS) {
        window.setTimeout(() => {
          if (Html5 && Html5.prototype) {
            Html5.prototype.featuresVolumeControl = volume !== Html5.TEST_VID.volume;
          }
        });

        // default iOS to false, which will be updated in the timeout above.
        return false;
      }
      return canControl;
    } catch (e) {
      return false;
    }
  };

  /**
   * Check if the volume can be muted in this browser/device.
   * Some devices, e.g. iOS, don't allow changing volume
   * but permits muting/unmuting.
   *
   * @return {boolean}
   *      - True if volume can be muted
   *      - False otherwise
   */
  Html5.canMuteVolume = function () {
    try {
      const muted = Html5.TEST_VID.muted;

      // in some versions of iOS muted property doesn't always
      // work, so we want to set both property and attribute
      Html5.TEST_VID.muted = !muted;
      if (Html5.TEST_VID.muted) {
        setAttribute(Html5.TEST_VID, 'muted', 'muted');
      } else {
        removeAttribute(Html5.TEST_VID, 'muted', 'muted');
      }
      return muted !== Html5.TEST_VID.muted;
    } catch (e) {
      return false;
    }
  };

  /**
   * Check if the playback rate can be changed in this browser/device.
   *
   * @return {boolean}
   *         - True if playback rate can be controlled
   *         - False otherwise
   */
  Html5.canControlPlaybackRate = function () {
    // Playback rate API is implemented in Android Chrome, but doesn't do anything
    // https://github.com/videojs/video.js/issues/3180
    if (IS_ANDROID && IS_CHROME && CHROME_VERSION < 58) {
      return false;
    }
    // IE will error if Windows Media Player not installed #3315
    try {
      const playbackRate = Html5.TEST_VID.playbackRate;
      Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;
      return playbackRate !== Html5.TEST_VID.playbackRate;
    } catch (e) {
      return false;
    }
  };

  /**
   * Check if we can override a video/audio elements attributes, with
   * Object.defineProperty.
   *
   * @return {boolean}
   *         - True if builtin attributes can be overridden
   *         - False otherwise
   */
  Html5.canOverrideAttributes = function () {
    // if we cannot overwrite the src/innerHTML property, there is no support
    // iOS 7 safari for instance cannot do this.
    try {
      const noop = () => {};
      Object.defineProperty(document.createElement('video'), 'src', {
        get: noop,
        set: noop
      });
      Object.defineProperty(document.createElement('audio'), 'src', {
        get: noop,
        set: noop
      });
      Object.defineProperty(document.createElement('video'), 'innerHTML', {
        get: noop,
        set: noop
      });
      Object.defineProperty(document.createElement('audio'), 'innerHTML', {
        get: noop,
        set: noop
      });
    } catch (e) {
      return false;
    }
    return true;
  };

  /**
   * Check to see if native `TextTrack`s are supported by this browser/device.
   *
   * @return {boolean}
   *         - True if native `TextTrack`s are supported.
   *         - False otherwise
   */
  Html5.supportsNativeTextTracks = function () {
    return IS_ANY_SAFARI || IS_IOS && IS_CHROME;
  };

  /**
   * Check to see if native `VideoTrack`s are supported by this browser/device
   *
   * @return {boolean}
   *        - True if native `VideoTrack`s are supported.
   *        - False otherwise
   */
  Html5.supportsNativeVideoTracks = function () {
    return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);
  };

  /**
   * Check to see if native `AudioTrack`s are supported by this browser/device
   *
   * @return {boolean}
   *        - True if native `AudioTrack`s are supported.
   *        - False otherwise
   */
  Html5.supportsNativeAudioTracks = function () {
    return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);
  };

  /**
   * An array of events available on the Html5 tech.
   *
   * @private
   * @type {Array}
   */
  Html5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'resize', 'volumechange'];

  /**
   * Boolean indicating whether the `Tech` supports volume control.
   *
   * @type {boolean}
   * @default {@link Html5.canControlVolume}
   */
  /**
   * Boolean indicating whether the `Tech` supports muting volume.
   *
   * @type {boolean}
   * @default {@link Html5.canMuteVolume}
   */

  /**
   * Boolean indicating whether the `Tech` supports changing the speed at which the media
   * plays. Examples:
   *   - Set player to play 2x (twice) as fast
   *   - Set player to play 0.5x (half) as fast
   *
   * @type {boolean}
   * @default {@link Html5.canControlPlaybackRate}
   */

  /**
   * Boolean indicating whether the `Tech` supports the `sourceset` event.
   *
   * @type {boolean}
   * @default
   */
  /**
   * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.
   *
   * @type {boolean}
   * @default {@link Html5.supportsNativeTextTracks}
   */
  /**
   * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.
   *
   * @type {boolean}
   * @default {@link Html5.supportsNativeVideoTracks}
   */
  /**
   * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.
   *
   * @type {boolean}
   * @default {@link Html5.supportsNativeAudioTracks}
   */
  [['featuresMuteControl', 'canMuteVolume'], ['featuresPlaybackRate', 'canControlPlaybackRate'], ['featuresSourceset', 'canOverrideAttributes'], ['featuresNativeTextTracks', 'supportsNativeTextTracks'], ['featuresNativeVideoTracks', 'supportsNativeVideoTracks'], ['featuresNativeAudioTracks', 'supportsNativeAudioTracks']].forEach(function ([key, fn]) {
    defineLazyProperty(Html5.prototype, key, () => Html5[fn](), true);
  });
  Html5.prototype.featuresVolumeControl = Html5.canControlVolume();

  /**
   * Boolean indicating whether the `HTML5` tech currently supports the media element
   * moving in the DOM. iOS breaks if you move the media element, so this is set this to
   * false there. Everywhere else this should be true.
   *
   * @type {boolean}
   * @default
   */
  Html5.prototype.movingMediaElementInDOM = !IS_IOS;

  // TODO: Previous comment: No longer appears to be used. Can probably be removed.
  //       Is this true?
  /**
   * Boolean indicating whether the `HTML5` tech currently supports automatic media resize
   * when going into fullscreen.
   *
   * @type {boolean}
   * @default
   */
  Html5.prototype.featuresFullscreenResize = true;

  /**
   * Boolean indicating whether the `HTML5` tech currently supports the progress event.
   * If this is false, manual `progress` events will be triggered instead.
   *
   * @type {boolean}
   * @default
   */
  Html5.prototype.featuresProgressEvents = true;

  /**
   * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.
   * If this is false, manual `timeupdate` events will be triggered instead.
   *
   * @default
   */
  Html5.prototype.featuresTimeupdateEvents = true;

  /**
   * Whether the HTML5 el supports `requestVideoFrameCallback`
   *
   * @type {boolean}
   */
  Html5.prototype.featuresVideoFrameCallback = !!(Html5.TEST_VID && Html5.TEST_VID.requestVideoFrameCallback);
  Html5.disposeMediaElement = function (el) {
    if (!el) {
      return;
    }
    if (el.parentNode) {
      el.parentNode.removeChild(el);
    }

    // remove any child track or source nodes to prevent their loading
    while (el.hasChildNodes()) {
      el.removeChild(el.firstChild);
    }

    // remove any src reference. not setting `src=''` because that causes a warning
    // in firefox
    el.removeAttribute('src');

    // force the media element to update its loading state by calling load()
    // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)
    if (typeof el.load === 'function') {
      // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
      (function () {
        try {
          el.load();
        } catch (e) {
          // not supported
        }
      })();
    }
  };
  Html5.resetMediaElement = function (el) {
    if (!el) {
      return;
    }
    const sources = el.querySelectorAll('source');
    let i = sources.length;
    while (i--) {
      el.removeChild(sources[i]);
    }

    // remove any src reference.
    // not setting `src=''` because that throws an error
    el.removeAttribute('src');
    if (typeof el.load === 'function') {
      // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
      (function () {
        try {
          el.load();
        } catch (e) {
          // satisfy linter
        }
      })();
    }
  };

  /* Native HTML5 element property wrapping ----------------------------------- */
  // Wrap native boolean attributes with getters that check both property and attribute
  // The list is as followed:
  // muted, defaultMuted, autoplay, controls, loop, playsinline
  [
  /**
   * Get the value of `muted` from the media element. `muted` indicates
   * that the volume for the media should be set to silent. This does not actually change
   * the `volume` attribute.
   *
   * @method Html5#muted
   * @return {boolean}
   *         - True if the value of `volume` should be ignored and the audio set to silent.
   *         - False if the value of `volume` should be used.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
   */
  'muted',
  /**
   * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates
   * whether the media should start muted or not. Only changes the default state of the
   * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the
   * current state.
   *
   * @method Html5#defaultMuted
   * @return {boolean}
   *         - The value of `defaultMuted` from the media element.
   *         - True indicates that the media should start muted.
   *         - False indicates that the media should not start muted
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
   */
  'defaultMuted',
  /**
   * Get the value of `autoplay` from the media element. `autoplay` indicates
   * that the media should start to play as soon as the page is ready.
   *
   * @method Html5#autoplay
   * @return {boolean}
   *         - The value of `autoplay` from the media element.
   *         - True indicates that the media should start as soon as the page loads.
   *         - False indicates that the media should not start as soon as the page loads.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
   */
  'autoplay',
  /**
   * Get the value of `controls` from the media element. `controls` indicates
   * whether the native media controls should be shown or hidden.
   *
   * @method Html5#controls
   * @return {boolean}
   *         - The value of `controls` from the media element.
   *         - True indicates that native controls should be showing.
   *         - False indicates that native controls should be hidden.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}
   */
  'controls',
  /**
   * Get the value of `loop` from the media element. `loop` indicates
   * that the media should return to the start of the media and continue playing once
   * it reaches the end.
   *
   * @method Html5#loop
   * @return {boolean}
   *         - The value of `loop` from the media element.
   *         - True indicates that playback should seek back to start once
   *           the end of a media is reached.
   *         - False indicates that playback should not loop back to the start when the
   *           end of the media is reached.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
   */
  'loop',
  /**
   * Get the value of `playsinline` from the media element. `playsinline` indicates
   * to the browser that non-fullscreen playback is preferred when fullscreen
   * playback is the native default, such as in iOS Safari.
   *
   * @method Html5#playsinline
   * @return {boolean}
   *         - The value of `playsinline` from the media element.
   *         - True indicates that the media should play inline.
   *         - False indicates that the media should not play inline.
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
   */
  'playsinline'].forEach(function (prop) {
    Html5.prototype[prop] = function () {
      return this.el_[prop] || this.el_.hasAttribute(prop);
    };
  });

  // Wrap native boolean attributes with setters that set both property and attribute
  // The list is as followed:
  // setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline
  // setControls is special-cased above
  [
  /**
   * Set the value of `muted` on the media element. `muted` indicates that the current
   * audio level should be silent.
   *
   * @method Html5#setMuted
   * @param {boolean} muted
   *        - True if the audio should be set to silent
   *        - False otherwise
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
   */
  'muted',
  /**
   * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current
   * audio level should be silent, but will only effect the muted level on initial playback..
   *
   * @method Html5.prototype.setDefaultMuted
   * @param {boolean} defaultMuted
   *        - True if the audio should be set to silent
   *        - False otherwise
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
   */
  'defaultMuted',
  /**
   * Set the value of `autoplay` on the media element. `autoplay` indicates
   * that the media should start to play as soon as the page is ready.
   *
   * @method Html5#setAutoplay
   * @param {boolean} autoplay
   *         - True indicates that the media should start as soon as the page loads.
   *         - False indicates that the media should not start as soon as the page loads.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
   */
  'autoplay',
  /**
   * Set the value of `loop` on the media element. `loop` indicates
   * that the media should return to the start of the media and continue playing once
   * it reaches the end.
   *
   * @method Html5#setLoop
   * @param {boolean} loop
   *         - True indicates that playback should seek back to start once
   *           the end of a media is reached.
   *         - False indicates that playback should not loop back to the start when the
   *           end of the media is reached.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
   */
  'loop',
  /**
   * Set the value of `playsinline` from the media element. `playsinline` indicates
   * to the browser that non-fullscreen playback is preferred when fullscreen
   * playback is the native default, such as in iOS Safari.
   *
   * @method Html5#setPlaysinline
   * @param {boolean} playsinline
   *         - True indicates that the media should play inline.
   *         - False indicates that the media should not play inline.
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
   */
  'playsinline'].forEach(function (prop) {
    Html5.prototype['set' + toTitleCase(prop)] = function (v) {
      this.el_[prop] = v;
      if (v) {
        this.el_.setAttribute(prop, prop);
      } else {
        this.el_.removeAttribute(prop);
      }
    };
  });

  // Wrap native properties with a getter
  // The list is as followed
  // paused, currentTime, buffered, volume, poster, preload, error, seeking
  // seekable, ended, playbackRate, defaultPlaybackRate, disablePictureInPicture
  // played, networkState, readyState, videoWidth, videoHeight, crossOrigin
  [
  /**
   * Get the value of `paused` from the media element. `paused` indicates whether the media element
   * is currently paused or not.
   *
   * @method Html5#paused
   * @return {boolean}
   *         The value of `paused` from the media element.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}
   */
  'paused',
  /**
   * Get the value of `currentTime` from the media element. `currentTime` indicates
   * the current second that the media is at in playback.
   *
   * @method Html5#currentTime
   * @return {number}
   *         The value of `currentTime` from the media element.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}
   */
  'currentTime',
  /**
   * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`
   * object that represents the parts of the media that are already downloaded and
   * available for playback.
   *
   * @method Html5#buffered
   * @return {TimeRange}
   *         The value of `buffered` from the media element.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}
   */
  'buffered',
  /**
   * Get the value of `volume` from the media element. `volume` indicates
   * the current playback volume of audio for a media. `volume` will be a value from 0
   * (silent) to 1 (loudest and default).
   *
   * @method Html5#volume
   * @return {number}
   *         The value of `volume` from the media element. Value will be between 0-1.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
   */
  'volume',
  /**
   * Get the value of `poster` from the media element. `poster` indicates
   * that the url of an image file that can/will be shown when no media data is available.
   *
   * @method Html5#poster
   * @return {string}
   *         The value of `poster` from the media element. Value will be a url to an
   *         image.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}
   */
  'poster',
  /**
   * Get the value of `preload` from the media element. `preload` indicates
   * what should download before the media is interacted with. It can have the following
   * values:
   * - none: nothing should be downloaded
   * - metadata: poster and the first few frames of the media may be downloaded to get
   *   media dimensions and other metadata
   * - auto: allow the media and metadata for the media to be downloaded before
   *    interaction
   *
   * @method Html5#preload
   * @return {string}
   *         The value of `preload` from the media element. Will be 'none', 'metadata',
   *         or 'auto'.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
   */
  'preload',
  /**
   * Get the value of the `error` from the media element. `error` indicates any
   * MediaError that may have occurred during playback. If error returns null there is no
   * current error.
   *
   * @method Html5#error
   * @return {MediaError|null}
   *         The value of `error` from the media element. Will be `MediaError` if there
   *         is a current error and null otherwise.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}
   */
  'error',
  /**
   * Get the value of `seeking` from the media element. `seeking` indicates whether the
   * media is currently seeking to a new position or not.
   *
   * @method Html5#seeking
   * @return {boolean}
   *         - The value of `seeking` from the media element.
   *         - True indicates that the media is currently seeking to a new position.
   *         - False indicates that the media is not seeking to a new position at this time.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}
   */
  'seeking',
  /**
   * Get the value of `seekable` from the media element. `seekable` returns a
   * `TimeRange` object indicating ranges of time that can currently be `seeked` to.
   *
   * @method Html5#seekable
   * @return {TimeRange}
   *         The value of `seekable` from the media element. A `TimeRange` object
   *         indicating the current ranges of time that can be seeked to.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}
   */
  'seekable',
  /**
   * Get the value of `ended` from the media element. `ended` indicates whether
   * the media has reached the end or not.
   *
   * @method Html5#ended
   * @return {boolean}
   *         - The value of `ended` from the media element.
   *         - True indicates that the media has ended.
   *         - False indicates that the media has not ended.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}
   */
  'ended',
  /**
   * Get the value of `playbackRate` from the media element. `playbackRate` indicates
   * the rate at which the media is currently playing back. Examples:
   *   - if playbackRate is set to 2, media will play twice as fast.
   *   - if playbackRate is set to 0.5, media will play half as fast.
   *
   * @method Html5#playbackRate
   * @return {number}
   *         The value of `playbackRate` from the media element. A number indicating
   *         the current playback speed of the media, where 1 is normal speed.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
   */
  'playbackRate',
  /**
   * Get the value of `defaultPlaybackRate` from the media element. `defaultPlaybackRate` indicates
   * the rate at which the media is currently playing back. This value will not indicate the current
   * `playbackRate` after playback has started, use {@link Html5#playbackRate} for that.
   *
   * Examples:
   *   - if defaultPlaybackRate is set to 2, media will play twice as fast.
   *   - if defaultPlaybackRate is set to 0.5, media will play half as fast.
   *
   * @method Html5.prototype.defaultPlaybackRate
   * @return {number}
   *         The value of `defaultPlaybackRate` from the media element. A number indicating
   *         the current playback speed of the media, where 1 is normal speed.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
   */
  'defaultPlaybackRate',
  /**
   * Get the value of 'disablePictureInPicture' from the video element.
   *
   * @method Html5#disablePictureInPicture
   * @return {boolean} value
   *         - The value of `disablePictureInPicture` from the video element.
   *         - True indicates that the video can't be played in Picture-In-Picture mode
   *         - False indicates that the video can be played in Picture-In-Picture mode
   *
   * @see [Spec]{@link https://w3c.github.io/picture-in-picture/#disable-pip}
   */
  'disablePictureInPicture',
  /**
   * Get the value of `played` from the media element. `played` returns a `TimeRange`
   * object representing points in the media timeline that have been played.
   *
   * @method Html5#played
   * @return {TimeRange}
   *         The value of `played` from the media element. A `TimeRange` object indicating
   *         the ranges of time that have been played.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}
   */
  'played',
  /**
   * Get the value of `networkState` from the media element. `networkState` indicates
   * the current network state. It returns an enumeration from the following list:
   * - 0: NETWORK_EMPTY
   * - 1: NETWORK_IDLE
   * - 2: NETWORK_LOADING
   * - 3: NETWORK_NO_SOURCE
   *
   * @method Html5#networkState
   * @return {number}
   *         The value of `networkState` from the media element. This will be a number
   *         from the list in the description.
   *
   * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}
   */
  'networkState',
  /**
   * Get the value of `readyState` from the media element. `readyState` indicates
   * the current state of the media element. It returns an enumeration from the
   * following list:
   * - 0: HAVE_NOTHING
   * - 1: HAVE_METADATA
   * - 2: HAVE_CURRENT_DATA
   * - 3: HAVE_FUTURE_DATA
   * - 4: HAVE_ENOUGH_DATA
   *
   * @method Html5#readyState
   * @return {number}
   *         The value of `readyState` from the media element. This will be a number
   *         from the list in the description.
   *
   * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}
   */
  'readyState',
  /**
   * Get the value of `videoWidth` from the video element. `videoWidth` indicates
   * the current width of the video in css pixels.
   *
   * @method Html5#videoWidth
   * @return {number}
   *         The value of `videoWidth` from the video element. This will be a number
   *         in css pixels.
   *
   * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
   */
  'videoWidth',
  /**
   * Get the value of `videoHeight` from the video element. `videoHeight` indicates
   * the current height of the video in css pixels.
   *
   * @method Html5#videoHeight
   * @return {number}
   *         The value of `videoHeight` from the video element. This will be a number
   *         in css pixels.
   *
   * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
   */
  'videoHeight',
  /**
   * Get the value of `crossOrigin` from the media element. `crossOrigin` indicates
   * to the browser that should sent the cookies along with the requests for the
   * different assets/playlists
   *
   * @method Html5#crossOrigin
   * @return {string}
   *         - anonymous indicates that the media should not sent cookies.
   *         - use-credentials indicates that the media should sent cookies along the requests.
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-media-crossorigin}
   */
  'crossOrigin'].forEach(function (prop) {
    Html5.prototype[prop] = function () {
      return this.el_[prop];
    };
  });

  // Wrap native properties with a setter in this format:
  // set + toTitleCase(name)
  // The list is as follows:
  // setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate,
  // setDisablePictureInPicture, setCrossOrigin
  [
  /**
   * Set the value of `volume` on the media element. `volume` indicates the current
   * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and
   * so on.
   *
   * @method Html5#setVolume
   * @param {number} percentAsDecimal
   *        The volume percent as a decimal. Valid range is from 0-1.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
   */
  'volume',
  /**
   * Set the value of `src` on the media element. `src` indicates the current
   * {@link Tech~SourceObject} for the media.
   *
   * @method Html5#setSrc
   * @param {Tech~SourceObject} src
   *        The source object to set as the current source.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}
   */
  'src',
  /**
   * Set the value of `poster` on the media element. `poster` is the url to
   * an image file that can/will be shown when no media data is available.
   *
   * @method Html5#setPoster
   * @param {string} poster
   *        The url to an image that should be used as the `poster` for the media
   *        element.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}
   */
  'poster',
  /**
   * Set the value of `preload` on the media element. `preload` indicates
   * what should download before the media is interacted with. It can have the following
   * values:
   * - none: nothing should be downloaded
   * - metadata: poster and the first few frames of the media may be downloaded to get
   *   media dimensions and other metadata
   * - auto: allow the media and metadata for the media to be downloaded before
   *    interaction
   *
   * @method Html5#setPreload
   * @param {string} preload
   *         The value of `preload` to set on the media element. Must be 'none', 'metadata',
   *         or 'auto'.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
   */
  'preload',
  /**
   * Set the value of `playbackRate` on the media element. `playbackRate` indicates
   * the rate at which the media should play back. Examples:
   *   - if playbackRate is set to 2, media will play twice as fast.
   *   - if playbackRate is set to 0.5, media will play half as fast.
   *
   * @method Html5#setPlaybackRate
   * @return {number}
   *         The value of `playbackRate` from the media element. A number indicating
   *         the current playback speed of the media, where 1 is normal speed.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
   */
  'playbackRate',
  /**
   * Set the value of `defaultPlaybackRate` on the media element. `defaultPlaybackRate` indicates
   * the rate at which the media should play back upon initial startup. Changing this value
   * after a video has started will do nothing. Instead you should used {@link Html5#setPlaybackRate}.
   *
   * Example Values:
   *   - if playbackRate is set to 2, media will play twice as fast.
   *   - if playbackRate is set to 0.5, media will play half as fast.
   *
   * @method Html5.prototype.setDefaultPlaybackRate
   * @return {number}
   *         The value of `defaultPlaybackRate` from the media element. A number indicating
   *         the current playback speed of the media, where 1 is normal speed.
   *
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultplaybackrate}
   */
  'defaultPlaybackRate',
  /**
   * Prevents the browser from suggesting a Picture-in-Picture context menu
   * or to request Picture-in-Picture automatically in some cases.
   *
   * @method Html5#setDisablePictureInPicture
   * @param {boolean} value
   *         The true value will disable Picture-in-Picture mode.
   *
   * @see [Spec]{@link https://w3c.github.io/picture-in-picture/#disable-pip}
   */
  'disablePictureInPicture',
  /**
   * Set the value of `crossOrigin` from the media element. `crossOrigin` indicates
   * to the browser that should sent the cookies along with the requests for the
   * different assets/playlists
   *
   * @method Html5#setCrossOrigin
   * @param {string} crossOrigin
   *         - anonymous indicates that the media should not sent cookies.
   *         - use-credentials indicates that the media should sent cookies along the requests.
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-media-crossorigin}
   */
  'crossOrigin'].forEach(function (prop) {
    Html5.prototype['set' + toTitleCase(prop)] = function (v) {
      this.el_[prop] = v;
    };
  });

  // wrap native functions with a function
  // The list is as follows:
  // pause, load, play
  [
  /**
   * A wrapper around the media elements `pause` function. This will call the `HTML5`
   * media elements `pause` function.
   *
   * @method Html5#pause
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}
   */
  'pause',
  /**
   * A wrapper around the media elements `load` function. This will call the `HTML5`s
   * media element `load` function.
   *
   * @method Html5#load
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}
   */
  'load',
  /**
   * A wrapper around the media elements `play` function. This will call the `HTML5`s
   * media element `play` function.
   *
   * @method Html5#play
   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-play}
   */
  'play'].forEach(function (prop) {
    Html5.prototype[prop] = function () {
      return this.el_[prop]();
    };
  });
  Tech.withSourceHandlers(Html5);

  /**
   * Native source handler for Html5, simply passes the source to the media element.
   *
   * @property {Tech~SourceObject} source
   *        The source object
   *
   * @property {Html5} tech
   *        The instance of the HTML5 tech.
   */
  Html5.nativeSourceHandler = {};

  /**
   * Check if the media element can play the given mime type.
   *
   * @param {string} type
   *        The mimetype to check
   *
   * @return {string}
   *         'probably', 'maybe', or '' (empty string)
   */
  Html5.nativeSourceHandler.canPlayType = function (type) {
    // IE without MediaPlayer throws an error (#519)
    try {
      return Html5.TEST_VID.canPlayType(type);
    } catch (e) {
      return '';
    }
  };

  /**
   * Check if the media element can handle a source natively.
   *
   * @param {Tech~SourceObject} source
   *         The source object
   *
   * @param {Object} [options]
   *         Options to be passed to the tech.
   *
   * @return {string}
   *         'probably', 'maybe', or '' (empty string).
   */
  Html5.nativeSourceHandler.canHandleSource = function (source, options) {
    // If a type was provided we should rely on that
    if (source.type) {
      return Html5.nativeSourceHandler.canPlayType(source.type);

      // If no type, fall back to checking 'video/[EXTENSION]'
    } else if (source.src) {
      const ext = getFileExtension(source.src);
      return Html5.nativeSourceHandler.canPlayType(`video/${ext}`);
    }
    return '';
  };

  /**
   * Pass the source to the native media element.
   *
   * @param {Tech~SourceObject} source
   *        The source object
   *
   * @param {Html5} tech
   *        The instance of the Html5 tech
   *
   * @param {Object} [options]
   *        The options to pass to the source
   */
  Html5.nativeSourceHandler.handleSource = function (source, tech, options) {
    tech.setSrc(source.src);
  };

  /**
   * A noop for the native dispose function, as cleanup is not needed.
   */
  Html5.nativeSourceHandler.dispose = function () {};

  // Register the native source handler
  Html5.registerSourceHandler(Html5.nativeSourceHandler);
  Tech.registerTech('Html5', Html5);

  /**
   * @file player.js
   */

  // The following tech events are simply re-triggered
  // on the player when they happen
  const TECH_EVENTS_RETRIGGER = [
  /**
   * Fired while the user agent is downloading media data.
   *
   * @event Player#progress
   * @type {Event}
   */
  /**
   * Retrigger the `progress` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechProgress_
   * @fires Player#progress
   * @listens Tech#progress
   */
  'progress',
  /**
   * Fires when the loading of an audio/video is aborted.
   *
   * @event Player#abort
   * @type {Event}
   */
  /**
   * Retrigger the `abort` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechAbort_
   * @fires Player#abort
   * @listens Tech#abort
   */
  'abort',
  /**
   * Fires when the browser is intentionally not getting media data.
   *
   * @event Player#suspend
   * @type {Event}
   */
  /**
   * Retrigger the `suspend` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechSuspend_
   * @fires Player#suspend
   * @listens Tech#suspend
   */
  'suspend',
  /**
   * Fires when the current playlist is empty.
   *
   * @event Player#emptied
   * @type {Event}
   */
  /**
   * Retrigger the `emptied` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechEmptied_
   * @fires Player#emptied
   * @listens Tech#emptied
   */
  'emptied',
  /**
   * Fires when the browser is trying to get media data, but data is not available.
   *
   * @event Player#stalled
   * @type {Event}
   */
  /**
   * Retrigger the `stalled` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechStalled_
   * @fires Player#stalled
   * @listens Tech#stalled
   */
  'stalled',
  /**
   * Fires when the browser has loaded meta data for the audio/video.
   *
   * @event Player#loadedmetadata
   * @type {Event}
   */
  /**
   * Retrigger the `loadedmetadata` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechLoadedmetadata_
   * @fires Player#loadedmetadata
   * @listens Tech#loadedmetadata
   */
  'loadedmetadata',
  /**
   * Fires when the browser has loaded the current frame of the audio/video.
   *
   * @event Player#loadeddata
   * @type {event}
   */
  /**
   * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechLoaddeddata_
   * @fires Player#loadeddata
   * @listens Tech#loadeddata
   */
  'loadeddata',
  /**
   * Fires when the current playback position has changed.
   *
   * @event Player#timeupdate
   * @type {event}
   */
  /**
   * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechTimeUpdate_
   * @fires Player#timeupdate
   * @listens Tech#timeupdate
   */
  'timeupdate',
  /**
   * Fires when the video's intrinsic dimensions change
   *
   * @event Player#resize
   * @type {event}
   */
  /**
   * Retrigger the `resize` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechResize_
   * @fires Player#resize
   * @listens Tech#resize
   */
  'resize',
  /**
   * Fires when the volume has been changed
   *
   * @event Player#volumechange
   * @type {event}
   */
  /**
   * Retrigger the `volumechange` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechVolumechange_
   * @fires Player#volumechange
   * @listens Tech#volumechange
   */
  'volumechange',
  /**
   * Fires when the text track has been changed
   *
   * @event Player#texttrackchange
   * @type {event}
   */
  /**
   * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.
   *
   * @private
   * @method Player#handleTechTexttrackchange_
   * @fires Player#texttrackchange
   * @listens Tech#texttrackchange
   */
  'texttrackchange'];

  // events to queue when playback rate is zero
  // this is a hash for the sole purpose of mapping non-camel-cased event names
  // to camel-cased function names
  const TECH_EVENTS_QUEUE = {
    canplay: 'CanPlay',
    canplaythrough: 'CanPlayThrough',
    playing: 'Playing',
    seeked: 'Seeked'
  };
  const BREAKPOINT_ORDER = ['tiny', 'xsmall', 'small', 'medium', 'large', 'xlarge', 'huge'];
  const BREAKPOINT_CLASSES = {};

  // grep: vjs-layout-tiny
  // grep: vjs-layout-x-small
  // grep: vjs-layout-small
  // grep: vjs-layout-medium
  // grep: vjs-layout-large
  // grep: vjs-layout-x-large
  // grep: vjs-layout-huge
  BREAKPOINT_ORDER.forEach(k => {
    const v = k.charAt(0) === 'x' ? `x-${k.substring(1)}` : k;
    BREAKPOINT_CLASSES[k] = `vjs-layout-${v}`;
  });
  const DEFAULT_BREAKPOINTS = {
    tiny: 210,
    xsmall: 320,
    small: 425,
    medium: 768,
    large: 1440,
    xlarge: 2560,
    huge: Infinity
  };

  /**
   * An instance of the `Player` class is created when any of the Video.js setup methods
   * are used to initialize a video.
   *
   * After an instance has been created it can be accessed globally in three ways:
   * 1. By calling `videojs.getPlayer('example_video_1');`
   * 2. By calling `videojs('example_video_1');` (not recomended)
   * 2. By using it directly via  `videojs.players.example_video_1;`
   *
   * @extends Component
   * @global
   */
  class Player extends Component {
    /**
     * Create an instance of this class.
     *
     * @param {Element} tag
     *        The original video DOM element used for configuring options.
     *
     * @param {Object} [options]
     *        Object of option names and values.
     *
     * @param {Function} [ready]
     *        Ready callback function.
     */
    constructor(tag, options, ready) {
      // Make sure tag ID exists
      tag.id = tag.id || options.id || `vjs_video_${newGUID()}`;

      // Set Options
      // The options argument overrides options set in the video tag
      // which overrides globally set options.
      // This latter part coincides with the load order
      // (tag must exist before Player)
      options = Object.assign(Player.getTagSettings(tag), options);

      // Delay the initialization of children because we need to set up
      // player properties first, and can't use `this` before `super()`
      options.initChildren = false;

      // Same with creating the element
      options.createEl = false;

      // don't auto mixin the evented mixin
      options.evented = false;

      // we don't want the player to report touch activity on itself
      // see enableTouchActivity in Component
      options.reportTouchActivity = false;

      // If language is not set, get the closest lang attribute
      if (!options.language) {
        const closest = tag.closest('[lang]');
        if (closest) {
          options.language = closest.getAttribute('lang');
        }
      }

      // Run base component initializing with new options
      super(null, options, ready);

      // Create bound methods for document listeners.
      this.boundDocumentFullscreenChange_ = e => this.documentFullscreenChange_(e);
      this.boundFullWindowOnEscKey_ = e => this.fullWindowOnEscKey(e);
      this.boundUpdateStyleEl_ = e => this.updateStyleEl_(e);
      this.boundApplyInitTime_ = e => this.applyInitTime_(e);
      this.boundUpdateCurrentBreakpoint_ = e => this.updateCurrentBreakpoint_(e);
      this.boundHandleTechClick_ = e => this.handleTechClick_(e);
      this.boundHandleTechDoubleClick_ = e => this.handleTechDoubleClick_(e);
      this.boundHandleTechTouchStart_ = e => this.handleTechTouchStart_(e);
      this.boundHandleTechTouchMove_ = e => this.handleTechTouchMove_(e);
      this.boundHandleTechTouchEnd_ = e => this.handleTechTouchEnd_(e);
      this.boundHandleTechTap_ = e => this.handleTechTap_(e);

      // default isFullscreen_ to false
      this.isFullscreen_ = false;

      // create logger
      this.log = createLogger(this.id_);

      // Hold our own reference to fullscreen api so it can be mocked in tests
      this.fsApi_ = FullscreenApi;

      // Tracks when a tech changes the poster
      this.isPosterFromTech_ = false;

      // Holds callback info that gets queued when playback rate is zero
      // and a seek is happening
      this.queuedCallbacks_ = [];

      // Turn off API access because we're loading a new tech that might load asynchronously
      this.isReady_ = false;

      // Init state hasStarted_
      this.hasStarted_ = false;

      // Init state userActive_
      this.userActive_ = false;

      // Init debugEnabled_
      this.debugEnabled_ = false;

      // Init state audioOnlyMode_
      this.audioOnlyMode_ = false;

      // Init state audioPosterMode_
      this.audioPosterMode_ = false;

      // Init state audioOnlyCache_
      this.audioOnlyCache_ = {
        playerHeight: null,
        hiddenChildren: []
      };

      // if the global option object was accidentally blown away by
      // someone, bail early with an informative error
      if (!this.options_ || !this.options_.techOrder || !this.options_.techOrder.length) {
        throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');
      }

      // Store the original tag used to set options
      this.tag = tag;

      // Store the tag attributes used to restore html5 element
      this.tagAttributes = tag && getAttributes(tag);

      // Update current language
      this.language(this.options_.language);

      // Update Supported Languages
      if (options.languages) {
        // Normalise player option languages to lowercase
        const languagesToLower = {};
        Object.getOwnPropertyNames(options.languages).forEach(function (name) {
          languagesToLower[name.toLowerCase()] = options.languages[name];
        });
        this.languages_ = languagesToLower;
      } else {
        this.languages_ = Player.prototype.options_.languages;
      }
      this.resetCache_();

      // Set poster
      this.poster_ = options.poster || '';

      // Set controls
      this.controls_ = !!options.controls;

      // Original tag settings stored in options
      // now remove immediately so native controls don't flash.
      // May be turned back on by HTML5 tech if nativeControlsForTouch is true
      tag.controls = false;
      tag.removeAttribute('controls');
      this.changingSrc_ = false;
      this.playCallbacks_ = [];
      this.playTerminatedQueue_ = [];

      // the attribute overrides the option
      if (tag.hasAttribute('autoplay')) {
        this.autoplay(true);
      } else {
        // otherwise use the setter to validate and
        // set the correct value.
        this.autoplay(this.options_.autoplay);
      }

      // check plugins
      if (options.plugins) {
        Object.keys(options.plugins).forEach(name => {
          if (typeof this[name] !== 'function') {
            throw new Error(`plugin "${name}" does not exist`);
          }
        });
      }

      /*
       * Store the internal state of scrubbing
       *
       * @private
       * @return {Boolean} True if the user is scrubbing
       */
      this.scrubbing_ = false;
      this.el_ = this.createEl();

      // Make this an evented object and use `el_` as its event bus.
      evented(this, {
        eventBusKey: 'el_'
      });

      // listen to document and player fullscreenchange handlers so we receive those events
      // before a user can receive them so we can update isFullscreen appropriately.
      // make sure that we listen to fullscreenchange events before everything else to make sure that
      // our isFullscreen method is updated properly for internal components as well as external.
      if (this.fsApi_.requestFullscreen) {
        on(document, this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);
        this.on(this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);
      }
      if (this.fluid_) {
        this.on(['playerreset', 'resize'], this.boundUpdateStyleEl_);
      }
      // We also want to pass the original player options to each component and plugin
      // as well so they don't need to reach back into the player for options later.
      // We also need to do another copy of this.options_ so we don't end up with
      // an infinite loop.
      const playerOptionsCopy = merge(this.options_);

      // Load plugins
      if (options.plugins) {
        Object.keys(options.plugins).forEach(name => {
          this[name](options.plugins[name]);
        });
      }

      // Enable debug mode to fire debugon event for all plugins.
      if (options.debug) {
        this.debug(true);
      }
      this.options_.playerOptions = playerOptionsCopy;
      this.middleware_ = [];
      this.playbackRates(options.playbackRates);
      this.initChildren();

      // Set isAudio based on whether or not an audio tag was used
      this.isAudio(tag.nodeName.toLowerCase() === 'audio');

      // Update controls className. Can't do this when the controls are initially
      // set because the element doesn't exist yet.
      if (this.controls()) {
        this.addClass('vjs-controls-enabled');
      } else {
        this.addClass('vjs-controls-disabled');
      }

      // Set ARIA label and region role depending on player type
      this.el_.setAttribute('role', 'region');
      if (this.isAudio()) {
        this.el_.setAttribute('aria-label', this.localize('Audio Player'));
      } else {
        this.el_.setAttribute('aria-label', this.localize('Video Player'));
      }
      if (this.isAudio()) {
        this.addClass('vjs-audio');
      }

      // TODO: Make this smarter. Toggle user state between touching/mousing
      // using events, since devices can have both touch and mouse events.
      // TODO: Make this check be performed again when the window switches between monitors
      // (See https://github.com/videojs/video.js/issues/5683)
      if (TOUCH_ENABLED) {
        this.addClass('vjs-touch-enabled');
      }

      // iOS Safari has broken hover handling
      if (!IS_IOS) {
        this.addClass('vjs-workinghover');
      }

      // Make player easily findable by ID
      Player.players[this.id_] = this;

      // Add a major version class to aid css in plugins
      const majorVersion = version.split('.')[0];
      this.addClass(`vjs-v${majorVersion}`);

      // When the player is first initialized, trigger activity so components
      // like the control bar show themselves if needed
      this.userActive(true);
      this.reportUserActivity();
      this.one('play', e => this.listenForUserActivity_(e));
      this.on('keydown', e => this.handleKeyDown(e));
      this.on('languagechange', e => this.handleLanguagechange(e));
      this.breakpoints(this.options_.breakpoints);
      this.responsive(this.options_.responsive);

      // Calling both the audio mode methods after the player is fully
      // setup to be able to listen to the events triggered by them
      this.on('ready', () => {
        // Calling the audioPosterMode method first so that
        // the audioOnlyMode can take precedence when both options are set to true
        this.audioPosterMode(this.options_.audioPosterMode);
        this.audioOnlyMode(this.options_.audioOnlyMode);
      });
    }

    /**
     * Destroys the video player and does any necessary cleanup.
     *
     * This is especially helpful if you are dynamically adding and removing videos
     * to/from the DOM.
     *
     * @fires Player#dispose
     */
    dispose() {
      /**
       * Called when the player is being disposed of.
       *
       * @event Player#dispose
       * @type {Event}
       */
      this.trigger('dispose');
      // prevent dispose from being called twice
      this.off('dispose');

      // Make sure all player-specific document listeners are unbound. This is
      off(document, this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);
      off(document, 'keydown', this.boundFullWindowOnEscKey_);
      if (this.styleEl_ && this.styleEl_.parentNode) {
        this.styleEl_.parentNode.removeChild(this.styleEl_);
        this.styleEl_ = null;
      }

      // Kill reference to this player
      Player.players[this.id_] = null;
      if (this.tag && this.tag.player) {
        this.tag.player = null;
      }
      if (this.el_ && this.el_.player) {
        this.el_.player = null;
      }
      if (this.tech_) {
        this.tech_.dispose();
        this.isPosterFromTech_ = false;
        this.poster_ = '';
      }
      if (this.playerElIngest_) {
        this.playerElIngest_ = null;
      }
      if (this.tag) {
        this.tag = null;
      }
      clearCacheForPlayer(this);

      // remove all event handlers for track lists
      // all tracks and track listeners are removed on
      // tech dispose
      ALL.names.forEach(name => {
        const props = ALL[name];
        const list = this[props.getterName]();

        // if it is not a native list
        // we have to manually remove event listeners
        if (list && list.off) {
          list.off();
        }
      });

      // the actual .el_ is removed here, or replaced if
      super.dispose({
        restoreEl: this.options_.restoreEl
      });
    }

    /**
     * Create the `Player`'s DOM element.
     *
     * @return {Element}
     *         The DOM element that gets created.
     */
    createEl() {
      let tag = this.tag;
      let el;
      let playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute('data-vjs-player');
      const divEmbed = this.tag.tagName.toLowerCase() === 'video-js';
      if (playerElIngest) {
        el = this.el_ = tag.parentNode;
      } else if (!divEmbed) {
        el = this.el_ = super.createEl('div');
      }

      // Copy over all the attributes from the tag, including ID and class
      // ID will now reference player box, not the video tag
      const attrs = getAttributes(tag);
      if (divEmbed) {
        el = this.el_ = tag;
        tag = this.tag = document.createElement('video');
        while (el.children.length) {
          tag.appendChild(el.firstChild);
        }
        if (!hasClass(el, 'video-js')) {
          addClass(el, 'video-js');
        }
        el.appendChild(tag);
        playerElIngest = this.playerElIngest_ = el;
        // move properties over from our custom `video-js` element
        // to our new `video` element. This will move things like
        // `src` or `controls` that were set via js before the player
        // was initialized.
        Object.keys(el).forEach(k => {
          try {
            tag[k] = el[k];
          } catch (e) {
            // we got a a property like outerHTML which we can't actually copy, ignore it
          }
        });
      }

      // set tabindex to -1 to remove the video element from the focus order
      tag.setAttribute('tabindex', '-1');
      attrs.tabindex = '-1';

      // Workaround for #4583 on Chrome (on Windows) with JAWS.
      // See https://github.com/FreedomScientific/VFO-standards-support/issues/78
      // Note that we can't detect if JAWS is being used, but this ARIA attribute
      // doesn't change behavior of Chrome if JAWS is not being used
      if (IS_CHROME && IS_WINDOWS) {
        tag.setAttribute('role', 'application');
        attrs.role = 'application';
      }

      // Remove width/height attrs from tag so CSS can make it 100% width/height
      tag.removeAttribute('width');
      tag.removeAttribute('height');
      if ('width' in attrs) {
        delete attrs.width;
      }
      if ('height' in attrs) {
        delete attrs.height;
      }
      Object.getOwnPropertyNames(attrs).forEach(function (attr) {
        // don't copy over the class attribute to the player element when we're in a div embed
        // the class is already set up properly in the divEmbed case
        // and we want to make sure that the `video-js` class doesn't get lost
        if (!(divEmbed && attr === 'class')) {
          el.setAttribute(attr, attrs[attr]);
        }
        if (divEmbed) {
          tag.setAttribute(attr, attrs[attr]);
        }
      });

      // Update tag id/class for use as HTML5 playback tech
      // Might think we should do this after embedding in container so .vjs-tech class
      // doesn't flash 100% width/height, but class only applies with .video-js parent
      tag.playerId = tag.id;
      tag.id += '_html5_api';
      tag.className = 'vjs-tech';

      // Make player findable on elements
      tag.player = el.player = this;
      // Default state of video is paused
      this.addClass('vjs-paused');

      // Add a style element in the player that we'll use to set the width/height
      // of the player in a way that's still overridable by CSS, just like the
      // video element
      if (window.VIDEOJS_NO_DYNAMIC_STYLE !== true) {
        this.styleEl_ = createStyleElement('vjs-styles-dimensions');
        const defaultsStyleEl = $('.vjs-styles-defaults');
        const head = $('head');
        head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);
      }
      this.fill_ = false;
      this.fluid_ = false;

      // Pass in the width/height/aspectRatio options which will update the style el
      this.width(this.options_.width);
      this.height(this.options_.height);
      this.fill(this.options_.fill);
      this.fluid(this.options_.fluid);
      this.aspectRatio(this.options_.aspectRatio);
      // support both crossOrigin and crossorigin to reduce confusion and issues around the name
      this.crossOrigin(this.options_.crossOrigin || this.options_.crossorigin);

      // Hide any links within the video/audio tag,
      // because IE doesn't hide them completely from screen readers.
      const links = tag.getElementsByTagName('a');
      for (let i = 0; i < links.length; i++) {
        const linkEl = links.item(i);
        addClass(linkEl, 'vjs-hidden');
        linkEl.setAttribute('hidden', 'hidden');
      }

      // insertElFirst seems to cause the networkState to flicker from 3 to 2, so
      // keep track of the original for later so we can know if the source originally failed
      tag.initNetworkState_ = tag.networkState;

      // Wrap video tag in div (el/box) container
      if (tag.parentNode && !playerElIngest) {
        tag.parentNode.insertBefore(el, tag);
      }

      // insert the tag as the first child of the player element
      // then manually add it to the children array so that this.addChild
      // will work properly for other components
      //
      // Breaks iPhone, fixed in HTML5 setup.
      prependTo(tag, el);
      this.children_.unshift(tag);

      // Set lang attr on player to ensure CSS :lang() in consistent with player
      // if it's been set to something different to the doc
      this.el_.setAttribute('lang', this.language_);
      this.el_.setAttribute('translate', 'no');
      this.el_ = el;
      return el;
    }

    /**
     * Get or set the `Player`'s crossOrigin option. For the HTML5 player, this
     * sets the `crossOrigin` property on the `<video>` tag to control the CORS
     * behavior.
     *
     * @see [Video Element Attributes]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-crossorigin}
     *
     * @param {string|null} [value]
     *        The value to set the `Player`'s crossOrigin to. If an argument is
     *        given, must be one of `'anonymous'` or `'use-credentials'`, or 'null'.
     *
     * @return {string|null|undefined}
     *         - The current crossOrigin value of the `Player` when getting.
     *         - undefined when setting
     */
    crossOrigin(value) {
      // `null` can be set to unset a value
      if (typeof value === 'undefined') {
        return this.techGet_('crossOrigin');
      }
      if (value !== null && value !== 'anonymous' && value !== 'use-credentials') {
        log.warn(`crossOrigin must be null,  "anonymous" or "use-credentials", given "${value}"`);
        return;
      }
      this.techCall_('setCrossOrigin', value);
      if (this.posterImage) {
        this.posterImage.crossOrigin(value);
      }
      return;
    }

    /**
     * A getter/setter for the `Player`'s width. Returns the player's configured value.
     * To get the current width use `currentWidth()`.
     *
     * @param {number} [value]
     *        The value to set the `Player`'s width to.
     *
     * @return {number}
     *         The current width of the `Player` when getting.
     */
    width(value) {
      return this.dimension('width', value);
    }

    /**
     * A getter/setter for the `Player`'s height. Returns the player's configured value.
     * To get the current height use `currentheight()`.
     *
     * @param {number} [value]
     *        The value to set the `Player`'s height to.
     *
     * @return {number}
     *         The current height of the `Player` when getting.
     */
    height(value) {
      return this.dimension('height', value);
    }

    /**
     * A getter/setter for the `Player`'s width & height.
     *
     * @param {string} dimension
     *        This string can be:
     *        - 'width'
     *        - 'height'
     *
     * @param {number} [value]
     *        Value for dimension specified in the first argument.
     *
     * @return {number}
     *         The dimension arguments value when getting (width/height).
     */
    dimension(dimension, value) {
      const privDimension = dimension + '_';
      if (value === undefined) {
        return this[privDimension] || 0;
      }
      if (value === '' || value === 'auto') {
        // If an empty string is given, reset the dimension to be automatic
        this[privDimension] = undefined;
        this.updateStyleEl_();
        return;
      }
      const parsedVal = parseFloat(value);
      if (isNaN(parsedVal)) {
        log.error(`Improper value "${value}" supplied for for ${dimension}`);
        return;
      }
      this[privDimension] = parsedVal;
      this.updateStyleEl_();
    }

    /**
     * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.
     *
     * Turning this on will turn off fill mode.
     *
     * @param {boolean} [bool]
     *        - A value of true adds the class.
     *        - A value of false removes the class.
     *        - No value will be a getter.
     *
     * @return {boolean|undefined}
     *         - The value of fluid when getting.
     *         - `undefined` when setting.
     */
    fluid(bool) {
      if (bool === undefined) {
        return !!this.fluid_;
      }
      this.fluid_ = !!bool;
      if (isEvented(this)) {
        this.off(['playerreset', 'resize'], this.boundUpdateStyleEl_);
      }
      if (bool) {
        this.addClass('vjs-fluid');
        this.fill(false);
        addEventedCallback(this, () => {
          this.on(['playerreset', 'resize'], this.boundUpdateStyleEl_);
        });
      } else {
        this.removeClass('vjs-fluid');
      }
      this.updateStyleEl_();
    }

    /**
     * A getter/setter/toggler for the vjs-fill `className` on the `Player`.
     *
     * Turning this on will turn off fluid mode.
     *
     * @param {boolean} [bool]
     *        - A value of true adds the class.
     *        - A value of false removes the class.
     *        - No value will be a getter.
     *
     * @return {boolean|undefined}
     *         - The value of fluid when getting.
     *         - `undefined` when setting.
     */
    fill(bool) {
      if (bool === undefined) {
        return !!this.fill_;
      }
      this.fill_ = !!bool;
      if (bool) {
        this.addClass('vjs-fill');
        this.fluid(false);
      } else {
        this.removeClass('vjs-fill');
      }
    }

    /**
     * Get/Set the aspect ratio
     *
     * @param {string} [ratio]
     *        Aspect ratio for player
     *
     * @return {string|undefined}
     *         returns the current aspect ratio when getting
     */

    /**
     * A getter/setter for the `Player`'s aspect ratio.
     *
     * @param {string} [ratio]
     *        The value to set the `Player`'s aspect ratio to.
     *
     * @return {string|undefined}
     *         - The current aspect ratio of the `Player` when getting.
     *         - undefined when setting
     */
    aspectRatio(ratio) {
      if (ratio === undefined) {
        return this.aspectRatio_;
      }

      // Check for width:height format
      if (!/^\d+\:\d+$/.test(ratio)) {
        throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');
      }
      this.aspectRatio_ = ratio;

      // We're assuming if you set an aspect ratio you want fluid mode,
      // because in fixed mode you could calculate width and height yourself.
      this.fluid(true);
      this.updateStyleEl_();
    }

    /**
     * Update styles of the `Player` element (height, width and aspect ratio).
     *
     * @private
     * @listens Tech#loadedmetadata
     */
    updateStyleEl_() {
      if (window.VIDEOJS_NO_DYNAMIC_STYLE === true) {
        const width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;
        const height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;
        const techEl = this.tech_ && this.tech_.el();
        if (techEl) {
          if (width >= 0) {
            techEl.width = width;
          }
          if (height >= 0) {
            techEl.height = height;
          }
        }
        return;
      }
      let width;
      let height;
      let aspectRatio;
      let idClass;

      // The aspect ratio is either used directly or to calculate width and height.
      if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {
        // Use any aspectRatio that's been specifically set
        aspectRatio = this.aspectRatio_;
      } else if (this.videoWidth() > 0) {
        // Otherwise try to get the aspect ratio from the video metadata
        aspectRatio = this.videoWidth() + ':' + this.videoHeight();
      } else {
        // Or use a default. The video element's is 2:1, but 16:9 is more common.
        aspectRatio = '16:9';
      }

      // Get the ratio as a decimal we can use to calculate dimensions
      const ratioParts = aspectRatio.split(':');
      const ratioMultiplier = ratioParts[1] / ratioParts[0];
      if (this.width_ !== undefined) {
        // Use any width that's been specifically set
        width = this.width_;
      } else if (this.height_ !== undefined) {
        // Or calculate the width from the aspect ratio if a height has been set
        width = this.height_ / ratioMultiplier;
      } else {
        // Or use the video's metadata, or use the video el's default of 300
        width = this.videoWidth() || 300;
      }
      if (this.height_ !== undefined) {
        // Use any height that's been specifically set
        height = this.height_;
      } else {
        // Otherwise calculate the height from the ratio and the width
        height = width * ratioMultiplier;
      }

      // Ensure the CSS class is valid by starting with an alpha character
      if (/^[^a-zA-Z]/.test(this.id())) {
        idClass = 'dimensions-' + this.id();
      } else {
        idClass = this.id() + '-dimensions';
      }

      // Ensure the right class is still on the player for the style element
      this.addClass(idClass);
      setTextContent(this.styleEl_, `
      .${idClass} {
        width: ${width}px;
        height: ${height}px;
      }

      .${idClass}.vjs-fluid:not(.vjs-audio-only-mode) {
        padding-top: ${ratioMultiplier * 100}%;
      }
    `);
    }

    /**
     * Load/Create an instance of playback {@link Tech} including element
     * and API methods. Then append the `Tech` element in `Player` as a child.
     *
     * @param {string} techName
     *        name of the playback technology
     *
     * @param {string} source
     *        video source
     *
     * @private
     */
    loadTech_(techName, source) {
      // Pause and remove current playback technology
      if (this.tech_) {
        this.unloadTech_();
      }
      const titleTechName = toTitleCase(techName);
      const camelTechName = techName.charAt(0).toLowerCase() + techName.slice(1);

      // get rid of the HTML5 video tag as soon as we are using another tech
      if (titleTechName !== 'Html5' && this.tag) {
        Tech.getTech('Html5').disposeMediaElement(this.tag);
        this.tag.player = null;
        this.tag = null;
      }
      this.techName_ = titleTechName;

      // Turn off API access because we're loading a new tech that might load asynchronously
      this.isReady_ = false;
      let autoplay = this.autoplay();

      // if autoplay is a string (or `true` with normalizeAutoplay: true) we pass false to the tech
      // because the player is going to handle autoplay on `loadstart`
      if (typeof this.autoplay() === 'string' || this.autoplay() === true && this.options_.normalizeAutoplay) {
        autoplay = false;
      }

      // Grab tech-specific options from player options and add source and parent element to use.
      const techOptions = {
        source,
        autoplay,
        'nativeControlsForTouch': this.options_.nativeControlsForTouch,
        'playerId': this.id(),
        'techId': `${this.id()}_${camelTechName}_api`,
        'playsinline': this.options_.playsinline,
        'preload': this.options_.preload,
        'loop': this.options_.loop,
        'disablePictureInPicture': this.options_.disablePictureInPicture,
        'muted': this.options_.muted,
        'poster': this.poster(),
        'language': this.language(),
        'playerElIngest': this.playerElIngest_ || false,
        'vtt.js': this.options_['vtt.js'],
        'canOverridePoster': !!this.options_.techCanOverridePoster,
        'enableSourceset': this.options_.enableSourceset
      };
      ALL.names.forEach(name => {
        const props = ALL[name];
        techOptions[props.getterName] = this[props.privateName];
      });
      Object.assign(techOptions, this.options_[titleTechName]);
      Object.assign(techOptions, this.options_[camelTechName]);
      Object.assign(techOptions, this.options_[techName.toLowerCase()]);
      if (this.tag) {
        techOptions.tag = this.tag;
      }
      if (source && source.src === this.cache_.src && this.cache_.currentTime > 0) {
        techOptions.startTime = this.cache_.currentTime;
      }

      // Initialize tech instance
      const TechClass = Tech.getTech(techName);
      if (!TechClass) {
        throw new Error(`No Tech named '${titleTechName}' exists! '${titleTechName}' should be registered using videojs.registerTech()'`);
      }
      this.tech_ = new TechClass(techOptions);

      // player.triggerReady is always async, so don't need this to be async
      this.tech_.ready(bind_(this, this.handleTechReady_), true);
      textTrackConverter.jsonToTextTracks(this.textTracksJson_ || [], this.tech_);

      // Listen to all HTML5-defined events and trigger them on the player
      TECH_EVENTS_RETRIGGER.forEach(event => {
        this.on(this.tech_, event, e => this[`handleTech${toTitleCase(event)}_`](e));
      });
      Object.keys(TECH_EVENTS_QUEUE).forEach(event => {
        this.on(this.tech_, event, eventObj => {
          if (this.tech_.playbackRate() === 0 && this.tech_.seeking()) {
            this.queuedCallbacks_.push({
              callback: this[`handleTech${TECH_EVENTS_QUEUE[event]}_`].bind(this),
              event: eventObj
            });
            return;
          }
          this[`handleTech${TECH_EVENTS_QUEUE[event]}_`](eventObj);
        });
      });
      this.on(this.tech_, 'loadstart', e => this.handleTechLoadStart_(e));
      this.on(this.tech_, 'sourceset', e => this.handleTechSourceset_(e));
      this.on(this.tech_, 'waiting', e => this.handleTechWaiting_(e));
      this.on(this.tech_, 'ended', e => this.handleTechEnded_(e));
      this.on(this.tech_, 'seeking', e => this.handleTechSeeking_(e));
      this.on(this.tech_, 'play', e => this.handleTechPlay_(e));
      this.on(this.tech_, 'pause', e => this.handleTechPause_(e));
      this.on(this.tech_, 'durationchange', e => this.handleTechDurationChange_(e));
      this.on(this.tech_, 'fullscreenchange', (e, data) => this.handleTechFullscreenChange_(e, data));
      this.on(this.tech_, 'fullscreenerror', (e, err) => this.handleTechFullscreenError_(e, err));
      this.on(this.tech_, 'enterpictureinpicture', e => this.handleTechEnterPictureInPicture_(e));
      this.on(this.tech_, 'leavepictureinpicture', e => this.handleTechLeavePictureInPicture_(e));
      this.on(this.tech_, 'error', e => this.handleTechError_(e));
      this.on(this.tech_, 'posterchange', e => this.handleTechPosterChange_(e));
      this.on(this.tech_, 'textdata', e => this.handleTechTextData_(e));
      this.on(this.tech_, 'ratechange', e => this.handleTechRateChange_(e));
      this.on(this.tech_, 'loadedmetadata', this.boundUpdateStyleEl_);
      this.usingNativeControls(this.techGet_('controls'));
      if (this.controls() && !this.usingNativeControls()) {
        this.addTechControlsListeners_();
      }

      // Add the tech element in the DOM if it was not already there
      // Make sure to not insert the original video element if using Html5
      if (this.tech_.el().parentNode !== this.el() && (titleTechName !== 'Html5' || !this.tag)) {
        prependTo(this.tech_.el(), this.el());
      }

      // Get rid of the original video tag reference after the first tech is loaded
      if (this.tag) {
        this.tag.player = null;
        this.tag = null;
      }
    }

    /**
     * Unload and dispose of the current playback {@link Tech}.
     *
     * @private
     */
    unloadTech_() {
      // Save the current text tracks so that we can reuse the same text tracks with the next tech
      ALL.names.forEach(name => {
        const props = ALL[name];
        this[props.privateName] = this[props.getterName]();
      });
      this.textTracksJson_ = textTrackConverter.textTracksToJson(this.tech_);
      this.isReady_ = false;
      this.tech_.dispose();
      this.tech_ = false;
      if (this.isPosterFromTech_) {
        this.poster_ = '';
        this.trigger('posterchange');
      }
      this.isPosterFromTech_ = false;
    }

    /**
     * Return a reference to the current {@link Tech}.
     * It will print a warning by default about the danger of using the tech directly
     * but any argument that is passed in will silence the warning.
     *
     * @param {*} [safety]
     *        Anything passed in to silence the warning
     *
     * @return {Tech}
     *         The Tech
     */
    tech(safety) {
      if (safety === undefined) {
        log.warn('Using the tech directly can be dangerous. I hope you know what you\'re doing.\n' + 'See https://github.com/videojs/video.js/issues/2617 for more info.\n');
      }
      return this.tech_;
    }

    /**
     * Set up click and touch listeners for the playback element
     *
     * - On desktops: a click on the video itself will toggle playback
     * - On mobile devices: a click on the video toggles controls
     *   which is done by toggling the user state between active and
     *   inactive
     * - A tap can signal that a user has become active or has become inactive
     *   e.g. a quick tap on an iPhone movie should reveal the controls. Another
     *   quick tap should hide them again (signaling the user is in an inactive
     *   viewing state)
     * - In addition to this, we still want the user to be considered inactive after
     *   a few seconds of inactivity.
     *
     * > Note: the only part of iOS interaction we can't mimic with this setup
     * is a touch and hold on the video element counting as activity in order to
     * keep the controls showing, but that shouldn't be an issue. A touch and hold
     * on any controls will still keep the user active
     *
     * @private
     */
    addTechControlsListeners_() {
      // Make sure to remove all the previous listeners in case we are called multiple times.
      this.removeTechControlsListeners_();
      this.on(this.tech_, 'click', this.boundHandleTechClick_);
      this.on(this.tech_, 'dblclick', this.boundHandleTechDoubleClick_);

      // If the controls were hidden we don't want that to change without a tap event
      // so we'll check if the controls were already showing before reporting user
      // activity
      this.on(this.tech_, 'touchstart', this.boundHandleTechTouchStart_);
      this.on(this.tech_, 'touchmove', this.boundHandleTechTouchMove_);
      this.on(this.tech_, 'touchend', this.boundHandleTechTouchEnd_);

      // The tap listener needs to come after the touchend listener because the tap
      // listener cancels out any reportedUserActivity when setting userActive(false)
      this.on(this.tech_, 'tap', this.boundHandleTechTap_);
    }

    /**
     * Remove the listeners used for click and tap controls. This is needed for
     * toggling to controls disabled, where a tap/touch should do nothing.
     *
     * @private
     */
    removeTechControlsListeners_() {
      // We don't want to just use `this.off()` because there might be other needed
      // listeners added by techs that extend this.
      this.off(this.tech_, 'tap', this.boundHandleTechTap_);
      this.off(this.tech_, 'touchstart', this.boundHandleTechTouchStart_);
      this.off(this.tech_, 'touchmove', this.boundHandleTechTouchMove_);
      this.off(this.tech_, 'touchend', this.boundHandleTechTouchEnd_);
      this.off(this.tech_, 'click', this.boundHandleTechClick_);
      this.off(this.tech_, 'dblclick', this.boundHandleTechDoubleClick_);
    }

    /**
     * Player waits for the tech to be ready
     *
     * @private
     */
    handleTechReady_() {
      this.triggerReady();

      // Keep the same volume as before
      if (this.cache_.volume) {
        this.techCall_('setVolume', this.cache_.volume);
      }

      // Look if the tech found a higher resolution poster while loading
      this.handleTechPosterChange_();

      // Update the duration if available
      this.handleTechDurationChange_();
    }

    /**
     * Retrigger the `loadstart` event that was triggered by the {@link Tech}.
     *
     * @fires Player#loadstart
     * @listens Tech#loadstart
     * @private
     */
    handleTechLoadStart_() {
      // TODO: Update to use `emptied` event instead. See #1277.

      this.removeClass('vjs-ended', 'vjs-seeking');

      // reset the error state
      this.error(null);

      // Update the duration
      this.handleTechDurationChange_();
      if (!this.paused()) {
        /**
         * Fired when the user agent begins looking for media data
         *
         * @event Player#loadstart
         * @type {Event}
         */
        this.trigger('loadstart');
      } else {
        // reset the hasStarted state
        this.hasStarted(false);
        this.trigger('loadstart');
      }

      // autoplay happens after loadstart for the browser,
      // so we mimic that behavior
      this.manualAutoplay_(this.autoplay() === true && this.options_.normalizeAutoplay ? 'play' : this.autoplay());
    }

    /**
     * Handle autoplay string values, rather than the typical boolean
     * values that should be handled by the tech. Note that this is not
     * part of any specification. Valid values and what they do can be
     * found on the autoplay getter at Player#autoplay()
     */
    manualAutoplay_(type) {
      if (!this.tech_ || typeof type !== 'string') {
        return;
      }

      // Save original muted() value, set muted to true, and attempt to play().
      // On promise rejection, restore muted from saved value
      const resolveMuted = () => {
        const previouslyMuted = this.muted();
        this.muted(true);
        const restoreMuted = () => {
          this.muted(previouslyMuted);
        };

        // restore muted on play terminatation
        this.playTerminatedQueue_.push(restoreMuted);
        const mutedPromise = this.play();
        if (!isPromise(mutedPromise)) {
          return;
        }
        return mutedPromise.catch(err => {
          restoreMuted();
          throw new Error(`Rejection at manualAutoplay. Restoring muted value. ${err ? err : ''}`);
        });
      };
      let promise;

      // if muted defaults to true
      // the only thing we can do is call play
      if (type === 'any' && !this.muted()) {
        promise = this.play();
        if (isPromise(promise)) {
          promise = promise.catch(resolveMuted);
        }
      } else if (type === 'muted' && !this.muted()) {
        promise = resolveMuted();
      } else {
        promise = this.play();
      }
      if (!isPromise(promise)) {
        return;
      }
      return promise.then(() => {
        this.trigger({
          type: 'autoplay-success',
          autoplay: type
        });
      }).catch(() => {
        this.trigger({
          type: 'autoplay-failure',
          autoplay: type
        });
      });
    }

    /**
     * Update the internal source caches so that we return the correct source from
     * `src()`, `currentSource()`, and `currentSources()`.
     *
     * > Note: `currentSources` will not be updated if the source that is passed in exists
     *         in the current `currentSources` cache.
     *
     *
     * @param {Tech~SourceObject} srcObj
     *        A string or object source to update our caches to.
     */
    updateSourceCaches_(srcObj = '') {
      let src = srcObj;
      let type = '';
      if (typeof src !== 'string') {
        src = srcObj.src;
        type = srcObj.type;
      }

      // make sure all the caches are set to default values
      // to prevent null checking
      this.cache_.source = this.cache_.source || {};
      this.cache_.sources = this.cache_.sources || [];

      // try to get the type of the src that was passed in
      if (src && !type) {
        type = findMimetype(this, src);
      }

      // update `currentSource` cache always
      this.cache_.source = merge({}, srcObj, {
        src,
        type
      });
      const matchingSources = this.cache_.sources.filter(s => s.src && s.src === src);
      const sourceElSources = [];
      const sourceEls = this.$$('source');
      const matchingSourceEls = [];
      for (let i = 0; i < sourceEls.length; i++) {
        const sourceObj = getAttributes(sourceEls[i]);
        sourceElSources.push(sourceObj);
        if (sourceObj.src && sourceObj.src === src) {
          matchingSourceEls.push(sourceObj.src);
        }
      }

      // if we have matching source els but not matching sources
      // the current source cache is not up to date
      if (matchingSourceEls.length && !matchingSources.length) {
        this.cache_.sources = sourceElSources;
        // if we don't have matching source or source els set the
        // sources cache to the `currentSource` cache
      } else if (!matchingSources.length) {
        this.cache_.sources = [this.cache_.source];
      }

      // update the tech `src` cache
      this.cache_.src = src;
    }

    /**
     * *EXPERIMENTAL* Fired when the source is set or changed on the {@link Tech}
     * causing the media element to reload.
     *
     * It will fire for the initial source and each subsequent source.
     * This event is a custom event from Video.js and is triggered by the {@link Tech}.
     *
     * The event object for this event contains a `src` property that will contain the source
     * that was available when the event was triggered. This is generally only necessary if Video.js
     * is switching techs while the source was being changed.
     *
     * It is also fired when `load` is called on the player (or media element)
     * because the {@link https://html.spec.whatwg.org/multipage/media.html#dom-media-load|specification for `load`}
     * says that the resource selection algorithm needs to be aborted and restarted.
     * In this case, it is very likely that the `src` property will be set to the
     * empty string `""` to indicate we do not know what the source will be but
     * that it is changing.
     *
     * *This event is currently still experimental and may change in minor releases.*
     * __To use this, pass `enableSourceset` option to the player.__
     *
     * @event Player#sourceset
     * @type {Event}
     * @prop {string} src
     *                The source url available when the `sourceset` was triggered.
     *                It will be an empty string if we cannot know what the source is
     *                but know that the source will change.
     */
    /**
     * Retrigger the `sourceset` event that was triggered by the {@link Tech}.
     *
     * @fires Player#sourceset
     * @listens Tech#sourceset
     * @private
     */
    handleTechSourceset_(event) {
      // only update the source cache when the source
      // was not updated using the player api
      if (!this.changingSrc_) {
        let updateSourceCaches = src => this.updateSourceCaches_(src);
        const playerSrc = this.currentSource().src;
        const eventSrc = event.src;

        // if we have a playerSrc that is not a blob, and a tech src that is a blob
        if (playerSrc && !/^blob:/.test(playerSrc) && /^blob:/.test(eventSrc)) {
          // if both the tech source and the player source were updated we assume
          // something like @videojs/http-streaming did the sourceset and skip updating the source cache.
          if (!this.lastSource_ || this.lastSource_.tech !== eventSrc && this.lastSource_.player !== playerSrc) {
            updateSourceCaches = () => {};
          }
        }

        // update the source to the initial source right away
        // in some cases this will be empty string
        updateSourceCaches(eventSrc);

        // if the `sourceset` `src` was an empty string
        // wait for a `loadstart` to update the cache to `currentSrc`.
        // If a sourceset happens before a `loadstart`, we reset the state
        if (!event.src) {
          this.tech_.any(['sourceset', 'loadstart'], e => {
            // if a sourceset happens before a `loadstart` there
            // is nothing to do as this `handleTechSourceset_`
            // will be called again and this will be handled there.
            if (e.type === 'sourceset') {
              return;
            }
            const techSrc = this.techGet('currentSrc');
            this.lastSource_.tech = techSrc;
            this.updateSourceCaches_(techSrc);
          });
        }
      }
      this.lastSource_ = {
        player: this.currentSource().src,
        tech: event.src
      };
      this.trigger({
        src: event.src,
        type: 'sourceset'
      });
    }

    /**
     * Add/remove the vjs-has-started class
     *
     *
     * @param {boolean} request
     *        - true: adds the class
     *        - false: remove the class
     *
     * @return {boolean}
     *         the boolean value of hasStarted_
     */
    hasStarted(request) {
      if (request === undefined) {
        // act as getter, if we have no request to change
        return this.hasStarted_;
      }
      if (request === this.hasStarted_) {
        return;
      }
      this.hasStarted_ = request;
      if (this.hasStarted_) {
        this.addClass('vjs-has-started');
      } else {
        this.removeClass('vjs-has-started');
      }
    }

    /**
     * Fired whenever the media begins or resumes playback
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}
     * @fires Player#play
     * @listens Tech#play
     * @private
     */
    handleTechPlay_() {
      this.removeClass('vjs-ended', 'vjs-paused');
      this.addClass('vjs-playing');

      // hide the poster when the user hits play
      this.hasStarted(true);
      /**
       * Triggered whenever an {@link Tech#play} event happens. Indicates that
       * playback has started or resumed.
       *
       * @event Player#play
       * @type {Event}
       */
      this.trigger('play');
    }

    /**
     * Retrigger the `ratechange` event that was triggered by the {@link Tech}.
     *
     * If there were any events queued while the playback rate was zero, fire
     * those events now.
     *
     * @private
     * @method Player#handleTechRateChange_
     * @fires Player#ratechange
     * @listens Tech#ratechange
     */
    handleTechRateChange_() {
      if (this.tech_.playbackRate() > 0 && this.cache_.lastPlaybackRate === 0) {
        this.queuedCallbacks_.forEach(queued => queued.callback(queued.event));
        this.queuedCallbacks_ = [];
      }
      this.cache_.lastPlaybackRate = this.tech_.playbackRate();
      /**
       * Fires when the playing speed of the audio/video is changed
       *
       * @event Player#ratechange
       * @type {event}
       */
      this.trigger('ratechange');
    }

    /**
     * Retrigger the `waiting` event that was triggered by the {@link Tech}.
     *
     * @fires Player#waiting
     * @listens Tech#waiting
     * @private
     */
    handleTechWaiting_() {
      this.addClass('vjs-waiting');
      /**
       * A readyState change on the DOM element has caused playback to stop.
       *
       * @event Player#waiting
       * @type {Event}
       */
      this.trigger('waiting');

      // Browsers may emit a timeupdate event after a waiting event. In order to prevent
      // premature removal of the waiting class, wait for the time to change.
      const timeWhenWaiting = this.currentTime();
      const timeUpdateListener = () => {
        if (timeWhenWaiting !== this.currentTime()) {
          this.removeClass('vjs-waiting');
          this.off('timeupdate', timeUpdateListener);
        }
      };
      this.on('timeupdate', timeUpdateListener);
    }

    /**
     * Retrigger the `canplay` event that was triggered by the {@link Tech}.
     * > Note: This is not consistent between browsers. See #1351
     *
     * @fires Player#canplay
     * @listens Tech#canplay
     * @private
     */
    handleTechCanPlay_() {
      this.removeClass('vjs-waiting');
      /**
       * The media has a readyState of HAVE_FUTURE_DATA or greater.
       *
       * @event Player#canplay
       * @type {Event}
       */
      this.trigger('canplay');
    }

    /**
     * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.
     *
     * @fires Player#canplaythrough
     * @listens Tech#canplaythrough
     * @private
     */
    handleTechCanPlayThrough_() {
      this.removeClass('vjs-waiting');
      /**
       * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the
       * entire media file can be played without buffering.
       *
       * @event Player#canplaythrough
       * @type {Event}
       */
      this.trigger('canplaythrough');
    }

    /**
     * Retrigger the `playing` event that was triggered by the {@link Tech}.
     *
     * @fires Player#playing
     * @listens Tech#playing
     * @private
     */
    handleTechPlaying_() {
      this.removeClass('vjs-waiting');
      /**
       * The media is no longer blocked from playback, and has started playing.
       *
       * @event Player#playing
       * @type {Event}
       */
      this.trigger('playing');
    }

    /**
     * Retrigger the `seeking` event that was triggered by the {@link Tech}.
     *
     * @fires Player#seeking
     * @listens Tech#seeking
     * @private
     */
    handleTechSeeking_() {
      this.addClass('vjs-seeking');
      /**
       * Fired whenever the player is jumping to a new time
       *
       * @event Player#seeking
       * @type {Event}
       */
      this.trigger('seeking');
    }

    /**
     * Retrigger the `seeked` event that was triggered by the {@link Tech}.
     *
     * @fires Player#seeked
     * @listens Tech#seeked
     * @private
     */
    handleTechSeeked_() {
      this.removeClass('vjs-seeking', 'vjs-ended');
      /**
       * Fired when the player has finished jumping to a new time
       *
       * @event Player#seeked
       * @type {Event}
       */
      this.trigger('seeked');
    }

    /**
     * Retrigger the `pause` event that was triggered by the {@link Tech}.
     *
     * @fires Player#pause
     * @listens Tech#pause
     * @private
     */
    handleTechPause_() {
      this.removeClass('vjs-playing');
      this.addClass('vjs-paused');
      /**
       * Fired whenever the media has been paused
       *
       * @event Player#pause
       * @type {Event}
       */
      this.trigger('pause');
    }

    /**
     * Retrigger the `ended` event that was triggered by the {@link Tech}.
     *
     * @fires Player#ended
     * @listens Tech#ended
     * @private
     */
    handleTechEnded_() {
      this.addClass('vjs-ended');
      this.removeClass('vjs-waiting');
      if (this.options_.loop) {
        this.currentTime(0);
        this.play();
      } else if (!this.paused()) {
        this.pause();
      }

      /**
       * Fired when the end of the media resource is reached (currentTime == duration)
       *
       * @event Player#ended
       * @type {Event}
       */
      this.trigger('ended');
    }

    /**
     * Fired when the duration of the media resource is first known or changed
     *
     * @listens Tech#durationchange
     * @private
     */
    handleTechDurationChange_() {
      this.duration(this.techGet_('duration'));
    }

    /**
     * Handle a click on the media element to play/pause
     *
     * @param {Event} event
     *        the event that caused this function to trigger
     *
     * @listens Tech#click
     * @private
     */
    handleTechClick_(event) {
      // When controls are disabled a click should not toggle playback because
      // the click is considered a control
      if (!this.controls_) {
        return;
      }
      if (this.options_ === undefined || this.options_.userActions === undefined || this.options_.userActions.click === undefined || this.options_.userActions.click !== false) {
        if (this.options_ !== undefined && this.options_.userActions !== undefined && typeof this.options_.userActions.click === 'function') {
          this.options_.userActions.click.call(this, event);
        } else if (this.paused()) {
          silencePromise(this.play());
        } else {
          this.pause();
        }
      }
    }

    /**
     * Handle a double-click on the media element to enter/exit fullscreen
     *
     * @param {Event} event
     *        the event that caused this function to trigger
     *
     * @listens Tech#dblclick
     * @private
     */
    handleTechDoubleClick_(event) {
      if (!this.controls_) {
        return;
      }

      // we do not want to toggle fullscreen state
      // when double-clicking inside a control bar or a modal
      const inAllowedEls = Array.prototype.some.call(this.$$('.vjs-control-bar, .vjs-modal-dialog'), el => el.contains(event.target));
      if (!inAllowedEls) {
        /*
         * options.userActions.doubleClick
         *
         * If `undefined` or `true`, double-click toggles fullscreen if controls are present
         * Set to `false` to disable double-click handling
         * Set to a function to substitute an external double-click handler
         */
        if (this.options_ === undefined || this.options_.userActions === undefined || this.options_.userActions.doubleClick === undefined || this.options_.userActions.doubleClick !== false) {
          if (this.options_ !== undefined && this.options_.userActions !== undefined && typeof this.options_.userActions.doubleClick === 'function') {
            this.options_.userActions.doubleClick.call(this, event);
          } else if (this.isFullscreen()) {
            this.exitFullscreen();
          } else {
            this.requestFullscreen();
          }
        }
      }
    }

    /**
     * Handle a tap on the media element. It will toggle the user
     * activity state, which hides and shows the controls.
     *
     * @listens Tech#tap
     * @private
     */
    handleTechTap_() {
      this.userActive(!this.userActive());
    }

    /**
     * Handle touch to start
     *
     * @listens Tech#touchstart
     * @private
     */
    handleTechTouchStart_() {
      this.userWasActive = this.userActive();
    }

    /**
     * Handle touch to move
     *
     * @listens Tech#touchmove
     * @private
     */
    handleTechTouchMove_() {
      if (this.userWasActive) {
        this.reportUserActivity();
      }
    }

    /**
     * Handle touch to end
     *
     * @param {Event} event
     *        the touchend event that triggered
     *        this function
     *
     * @listens Tech#touchend
     * @private
     */
    handleTechTouchEnd_(event) {
      // Stop the mouse events from also happening
      if (event.cancelable) {
        event.preventDefault();
      }
    }

    /**
     * @private
     */
    toggleFullscreenClass_() {
      if (this.isFullscreen()) {
        this.addClass('vjs-fullscreen');
      } else {
        this.removeClass('vjs-fullscreen');
      }
    }

    /**
     * when the document fschange event triggers it calls this
     */
    documentFullscreenChange_(e) {
      const targetPlayer = e.target.player;

      // if another player was fullscreen
      // do a null check for targetPlayer because older firefox's would put document as e.target
      if (targetPlayer && targetPlayer !== this) {
        return;
      }
      const el = this.el();
      let isFs = document[this.fsApi_.fullscreenElement] === el;
      if (!isFs && el.matches) {
        isFs = el.matches(':' + this.fsApi_.fullscreen);
      } else if (!isFs && el.msMatchesSelector) {
        isFs = el.msMatchesSelector(':' + this.fsApi_.fullscreen);
      }
      this.isFullscreen(isFs);
    }

    /**
     * Handle Tech Fullscreen Change
     *
     * @param {Event} event
     *        the fullscreenchange event that triggered this function
     *
     * @param {Object} data
     *        the data that was sent with the event
     *
     * @private
     * @listens Tech#fullscreenchange
     * @fires Player#fullscreenchange
     */
    handleTechFullscreenChange_(event, data) {
      if (data) {
        if (data.nativeIOSFullscreen) {
          this.addClass('vjs-ios-native-fs');
          this.tech_.one('webkitendfullscreen', () => {
            this.removeClass('vjs-ios-native-fs');
          });
        }
        this.isFullscreen(data.isFullscreen);
      }
    }
    handleTechFullscreenError_(event, err) {
      this.trigger('fullscreenerror', err);
    }

    /**
     * @private
     */
    togglePictureInPictureClass_() {
      if (this.isInPictureInPicture()) {
        this.addClass('vjs-picture-in-picture');
      } else {
        this.removeClass('vjs-picture-in-picture');
      }
    }

    /**
     * Handle Tech Enter Picture-in-Picture.
     *
     * @param {Event} event
     *        the enterpictureinpicture event that triggered this function
     *
     * @private
     * @listens Tech#enterpictureinpicture
     */
    handleTechEnterPictureInPicture_(event) {
      this.isInPictureInPicture(true);
    }

    /**
     * Handle Tech Leave Picture-in-Picture.
     *
     * @param {Event} event
     *        the leavepictureinpicture event that triggered this function
     *
     * @private
     * @listens Tech#leavepictureinpicture
     */
    handleTechLeavePictureInPicture_(event) {
      this.isInPictureInPicture(false);
    }

    /**
     * Fires when an error occurred during the loading of an audio/video.
     *
     * @private
     * @listens Tech#error
     */
    handleTechError_() {
      const error = this.tech_.error();
      this.error(error);
    }

    /**
     * Retrigger the `textdata` event that was triggered by the {@link Tech}.
     *
     * @fires Player#textdata
     * @listens Tech#textdata
     * @private
     */
    handleTechTextData_() {
      let data = null;
      if (arguments.length > 1) {
        data = arguments[1];
      }

      /**
       * Fires when we get a textdata event from tech
       *
       * @event Player#textdata
       * @type {Event}
       */
      this.trigger('textdata', data);
    }

    /**
     * Get object for cached values.
     *
     * @return {Object}
     *         get the current object cache
     */
    getCache() {
      return this.cache_;
    }

    /**
     * Resets the internal cache object.
     *
     * Using this function outside the player constructor or reset method may
     * have unintended side-effects.
     *
     * @private
     */
    resetCache_() {
      this.cache_ = {
        // Right now, the currentTime is not _really_ cached because it is always
        // retrieved from the tech (see: currentTime). However, for completeness,
        // we set it to zero here to ensure that if we do start actually caching
        // it, we reset it along with everything else.
        currentTime: 0,
        initTime: 0,
        inactivityTimeout: this.options_.inactivityTimeout,
        duration: NaN,
        lastVolume: 1,
        lastPlaybackRate: this.defaultPlaybackRate(),
        media: null,
        src: '',
        source: {},
        sources: [],
        playbackRates: [],
        volume: 1
      };
    }

    /**
     * Pass values to the playback tech
     *
     * @param {string} [method]
     *        the method to call
     *
     * @param {Object} arg
     *        the argument to pass
     *
     * @private
     */
    techCall_(method, arg) {
      // If it's not ready yet, call method when it is

      this.ready(function () {
        if (method in allowedSetters) {
          return set(this.middleware_, this.tech_, method, arg);
        } else if (method in allowedMediators) {
          return mediate(this.middleware_, this.tech_, method, arg);
        }
        try {
          if (this.tech_) {
            this.tech_[method](arg);
          }
        } catch (e) {
          log(e);
          throw e;
        }
      }, true);
    }

    /**
     * Mediate attempt to call playback tech method
     * and return the value of the method called.
     *
     * @param {string} method
     *        Tech method
     *
     * @return {*}
     *         Value returned by the tech method called, undefined if tech
     *         is not ready or tech method is not present
     *
     * @private
     */
    techGet_(method) {
      if (!this.tech_ || !this.tech_.isReady_) {
        return;
      }
      if (method in allowedGetters) {
        return get(this.middleware_, this.tech_, method);
      } else if (method in allowedMediators) {
        return mediate(this.middleware_, this.tech_, method);
      }

      // Log error when playback tech object is present but method
      // is undefined or unavailable
      try {
        return this.tech_[method]();
      } catch (e) {
        // When building additional tech libs, an expected method may not be defined yet
        if (this.tech_[method] === undefined) {
          log(`Video.js: ${method} method not defined for ${this.techName_} playback technology.`, e);
          throw e;
        }

        // When a method isn't available on the object it throws a TypeError
        if (e.name === 'TypeError') {
          log(`Video.js: ${method} unavailable on ${this.techName_} playback technology element.`, e);
          this.tech_.isReady_ = false;
          throw e;
        }

        // If error unknown, just log and throw
        log(e);
        throw e;
      }
    }

    /**
     * Attempt to begin playback at the first opportunity.
     *
     * @return {Promise|undefined}
     *         Returns a promise if the browser supports Promises (or one
     *         was passed in as an option). This promise will be resolved on
     *         the return value of play. If this is undefined it will fulfill the
     *         promise chain otherwise the promise chain will be fulfilled when
     *         the promise from play is fulfilled.
     */
    play() {
      return new Promise(resolve => {
        this.play_(resolve);
      });
    }

    /**
     * The actual logic for play, takes a callback that will be resolved on the
     * return value of play. This allows us to resolve to the play promise if there
     * is one on modern browsers.
     *
     * @private
     * @param {Function} [callback]
     *        The callback that should be called when the techs play is actually called
     */
    play_(callback = silencePromise) {
      this.playCallbacks_.push(callback);
      const isSrcReady = Boolean(!this.changingSrc_ && (this.src() || this.currentSrc()));
      const isSafariOrIOS = Boolean(IS_ANY_SAFARI || IS_IOS);

      // treat calls to play_ somewhat like the `one` event function
      if (this.waitToPlay_) {
        this.off(['ready', 'loadstart'], this.waitToPlay_);
        this.waitToPlay_ = null;
      }

      // if the player/tech is not ready or the src itself is not ready
      // queue up a call to play on `ready` or `loadstart`
      if (!this.isReady_ || !isSrcReady) {
        this.waitToPlay_ = e => {
          this.play_();
        };
        this.one(['ready', 'loadstart'], this.waitToPlay_);

        // if we are in Safari, there is a high chance that loadstart will trigger after the gesture timeperiod
        // in that case, we need to prime the video element by calling load so it'll be ready in time
        if (!isSrcReady && isSafariOrIOS) {
          this.load();
        }
        return;
      }

      // If the player/tech is ready and we have a source, we can attempt playback.
      const val = this.techGet_('play');

      // For native playback, reset the progress bar if we get a play call from a replay.
      const isNativeReplay = isSafariOrIOS && this.hasClass('vjs-ended');
      if (isNativeReplay) {
        this.resetProgressBar_();
      }
      // play was terminated if the returned value is null
      if (val === null) {
        this.runPlayTerminatedQueue_();
      } else {
        this.runPlayCallbacks_(val);
      }
    }

    /**
     * These functions will be run when if play is terminated. If play
     * runPlayCallbacks_ is run these function will not be run. This allows us
     * to differentiate between a terminated play and an actual call to play.
     */
    runPlayTerminatedQueue_() {
      const queue = this.playTerminatedQueue_.slice(0);
      this.playTerminatedQueue_ = [];
      queue.forEach(function (q) {
        q();
      });
    }

    /**
     * When a callback to play is delayed we have to run these
     * callbacks when play is actually called on the tech. This function
     * runs the callbacks that were delayed and accepts the return value
     * from the tech.
     *
     * @param {undefined|Promise} val
     *        The return value from the tech.
     */
    runPlayCallbacks_(val) {
      const callbacks = this.playCallbacks_.slice(0);
      this.playCallbacks_ = [];
      // clear play terminatedQueue since we finished a real play
      this.playTerminatedQueue_ = [];
      callbacks.forEach(function (cb) {
        cb(val);
      });
    }

    /**
     * Pause the video playback
     *
     * @return {Player}
     *         A reference to the player object this function was called on
     */
    pause() {
      this.techCall_('pause');
    }

    /**
     * Check if the player is paused or has yet to play
     *
     * @return {boolean}
     *         - false: if the media is currently playing
     *         - true: if media is not currently playing
     */
    paused() {
      // The initial state of paused should be true (in Safari it's actually false)
      return this.techGet_('paused') === false ? false : true;
    }

    /**
     * Get a TimeRange object representing the current ranges of time that the user
     * has played.
     *
     * @return { import('./utils/time').TimeRange }
     *         A time range object that represents all the increments of time that have
     *         been played.
     */
    played() {
      return this.techGet_('played') || createTimeRanges(0, 0);
    }

    /**
     * Returns whether or not the user is "scrubbing". Scrubbing is
     * when the user has clicked the progress bar handle and is
     * dragging it along the progress bar.
     *
     * @param {boolean} [isScrubbing]
     *        whether the user is or is not scrubbing
     *
     * @return {boolean}
     *         The value of scrubbing when getting
     */
    scrubbing(isScrubbing) {
      if (typeof isScrubbing === 'undefined') {
        return this.scrubbing_;
      }
      this.scrubbing_ = !!isScrubbing;
      this.techCall_('setScrubbing', this.scrubbing_);
      if (isScrubbing) {
        this.addClass('vjs-scrubbing');
      } else {
        this.removeClass('vjs-scrubbing');
      }
    }

    /**
     * Get or set the current time (in seconds)
     *
     * @param {number|string} [seconds]
     *        The time to seek to in seconds
     *
     * @return {number}
     *         - the current time in seconds when getting
     */
    currentTime(seconds) {
      if (typeof seconds !== 'undefined') {
        if (seconds < 0) {
          seconds = 0;
        }
        if (!this.isReady_ || this.changingSrc_ || !this.tech_ || !this.tech_.isReady_) {
          this.cache_.initTime = seconds;
          this.off('canplay', this.boundApplyInitTime_);
          this.one('canplay', this.boundApplyInitTime_);
          return;
        }
        this.techCall_('setCurrentTime', seconds);
        this.cache_.initTime = 0;
        return;
      }

      // cache last currentTime and return. default to 0 seconds
      //
      // Caching the currentTime is meant to prevent a massive amount of reads on the tech's
      // currentTime when scrubbing, but may not provide much performance benefit after all.
      // Should be tested. Also something has to read the actual current time or the cache will
      // never get updated.
      this.cache_.currentTime = this.techGet_('currentTime') || 0;
      return this.cache_.currentTime;
    }

    /**
     * Apply the value of initTime stored in cache as currentTime.
     *
     * @private
     */
    applyInitTime_() {
      this.currentTime(this.cache_.initTime);
    }

    /**
     * Normally gets the length in time of the video in seconds;
     * in all but the rarest use cases an argument will NOT be passed to the method
     *
     * > **NOTE**: The video must have started loading before the duration can be
     * known, and depending on preload behaviour may not be known until the video starts
     * playing.
     *
     * @fires Player#durationchange
     *
     * @param {number} [seconds]
     *        The duration of the video to set in seconds
     *
     * @return {number}
     *         - The duration of the video in seconds when getting
     */
    duration(seconds) {
      if (seconds === undefined) {
        // return NaN if the duration is not known
        return this.cache_.duration !== undefined ? this.cache_.duration : NaN;
      }
      seconds = parseFloat(seconds);

      // Standardize on Infinity for signaling video is live
      if (seconds < 0) {
        seconds = Infinity;
      }
      if (seconds !== this.cache_.duration) {
        // Cache the last set value for optimized scrubbing
        this.cache_.duration = seconds;
        if (seconds === Infinity) {
          this.addClass('vjs-live');
        } else {
          this.removeClass('vjs-live');
        }
        if (!isNaN(seconds)) {
          // Do not fire durationchange unless the duration value is known.
          // @see [Spec]{@link https://www.w3.org/TR/2011/WD-html5-20110113/video.html#media-element-load-algorithm}

          /**
           * @event Player#durationchange
           * @type {Event}
           */
          this.trigger('durationchange');
        }
      }
    }

    /**
     * Calculates how much time is left in the video. Not part
     * of the native video API.
     *
     * @return {number}
     *         The time remaining in seconds
     */
    remainingTime() {
      return this.duration() - this.currentTime();
    }

    /**
     * A remaining time function that is intended to be used when
     * the time is to be displayed directly to the user.
     *
     * @return {number}
     *         The rounded time remaining in seconds
     */
    remainingTimeDisplay() {
      return Math.floor(this.duration()) - Math.floor(this.currentTime());
    }

    //
    // Kind of like an array of portions of the video that have been downloaded.

    /**
     * Get a TimeRange object with an array of the times of the video
     * that have been downloaded. If you just want the percent of the
     * video that's been downloaded, use bufferedPercent.
     *
     * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}
     *
     * @return { import('./utils/time').TimeRange }
     *         A mock {@link TimeRanges} object (following HTML spec)
     */
    buffered() {
      let buffered = this.techGet_('buffered');
      if (!buffered || !buffered.length) {
        buffered = createTimeRanges(0, 0);
      }
      return buffered;
    }

    /**
     * Get the percent (as a decimal) of the video that's been downloaded.
     * This method is not a part of the native HTML video API.
     *
     * @return {number}
     *         A decimal between 0 and 1 representing the percent
     *         that is buffered 0 being 0% and 1 being 100%
     */
    bufferedPercent() {
      return bufferedPercent(this.buffered(), this.duration());
    }

    /**
     * Get the ending time of the last buffered time range
     * This is used in the progress bar to encapsulate all time ranges.
     *
     * @return {number}
     *         The end of the last buffered time range
     */
    bufferedEnd() {
      const buffered = this.buffered();
      const duration = this.duration();
      let end = buffered.end(buffered.length - 1);
      if (end > duration) {
        end = duration;
      }
      return end;
    }

    /**
     * Get or set the current volume of the media
     *
     * @param  {number} [percentAsDecimal]
     *         The new volume as a decimal percent:
     *         - 0 is muted/0%/off
     *         - 1.0 is 100%/full
     *         - 0.5 is half volume or 50%
     *
     * @return {number}
     *         The current volume as a percent when getting
     */
    volume(percentAsDecimal) {
      let vol;
      if (percentAsDecimal !== undefined) {
        // Force value to between 0 and 1
        vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal)));
        this.cache_.volume = vol;
        this.techCall_('setVolume', vol);
        if (vol > 0) {
          this.lastVolume_(vol);
        }
        return;
      }

      // Default to 1 when returning current volume.
      vol = parseFloat(this.techGet_('volume'));
      return isNaN(vol) ? 1 : vol;
    }

    /**
     * Get the current muted state, or turn mute on or off
     *
     * @param {boolean} [muted]
     *        - true to mute
     *        - false to unmute
     *
     * @return {boolean}
     *         - true if mute is on and getting
     *         - false if mute is off and getting
     */
    muted(muted) {
      if (muted !== undefined) {
        this.techCall_('setMuted', muted);
        return;
      }
      return this.techGet_('muted') || false;
    }

    /**
     * Get the current defaultMuted state, or turn defaultMuted on or off. defaultMuted
     * indicates the state of muted on initial playback.
     *
     * ```js
     *   var myPlayer = videojs('some-player-id');
     *
     *   myPlayer.src("http://www.example.com/path/to/video.mp4");
     *
     *   // get, should be false
     *   console.log(myPlayer.defaultMuted());
     *   // set to true
     *   myPlayer.defaultMuted(true);
     *   // get should be true
     *   console.log(myPlayer.defaultMuted());
     * ```
     *
     * @param {boolean} [defaultMuted]
     *        - true to mute
     *        - false to unmute
     *
     * @return {boolean|Player}
     *         - true if defaultMuted is on and getting
     *         - false if defaultMuted is off and getting
     *         - A reference to the current player when setting
     */
    defaultMuted(defaultMuted) {
      if (defaultMuted !== undefined) {
        return this.techCall_('setDefaultMuted', defaultMuted);
      }
      return this.techGet_('defaultMuted') || false;
    }

    /**
     * Get the last volume, or set it
     *
     * @param  {number} [percentAsDecimal]
     *         The new last volume as a decimal percent:
     *         - 0 is muted/0%/off
     *         - 1.0 is 100%/full
     *         - 0.5 is half volume or 50%
     *
     * @return {number}
     *         the current value of lastVolume as a percent when getting
     *
     * @private
     */
    lastVolume_(percentAsDecimal) {
      if (percentAsDecimal !== undefined && percentAsDecimal !== 0) {
        this.cache_.lastVolume = percentAsDecimal;
        return;
      }
      return this.cache_.lastVolume;
    }

    /**
     * Check if current tech can support native fullscreen
     * (e.g. with built in controls like iOS)
     *
     * @return {boolean}
     *         if native fullscreen is supported
     */
    supportsFullScreen() {
      return this.techGet_('supportsFullScreen') || false;
    }

    /**
     * Check if the player is in fullscreen mode or tell the player that it
     * is or is not in fullscreen mode.
     *
     * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official
     * property and instead document.fullscreenElement is used. But isFullscreen is
     * still a valuable property for internal player workings.
     *
     * @param  {boolean} [isFS]
     *         Set the players current fullscreen state
     *
     * @return {boolean}
     *         - true if fullscreen is on and getting
     *         - false if fullscreen is off and getting
     */
    isFullscreen(isFS) {
      if (isFS !== undefined) {
        const oldValue = this.isFullscreen_;
        this.isFullscreen_ = Boolean(isFS);

        // if we changed fullscreen state and we're in prefixed mode, trigger fullscreenchange
        // this is the only place where we trigger fullscreenchange events for older browsers
        // fullWindow mode is treated as a prefixed event and will get a fullscreenchange event as well
        if (this.isFullscreen_ !== oldValue && this.fsApi_.prefixed) {
          /**
             * @event Player#fullscreenchange
             * @type {Event}
             */
          this.trigger('fullscreenchange');
        }
        this.toggleFullscreenClass_();
        return;
      }
      return this.isFullscreen_;
    }

    /**
     * Increase the size of the video to full screen
     * In some browsers, full screen is not supported natively, so it enters
     * "full window mode", where the video fills the browser window.
     * In browsers and devices that support native full screen, sometimes the
     * browser's default controls will be shown, and not the Video.js custom skin.
     * This includes most mobile devices (iOS, Android) and older versions of
     * Safari.
     *
     * @param  {Object} [fullscreenOptions]
     *         Override the player fullscreen options
     *
     * @fires Player#fullscreenchange
     */
    requestFullscreen(fullscreenOptions) {
      if (this.isInPictureInPicture()) {
        this.exitPictureInPicture();
      }
      const self = this;
      return new Promise((resolve, reject) => {
        function offHandler() {
          self.off('fullscreenerror', errorHandler);
          self.off('fullscreenchange', changeHandler);
        }
        function changeHandler() {
          offHandler();
          resolve();
        }
        function errorHandler(e, err) {
          offHandler();
          reject(err);
        }
        self.one('fullscreenchange', changeHandler);
        self.one('fullscreenerror', errorHandler);
        const promise = self.requestFullscreenHelper_(fullscreenOptions);
        if (promise) {
          promise.then(offHandler, offHandler);
          promise.then(resolve, reject);
        }
      });
    }
    requestFullscreenHelper_(fullscreenOptions) {
      let fsOptions;

      // Only pass fullscreen options to requestFullscreen in spec-compliant browsers.
      // Use defaults or player configured option unless passed directly to this method.
      if (!this.fsApi_.prefixed) {
        fsOptions = this.options_.fullscreen && this.options_.fullscreen.options || {};
        if (fullscreenOptions !== undefined) {
          fsOptions = fullscreenOptions;
        }
      }

      // This method works as follows:
      // 1. if a fullscreen api is available, use it
      //   1. call requestFullscreen with potential options
      //   2. if we got a promise from above, use it to update isFullscreen()
      // 2. otherwise, if the tech supports fullscreen, call `enterFullScreen` on it.
      //   This is particularly used for iPhone, older iPads, and non-safari browser on iOS.
      // 3. otherwise, use "fullWindow" mode
      if (this.fsApi_.requestFullscreen) {
        const promise = this.el_[this.fsApi_.requestFullscreen](fsOptions);

        // Even on browsers with promise support this may not return a promise
        if (promise) {
          promise.then(() => this.isFullscreen(true), () => this.isFullscreen(false));
        }
        return promise;
      } else if (this.tech_.supportsFullScreen() && !this.options_.preferFullWindow === true) {
        // we can't take the video.js controls fullscreen but we can go fullscreen
        // with native controls
        this.techCall_('enterFullScreen');
      } else {
        // fullscreen isn't supported so we'll just stretch the video element to
        // fill the viewport
        this.enterFullWindow();
      }
    }

    /**
     * Return the video to its normal size after having been in full screen mode
     *
     * @fires Player#fullscreenchange
     */
    exitFullscreen() {
      const self = this;
      return new Promise((resolve, reject) => {
        function offHandler() {
          self.off('fullscreenerror', errorHandler);
          self.off('fullscreenchange', changeHandler);
        }
        function changeHandler() {
          offHandler();
          resolve();
        }
        function errorHandler(e, err) {
          offHandler();
          reject(err);
        }
        self.one('fullscreenchange', changeHandler);
        self.one('fullscreenerror', errorHandler);
        const promise = self.exitFullscreenHelper_();
        if (promise) {
          promise.then(offHandler, offHandler);
          // map the promise to our resolve/reject methods
          promise.then(resolve, reject);
        }
      });
    }
    exitFullscreenHelper_() {
      if (this.fsApi_.requestFullscreen) {
        const promise = document[this.fsApi_.exitFullscreen]();

        // Even on browsers with promise support this may not return a promise
        if (promise) {
          // we're splitting the promise here, so, we want to catch the
          // potential error so that this chain doesn't have unhandled errors
          silencePromise(promise.then(() => this.isFullscreen(false)));
        }
        return promise;
      } else if (this.tech_.supportsFullScreen() && !this.options_.preferFullWindow === true) {
        this.techCall_('exitFullScreen');
      } else {
        this.exitFullWindow();
      }
    }

    /**
     * When fullscreen isn't supported we can stretch the
     * video container to as wide as the browser will let us.
     *
     * @fires Player#enterFullWindow
     */
    enterFullWindow() {
      this.isFullscreen(true);
      this.isFullWindow = true;

      // Storing original doc overflow value to return to when fullscreen is off
      this.docOrigOverflow = document.documentElement.style.overflow;

      // Add listener for esc key to exit fullscreen
      on(document, 'keydown', this.boundFullWindowOnEscKey_);

      // Hide any scroll bars
      document.documentElement.style.overflow = 'hidden';

      // Apply fullscreen styles
      addClass(document.body, 'vjs-full-window');

      /**
       * @event Player#enterFullWindow
       * @type {Event}
       */
      this.trigger('enterFullWindow');
    }

    /**
     * Check for call to either exit full window or
     * full screen on ESC key
     *
     * @param {string} event
     *        Event to check for key press
     */
    fullWindowOnEscKey(event) {
      if (keycode.isEventKey(event, 'Esc')) {
        if (this.isFullscreen() === true) {
          if (!this.isFullWindow) {
            this.exitFullscreen();
          } else {
            this.exitFullWindow();
          }
        }
      }
    }

    /**
     * Exit full window
     *
     * @fires Player#exitFullWindow
     */
    exitFullWindow() {
      this.isFullscreen(false);
      this.isFullWindow = false;
      off(document, 'keydown', this.boundFullWindowOnEscKey_);

      // Unhide scroll bars.
      document.documentElement.style.overflow = this.docOrigOverflow;

      // Remove fullscreen styles
      removeClass(document.body, 'vjs-full-window');

      // Resize the box, controller, and poster to original sizes
      // this.positionAll();
      /**
       * @event Player#exitFullWindow
       * @type {Event}
       */
      this.trigger('exitFullWindow');
    }

    /**
     * Disable Picture-in-Picture mode.
     *
     * @param {boolean} value
     *                  - true will disable Picture-in-Picture mode
     *                  - false will enable Picture-in-Picture mode
     */
    disablePictureInPicture(value) {
      if (value === undefined) {
        return this.techGet_('disablePictureInPicture');
      }
      this.techCall_('setDisablePictureInPicture', value);
      this.options_.disablePictureInPicture = value;
      this.trigger('disablepictureinpicturechanged');
    }

    /**
     * Check if the player is in Picture-in-Picture mode or tell the player that it
     * is or is not in Picture-in-Picture mode.
     *
     * @param  {boolean} [isPiP]
     *         Set the players current Picture-in-Picture state
     *
     * @return {boolean}
     *         - true if Picture-in-Picture is on and getting
     *         - false if Picture-in-Picture is off and getting
     */
    isInPictureInPicture(isPiP) {
      if (isPiP !== undefined) {
        this.isInPictureInPicture_ = !!isPiP;
        this.togglePictureInPictureClass_();
        return;
      }
      return !!this.isInPictureInPicture_;
    }

    /**
     * Create a floating video window always on top of other windows so that users may
     * continue consuming media while they interact with other content sites, or
     * applications on their device.
     *
     * This can use document picture-in-picture or element picture in picture
     *
     * Set `enableDocumentPictureInPicture` to `true` to use docPiP on a supported browser
     * Else set `disablePictureInPicture` to `false` to disable elPiP on a supported browser
     *
     *
     * @see [Spec]{@link https://w3c.github.io/picture-in-picture/}
     * @see [Spec]{@link https://wicg.github.io/document-picture-in-picture/}
     *
     * @fires Player#enterpictureinpicture
     *
     * @return {Promise}
     *         A promise with a Picture-in-Picture window.
     */
    requestPictureInPicture() {
      if (this.options_.enableDocumentPictureInPicture && window.documentPictureInPicture) {
        const pipContainer = document.createElement(this.el().tagName);
        pipContainer.classList = this.el().classList;
        pipContainer.classList.add('vjs-pip-container');
        if (this.posterImage) {
          pipContainer.appendChild(this.posterImage.el().cloneNode(true));
        }
        if (this.titleBar) {
          pipContainer.appendChild(this.titleBar.el().cloneNode(true));
        }
        pipContainer.appendChild(createEl('p', {
          className: 'vjs-pip-text'
        }, {}, this.localize('Playing in picture-in-picture')));
        return window.documentPictureInPicture.requestWindow({
          // The aspect ratio won't be correct, Chrome bug https://crbug.com/1407629
          initialAspectRatio: this.videoWidth() / this.videoHeight(),
          copyStyleSheets: true
        }).then(pipWindow => {
          this.el_.parentNode.insertBefore(pipContainer, this.el_);
          pipWindow.document.body.append(this.el_);
          pipWindow.document.body.classList.add('vjs-pip-window');
          this.player_.isInPictureInPicture(true);
          this.player_.trigger('enterpictureinpicture');

          // Listen for the PiP closing event to move the video back.
          pipWindow.addEventListener('unload', event => {
            const pipVideo = event.target.querySelector('.video-js');
            pipContainer.replaceWith(pipVideo);
            this.player_.isInPictureInPicture(false);
            this.player_.trigger('leavepictureinpicture');
          });
          return pipWindow;
        });
      }
      if ('pictureInPictureEnabled' in document && this.disablePictureInPicture() === false) {
        /**
         * This event fires when the player enters picture in picture mode
         *
         * @event Player#enterpictureinpicture
         * @type {Event}
         */
        return this.techGet_('requestPictureInPicture');
      }
      return Promise.reject('No PiP mode is available');
    }

    /**
     * Exit Picture-in-Picture mode.
     *
     * @see [Spec]{@link https://wicg.github.io/picture-in-picture}
     *
     * @fires Player#leavepictureinpicture
     *
     * @return {Promise}
     *         A promise.
     */
    exitPictureInPicture() {
      if (window.documentPictureInPicture && window.documentPictureInPicture.window) {
        // With documentPictureInPicture, Player#leavepictureinpicture is fired in the unload handler
        window.documentPictureInPicture.window.close();
        return Promise.resolve();
      }
      if ('pictureInPictureEnabled' in document) {
        /**
         * This event fires when the player leaves picture in picture mode
         *
         * @event Player#leavepictureinpicture
         * @type {Event}
         */
        return document.exitPictureInPicture();
      }
    }

    /**
     * Called when this Player has focus and a key gets pressed down, or when
     * any Component of this player receives a key press that it doesn't handle.
     * This allows player-wide hotkeys (either as defined below, or optionally
     * by an external function).
     *
     * @param {Event} event
     *        The `keydown` event that caused this function to be called.
     *
     * @listens keydown
     */
    handleKeyDown(event) {
      const {
        userActions
      } = this.options_;

      // Bail out if hotkeys are not configured.
      if (!userActions || !userActions.hotkeys) {
        return;
      }

      // Function that determines whether or not to exclude an element from
      // hotkeys handling.
      const excludeElement = el => {
        const tagName = el.tagName.toLowerCase();

        // The first and easiest test is for `contenteditable` elements.
        if (el.isContentEditable) {
          return true;
        }

        // Inputs matching these types will still trigger hotkey handling as
        // they are not text inputs.
        const allowedInputTypes = ['button', 'checkbox', 'hidden', 'radio', 'reset', 'submit'];
        if (tagName === 'input') {
          return allowedInputTypes.indexOf(el.type) === -1;
        }

        // The final test is by tag name. These tags will be excluded entirely.
        const excludedTags = ['textarea'];
        return excludedTags.indexOf(tagName) !== -1;
      };

      // Bail out if the user is focused on an interactive form element.
      if (excludeElement(this.el_.ownerDocument.activeElement)) {
        return;
      }
      if (typeof userActions.hotkeys === 'function') {
        userActions.hotkeys.call(this, event);
      } else {
        this.handleHotkeys(event);
      }
    }

    /**
     * Called when this Player receives a hotkey keydown event.
     * Supported player-wide hotkeys are:
     *
     *   f          - toggle fullscreen
     *   m          - toggle mute
     *   k or Space - toggle play/pause
     *
     * @param {Event} event
     *        The `keydown` event that caused this function to be called.
     */
    handleHotkeys(event) {
      const hotkeys = this.options_.userActions ? this.options_.userActions.hotkeys : {};

      // set fullscreenKey, muteKey, playPauseKey from `hotkeys`, use defaults if not set
      const {
        fullscreenKey = keydownEvent => keycode.isEventKey(keydownEvent, 'f'),
        muteKey = keydownEvent => keycode.isEventKey(keydownEvent, 'm'),
        playPauseKey = keydownEvent => keycode.isEventKey(keydownEvent, 'k') || keycode.isEventKey(keydownEvent, 'Space')
      } = hotkeys;
      if (fullscreenKey.call(this, event)) {
        event.preventDefault();
        event.stopPropagation();
        const FSToggle = Component.getComponent('FullscreenToggle');
        if (document[this.fsApi_.fullscreenEnabled] !== false) {
          FSToggle.prototype.handleClick.call(this, event);
        }
      } else if (muteKey.call(this, event)) {
        event.preventDefault();
        event.stopPropagation();
        const MuteToggle = Component.getComponent('MuteToggle');
        MuteToggle.prototype.handleClick.call(this, event);
      } else if (playPauseKey.call(this, event)) {
        event.preventDefault();
        event.stopPropagation();
        const PlayToggle = Component.getComponent('PlayToggle');
        PlayToggle.prototype.handleClick.call(this, event);
      }
    }

    /**
     * Check whether the player can play a given mimetype
     *
     * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype
     *
     * @param {string} type
     *        The mimetype to check
     *
     * @return {string}
     *         'probably', 'maybe', or '' (empty string)
     */
    canPlayType(type) {
      let can;

      // Loop through each playback technology in the options order
      for (let i = 0, j = this.options_.techOrder; i < j.length; i++) {
        const techName = j[i];
        let tech = Tech.getTech(techName);

        // Support old behavior of techs being registered as components.
        // Remove once that deprecated behavior is removed.
        if (!tech) {
          tech = Component.getComponent(techName);
        }

        // Check if the current tech is defined before continuing
        if (!tech) {
          log.error(`The "${techName}" tech is undefined. Skipped browser support check for that tech.`);
          continue;
        }

        // Check if the browser supports this technology
        if (tech.isSupported()) {
          can = tech.canPlayType(type);
          if (can) {
            return can;
          }
        }
      }
      return '';
    }

    /**
     * Select source based on tech-order or source-order
     * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,
     * defaults to tech-order selection
     *
     * @param {Array} sources
     *        The sources for a media asset
     *
     * @return {Object|boolean}
     *         Object of source and tech order or false
     */
    selectSource(sources) {
      // Get only the techs specified in `techOrder` that exist and are supported by the
      // current platform
      const techs = this.options_.techOrder.map(techName => {
        return [techName, Tech.getTech(techName)];
      }).filter(([techName, tech]) => {
        // Check if the current tech is defined before continuing
        if (tech) {
          // Check if the browser supports this technology
          return tech.isSupported();
        }
        log.error(`The "${techName}" tech is undefined. Skipped browser support check for that tech.`);
        return false;
      });

      // Iterate over each `innerArray` element once per `outerArray` element and execute
      // `tester` with both. If `tester` returns a non-falsy value, exit early and return
      // that value.
      const findFirstPassingTechSourcePair = function (outerArray, innerArray, tester) {
        let found;
        outerArray.some(outerChoice => {
          return innerArray.some(innerChoice => {
            found = tester(outerChoice, innerChoice);
            if (found) {
              return true;
            }
          });
        });
        return found;
      };
      let foundSourceAndTech;
      const flip = fn => (a, b) => fn(b, a);
      const finder = ([techName, tech], source) => {
        if (tech.canPlaySource(source, this.options_[techName.toLowerCase()])) {
          return {
            source,
            tech: techName
          };
        }
      };

      // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources
      // to select from them based on their priority.
      if (this.options_.sourceOrder) {
        // Source-first ordering
        foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));
      } else {
        // Tech-first ordering
        foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);
      }
      return foundSourceAndTech || false;
    }

    /**
     * Executes source setting and getting logic
     *
     * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]
     *        A SourceObject, an array of SourceObjects, or a string referencing
     *        a URL to a media source. It is _highly recommended_ that an object
     *        or array of objects is used here, so that source selection
     *        algorithms can take the `type` into account.
     *
     *        If not provided, this method acts as a getter.
     * @param {boolean} isRetry
     *        Indicates whether this is being called internally as a result of a retry
     *
     * @return {string|undefined}
     *         If the `source` argument is missing, returns the current source
     *         URL. Otherwise, returns nothing/undefined.
     */
    handleSrc_(source, isRetry) {
      // getter usage
      if (typeof source === 'undefined') {
        return this.cache_.src || '';
      }

      // Reset retry behavior for new source
      if (this.resetRetryOnError_) {
        this.resetRetryOnError_();
      }

      // filter out invalid sources and turn our source into
      // an array of source objects
      const sources = filterSource(source);

      // if a source was passed in then it is invalid because
      // it was filtered to a zero length Array. So we have to
      // show an error
      if (!sources.length) {
        this.setTimeout(function () {
          this.error({
            code: 4,
            message: this.options_.notSupportedMessage
          });
        }, 0);
        return;
      }

      // initial sources
      this.changingSrc_ = true;

      // Only update the cached source list if we are not retrying a new source after error,
      // since in that case we want to include the failed source(s) in the cache
      if (!isRetry) {
        this.cache_.sources = sources;
      }
      this.updateSourceCaches_(sources[0]);

      // middlewareSource is the source after it has been changed by middleware
      setSource(this, sources[0], (middlewareSource, mws) => {
        this.middleware_ = mws;

        // since sourceSet is async we have to update the cache again after we select a source since
        // the source that is selected could be out of order from the cache update above this callback.
        if (!isRetry) {
          this.cache_.sources = sources;
        }
        this.updateSourceCaches_(middlewareSource);
        const err = this.src_(middlewareSource);
        if (err) {
          if (sources.length > 1) {
            return this.handleSrc_(sources.slice(1));
          }
          this.changingSrc_ = false;

          // We need to wrap this in a timeout to give folks a chance to add error event handlers
          this.setTimeout(function () {
            this.error({
              code: 4,
              message: this.options_.notSupportedMessage
            });
          }, 0);

          // we could not find an appropriate tech, but let's still notify the delegate that this is it
          // this needs a better comment about why this is needed
          this.triggerReady();
          return;
        }
        setTech(mws, this.tech_);
      });

      // Try another available source if this one fails before playback.
      if (sources.length > 1) {
        const retry = () => {
          // Remove the error modal
          this.error(null);
          this.handleSrc_(sources.slice(1), true);
        };
        const stopListeningForErrors = () => {
          this.off('error', retry);
        };
        this.one('error', retry);
        this.one('playing', stopListeningForErrors);
        this.resetRetryOnError_ = () => {
          this.off('error', retry);
          this.off('playing', stopListeningForErrors);
        };
      }
    }

    /**
     * Get or set the video source.
     *
     * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]
     *        A SourceObject, an array of SourceObjects, or a string referencing
     *        a URL to a media source. It is _highly recommended_ that an object
     *        or array of objects is used here, so that source selection
     *        algorithms can take the `type` into account.
     *
     *        If not provided, this method acts as a getter.
     *
     * @return {string|undefined}
     *         If the `source` argument is missing, returns the current source
     *         URL. Otherwise, returns nothing/undefined.
     */
    src(source) {
      return this.handleSrc_(source, false);
    }

    /**
     * Set the source object on the tech, returns a boolean that indicates whether
     * there is a tech that can play the source or not
     *
     * @param {Tech~SourceObject} source
     *        The source object to set on the Tech
     *
     * @return {boolean}
     *         - True if there is no Tech to playback this source
     *         - False otherwise
     *
     * @private
     */
    src_(source) {
      const sourceTech = this.selectSource([source]);
      if (!sourceTech) {
        return true;
      }
      if (!titleCaseEquals(sourceTech.tech, this.techName_)) {
        this.changingSrc_ = true;
        // load this technology with the chosen source
        this.loadTech_(sourceTech.tech, sourceTech.source);
        this.tech_.ready(() => {
          this.changingSrc_ = false;
        });
        return false;
      }

      // wait until the tech is ready to set the source
      // and set it synchronously if possible (#2326)
      this.ready(function () {
        // The setSource tech method was added with source handlers
        // so older techs won't support it
        // We need to check the direct prototype for the case where subclasses
        // of the tech do not support source handlers
        if (this.tech_.constructor.prototype.hasOwnProperty('setSource')) {
          this.techCall_('setSource', source);
        } else {
          this.techCall_('src', source.src);
        }
        this.changingSrc_ = false;
      }, true);
      return false;
    }

    /**
     * Begin loading the src data.
     */
    load() {
      this.techCall_('load');
    }

    /**
     * Reset the player. Loads the first tech in the techOrder,
     * removes all the text tracks in the existing `tech`,
     * and calls `reset` on the `tech`.
     */
    reset() {
      if (this.paused()) {
        this.doReset_();
      } else {
        const playPromise = this.play();
        silencePromise(playPromise.then(() => this.doReset_()));
      }
    }
    doReset_() {
      if (this.tech_) {
        this.tech_.clearTracks('text');
      }
      this.resetCache_();
      this.poster('');
      this.loadTech_(this.options_.techOrder[0], null);
      this.techCall_('reset');
      this.resetControlBarUI_();
      if (isEvented(this)) {
        this.trigger('playerreset');
      }
    }

    /**
     * Reset Control Bar's UI by calling sub-methods that reset
     * all of Control Bar's components
     */
    resetControlBarUI_() {
      this.resetProgressBar_();
      this.resetPlaybackRate_();
      this.resetVolumeBar_();
    }

    /**
     * Reset tech's progress so progress bar is reset in the UI
     */
    resetProgressBar_() {
      this.currentTime(0);
      const {
        currentTimeDisplay,
        durationDisplay,
        progressControl,
        remainingTimeDisplay
      } = this.controlBar || {};
      const {
        seekBar
      } = progressControl || {};
      if (currentTimeDisplay) {
        currentTimeDisplay.updateContent();
      }
      if (durationDisplay) {
        durationDisplay.updateContent();
      }
      if (remainingTimeDisplay) {
        remainingTimeDisplay.updateContent();
      }
      if (seekBar) {
        seekBar.update();
        if (seekBar.loadProgressBar) {
          seekBar.loadProgressBar.update();
        }
      }
    }

    /**
     * Reset Playback ratio
     */
    resetPlaybackRate_() {
      this.playbackRate(this.defaultPlaybackRate());
      this.handleTechRateChange_();
    }

    /**
     * Reset Volume bar
     */
    resetVolumeBar_() {
      this.volume(1.0);
      this.trigger('volumechange');
    }

    /**
     * Returns all of the current source objects.
     *
     * @return {Tech~SourceObject[]}
     *         The current source objects
     */
    currentSources() {
      const source = this.currentSource();
      const sources = [];

      // assume `{}` or `{ src }`
      if (Object.keys(source).length !== 0) {
        sources.push(source);
      }
      return this.cache_.sources || sources;
    }

    /**
     * Returns the current source object.
     *
     * @return {Tech~SourceObject}
     *         The current source object
     */
    currentSource() {
      return this.cache_.source || {};
    }

    /**
     * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4
     * Can be used in conjunction with `currentType` to assist in rebuilding the current source object.
     *
     * @return {string}
     *         The current source
     */
    currentSrc() {
      return this.currentSource() && this.currentSource().src || '';
    }

    /**
     * Get the current source type e.g. video/mp4
     * This can allow you rebuild the current source object so that you could load the same
     * source and tech later
     *
     * @return {string}
     *         The source MIME type
     */
    currentType() {
      return this.currentSource() && this.currentSource().type || '';
    }

    /**
     * Get or set the preload attribute
     *
     * @param {boolean} [value]
     *        - true means that we should preload
     *        - false means that we should not preload
     *
     * @return {string}
     *         The preload attribute value when getting
     */
    preload(value) {
      if (value !== undefined) {
        this.techCall_('setPreload', value);
        this.options_.preload = value;
        return;
      }
      return this.techGet_('preload');
    }

    /**
     * Get or set the autoplay option. When this is a boolean it will
     * modify the attribute on the tech. When this is a string the attribute on
     * the tech will be removed and `Player` will handle autoplay on loadstarts.
     *
     * @param {boolean|string} [value]
     *        - true: autoplay using the browser behavior
     *        - false: do not autoplay
     *        - 'play': call play() on every loadstart
     *        - 'muted': call muted() then play() on every loadstart
     *        - 'any': call play() on every loadstart. if that fails call muted() then play().
     *        - *: values other than those listed here will be set `autoplay` to true
     *
     * @return {boolean|string}
     *         The current value of autoplay when getting
     */
    autoplay(value) {
      // getter usage
      if (value === undefined) {
        return this.options_.autoplay || false;
      }
      let techAutoplay;

      // if the value is a valid string set it to that, or normalize `true` to 'play', if need be
      if (typeof value === 'string' && /(any|play|muted)/.test(value) || value === true && this.options_.normalizeAutoplay) {
        this.options_.autoplay = value;
        this.manualAutoplay_(typeof value === 'string' ? value : 'play');
        techAutoplay = false;

        // any falsy value sets autoplay to false in the browser,
        // lets do the same
      } else if (!value) {
        this.options_.autoplay = false;

        // any other value (ie truthy) sets autoplay to true
      } else {
        this.options_.autoplay = true;
      }
      techAutoplay = typeof techAutoplay === 'undefined' ? this.options_.autoplay : techAutoplay;

      // if we don't have a tech then we do not queue up
      // a setAutoplay call on tech ready. We do this because the
      // autoplay option will be passed in the constructor and we
      // do not need to set it twice
      if (this.tech_) {
        this.techCall_('setAutoplay', techAutoplay);
      }
    }

    /**
     * Set or unset the playsinline attribute.
     * Playsinline tells the browser that non-fullscreen playback is preferred.
     *
     * @param {boolean} [value]
     *        - true means that we should try to play inline by default
     *        - false means that we should use the browser's default playback mode,
     *          which in most cases is inline. iOS Safari is a notable exception
     *          and plays fullscreen by default.
     *
     * @return {string|Player}
     *         - the current value of playsinline
     *         - the player when setting
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
     */
    playsinline(value) {
      if (value !== undefined) {
        this.techCall_('setPlaysinline', value);
        this.options_.playsinline = value;
        return this;
      }
      return this.techGet_('playsinline');
    }

    /**
     * Get or set the loop attribute on the video element.
     *
     * @param {boolean} [value]
     *        - true means that we should loop the video
     *        - false means that we should not loop the video
     *
     * @return {boolean}
     *         The current value of loop when getting
     */
    loop(value) {
      if (value !== undefined) {
        this.techCall_('setLoop', value);
        this.options_.loop = value;
        return;
      }
      return this.techGet_('loop');
    }

    /**
     * Get or set the poster image source url
     *
     * @fires Player#posterchange
     *
     * @param {string} [src]
     *        Poster image source URL
     *
     * @return {string}
     *         The current value of poster when getting
     */
    poster(src) {
      if (src === undefined) {
        return this.poster_;
      }

      // The correct way to remove a poster is to set as an empty string
      // other falsey values will throw errors
      if (!src) {
        src = '';
      }
      if (src === this.poster_) {
        return;
      }

      // update the internal poster variable
      this.poster_ = src;

      // update the tech's poster
      this.techCall_('setPoster', src);
      this.isPosterFromTech_ = false;

      // alert components that the poster has been set
      /**
       * This event fires when the poster image is changed on the player.
       *
       * @event Player#posterchange
       * @type {Event}
       */
      this.trigger('posterchange');
    }

    /**
     * Some techs (e.g. YouTube) can provide a poster source in an
     * asynchronous way. We want the poster component to use this
     * poster source so that it covers up the tech's controls.
     * (YouTube's play button). However we only want to use this
     * source if the player user hasn't set a poster through
     * the normal APIs.
     *
     * @fires Player#posterchange
     * @listens Tech#posterchange
     * @private
     */
    handleTechPosterChange_() {
      if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {
        const newPoster = this.tech_.poster() || '';
        if (newPoster !== this.poster_) {
          this.poster_ = newPoster;
          this.isPosterFromTech_ = true;

          // Let components know the poster has changed
          this.trigger('posterchange');
        }
      }
    }

    /**
     * Get or set whether or not the controls are showing.
     *
     * @fires Player#controlsenabled
     *
     * @param {boolean} [bool]
     *        - true to turn controls on
     *        - false to turn controls off
     *
     * @return {boolean}
     *         The current value of controls when getting
     */
    controls(bool) {
      if (bool === undefined) {
        return !!this.controls_;
      }
      bool = !!bool;

      // Don't trigger a change event unless it actually changed
      if (this.controls_ === bool) {
        return;
      }
      this.controls_ = bool;
      if (this.usingNativeControls()) {
        this.techCall_('setControls', bool);
      }
      if (this.controls_) {
        this.removeClass('vjs-controls-disabled');
        this.addClass('vjs-controls-enabled');
        /**
         * @event Player#controlsenabled
         * @type {Event}
         */
        this.trigger('controlsenabled');
        if (!this.usingNativeControls()) {
          this.addTechControlsListeners_();
        }
      } else {
        this.removeClass('vjs-controls-enabled');
        this.addClass('vjs-controls-disabled');
        /**
         * @event Player#controlsdisabled
         * @type {Event}
         */
        this.trigger('controlsdisabled');
        if (!this.usingNativeControls()) {
          this.removeTechControlsListeners_();
        }
      }
    }

    /**
     * Toggle native controls on/off. Native controls are the controls built into
     * devices (e.g. default iPhone controls) or other techs
     * (e.g. Vimeo Controls)
     * **This should only be set by the current tech, because only the tech knows
     * if it can support native controls**
     *
     * @fires Player#usingnativecontrols
     * @fires Player#usingcustomcontrols
     *
     * @param {boolean} [bool]
     *        - true to turn native controls on
     *        - false to turn native controls off
     *
     * @return {boolean}
     *         The current value of native controls when getting
     */
    usingNativeControls(bool) {
      if (bool === undefined) {
        return !!this.usingNativeControls_;
      }
      bool = !!bool;

      // Don't trigger a change event unless it actually changed
      if (this.usingNativeControls_ === bool) {
        return;
      }
      this.usingNativeControls_ = bool;
      if (this.usingNativeControls_) {
        this.addClass('vjs-using-native-controls');

        /**
         * player is using the native device controls
         *
         * @event Player#usingnativecontrols
         * @type {Event}
         */
        this.trigger('usingnativecontrols');
      } else {
        this.removeClass('vjs-using-native-controls');

        /**
         * player is using the custom HTML controls
         *
         * @event Player#usingcustomcontrols
         * @type {Event}
         */
        this.trigger('usingcustomcontrols');
      }
    }

    /**
     * Set or get the current MediaError
     *
     * @fires Player#error
     *
     * @param  {MediaError|string|number} [err]
     *         A MediaError or a string/number to be turned
     *         into a MediaError
     *
     * @return {MediaError|null}
     *         The current MediaError when getting (or null)
     */
    error(err) {
      if (err === undefined) {
        return this.error_ || null;
      }

      // allow hooks to modify error object
      hooks('beforeerror').forEach(hookFunction => {
        const newErr = hookFunction(this, err);
        if (!(isObject(newErr) && !Array.isArray(newErr) || typeof newErr === 'string' || typeof newErr === 'number' || newErr === null)) {
          this.log.error('please return a value that MediaError expects in beforeerror hooks');
          return;
        }
        err = newErr;
      });

      // Suppress the first error message for no compatible source until
      // user interaction
      if (this.options_.suppressNotSupportedError && err && err.code === 4) {
        const triggerSuppressedError = function () {
          this.error(err);
        };
        this.options_.suppressNotSupportedError = false;
        this.any(['click', 'touchstart'], triggerSuppressedError);
        this.one('loadstart', function () {
          this.off(['click', 'touchstart'], triggerSuppressedError);
        });
        return;
      }

      // restoring to default
      if (err === null) {
        this.error_ = err;
        this.removeClass('vjs-error');
        if (this.errorDisplay) {
          this.errorDisplay.close();
        }
        return;
      }
      this.error_ = new MediaError(err);

      // add the vjs-error classname to the player
      this.addClass('vjs-error');

      // log the name of the error type and any message
      // IE11 logs "[object object]" and required you to expand message to see error object
      log.error(`(CODE:${this.error_.code} ${MediaError.errorTypes[this.error_.code]})`, this.error_.message, this.error_);

      /**
       * @event Player#error
       * @type {Event}
       */
      this.trigger('error');

      // notify hooks of the per player error
      hooks('error').forEach(hookFunction => hookFunction(this, this.error_));
      return;
    }

    /**
     * Report user activity
     *
     * @param {Object} event
     *        Event object
     */
    reportUserActivity(event) {
      this.userActivity_ = true;
    }

    /**
     * Get/set if user is active
     *
     * @fires Player#useractive
     * @fires Player#userinactive
     *
     * @param {boolean} [bool]
     *        - true if the user is active
     *        - false if the user is inactive
     *
     * @return {boolean}
     *         The current value of userActive when getting
     */
    userActive(bool) {
      if (bool === undefined) {
        return this.userActive_;
      }
      bool = !!bool;
      if (bool === this.userActive_) {
        return;
      }
      this.userActive_ = bool;
      if (this.userActive_) {
        this.userActivity_ = true;
        this.removeClass('vjs-user-inactive');
        this.addClass('vjs-user-active');
        /**
         * @event Player#useractive
         * @type {Event}
         */
        this.trigger('useractive');
        return;
      }

      // Chrome/Safari/IE have bugs where when you change the cursor it can
      // trigger a mousemove event. This causes an issue when you're hiding
      // the cursor when the user is inactive, and a mousemove signals user
      // activity. Making it impossible to go into inactive mode. Specifically
      // this happens in fullscreen when we really need to hide the cursor.
      //
      // When this gets resolved in ALL browsers it can be removed
      // https://code.google.com/p/chromium/issues/detail?id=103041
      if (this.tech_) {
        this.tech_.one('mousemove', function (e) {
          e.stopPropagation();
          e.preventDefault();
        });
      }
      this.userActivity_ = false;
      this.removeClass('vjs-user-active');
      this.addClass('vjs-user-inactive');
      /**
       * @event Player#userinactive
       * @type {Event}
       */
      this.trigger('userinactive');
    }

    /**
     * Listen for user activity based on timeout value
     *
     * @private
     */
    listenForUserActivity_() {
      let mouseInProgress;
      let lastMoveX;
      let lastMoveY;
      const handleActivity = bind_(this, this.reportUserActivity);
      const handleMouseMove = function (e) {
        // #1068 - Prevent mousemove spamming
        // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970
        if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {
          lastMoveX = e.screenX;
          lastMoveY = e.screenY;
          handleActivity();
        }
      };
      const handleMouseDown = function () {
        handleActivity();
        // For as long as the they are touching the device or have their mouse down,
        // we consider them active even if they're not moving their finger or mouse.
        // So we want to continue to update that they are active
        this.clearInterval(mouseInProgress);
        // Setting userActivity=true now and setting the interval to the same time
        // as the activityCheck interval (250) should ensure we never miss the
        // next activityCheck
        mouseInProgress = this.setInterval(handleActivity, 250);
      };
      const handleMouseUpAndMouseLeave = function (event) {
        handleActivity();
        // Stop the interval that maintains activity if the mouse/touch is down
        this.clearInterval(mouseInProgress);
      };

      // Any mouse movement will be considered user activity
      this.on('mousedown', handleMouseDown);
      this.on('mousemove', handleMouseMove);
      this.on('mouseup', handleMouseUpAndMouseLeave);
      this.on('mouseleave', handleMouseUpAndMouseLeave);
      const controlBar = this.getChild('controlBar');

      // Fixes bug on Android & iOS where when tapping progressBar (when control bar is displayed)
      // controlBar would no longer be hidden by default timeout.
      if (controlBar && !IS_IOS && !IS_ANDROID) {
        controlBar.on('mouseenter', function (event) {
          if (this.player().options_.inactivityTimeout !== 0) {
            this.player().cache_.inactivityTimeout = this.player().options_.inactivityTimeout;
          }
          this.player().options_.inactivityTimeout = 0;
        });
        controlBar.on('mouseleave', function (event) {
          this.player().options_.inactivityTimeout = this.player().cache_.inactivityTimeout;
        });
      }

      // Listen for keyboard navigation
      // Shouldn't need to use inProgress interval because of key repeat
      this.on('keydown', handleActivity);
      this.on('keyup', handleActivity);

      // Run an interval every 250 milliseconds instead of stuffing everything into
      // the mousemove/touchmove function itself, to prevent performance degradation.
      // `this.reportUserActivity` simply sets this.userActivity_ to true, which
      // then gets picked up by this loop
      // http://ejohn.org/blog/learning-from-twitter/
      let inactivityTimeout;
      this.setInterval(function () {
        // Check to see if mouse/touch activity has happened
        if (!this.userActivity_) {
          return;
        }

        // Reset the activity tracker
        this.userActivity_ = false;

        // If the user state was inactive, set the state to active
        this.userActive(true);

        // Clear any existing inactivity timeout to start the timer over
        this.clearTimeout(inactivityTimeout);
        const timeout = this.options_.inactivityTimeout;
        if (timeout <= 0) {
          return;
        }

        // In <timeout> milliseconds, if no more activity has occurred the
        // user will be considered inactive
        inactivityTimeout = this.setTimeout(function () {
          // Protect against the case where the inactivityTimeout can trigger just
          // before the next user activity is picked up by the activity check loop
          // causing a flicker
          if (!this.userActivity_) {
            this.userActive(false);
          }
        }, timeout);
      }, 250);
    }

    /**
     * Gets or sets the current playback rate. A playback rate of
     * 1.0 represents normal speed and 0.5 would indicate half-speed
     * playback, for instance.
     *
     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate
     *
     * @param {number} [rate]
     *       New playback rate to set.
     *
     * @return {number}
     *         The current playback rate when getting or 1.0
     */
    playbackRate(rate) {
      if (rate !== undefined) {
        // NOTE: this.cache_.lastPlaybackRate is set from the tech handler
        // that is registered above
        this.techCall_('setPlaybackRate', rate);
        return;
      }
      if (this.tech_ && this.tech_.featuresPlaybackRate) {
        return this.cache_.lastPlaybackRate || this.techGet_('playbackRate');
      }
      return 1.0;
    }

    /**
     * Gets or sets the current default playback rate. A default playback rate of
     * 1.0 represents normal speed and 0.5 would indicate half-speed playback, for instance.
     * defaultPlaybackRate will only represent what the initial playbackRate of a video was, not
     * not the current playbackRate.
     *
     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-defaultplaybackrate
     *
     * @param {number} [rate]
     *       New default playback rate to set.
     *
     * @return {number|Player}
     *         - The default playback rate when getting or 1.0
     *         - the player when setting
     */
    defaultPlaybackRate(rate) {
      if (rate !== undefined) {
        return this.techCall_('setDefaultPlaybackRate', rate);
      }
      if (this.tech_ && this.tech_.featuresPlaybackRate) {
        return this.techGet_('defaultPlaybackRate');
      }
      return 1.0;
    }

    /**
     * Gets or sets the audio flag
     *
     * @param {boolean} bool
     *        - true signals that this is an audio player
     *        - false signals that this is not an audio player
     *
     * @return {boolean}
     *         The current value of isAudio when getting
     */
    isAudio(bool) {
      if (bool !== undefined) {
        this.isAudio_ = !!bool;
        return;
      }
      return !!this.isAudio_;
    }
    enableAudioOnlyUI_() {
      // Update styling immediately to show the control bar so we can get its height
      this.addClass('vjs-audio-only-mode');
      const playerChildren = this.children();
      const controlBar = this.getChild('ControlBar');
      const controlBarHeight = controlBar && controlBar.currentHeight();

      // Hide all player components except the control bar. Control bar components
      // needed only for video are hidden with CSS
      playerChildren.forEach(child => {
        if (child === controlBar) {
          return;
        }
        if (child.el_ && !child.hasClass('vjs-hidden')) {
          child.hide();
          this.audioOnlyCache_.hiddenChildren.push(child);
        }
      });
      this.audioOnlyCache_.playerHeight = this.currentHeight();

      // Set the player height the same as the control bar
      this.height(controlBarHeight);
      this.trigger('audioonlymodechange');
    }
    disableAudioOnlyUI_() {
      this.removeClass('vjs-audio-only-mode');

      // Show player components that were previously hidden
      this.audioOnlyCache_.hiddenChildren.forEach(child => child.show());

      // Reset player height
      this.height(this.audioOnlyCache_.playerHeight);
      this.trigger('audioonlymodechange');
    }

    /**
     * Get the current audioOnlyMode state or set audioOnlyMode to true or false.
     *
     * Setting this to `true` will hide all player components except the control bar,
     * as well as control bar components needed only for video.
     *
     * @param {boolean} [value]
     *         The value to set audioOnlyMode to.
     *
     * @return {Promise|boolean}
     *        A Promise is returned when setting the state, and a boolean when getting
     *        the present state
     */
    audioOnlyMode(value) {
      if (typeof value !== 'boolean' || value === this.audioOnlyMode_) {
        return this.audioOnlyMode_;
      }
      this.audioOnlyMode_ = value;

      // Enable Audio Only Mode
      if (value) {
        const exitPromises = [];

        // Fullscreen and PiP are not supported in audioOnlyMode, so exit if we need to.
        if (this.isInPictureInPicture()) {
          exitPromises.push(this.exitPictureInPicture());
        }
        if (this.isFullscreen()) {
          exitPromises.push(this.exitFullscreen());
        }
        if (this.audioPosterMode()) {
          exitPromises.push(this.audioPosterMode(false));
        }
        return Promise.all(exitPromises).then(() => this.enableAudioOnlyUI_());
      }

      // Disable Audio Only Mode
      return Promise.resolve().then(() => this.disableAudioOnlyUI_());
    }
    enablePosterModeUI_() {
      // Hide the video element and show the poster image to enable posterModeUI
      const tech = this.tech_ && this.tech_;
      tech.hide();
      this.addClass('vjs-audio-poster-mode');
      this.trigger('audiopostermodechange');
    }
    disablePosterModeUI_() {
      // Show the video element and hide the poster image to disable posterModeUI
      const tech = this.tech_ && this.tech_;
      tech.show();
      this.removeClass('vjs-audio-poster-mode');
      this.trigger('audiopostermodechange');
    }

    /**
     * Get the current audioPosterMode state or set audioPosterMode to true or false
     *
     * @param {boolean} [value]
     *         The value to set audioPosterMode to.
     *
     * @return {Promise|boolean}
     *         A Promise is returned when setting the state, and a boolean when getting
     *        the present state
     */
    audioPosterMode(value) {
      if (typeof value !== 'boolean' || value === this.audioPosterMode_) {
        return this.audioPosterMode_;
      }
      this.audioPosterMode_ = value;
      if (value) {
        if (this.audioOnlyMode()) {
          const audioOnlyModePromise = this.audioOnlyMode(false);
          return audioOnlyModePromise.then(() => {
            // enable audio poster mode after audio only mode is disabled
            this.enablePosterModeUI_();
          });
        }
        return Promise.resolve().then(() => {
          // enable audio poster mode
          this.enablePosterModeUI_();
        });
      }
      return Promise.resolve().then(() => {
        // disable audio poster mode
        this.disablePosterModeUI_();
      });
    }

    /**
     * A helper method for adding a {@link TextTrack} to our
     * {@link TextTrackList}.
     *
     * In addition to the W3C settings we allow adding additional info through options.
     *
     * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack
     *
     * @param {string} [kind]
     *        the kind of TextTrack you are adding
     *
     * @param {string} [label]
     *        the label to give the TextTrack label
     *
     * @param {string} [language]
     *        the language to set on the TextTrack
     *
     * @return {TextTrack|undefined}
     *         the TextTrack that was added or undefined
     *         if there is no tech
     */
    addTextTrack(kind, label, language) {
      if (this.tech_) {
        return this.tech_.addTextTrack(kind, label, language);
      }
    }

    /**
     * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}.
     *
     * @param {Object} options
     *        Options to pass to {@link HTMLTrackElement} during creation. See
     *        {@link HTMLTrackElement} for object properties that you should use.
     *
     * @param {boolean} [manualCleanup=false] if set to true, the TextTrack will not be removed
     *                                        from the TextTrackList and HtmlTrackElementList
     *                                        after a source change
     *
     * @return { import('./tracks/html-track-element').default }
     *         the HTMLTrackElement that was created and added
     *         to the HtmlTrackElementList and the remote
     *         TextTrackList
     *
     */
    addRemoteTextTrack(options, manualCleanup) {
      if (this.tech_) {
        return this.tech_.addRemoteTextTrack(options, manualCleanup);
      }
    }

    /**
     * Remove a remote {@link TextTrack} from the respective
     * {@link TextTrackList} and {@link HtmlTrackElementList}.
     *
     * @param {Object} track
     *        Remote {@link TextTrack} to remove
     *
     * @return {undefined}
     *         does not return anything
     */
    removeRemoteTextTrack(obj = {}) {
      let {
        track
      } = obj;
      if (!track) {
        track = obj;
      }

      // destructure the input into an object with a track argument, defaulting to arguments[0]
      // default the whole argument to an empty object if nothing was passed in

      if (this.tech_) {
        return this.tech_.removeRemoteTextTrack(track);
      }
    }

    /**
     * Gets available media playback quality metrics as specified by the W3C's Media
     * Playback Quality API.
     *
     * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
     *
     * @return {Object|undefined}
     *         An object with supported media playback quality metrics or undefined if there
     *         is no tech or the tech does not support it.
     */
    getVideoPlaybackQuality() {
      return this.techGet_('getVideoPlaybackQuality');
    }

    /**
     * Get video width
     *
     * @return {number}
     *         current video width
     */
    videoWidth() {
      return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;
    }

    /**
     * Get video height
     *
     * @return {number}
     *         current video height
     */
    videoHeight() {
      return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;
    }

    /**
     * The player's language code.
     *
     * Changing the language will trigger
     * [languagechange]{@link Player#event:languagechange}
     * which Components can use to update control text.
     * ClickableComponent will update its control text by default on
     * [languagechange]{@link Player#event:languagechange}.
     *
     * @fires Player#languagechange
     *
     * @param {string} [code]
     *        the language code to set the player to
     *
     * @return {string}
     *         The current language code when getting
     */
    language(code) {
      if (code === undefined) {
        return this.language_;
      }
      if (this.language_ !== String(code).toLowerCase()) {
        this.language_ = String(code).toLowerCase();

        // during first init, it's possible some things won't be evented
        if (isEvented(this)) {
          /**
          * fires when the player language change
          *
          * @event Player#languagechange
          * @type {Event}
          */
          this.trigger('languagechange');
        }
      }
    }

    /**
     * Get the player's language dictionary
     * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time
     * Languages specified directly in the player options have precedence
     *
     * @return {Array}
     *         An array of of supported languages
     */
    languages() {
      return merge(Player.prototype.options_.languages, this.languages_);
    }

    /**
     * returns a JavaScript object representing the current track
     * information. **DOES not return it as JSON**
     *
     * @return {Object}
     *         Object representing the current of track info
     */
    toJSON() {
      const options = merge(this.options_);
      const tracks = options.tracks;
      options.tracks = [];
      for (let i = 0; i < tracks.length; i++) {
        let track = tracks[i];

        // deep merge tracks and null out player so no circular references
        track = merge(track);
        track.player = undefined;
        options.tracks[i] = track;
      }
      return options;
    }

    /**
     * Creates a simple modal dialog (an instance of the {@link ModalDialog}
     * component) that immediately overlays the player with arbitrary
     * content and removes itself when closed.
     *
     * @param {string|Function|Element|Array|null} content
     *        Same as {@link ModalDialog#content}'s param of the same name.
     *        The most straight-forward usage is to provide a string or DOM
     *        element.
     *
     * @param {Object} [options]
     *        Extra options which will be passed on to the {@link ModalDialog}.
     *
     * @return {ModalDialog}
     *         the {@link ModalDialog} that was created
     */
    createModal(content, options) {
      options = options || {};
      options.content = content || '';
      const modal = new ModalDialog(this, options);
      this.addChild(modal);
      modal.on('dispose', () => {
        this.removeChild(modal);
      });
      modal.open();
      return modal;
    }

    /**
     * Change breakpoint classes when the player resizes.
     *
     * @private
     */
    updateCurrentBreakpoint_() {
      if (!this.responsive()) {
        return;
      }
      const currentBreakpoint = this.currentBreakpoint();
      const currentWidth = this.currentWidth();
      for (let i = 0; i < BREAKPOINT_ORDER.length; i++) {
        const candidateBreakpoint = BREAKPOINT_ORDER[i];
        const maxWidth = this.breakpoints_[candidateBreakpoint];
        if (currentWidth <= maxWidth) {
          // The current breakpoint did not change, nothing to do.
          if (currentBreakpoint === candidateBreakpoint) {
            return;
          }

          // Only remove a class if there is a current breakpoint.
          if (currentBreakpoint) {
            this.removeClass(BREAKPOINT_CLASSES[currentBreakpoint]);
          }
          this.addClass(BREAKPOINT_CLASSES[candidateBreakpoint]);
          this.breakpoint_ = candidateBreakpoint;
          break;
        }
      }
    }

    /**
     * Removes the current breakpoint.
     *
     * @private
     */
    removeCurrentBreakpoint_() {
      const className = this.currentBreakpointClass();
      this.breakpoint_ = '';
      if (className) {
        this.removeClass(className);
      }
    }

    /**
     * Get or set breakpoints on the player.
     *
     * Calling this method with an object or `true` will remove any previous
     * custom breakpoints and start from the defaults again.
     *
     * @param  {Object|boolean} [breakpoints]
     *         If an object is given, it can be used to provide custom
     *         breakpoints. If `true` is given, will set default breakpoints.
     *         If this argument is not given, will simply return the current
     *         breakpoints.
     *
     * @param  {number} [breakpoints.tiny]
     *         The maximum width for the "vjs-layout-tiny" class.
     *
     * @param  {number} [breakpoints.xsmall]
     *         The maximum width for the "vjs-layout-x-small" class.
     *
     * @param  {number} [breakpoints.small]
     *         The maximum width for the "vjs-layout-small" class.
     *
     * @param  {number} [breakpoints.medium]
     *         The maximum width for the "vjs-layout-medium" class.
     *
     * @param  {number} [breakpoints.large]
     *         The maximum width for the "vjs-layout-large" class.
     *
     * @param  {number} [breakpoints.xlarge]
     *         The maximum width for the "vjs-layout-x-large" class.
     *
     * @param  {number} [breakpoints.huge]
     *         The maximum width for the "vjs-layout-huge" class.
     *
     * @return {Object}
     *         An object mapping breakpoint names to maximum width values.
     */
    breakpoints(breakpoints) {
      // Used as a getter.
      if (breakpoints === undefined) {
        return Object.assign(this.breakpoints_);
      }
      this.breakpoint_ = '';
      this.breakpoints_ = Object.assign({}, DEFAULT_BREAKPOINTS, breakpoints);

      // When breakpoint definitions change, we need to update the currently
      // selected breakpoint.
      this.updateCurrentBreakpoint_();

      // Clone the breakpoints before returning.
      return Object.assign(this.breakpoints_);
    }

    /**
     * Get or set a flag indicating whether or not this player should adjust
     * its UI based on its dimensions.
     *
     * @param  {boolean} value
     *         Should be `true` if the player should adjust its UI based on its
     *         dimensions; otherwise, should be `false`.
     *
     * @return {boolean}
     *         Will be `true` if this player should adjust its UI based on its
     *         dimensions; otherwise, will be `false`.
     */
    responsive(value) {
      // Used as a getter.
      if (value === undefined) {
        return this.responsive_;
      }
      value = Boolean(value);
      const current = this.responsive_;

      // Nothing changed.
      if (value === current) {
        return;
      }

      // The value actually changed, set it.
      this.responsive_ = value;

      // Start listening for breakpoints and set the initial breakpoint if the
      // player is now responsive.
      if (value) {
        this.on('playerresize', this.boundUpdateCurrentBreakpoint_);
        this.updateCurrentBreakpoint_();

        // Stop listening for breakpoints if the player is no longer responsive.
      } else {
        this.off('playerresize', this.boundUpdateCurrentBreakpoint_);
        this.removeCurrentBreakpoint_();
      }
      return value;
    }

    /**
     * Get current breakpoint name, if any.
     *
     * @return {string}
     *         If there is currently a breakpoint set, returns a the key from the
     *         breakpoints object matching it. Otherwise, returns an empty string.
     */
    currentBreakpoint() {
      return this.breakpoint_;
    }

    /**
     * Get the current breakpoint class name.
     *
     * @return {string}
     *         The matching class name (e.g. `"vjs-layout-tiny"` or
     *         `"vjs-layout-large"`) for the current breakpoint. Empty string if
     *         there is no current breakpoint.
     */
    currentBreakpointClass() {
      return BREAKPOINT_CLASSES[this.breakpoint_] || '';
    }

    /**
     * An object that describes a single piece of media.
     *
     * Properties that are not part of this type description will be retained; so,
     * this can be viewed as a generic metadata storage mechanism as well.
     *
     * @see      {@link https://wicg.github.io/mediasession/#the-mediametadata-interface}
     * @typedef  {Object} Player~MediaObject
     *
     * @property {string} [album]
     *           Unused, except if this object is passed to the `MediaSession`
     *           API.
     *
     * @property {string} [artist]
     *           Unused, except if this object is passed to the `MediaSession`
     *           API.
     *
     * @property {Object[]} [artwork]
     *           Unused, except if this object is passed to the `MediaSession`
     *           API. If not specified, will be populated via the `poster`, if
     *           available.
     *
     * @property {string} [poster]
     *           URL to an image that will display before playback.
     *
     * @property {Tech~SourceObject|Tech~SourceObject[]|string} [src]
     *           A single source object, an array of source objects, or a string
     *           referencing a URL to a media source. It is _highly recommended_
     *           that an object or array of objects is used here, so that source
     *           selection algorithms can take the `type` into account.
     *
     * @property {string} [title]
     *           Unused, except if this object is passed to the `MediaSession`
     *           API.
     *
     * @property {Object[]} [textTracks]
     *           An array of objects to be used to create text tracks, following
     *           the {@link https://www.w3.org/TR/html50/embedded-content-0.html#the-track-element|native track element format}.
     *           For ease of removal, these will be created as "remote" text
     *           tracks and set to automatically clean up on source changes.
     *
     *           These objects may have properties like `src`, `kind`, `label`,
     *           and `language`, see {@link Tech#createRemoteTextTrack}.
     */

    /**
     * Populate the player using a {@link Player~MediaObject|MediaObject}.
     *
     * @param  {Player~MediaObject} media
     *         A media object.
     *
     * @param  {Function} ready
     *         A callback to be called when the player is ready.
     */
    loadMedia(media, ready) {
      if (!media || typeof media !== 'object') {
        return;
      }
      this.reset();

      // Clone the media object so it cannot be mutated from outside.
      this.cache_.media = merge(media);
      const {
        artist,
        artwork,
        description,
        poster,
        src,
        textTracks,
        title
      } = this.cache_.media;

      // If `artwork` is not given, create it using `poster`.
      if (!artwork && poster) {
        this.cache_.media.artwork = [{
          src: poster,
          type: getMimetype(poster)
        }];
      }
      if (src) {
        this.src(src);
      }
      if (poster) {
        this.poster(poster);
      }
      if (Array.isArray(textTracks)) {
        textTracks.forEach(tt => this.addRemoteTextTrack(tt, false));
      }
      if (this.titleBar) {
        this.titleBar.update({
          title,
          description: description || artist || ''
        });
      }
      this.ready(ready);
    }

    /**
     * Get a clone of the current {@link Player~MediaObject} for this player.
     *
     * If the `loadMedia` method has not been used, will attempt to return a
     * {@link Player~MediaObject} based on the current state of the player.
     *
     * @return {Player~MediaObject}
     */
    getMedia() {
      if (!this.cache_.media) {
        const poster = this.poster();
        const src = this.currentSources();
        const textTracks = Array.prototype.map.call(this.remoteTextTracks(), tt => ({
          kind: tt.kind,
          label: tt.label,
          language: tt.language,
          src: tt.src
        }));
        const media = {
          src,
          textTracks
        };
        if (poster) {
          media.poster = poster;
          media.artwork = [{
            src: media.poster,
            type: getMimetype(media.poster)
          }];
        }
        return media;
      }
      return merge(this.cache_.media);
    }

    /**
     * Gets tag settings
     *
     * @param {Element} tag
     *        The player tag
     *
     * @return {Object}
     *         An object containing all of the settings
     *         for a player tag
     */
    static getTagSettings(tag) {
      const baseOptions = {
        sources: [],
        tracks: []
      };
      const tagOptions = getAttributes(tag);
      const dataSetup = tagOptions['data-setup'];
      if (hasClass(tag, 'vjs-fill')) {
        tagOptions.fill = true;
      }
      if (hasClass(tag, 'vjs-fluid')) {
        tagOptions.fluid = true;
      }

      // Check if data-setup attr exists.
      if (dataSetup !== null) {
        // Parse options JSON
        // If empty string, make it a parsable json object.
        const [err, data] = tuple(dataSetup || '{}');
        if (err) {
          log.error(err);
        }
        Object.assign(tagOptions, data);
      }
      Object.assign(baseOptions, tagOptions);

      // Get tag children settings
      if (tag.hasChildNodes()) {
        const children = tag.childNodes;
        for (let i = 0, j = children.length; i < j; i++) {
          const child = children[i];
          // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/
          const childName = child.nodeName.toLowerCase();
          if (childName === 'source') {
            baseOptions.sources.push(getAttributes(child));
          } else if (childName === 'track') {
            baseOptions.tracks.push(getAttributes(child));
          }
        }
      }
      return baseOptions;
    }

    /**
     * Set debug mode to enable/disable logs at info level.
     *
     * @param {boolean} enabled
     * @fires Player#debugon
     * @fires Player#debugoff
     */
    debug(enabled) {
      if (enabled === undefined) {
        return this.debugEnabled_;
      }
      if (enabled) {
        this.trigger('debugon');
        this.previousLogLevel_ = this.log.level;
        this.log.level('debug');
        this.debugEnabled_ = true;
      } else {
        this.trigger('debugoff');
        this.log.level(this.previousLogLevel_);
        this.previousLogLevel_ = undefined;
        this.debugEnabled_ = false;
      }
    }

    /**
     * Set or get current playback rates.
     * Takes an array and updates the playback rates menu with the new items.
     * Pass in an empty array to hide the menu.
     * Values other than arrays are ignored.
     *
     * @fires Player#playbackrateschange
     * @param {number[]} newRates
     *                   The new rates that the playback rates menu should update to.
     *                   An empty array will hide the menu
     * @return {number[]} When used as a getter will return the current playback rates
     */
    playbackRates(newRates) {
      if (newRates === undefined) {
        return this.cache_.playbackRates;
      }

      // ignore any value that isn't an array
      if (!Array.isArray(newRates)) {
        return;
      }

      // ignore any arrays that don't only contain numbers
      if (!newRates.every(rate => typeof rate === 'number')) {
        return;
      }
      this.cache_.playbackRates = newRates;

      /**
      * fires when the playback rates in a player are changed
      *
      * @event Player#playbackrateschange
      * @type {Event}
      */
      this.trigger('playbackrateschange');
    }
  }

  /**
   * Get the {@link VideoTrackList}
   *
   * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist
   *
   * @return {VideoTrackList}
   *         the current video track list
   *
   * @method Player.prototype.videoTracks
   */

  /**
   * Get the {@link AudioTrackList}
   *
   * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist
   *
   * @return {AudioTrackList}
   *         the current audio track list
   *
   * @method Player.prototype.audioTracks
   */

  /**
   * Get the {@link TextTrackList}
   *
   * @link http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks
   *
   * @return {TextTrackList}
   *         the current text track list
   *
   * @method Player.prototype.textTracks
   */

  /**
   * Get the remote {@link TextTrackList}
   *
   * @return {TextTrackList}
   *         The current remote text track list
   *
   * @method Player.prototype.remoteTextTracks
   */

  /**
   * Get the remote {@link HtmlTrackElementList} tracks.
   *
   * @return {HtmlTrackElementList}
   *         The current remote text track element list
   *
   * @method Player.prototype.remoteTextTrackEls
   */

  ALL.names.forEach(function (name) {
    const props = ALL[name];
    Player.prototype[props.getterName] = function () {
      if (this.tech_) {
        return this.tech_[props.getterName]();
      }

      // if we have not yet loadTech_, we create {video,audio,text}Tracks_
      // these will be passed to the tech during loading
      this[props.privateName] = this[props.privateName] || new props.ListClass();
      return this[props.privateName];
    };
  });

  /**
   * Get or set the `Player`'s crossorigin option. For the HTML5 player, this
   * sets the `crossOrigin` property on the `<video>` tag to control the CORS
   * behavior.
   *
   * @see [Video Element Attributes]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-crossorigin}
   *
   * @param {string} [value]
   *        The value to set the `Player`'s crossorigin to. If an argument is
   *        given, must be one of `anonymous` or `use-credentials`.
   *
   * @return {string|undefined}
   *         - The current crossorigin value of the `Player` when getting.
   *         - undefined when setting
   */
  Player.prototype.crossorigin = Player.prototype.crossOrigin;

  /**
   * Global enumeration of players.
   *
   * The keys are the player IDs and the values are either the {@link Player}
   * instance or `null` for disposed players.
   *
   * @type {Object}
   */
  Player.players = {};
  const navigator = window.navigator;

  /*
   * Player instance options, surfaced using options
   * options = Player.prototype.options_
   * Make changes in options, not here.
   *
   * @type {Object}
   * @private
   */
  Player.prototype.options_ = {
    // Default order of fallback technology
    techOrder: Tech.defaultTechOrder_,
    html5: {},
    // enable sourceset by default
    enableSourceset: true,
    // default inactivity timeout
    inactivityTimeout: 2000,
    // default playback rates
    playbackRates: [],
    // Add playback rate selection by adding rates
    // 'playbackRates': [0.5, 1, 1.5, 2],
    liveui: false,
    // Included control sets
    children: ['mediaLoader', 'posterImage', 'titleBar', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'liveTracker', 'controlBar', 'errorDisplay', 'textTrackSettings', 'resizeManager'],
    language: navigator && (navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language) || 'en',
    // locales and their language translations
    languages: {},
    // Default message to show when a video cannot be played.
    notSupportedMessage: 'No compatible source was found for this media.',
    normalizeAutoplay: false,
    fullscreen: {
      options: {
        navigationUI: 'hide'
      }
    },
    breakpoints: {},
    responsive: false,
    audioOnlyMode: false,
    audioPosterMode: false
  };
  [
  /**
   * Returns whether or not the player is in the "ended" state.
   *
   * @return {Boolean} True if the player is in the ended state, false if not.
   * @method Player#ended
   */
  'ended',
  /**
   * Returns whether or not the player is in the "seeking" state.
   *
   * @return {Boolean} True if the player is in the seeking state, false if not.
   * @method Player#seeking
   */
  'seeking',
  /**
   * Returns the TimeRanges of the media that are currently available
   * for seeking to.
   *
   * @return {TimeRanges} the seekable intervals of the media timeline
   * @method Player#seekable
   */
  'seekable',
  /**
   * Returns the current state of network activity for the element, from
   * the codes in the list below.
   * - NETWORK_EMPTY (numeric value 0)
   *   The element has not yet been initialised. All attributes are in
   *   their initial states.
   * - NETWORK_IDLE (numeric value 1)
   *   The element's resource selection algorithm is active and has
   *   selected a resource, but it is not actually using the network at
   *   this time.
   * - NETWORK_LOADING (numeric value 2)
   *   The user agent is actively trying to download data.
   * - NETWORK_NO_SOURCE (numeric value 3)
   *   The element's resource selection algorithm is active, but it has
   *   not yet found a resource to use.
   *
   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states
   * @return {number} the current network activity state
   * @method Player#networkState
   */
  'networkState',
  /**
   * Returns a value that expresses the current state of the element
   * with respect to rendering the current playback position, from the
   * codes in the list below.
   * - HAVE_NOTHING (numeric value 0)
   *   No information regarding the media resource is available.
   * - HAVE_METADATA (numeric value 1)
   *   Enough of the resource has been obtained that the duration of the
   *   resource is available.
   * - HAVE_CURRENT_DATA (numeric value 2)
   *   Data for the immediate current playback position is available.
   * - HAVE_FUTURE_DATA (numeric value 3)
   *   Data for the immediate current playback position is available, as
   *   well as enough data for the user agent to advance the current
   *   playback position in the direction of playback.
   * - HAVE_ENOUGH_DATA (numeric value 4)
   *   The user agent estimates that enough data is available for
   *   playback to proceed uninterrupted.
   *
   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate
   * @return {number} the current playback rendering state
   * @method Player#readyState
   */
  'readyState'].forEach(function (fn) {
    Player.prototype[fn] = function () {
      return this.techGet_(fn);
    };
  });
  TECH_EVENTS_RETRIGGER.forEach(function (event) {
    Player.prototype[`handleTech${toTitleCase(event)}_`] = function () {
      return this.trigger(event);
    };
  });

  /**
   * Fired when the player has initial duration and dimension information
   *
   * @event Player#loadedmetadata
   * @type {Event}
   */

  /**
   * Fired when the player has downloaded data at the current playback position
   *
   * @event Player#loadeddata
   * @type {Event}
   */

  /**
   * Fired when the current playback position has changed *
   * During playback this is fired every 15-250 milliseconds, depending on the
   * playback technology in use.
   *
   * @event Player#timeupdate
   * @type {Event}
   */

  /**
   * Fired when the volume changes
   *
   * @event Player#volumechange
   * @type {Event}
   */

  /**
   * Reports whether or not a player has a plugin available.
   *
   * This does not report whether or not the plugin has ever been initialized
   * on this player. For that, [usingPlugin]{@link Player#usingPlugin}.
   *
   * @method Player#hasPlugin
   * @param  {string}  name
   *         The name of a plugin.
   *
   * @return {boolean}
   *         Whether or not this player has the requested plugin available.
   */

  /**
   * Reports whether or not a player is using a plugin by name.
   *
   * For basic plugins, this only reports whether the plugin has _ever_ been
   * initialized on this player.
   *
   * @method Player#usingPlugin
   * @param  {string} name
   *         The name of a plugin.
   *
   * @return {boolean}
   *         Whether or not this player is using the requested plugin.
   */

  Component.registerComponent('Player', Player);

  /**
   * @file plugin.js
   */

  /**
   * The base plugin name.
   *
   * @private
   * @constant
   * @type {string}
   */
  const BASE_PLUGIN_NAME = 'plugin';

  /**
   * The key on which a player's active plugins cache is stored.
   *
   * @private
   * @constant
   * @type     {string}
   */
  const PLUGIN_CACHE_KEY = 'activePlugins_';

  /**
   * Stores registered plugins in a private space.
   *
   * @private
   * @type    {Object}
   */
  const pluginStorage = {};

  /**
   * Reports whether or not a plugin has been registered.
   *
   * @private
   * @param   {string} name
   *          The name of a plugin.
   *
   * @return {boolean}
   *          Whether or not the plugin has been registered.
   */
  const pluginExists = name => pluginStorage.hasOwnProperty(name);

  /**
   * Get a single registered plugin by name.
   *
   * @private
   * @param   {string} name
   *          The name of a plugin.
   *
   * @return {typeof Plugin|Function|undefined}
   *          The plugin (or undefined).
   */
  const getPlugin = name => pluginExists(name) ? pluginStorage[name] : undefined;

  /**
   * Marks a plugin as "active" on a player.
   *
   * Also, ensures that the player has an object for tracking active plugins.
   *
   * @private
   * @param   {Player} player
   *          A Video.js player instance.
   *
   * @param   {string} name
   *          The name of a plugin.
   */
  const markPluginAsActive = (player, name) => {
    player[PLUGIN_CACHE_KEY] = player[PLUGIN_CACHE_KEY] || {};
    player[PLUGIN_CACHE_KEY][name] = true;
  };

  /**
   * Triggers a pair of plugin setup events.
   *
   * @private
   * @param  {Player} player
   *         A Video.js player instance.
   *
   * @param  {Plugin~PluginEventHash} hash
   *         A plugin event hash.
   *
   * @param  {boolean} [before]
   *         If true, prefixes the event name with "before". In other words,
   *         use this to trigger "beforepluginsetup" instead of "pluginsetup".
   */
  const triggerSetupEvent = (player, hash, before) => {
    const eventName = (before ? 'before' : '') + 'pluginsetup';
    player.trigger(eventName, hash);
    player.trigger(eventName + ':' + hash.name, hash);
  };

  /**
   * Takes a basic plugin function and returns a wrapper function which marks
   * on the player that the plugin has been activated.
   *
   * @private
   * @param   {string} name
   *          The name of the plugin.
   *
   * @param   {Function} plugin
   *          The basic plugin.
   *
   * @return {Function}
   *          A wrapper function for the given plugin.
   */
  const createBasicPlugin = function (name, plugin) {
    const basicPluginWrapper = function () {
      // We trigger the "beforepluginsetup" and "pluginsetup" events on the player
      // regardless, but we want the hash to be consistent with the hash provided
      // for advanced plugins.
      //
      // The only potentially counter-intuitive thing here is the `instance` in
      // the "pluginsetup" event is the value returned by the `plugin` function.
      triggerSetupEvent(this, {
        name,
        plugin,
        instance: null
      }, true);
      const instance = plugin.apply(this, arguments);
      markPluginAsActive(this, name);
      triggerSetupEvent(this, {
        name,
        plugin,
        instance
      });
      return instance;
    };
    Object.keys(plugin).forEach(function (prop) {
      basicPluginWrapper[prop] = plugin[prop];
    });
    return basicPluginWrapper;
  };

  /**
   * Takes a plugin sub-class and returns a factory function for generating
   * instances of it.
   *
   * This factory function will replace itself with an instance of the requested
   * sub-class of Plugin.
   *
   * @private
   * @param   {string} name
   *          The name of the plugin.
   *
   * @param   {Plugin} PluginSubClass
   *          The advanced plugin.
   *
   * @return {Function}
   */
  const createPluginFactory = (name, PluginSubClass) => {
    // Add a `name` property to the plugin prototype so that each plugin can
    // refer to itself by name.
    PluginSubClass.prototype.name = name;
    return function (...args) {
      triggerSetupEvent(this, {
        name,
        plugin: PluginSubClass,
        instance: null
      }, true);
      const instance = new PluginSubClass(...[this, ...args]);

      // The plugin is replaced by a function that returns the current instance.
      this[name] = () => instance;
      triggerSetupEvent(this, instance.getEventHash());
      return instance;
    };
  };

  /**
   * Parent class for all advanced plugins.
   *
   * @mixes   module:evented~EventedMixin
   * @mixes   module:stateful~StatefulMixin
   * @fires   Player#beforepluginsetup
   * @fires   Player#beforepluginsetup:$name
   * @fires   Player#pluginsetup
   * @fires   Player#pluginsetup:$name
   * @listens Player#dispose
   * @throws  {Error}
   *          If attempting to instantiate the base {@link Plugin} class
   *          directly instead of via a sub-class.
   */
  class Plugin {
    /**
     * Creates an instance of this class.
     *
     * Sub-classes should call `super` to ensure plugins are properly initialized.
     *
     * @param {Player} player
     *        A Video.js player instance.
     */
    constructor(player) {
      if (this.constructor === Plugin) {
        throw new Error('Plugin must be sub-classed; not directly instantiated.');
      }
      this.player = player;
      if (!this.log) {
        this.log = this.player.log.createLogger(this.name);
      }

      // Make this object evented, but remove the added `trigger` method so we
      // use the prototype version instead.
      evented(this);
      delete this.trigger;
      stateful(this, this.constructor.defaultState);
      markPluginAsActive(player, this.name);

      // Auto-bind the dispose method so we can use it as a listener and unbind
      // it later easily.
      this.dispose = this.dispose.bind(this);

      // If the player is disposed, dispose the plugin.
      player.on('dispose', this.dispose);
    }

    /**
     * Get the version of the plugin that was set on <pluginName>.VERSION
     */
    version() {
      return this.constructor.VERSION;
    }

    /**
     * Each event triggered by plugins includes a hash of additional data with
     * conventional properties.
     *
     * This returns that object or mutates an existing hash.
     *
     * @param   {Object} [hash={}]
     *          An object to be used as event an event hash.
     *
     * @return {Plugin~PluginEventHash}
     *          An event hash object with provided properties mixed-in.
     */
    getEventHash(hash = {}) {
      hash.name = this.name;
      hash.plugin = this.constructor;
      hash.instance = this;
      return hash;
    }

    /**
     * Triggers an event on the plugin object and overrides
     * {@link module:evented~EventedMixin.trigger|EventedMixin.trigger}.
     *
     * @param   {string|Object} event
     *          An event type or an object with a type property.
     *
     * @param   {Object} [hash={}]
     *          Additional data hash to merge with a
     *          {@link Plugin~PluginEventHash|PluginEventHash}.
     *
     * @return {boolean}
     *          Whether or not default was prevented.
     */
    trigger(event, hash = {}) {
      return trigger(this.eventBusEl_, event, this.getEventHash(hash));
    }

    /**
     * Handles "statechanged" events on the plugin. No-op by default, override by
     * subclassing.
     *
     * @abstract
     * @param    {Event} e
     *           An event object provided by a "statechanged" event.
     *
     * @param    {Object} e.changes
     *           An object describing changes that occurred with the "statechanged"
     *           event.
     */
    handleStateChanged(e) {}

    /**
     * Disposes a plugin.
     *
     * Subclasses can override this if they want, but for the sake of safety,
     * it's probably best to subscribe the "dispose" event.
     *
     * @fires Plugin#dispose
     */
    dispose() {
      const {
        name,
        player
      } = this;

      /**
       * Signals that a advanced plugin is about to be disposed.
       *
       * @event Plugin#dispose
       * @type  {Event}
       */
      this.trigger('dispose');
      this.off();
      player.off('dispose', this.dispose);

      // Eliminate any possible sources of leaking memory by clearing up
      // references between the player and the plugin instance and nulling out
      // the plugin's state and replacing methods with a function that throws.
      player[PLUGIN_CACHE_KEY][name] = false;
      this.player = this.state = null;

      // Finally, replace the plugin name on the player with a new factory
      // function, so that the plugin is ready to be set up again.
      player[name] = createPluginFactory(name, pluginStorage[name]);
    }

    /**
     * Determines if a plugin is a basic plugin (i.e. not a sub-class of `Plugin`).
     *
     * @param   {string|Function} plugin
     *          If a string, matches the name of a plugin. If a function, will be
     *          tested directly.
     *
     * @return {boolean}
     *          Whether or not a plugin is a basic plugin.
     */
    static isBasic(plugin) {
      const p = typeof plugin === 'string' ? getPlugin(plugin) : plugin;
      return typeof p === 'function' && !Plugin.prototype.isPrototypeOf(p.prototype);
    }

    /**
     * Register a Video.js plugin.
     *
     * @param   {string} name
     *          The name of the plugin to be registered. Must be a string and
     *          must not match an existing plugin or a method on the `Player`
     *          prototype.
     *
     * @param   {typeof Plugin|Function} plugin
     *          A sub-class of `Plugin` or a function for basic plugins.
     *
     * @return {typeof Plugin|Function}
     *          For advanced plugins, a factory function for that plugin. For
     *          basic plugins, a wrapper function that initializes the plugin.
     */
    static registerPlugin(name, plugin) {
      if (typeof name !== 'string') {
        throw new Error(`Illegal plugin name, "${name}", must be a string, was ${typeof name}.`);
      }
      if (pluginExists(name)) {
        log.warn(`A plugin named "${name}" already exists. You may want to avoid re-registering plugins!`);
      } else if (Player.prototype.hasOwnProperty(name)) {
        throw new Error(`Illegal plugin name, "${name}", cannot share a name with an existing player method!`);
      }
      if (typeof plugin !== 'function') {
        throw new Error(`Illegal plugin for "${name}", must be a function, was ${typeof plugin}.`);
      }
      pluginStorage[name] = plugin;

      // Add a player prototype method for all sub-classed plugins (but not for
      // the base Plugin class).
      if (name !== BASE_PLUGIN_NAME) {
        if (Plugin.isBasic(plugin)) {
          Player.prototype[name] = createBasicPlugin(name, plugin);
        } else {
          Player.prototype[name] = createPluginFactory(name, plugin);
        }
      }
      return plugin;
    }

    /**
     * De-register a Video.js plugin.
     *
     * @param  {string} name
     *         The name of the plugin to be de-registered. Must be a string that
     *         matches an existing plugin.
     *
     * @throws {Error}
     *         If an attempt is made to de-register the base plugin.
     */
    static deregisterPlugin(name) {
      if (name === BASE_PLUGIN_NAME) {
        throw new Error('Cannot de-register base plugin.');
      }
      if (pluginExists(name)) {
        delete pluginStorage[name];
        delete Player.prototype[name];
      }
    }

    /**
     * Gets an object containing multiple Video.js plugins.
     *
     * @param   {Array} [names]
     *          If provided, should be an array of plugin names. Defaults to _all_
     *          plugin names.
     *
     * @return {Object|undefined}
     *          An object containing plugin(s) associated with their name(s) or
     *          `undefined` if no matching plugins exist).
     */
    static getPlugins(names = Object.keys(pluginStorage)) {
      let result;
      names.forEach(name => {
        const plugin = getPlugin(name);
        if (plugin) {
          result = result || {};
          result[name] = plugin;
        }
      });
      return result;
    }

    /**
     * Gets a plugin's version, if available
     *
     * @param   {string} name
     *          The name of a plugin.
     *
     * @return {string}
     *          The plugin's version or an empty string.
     */
    static getPluginVersion(name) {
      const plugin = getPlugin(name);
      return plugin && plugin.VERSION || '';
    }
  }

  /**
   * Gets a plugin by name if it exists.
   *
   * @static
   * @method   getPlugin
   * @memberOf Plugin
   * @param    {string} name
   *           The name of a plugin.
   *
   * @returns  {typeof Plugin|Function|undefined}
   *           The plugin (or `undefined`).
   */
  Plugin.getPlugin = getPlugin;

  /**
   * The name of the base plugin class as it is registered.
   *
   * @type {string}
   */
  Plugin.BASE_PLUGIN_NAME = BASE_PLUGIN_NAME;
  Plugin.registerPlugin(BASE_PLUGIN_NAME, Plugin);

  /**
   * Documented in player.js
   *
   * @ignore
   */
  Player.prototype.usingPlugin = function (name) {
    return !!this[PLUGIN_CACHE_KEY] && this[PLUGIN_CACHE_KEY][name] === true;
  };

  /**
   * Documented in player.js
   *
   * @ignore
   */
  Player.prototype.hasPlugin = function (name) {
    return !!pluginExists(name);
  };

  /**
   * Signals that a plugin is about to be set up on a player.
   *
   * @event    Player#beforepluginsetup
   * @type     {Plugin~PluginEventHash}
   */

  /**
   * Signals that a plugin is about to be set up on a player - by name. The name
   * is the name of the plugin.
   *
   * @event    Player#beforepluginsetup:$name
   * @type     {Plugin~PluginEventHash}
   */

  /**
   * Signals that a plugin has just been set up on a player.
   *
   * @event    Player#pluginsetup
   * @type     {Plugin~PluginEventHash}
   */

  /**
   * Signals that a plugin has just been set up on a player - by name. The name
   * is the name of the plugin.
   *
   * @event    Player#pluginsetup:$name
   * @type     {Plugin~PluginEventHash}
   */

  /**
   * @typedef  {Object} Plugin~PluginEventHash
   *
   * @property {string} instance
   *           For basic plugins, the return value of the plugin function. For
   *           advanced plugins, the plugin instance on which the event is fired.
   *
   * @property {string} name
   *           The name of the plugin.
   *
   * @property {string} plugin
   *           For basic plugins, the plugin function. For advanced plugins, the
   *           plugin class/constructor.
   */

  /**
   * @file deprecate.js
   * @module deprecate
   */

  /**
   * Decorate a function with a deprecation message the first time it is called.
   *
   * @param  {string}   message
   *         A deprecation message to log the first time the returned function
   *         is called.
   *
   * @param  {Function} fn
   *         The function to be deprecated.
   *
   * @return {Function}
   *         A wrapper function that will log a deprecation warning the first
   *         time it is called. The return value will be the return value of
   *         the wrapped function.
   */
  function deprecate(message, fn) {
    let warned = false;
    return function (...args) {
      if (!warned) {
        log.warn(message);
      }
      warned = true;
      return fn.apply(this, args);
    };
  }

  /**
   * Internal function used to mark a function as deprecated in the next major
   * version with consistent messaging.
   *
   * @param  {number}   major   The major version where it will be removed
   * @param  {string}   oldName The old function name
   * @param  {string}   newName The new function name
   * @param  {Function} fn      The function to deprecate
   * @return {Function}         The decorated function
   */
  function deprecateForMajor(major, oldName, newName, fn) {
    return deprecate(`${oldName} is deprecated and will be removed in ${major}.0; please use ${newName} instead.`, fn);
  }

  /**
   * @file video.js
   * @module videojs
   */

  /**
   * Normalize an `id` value by trimming off a leading `#`
   *
   * @private
   * @param   {string} id
   *          A string, maybe with a leading `#`.
   *
   * @return {string}
   *          The string, without any leading `#`.
   */
  const normalizeId = id => id.indexOf('#') === 0 ? id.slice(1) : id;

  /**
   * A callback that is called when a component is ready. Does not have any
   * parameters and any callback value will be ignored. See: {@link Component~ReadyCallback}
   *
   * @callback ReadyCallback
   */

  /**
   * The `videojs()` function doubles as the main function for users to create a
   * {@link Player} instance as well as the main library namespace.
   *
   * It can also be used as a getter for a pre-existing {@link Player} instance.
   * However, we _strongly_ recommend using `videojs.getPlayer()` for this
   * purpose because it avoids any potential for unintended initialization.
   *
   * Due to [limitations](https://github.com/jsdoc3/jsdoc/issues/955#issuecomment-313829149)
   * of our JSDoc template, we cannot properly document this as both a function
   * and a namespace, so its function signature is documented here.
   *
   * #### Arguments
   * ##### id
   * string|Element, **required**
   *
   * Video element or video element ID.
   *
   * ##### options
   * Object, optional
   *
   * Options object for providing settings.
   * See: [Options Guide](https://docs.videojs.com/tutorial-options.html).
   *
   * ##### ready
   * {@link Component~ReadyCallback}, optional
   *
   * A function to be called when the {@link Player} and {@link Tech} are ready.
   *
   * #### Return Value
   *
   * The `videojs()` function returns a {@link Player} instance.
   *
   * @namespace
   *
   * @borrows AudioTrack as AudioTrack
   * @borrows Component.getComponent as getComponent
   * @borrows module:events.on as on
   * @borrows module:events.one as one
   * @borrows module:events.off as off
   * @borrows module:events.trigger as trigger
   * @borrows EventTarget as EventTarget
   * @borrows module:middleware.use as use
   * @borrows Player.players as players
   * @borrows Plugin.registerPlugin as registerPlugin
   * @borrows Plugin.deregisterPlugin as deregisterPlugin
   * @borrows Plugin.getPlugins as getPlugins
   * @borrows Plugin.getPlugin as getPlugin
   * @borrows Plugin.getPluginVersion as getPluginVersion
   * @borrows Tech.getTech as getTech
   * @borrows Tech.registerTech as registerTech
   * @borrows TextTrack as TextTrack
   * @borrows VideoTrack as VideoTrack
   *
   * @param  {string|Element} id
   *         Video element or video element ID.
   *
   * @param  {Object} [options]
   *         Options object for providing settings.
   *         See: [Options Guide](https://docs.videojs.com/tutorial-options.html).
   *
   * @param  {ReadyCallback} [ready]
   *         A function to be called when the {@link Player} and {@link Tech} are
   *         ready.
   *
   * @return {Player}
   *         The `videojs()` function returns a {@link Player|Player} instance.
   */
  function videojs(id, options, ready) {
    let player = videojs.getPlayer(id);
    if (player) {
      if (options) {
        log.warn(`Player "${id}" is already initialised. Options will not be applied.`);
      }
      if (ready) {
        player.ready(ready);
      }
      return player;
    }
    const el = typeof id === 'string' ? $('#' + normalizeId(id)) : id;
    if (!isEl(el)) {
      throw new TypeError('The element or ID supplied is not valid. (videojs)');
    }

    // document.body.contains(el) will only check if el is contained within that one document.
    // This causes problems for elements in iframes.
    // Instead, use the element's ownerDocument instead of the global document.
    // This will make sure that the element is indeed in the dom of that document.
    // Additionally, check that the document in question has a default view.
    // If the document is no longer attached to the dom, the defaultView of the document will be null.
    if (!el.ownerDocument.defaultView || !el.ownerDocument.body.contains(el)) {
      log.warn('The element supplied is not included in the DOM');
    }
    options = options || {};

    // Store a copy of the el before modification, if it is to be restored in destroy()
    // If div ingest, store the parent div
    if (options.restoreEl === true) {
      options.restoreEl = (el.parentNode && el.parentNode.hasAttribute('data-vjs-player') ? el.parentNode : el).cloneNode(true);
    }
    hooks('beforesetup').forEach(hookFunction => {
      const opts = hookFunction(el, merge(options));
      if (!isObject(opts) || Array.isArray(opts)) {
        log.error('please return an object in beforesetup hooks');
        return;
      }
      options = merge(options, opts);
    });

    // We get the current "Player" component here in case an integration has
    // replaced it with a custom player.
    const PlayerComponent = Component.getComponent('Player');
    player = new PlayerComponent(el, options, ready);
    hooks('setup').forEach(hookFunction => hookFunction(player));
    return player;
  }
  videojs.hooks_ = hooks_;
  videojs.hooks = hooks;
  videojs.hook = hook;
  videojs.hookOnce = hookOnce;
  videojs.removeHook = removeHook;

  // Add default styles
  if (window.VIDEOJS_NO_DYNAMIC_STYLE !== true && isReal()) {
    let style = $('.vjs-styles-defaults');
    if (!style) {
      style = createStyleElement('vjs-styles-defaults');
      const head = $('head');
      if (head) {
        head.insertBefore(style, head.firstChild);
      }
      setTextContent(style, `
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid:not(.vjs-audio-only-mode) {
        padding-top: 56.25%
      }
    `);
    }
  }

  // Run Auto-load players
  // You have to wait at least once in case this script is loaded after your
  // video in the DOM (weird behavior only with minified version)
  autoSetupTimeout(1, videojs);

  /**
   * Current Video.js version. Follows [semantic versioning](https://semver.org/).
   *
   * @type {string}
   */
  videojs.VERSION = version;

  /**
   * The global options object. These are the settings that take effect
   * if no overrides are specified when the player is created.
   *
   * @type {Object}
   */
  videojs.options = Player.prototype.options_;

  /**
   * Get an object with the currently created players, keyed by player ID
   *
   * @return {Object}
   *         The created players
   */
  videojs.getPlayers = () => Player.players;

  /**
   * Get a single player based on an ID or DOM element.
   *
   * This is useful if you want to check if an element or ID has an associated
   * Video.js player, but not create one if it doesn't.
   *
   * @param   {string|Element} id
   *          An HTML element - `<video>`, `<audio>`, or `<video-js>` -
   *          or a string matching the `id` of such an element.
   *
   * @return {Player|undefined}
   *          A player instance or `undefined` if there is no player instance
   *          matching the argument.
   */
  videojs.getPlayer = id => {
    const players = Player.players;
    let tag;
    if (typeof id === 'string') {
      const nId = normalizeId(id);
      const player = players[nId];
      if (player) {
        return player;
      }
      tag = $('#' + nId);
    } else {
      tag = id;
    }
    if (isEl(tag)) {
      const {
        player,
        playerId
      } = tag;

      // Element may have a `player` property referring to an already created
      // player instance. If so, return that.
      if (player || players[playerId]) {
        return player || players[playerId];
      }
    }
  };

  /**
   * Returns an array of all current players.
   *
   * @return {Array}
   *         An array of all players. The array will be in the order that
   *         `Object.keys` provides, which could potentially vary between
   *         JavaScript engines.
   *
   */
  videojs.getAllPlayers = () =>
  // Disposed players leave a key with a `null` value, so we need to make sure
  // we filter those out.
  Object.keys(Player.players).map(k => Player.players[k]).filter(Boolean);
  videojs.players = Player.players;
  videojs.getComponent = Component.getComponent;

  /**
   * Register a component so it can referred to by name. Used when adding to other
   * components, either through addChild `component.addChild('myComponent')` or through
   * default children options  `{ children: ['myComponent'] }`.
   *
   * > NOTE: You could also just initialize the component before adding.
   * `component.addChild(new MyComponent());`
   *
   * @param {string} name
   *        The class name of the component
   *
   * @param {Component} comp
   *        The component class
   *
   * @return {Component}
   *         The newly registered component
   */
  videojs.registerComponent = (name, comp) => {
    if (Tech.isTech(comp)) {
      log.warn(`The ${name} tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)`);
    }
    Component.registerComponent.call(Component, name, comp);
  };
  videojs.getTech = Tech.getTech;
  videojs.registerTech = Tech.registerTech;
  videojs.use = use;

  /**
   * An object that can be returned by a middleware to signify
   * that the middleware is being terminated.
   *
   * @type {object}
   * @property {object} middleware.TERMINATOR
   */
  Object.defineProperty(videojs, 'middleware', {
    value: {},
    writeable: false,
    enumerable: true
  });
  Object.defineProperty(videojs.middleware, 'TERMINATOR', {
    value: TERMINATOR,
    writeable: false,
    enumerable: true
  });

  /**
   * A reference to the {@link module:browser|browser utility module} as an object.
   *
   * @type {Object}
   * @see  {@link module:browser|browser}
   */
  videojs.browser = browser;

  /**
   * A reference to the {@link module:obj|obj utility module} as an object.
   *
   * @type {Object}
   * @see  {@link module:obj|obj}
   */
  videojs.obj = Obj;

  /**
   * Deprecated reference to the {@link module:obj.merge|merge function}
   *
   * @type {Function}
   * @see {@link module:obj.merge|merge}
   * @deprecated Deprecated and will be removed in 9.0. Please use videojs.obj.merge instead.
   */
  videojs.mergeOptions = deprecateForMajor(9, 'videojs.mergeOptions', 'videojs.obj.merge', merge);

  /**
   * Deprecated reference to the {@link module:obj.defineLazyProperty|defineLazyProperty function}
   *
   * @type {Function}
   * @see {@link module:obj.defineLazyProperty|defineLazyProperty}
   * @deprecated Deprecated and will be removed in 9.0. Please use videojs.obj.defineLazyProperty instead.
   */
  videojs.defineLazyProperty = deprecateForMajor(9, 'videojs.defineLazyProperty', 'videojs.obj.defineLazyProperty', defineLazyProperty);

  /**
   * Deprecated reference to the {@link module:fn.bind_|fn.bind_ function}
   *
   * @type {Function}
   * @see {@link module:fn.bind_|fn.bind_}
   * @deprecated Deprecated and will be removed in 9.0. Please use native Function.prototype.bind instead.
   */
  videojs.bind = deprecateForMajor(9, 'videojs.bind', 'native Function.prototype.bind', bind_);
  videojs.registerPlugin = Plugin.registerPlugin;
  videojs.deregisterPlugin = Plugin.deregisterPlugin;

  /**
   * Deprecated method to register a plugin with Video.js
   *
   * @deprecated Deprecated and will be removed in 9.0. Use videojs.registerPlugin() instead.
   *
   * @param {string} name
   *        The plugin name
   *
   * @param {Plugin|Function} plugin
   *         The plugin sub-class or function
   */
  videojs.plugin = (name, plugin) => {
    log.warn('videojs.plugin() is deprecated; use videojs.registerPlugin() instead');
    return Plugin.registerPlugin(name, plugin);
  };
  videojs.getPlugins = Plugin.getPlugins;
  videojs.getPlugin = Plugin.getPlugin;
  videojs.getPluginVersion = Plugin.getPluginVersion;

  /**
   * Adding languages so that they're available to all players.
   * Example: `videojs.addLanguage('es', { 'Hello': 'Hola' });`
   *
   * @param {string} code
   *        The language code or dictionary property
   *
   * @param {Object} data
   *        The data values to be translated
   *
   * @return {Object}
   *         The resulting language dictionary object
   */
  videojs.addLanguage = function (code, data) {
    code = ('' + code).toLowerCase();
    videojs.options.languages = merge(videojs.options.languages, {
      [code]: data
    });
    return videojs.options.languages[code];
  };

  /**
   * A reference to the {@link module:log|log utility module} as an object.
   *
   * @type {Function}
   * @see  {@link module:log|log}
   */
  videojs.log = log;
  videojs.createLogger = createLogger;

  /**
   * A reference to the {@link module:time|time utility module} as an object.
   *
   * @type {Object}
   * @see {@link module:time|time}
   */
  videojs.time = Time;

  /**
   * Deprecated reference to the {@link module:time.createTimeRanges|createTimeRanges function}
   *
   * @type {Function}
   * @see {@link module:time.createTimeRanges|createTimeRanges}
   * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.createTimeRanges instead.
   */
  videojs.createTimeRange = deprecateForMajor(9, 'videojs.createTimeRange', 'videojs.time.createTimeRanges', createTimeRanges);

  /**
   * Deprecated reference to the {@link module:time.createTimeRanges|createTimeRanges function}
   *
   * @type {Function}
   * @see {@link module:time.createTimeRanges|createTimeRanges}
   * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.createTimeRanges instead.
   */
  videojs.createTimeRanges = deprecateForMajor(9, 'videojs.createTimeRanges', 'videojs.time.createTimeRanges', createTimeRanges);

  /**
   * Deprecated reference to the {@link module:time.formatTime|formatTime function}
   *
   * @type {Function}
   * @see {@link module:time.formatTime|formatTime}
   * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.format instead.
   */
  videojs.formatTime = deprecateForMajor(9, 'videojs.formatTime', 'videojs.time.formatTime', formatTime);

  /**
   * Deprecated reference to the {@link module:time.setFormatTime|setFormatTime function}
   *
   * @type {Function}
   * @see {@link module:time.setFormatTime|setFormatTime}
   * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.setFormat instead.
   */
  videojs.setFormatTime = deprecateForMajor(9, 'videojs.setFormatTime', 'videojs.time.setFormatTime', setFormatTime);

  /**
   * Deprecated reference to the {@link module:time.resetFormatTime|resetFormatTime function}
   *
   * @type {Function}
   * @see {@link module:time.resetFormatTime|resetFormatTime}
   * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.resetFormat instead.
   */
  videojs.resetFormatTime = deprecateForMajor(9, 'videojs.resetFormatTime', 'videojs.time.resetFormatTime', resetFormatTime);

  /**
   * Deprecated reference to the {@link module:url.parseUrl|Url.parseUrl function}
   *
   * @type {Function}
   * @see {@link module:url.parseUrl|parseUrl}
   * @deprecated Deprecated and will be removed in 9.0. Please use videojs.url.parseUrl instead.
   */
  videojs.parseUrl = deprecateForMajor(9, 'videojs.parseUrl', 'videojs.url.parseUrl', parseUrl);

  /**
   * Deprecated reference to the {@link module:url.isCrossOrigin|Url.isCrossOrigin function}
   *
   * @type {Function}
   * @see {@link module:url.isCrossOrigin|isCrossOrigin}
   * @deprecated Deprecated and will be removed in 9.0. Please use videojs.url.isCrossOrigin instead.
   */
  videojs.isCrossOrigin = deprecateForMajor(9, 'videojs.isCrossOrigin', 'videojs.url.isCrossOrigin', isCrossOrigin);
  videojs.EventTarget = EventTarget;
  videojs.any = any;
  videojs.on = on;
  videojs.one = one;
  videojs.off = off;
  videojs.trigger = trigger;

  /**
   * A cross-browser XMLHttpRequest wrapper.
   *
   * @function
   * @param    {Object} options
   *           Settings for the request.
   *
   * @return   {XMLHttpRequest|XDomainRequest}
   *           The request object.
   *
   * @see      https://github.com/Raynos/xhr
   */
  videojs.xhr = lib;
  videojs.TextTrack = TextTrack;
  videojs.AudioTrack = AudioTrack;
  videojs.VideoTrack = VideoTrack;
  ['isEl', 'isTextNode', 'createEl', 'hasClass', 'addClass', 'removeClass', 'toggleClass', 'setAttributes', 'getAttributes', 'emptyEl', 'appendContent', 'insertContent'].forEach(k => {
    videojs[k] = function () {
      log.warn(`videojs.${k}() is deprecated; use videojs.dom.${k}() instead`);
      return Dom[k].apply(null, arguments);
    };
  });
  videojs.computedStyle = deprecateForMajor(9, 'videojs.computedStyle', 'videojs.dom.computedStyle', computedStyle);

  /**
   * A reference to the {@link module:dom|DOM utility module} as an object.
   *
   * @type {Object}
   * @see {@link module:dom|dom}
   */
  videojs.dom = Dom;

  /**
   * A reference to the {@link module:fn|fn utility module} as an object.
   *
   * @type {Object}
   * @see {@link module:fn|fn}
   */
  videojs.fn = Fn;

  /**
   * A reference to the {@link module:num|num utility module} as an object.
   *
   * @type {Object}
   * @see {@link module:num|num}
   */
  videojs.num = Num;

  /**
   * A reference to the {@link module:str|str utility module} as an object.
   *
   * @type {Object}
   * @see {@link module:str|str}
   */
  videojs.str = Str;

  /**
   * A reference to the {@link module:url|URL utility module} as an object.
   *
   * @type {Object}
   * @see {@link module:url|url}
   */
  videojs.url = Url;

  return videojs;

}));


/***/ }),

/***/ "../node_modules/webfontloader/webfontloader.js":
/*!******************************************************!*\
  !*** ../node_modules/webfontloader/webfontloader.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;/* Web Font Loader v1.6.28 - (c) Adobe Systems, Google. License: Apache 2.0 */(function(){function aa(a,b,c){return a.call.apply(a.bind,arguments)}function ba(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function p(a,b,c){p=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?aa:ba;return p.apply(null,arguments)}var q=Date.now||function(){return+new Date};function ca(a,b){this.a=a;this.o=b||a;this.c=this.o.document}var da=!!window.FontFace;function t(a,b,c,d){b=a.c.createElement(b);if(c)for(var e in c)c.hasOwnProperty(e)&&("style"==e?b.style.cssText=c[e]:b.setAttribute(e,c[e]));d&&b.appendChild(a.c.createTextNode(d));return b}function u(a,b,c){a=a.c.getElementsByTagName(b)[0];a||(a=document.documentElement);a.insertBefore(c,a.lastChild)}function v(a){a.parentNode&&a.parentNode.removeChild(a)}
function w(a,b,c){b=b||[];c=c||[];for(var d=a.className.split(/\s+/),e=0;e<b.length;e+=1){for(var f=!1,g=0;g<d.length;g+=1)if(b[e]===d[g]){f=!0;break}f||d.push(b[e])}b=[];for(e=0;e<d.length;e+=1){f=!1;for(g=0;g<c.length;g+=1)if(d[e]===c[g]){f=!0;break}f||b.push(d[e])}a.className=b.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function y(a,b){for(var c=a.className.split(/\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return!0;return!1}
function ea(a){return a.o.location.hostname||a.a.location.hostname}function z(a,b,c){function d(){m&&e&&f&&(m(g),m=null)}b=t(a,"link",{rel:"stylesheet",href:b,media:"all"});var e=!1,f=!0,g=null,m=c||null;da?(b.onload=function(){e=!0;d()},b.onerror=function(){e=!0;g=Error("Stylesheet failed to load");d()}):setTimeout(function(){e=!0;d()},0);u(a,"head",b)}
function A(a,b,c,d){var e=a.c.getElementsByTagName("head")[0];if(e){var f=t(a,"script",{src:b}),g=!1;f.onload=f.onreadystatechange=function(){g||this.readyState&&"loaded"!=this.readyState&&"complete"!=this.readyState||(g=!0,c&&c(null),f.onload=f.onreadystatechange=null,"HEAD"==f.parentNode.tagName&&e.removeChild(f))};e.appendChild(f);setTimeout(function(){g||(g=!0,c&&c(Error("Script load timeout")))},d||5E3);return f}return null};function B(){this.a=0;this.c=null}function C(a){a.a++;return function(){a.a--;D(a)}}function E(a,b){a.c=b;D(a)}function D(a){0==a.a&&a.c&&(a.c(),a.c=null)};function F(a){this.a=a||"-"}F.prototype.c=function(a){for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c].replace(/[\W_]+/g,"").toLowerCase());return b.join(this.a)};function G(a,b){this.c=a;this.f=4;this.a="n";var c=(b||"n4").match(/^([nio])([1-9])$/i);c&&(this.a=c[1],this.f=parseInt(c[2],10))}function fa(a){return H(a)+" "+(a.f+"00")+" 300px "+I(a.c)}function I(a){var b=[];a=a.split(/,\s*/);for(var c=0;c<a.length;c++){var d=a[c].replace(/['"]/g,"");-1!=d.indexOf(" ")||/^\d/.test(d)?b.push("'"+d+"'"):b.push(d)}return b.join(",")}function J(a){return a.a+a.f}function H(a){var b="normal";"o"===a.a?b="oblique":"i"===a.a&&(b="italic");return b}
function ga(a){var b=4,c="n",d=null;a&&((d=a.match(/(normal|oblique|italic)/i))&&d[1]&&(c=d[1].substr(0,1).toLowerCase()),(d=a.match(/([1-9]00|normal|bold)/i))&&d[1]&&(/bold/i.test(d[1])?b=7:/[1-9]00/.test(d[1])&&(b=parseInt(d[1].substr(0,1),10))));return c+b};function ha(a,b){this.c=a;this.f=a.o.document.documentElement;this.h=b;this.a=new F("-");this.j=!1!==b.events;this.g=!1!==b.classes}function ia(a){a.g&&w(a.f,[a.a.c("wf","loading")]);K(a,"loading")}function L(a){if(a.g){var b=y(a.f,a.a.c("wf","active")),c=[],d=[a.a.c("wf","loading")];b||c.push(a.a.c("wf","inactive"));w(a.f,c,d)}K(a,"inactive")}function K(a,b,c){if(a.j&&a.h[b])if(c)a.h[b](c.c,J(c));else a.h[b]()};function ja(){this.c={}}function ka(a,b,c){var d=[],e;for(e in b)if(b.hasOwnProperty(e)){var f=a.c[e];f&&d.push(f(b[e],c))}return d};function M(a,b){this.c=a;this.f=b;this.a=t(this.c,"span",{"aria-hidden":"true"},this.f)}function N(a){u(a.c,"body",a.a)}function O(a){return"display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:"+I(a.c)+";"+("font-style:"+H(a)+";font-weight:"+(a.f+"00")+";")};function P(a,b,c,d,e,f){this.g=a;this.j=b;this.a=d;this.c=c;this.f=e||3E3;this.h=f||void 0}P.prototype.start=function(){var a=this.c.o.document,b=this,c=q(),d=new Promise(function(d,e){function f(){q()-c>=b.f?e():a.fonts.load(fa(b.a),b.h).then(function(a){1<=a.length?d():setTimeout(f,25)},function(){e()})}f()}),e=null,f=new Promise(function(a,d){e=setTimeout(d,b.f)});Promise.race([f,d]).then(function(){e&&(clearTimeout(e),e=null);b.g(b.a)},function(){b.j(b.a)})};function Q(a,b,c,d,e,f,g){this.v=a;this.B=b;this.c=c;this.a=d;this.s=g||"BESbswy";this.f={};this.w=e||3E3;this.u=f||null;this.m=this.j=this.h=this.g=null;this.g=new M(this.c,this.s);this.h=new M(this.c,this.s);this.j=new M(this.c,this.s);this.m=new M(this.c,this.s);a=new G(this.a.c+",serif",J(this.a));a=O(a);this.g.a.style.cssText=a;a=new G(this.a.c+",sans-serif",J(this.a));a=O(a);this.h.a.style.cssText=a;a=new G("serif",J(this.a));a=O(a);this.j.a.style.cssText=a;a=new G("sans-serif",J(this.a));a=
O(a);this.m.a.style.cssText=a;N(this.g);N(this.h);N(this.j);N(this.m)}var R={D:"serif",C:"sans-serif"},S=null;function T(){if(null===S){var a=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent);S=!!a&&(536>parseInt(a[1],10)||536===parseInt(a[1],10)&&11>=parseInt(a[2],10))}return S}Q.prototype.start=function(){this.f.serif=this.j.a.offsetWidth;this.f["sans-serif"]=this.m.a.offsetWidth;this.A=q();U(this)};
function la(a,b,c){for(var d in R)if(R.hasOwnProperty(d)&&b===a.f[R[d]]&&c===a.f[R[d]])return!0;return!1}function U(a){var b=a.g.a.offsetWidth,c=a.h.a.offsetWidth,d;(d=b===a.f.serif&&c===a.f["sans-serif"])||(d=T()&&la(a,b,c));d?q()-a.A>=a.w?T()&&la(a,b,c)&&(null===a.u||a.u.hasOwnProperty(a.a.c))?V(a,a.v):V(a,a.B):ma(a):V(a,a.v)}function ma(a){setTimeout(p(function(){U(this)},a),50)}function V(a,b){setTimeout(p(function(){v(this.g.a);v(this.h.a);v(this.j.a);v(this.m.a);b(this.a)},a),0)};function W(a,b,c){this.c=a;this.a=b;this.f=0;this.m=this.j=!1;this.s=c}var X=null;W.prototype.g=function(a){var b=this.a;b.g&&w(b.f,[b.a.c("wf",a.c,J(a).toString(),"active")],[b.a.c("wf",a.c,J(a).toString(),"loading"),b.a.c("wf",a.c,J(a).toString(),"inactive")]);K(b,"fontactive",a);this.m=!0;na(this)};
W.prototype.h=function(a){var b=this.a;if(b.g){var c=y(b.f,b.a.c("wf",a.c,J(a).toString(),"active")),d=[],e=[b.a.c("wf",a.c,J(a).toString(),"loading")];c||d.push(b.a.c("wf",a.c,J(a).toString(),"inactive"));w(b.f,d,e)}K(b,"fontinactive",a);na(this)};function na(a){0==--a.f&&a.j&&(a.m?(a=a.a,a.g&&w(a.f,[a.a.c("wf","active")],[a.a.c("wf","loading"),a.a.c("wf","inactive")]),K(a,"active")):L(a.a))};function oa(a){this.j=a;this.a=new ja;this.h=0;this.f=this.g=!0}oa.prototype.load=function(a){this.c=new ca(this.j,a.context||this.j);this.g=!1!==a.events;this.f=!1!==a.classes;pa(this,new ha(this.c,a),a)};
function qa(a,b,c,d,e){var f=0==--a.h;(a.f||a.g)&&setTimeout(function(){var a=e||null,m=d||null||{};if(0===c.length&&f)L(b.a);else{b.f+=c.length;f&&(b.j=f);var h,l=[];for(h=0;h<c.length;h++){var k=c[h],n=m[k.c],r=b.a,x=k;r.g&&w(r.f,[r.a.c("wf",x.c,J(x).toString(),"loading")]);K(r,"fontloading",x);r=null;if(null===X)if(window.FontFace){var x=/Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent),xa=/OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent)&&/Apple/.exec(window.navigator.vendor);
X=x?42<parseInt(x[1],10):xa?!1:!0}else X=!1;X?r=new P(p(b.g,b),p(b.h,b),b.c,k,b.s,n):r=new Q(p(b.g,b),p(b.h,b),b.c,k,b.s,a,n);l.push(r)}for(h=0;h<l.length;h++)l[h].start()}},0)}function pa(a,b,c){var d=[],e=c.timeout;ia(b);var d=ka(a.a,c,a.c),f=new W(a.c,b,e);a.h=d.length;b=0;for(c=d.length;b<c;b++)d[b].load(function(b,d,c){qa(a,f,b,d,c)})};function ra(a,b){this.c=a;this.a=b}
ra.prototype.load=function(a){function b(){if(f["__mti_fntLst"+d]){var c=f["__mti_fntLst"+d](),e=[],h;if(c)for(var l=0;l<c.length;l++){var k=c[l].fontfamily;void 0!=c[l].fontStyle&&void 0!=c[l].fontWeight?(h=c[l].fontStyle+c[l].fontWeight,e.push(new G(k,h))):e.push(new G(k))}a(e)}else setTimeout(function(){b()},50)}var c=this,d=c.a.projectId,e=c.a.version;if(d){var f=c.c.o;A(this.c,(c.a.api||"https://fast.fonts.net/jsapi")+"/"+d+".js"+(e?"?v="+e:""),function(e){e?a([]):(f["__MonotypeConfiguration__"+
d]=function(){return c.a},b())}).id="__MonotypeAPIScript__"+d}else a([])};function sa(a,b){this.c=a;this.a=b}sa.prototype.load=function(a){var b,c,d=this.a.urls||[],e=this.a.families||[],f=this.a.testStrings||{},g=new B;b=0;for(c=d.length;b<c;b++)z(this.c,d[b],C(g));var m=[];b=0;for(c=e.length;b<c;b++)if(d=e[b].split(":"),d[1])for(var h=d[1].split(","),l=0;l<h.length;l+=1)m.push(new G(d[0],h[l]));else m.push(new G(d[0]));E(g,function(){a(m,f)})};function ta(a,b){a?this.c=a:this.c=ua;this.a=[];this.f=[];this.g=b||""}var ua="https://fonts.googleapis.com/css";function va(a,b){for(var c=b.length,d=0;d<c;d++){var e=b[d].split(":");3==e.length&&a.f.push(e.pop());var f="";2==e.length&&""!=e[1]&&(f=":");a.a.push(e.join(f))}}
function wa(a){if(0==a.a.length)throw Error("No fonts to load!");if(-1!=a.c.indexOf("kit="))return a.c;for(var b=a.a.length,c=[],d=0;d<b;d++)c.push(a.a[d].replace(/ /g,"+"));b=a.c+"?family="+c.join("%7C");0<a.f.length&&(b+="&subset="+a.f.join(","));0<a.g.length&&(b+="&text="+encodeURIComponent(a.g));return b};function ya(a){this.f=a;this.a=[];this.c={}}
var za={latin:"BESbswy","latin-ext":"\u00e7\u00f6\u00fc\u011f\u015f",cyrillic:"\u0439\u044f\u0416",greek:"\u03b1\u03b2\u03a3",khmer:"\u1780\u1781\u1782",Hanuman:"\u1780\u1781\u1782"},Aa={thin:"1",extralight:"2","extra-light":"2",ultralight:"2","ultra-light":"2",light:"3",regular:"4",book:"4",medium:"5","semi-bold":"6",semibold:"6","demi-bold":"6",demibold:"6",bold:"7","extra-bold":"8",extrabold:"8","ultra-bold":"8",ultrabold:"8",black:"9",heavy:"9",l:"3",r:"4",b:"7"},Ba={i:"i",italic:"i",n:"n",normal:"n"},
Ca=/^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;
function Da(a){for(var b=a.f.length,c=0;c<b;c++){var d=a.f[c].split(":"),e=d[0].replace(/\+/g," "),f=["n4"];if(2<=d.length){var g;var m=d[1];g=[];if(m)for(var m=m.split(","),h=m.length,l=0;l<h;l++){var k;k=m[l];if(k.match(/^[\w-]+$/)){var n=Ca.exec(k.toLowerCase());if(null==n)k="";else{k=n[2];k=null==k||""==k?"n":Ba[k];n=n[1];if(null==n||""==n)n="4";else var r=Aa[n],n=r?r:isNaN(n)?"4":n.substr(0,1);k=[k,n].join("")}}else k="";k&&g.push(k)}0<g.length&&(f=g);3==d.length&&(d=d[2],g=[],d=d?d.split(","):
g,0<d.length&&(d=za[d[0]])&&(a.c[e]=d))}a.c[e]||(d=za[e])&&(a.c[e]=d);for(d=0;d<f.length;d+=1)a.a.push(new G(e,f[d]))}};function Ea(a,b){this.c=a;this.a=b}var Fa={Arimo:!0,Cousine:!0,Tinos:!0};Ea.prototype.load=function(a){var b=new B,c=this.c,d=new ta(this.a.api,this.a.text),e=this.a.families;va(d,e);var f=new ya(e);Da(f);z(c,wa(d),C(b));E(b,function(){a(f.a,f.c,Fa)})};function Ga(a,b){this.c=a;this.a=b}Ga.prototype.load=function(a){var b=this.a.id,c=this.c.o;b?A(this.c,(this.a.api||"https://use.typekit.net")+"/"+b+".js",function(b){if(b)a([]);else if(c.Typekit&&c.Typekit.config&&c.Typekit.config.fn){b=c.Typekit.config.fn;for(var e=[],f=0;f<b.length;f+=2)for(var g=b[f],m=b[f+1],h=0;h<m.length;h++)e.push(new G(g,m[h]));try{c.Typekit.load({events:!1,classes:!1,async:!0})}catch(l){}a(e)}},2E3):a([])};function Ha(a,b){this.c=a;this.f=b;this.a=[]}Ha.prototype.load=function(a){var b=this.f.id,c=this.c.o,d=this;b?(c.__webfontfontdeckmodule__||(c.__webfontfontdeckmodule__={}),c.__webfontfontdeckmodule__[b]=function(b,c){for(var g=0,m=c.fonts.length;g<m;++g){var h=c.fonts[g];d.a.push(new G(h.name,ga("font-weight:"+h.weight+";font-style:"+h.style)))}a(d.a)},A(this.c,(this.f.api||"https://f.fontdeck.com/s/css/js/")+ea(this.c)+"/"+b+".js",function(b){b&&a([])})):a([])};var Y=new oa(window);Y.a.c.custom=function(a,b){return new sa(b,a)};Y.a.c.fontdeck=function(a,b){return new Ha(b,a)};Y.a.c.monotype=function(a,b){return new ra(b,a)};Y.a.c.typekit=function(a,b){return new Ga(b,a)};Y.a.c.google=function(a,b){return new Ea(b,a)};var Z={load:p(Y.load,Y)}; true?!(__WEBPACK_AMD_DEFINE_RESULT__ = (function(){return Z}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):0;}());


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/condition.js":
/*!******************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/condition.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _expression_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./expression.js */ "../node_modules/@cloudinary/url-gen/backwards/expression.js");

/**
 * Represents a transformation condition.
 * @param {string} conditionStr - a condition in string format
 * @class Condition
 * @example
 * // normally this class is not instantiated directly
 * var tr = cloudinary.Transformation.new()
 *    .if().width( ">", 1000).and().aspectRatio("<", "3:4").then()
 *      .width(1000)
 *      .crop("scale")
 *    .else()
 *      .width(500)
 *      .crop("scale")
 *
 * var tr = cloudinary.Transformation.new()
 *    .if("w > 1000 and aspectRatio < 3:4")
 *      .width(1000)
 *      .crop("scale")
 *    .else()
 *      .width(500)
 *      .crop("scale")
 *
 */
class Condition extends _expression_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(conditionStr) {
        super(conditionStr);
    }
    /**
     * @function Condition#height
     * @param {string} operator the comparison operator (e.g. "<", "lt")
     * @param {string|number} value the right hand side value
     * @return {Condition} this condition
     */
    height(operator, value) {
        return this.predicate("h", operator, value);
    }
    /**
     * @function Condition#width
     * @param {string} operator the comparison operator (e.g. "<", "lt")
     * @param {string|number} value the right hand side value
     * @return {Condition} this condition
     */
    width(operator, value) {
        return this.predicate("w", operator, value);
    }
    /**
     * @function Condition#aspectRatio
     * @param {string} operator the comparison operator (e.g. "<", "lt")
     * @param {string|number} value the right hand side value
     * @return {Condition} this condition
     */
    aspectRatio(operator, value) {
        return this.predicate("ar", operator, value);
    }
    /**
     * @function Condition#pages
     * @param {string} operator the comparison operator (e.g. "<", "lt")
     * @param {string|number} value the right hand side value
     * @return {Condition} this condition
     */
    pageCount(operator, value) {
        return this.predicate("pc", operator, value);
    }
    /**
     * @function Condition#faces
     * @param {string} operator the comparison operator (e.g. "<", "lt")
     * @param {string|number} value the right hand side value
     * @return {Condition} this condition
     */
    faceCount(operator, value) {
        return this.predicate("fc", operator, value);
    }
    /**
     * @function Condition#duration
     * @param {string} operator the comparison operator (e.g. "<", "lt")
     * @param {string|number} value the right hand side value
     * @return {Condition} this condition
     */
    duration(operator, value) {
        return this.predicate("du", operator, value);
    }
    /**
     * @function Condition#initialDuration
     * @param {string} operator the comparison operator (e.g. "<", "lt")
     * @param {string|number} value the right hand side value
     * @return {Condition} this condition
     */
    initialDuration(operator, value) {
        return this.predicate("idu", operator, value);
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Condition);


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/configuration.js":
/*!**********************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/configuration.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CONFIG_PARAMS": () => (/* binding */ CONFIG_PARAMS),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _internal_utils_cloneDeep_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/utils/cloneDeep.js */ "../node_modules/@cloudinary/url-gen/internal/utils/cloneDeep.js");
/* harmony import */ var _utils_isObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/isObject.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/isObject.js");


/**
 * Class for defining account configuration options.
 * Depends on 'utils'
 */
/**
 * Assign values from sources if they are not defined in the destination.
 * Once a value is set it does not change
 * @function Util.defaults
 * @param {Object} destination - the object to assign defaults to
 * @param sources
 * @param {...Object} source - the source object(s) to assign defaults from
 * @return {Object} destination after it was modified
 */
const useDefaultValues = (destination, ...sources) => {
    return sources.reduce(function (dest, source) {
        let key, value;
        for (key in source) {
            // @ts-ignore
            value = source[key];
            // @ts-ignore
            if (dest[key] === void 0) {
                // @ts-ignore
                dest[key] = value;
            }
        }
        return dest;
    }, destination);
};
/**
 * Class for defining account configuration options.
 * @constructor Configuration
 * @param {Object} options - The account configuration parameters to set.
 * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters"
 *  target="_new">Available configuration options</a>
 */
class Configuration {
    constructor(options) {
        this.configuration = options == null ? {} : (0,_internal_utils_cloneDeep_js__WEBPACK_IMPORTED_MODULE_0__.cloneDeep)(options);
        useDefaultValues(this.configuration, DEFAULT_CONFIGURATION_PARAMS);
    }
    /**
     * Initializes the configuration. This method is a convenience method that invokes both
     *  {@link Configuration#fromEnvironment|fromEnvironment()} (Node.js environment only)
     *  and {@link Configuration#fromDocument|fromDocument()}.
     *  It first tries to retrieve the configuration from the environment variable.
     *  If not available, it tries from the document meta tags.
     * @function Configuration#init
     * @return {Configuration} returns `this` for chaining
     * @see fromDocument
     * @see fromEnvironment
     */
    init() {
        this.fromEnvironment();
        this.fromDocument();
        return this;
    }
    /**
     * Set a new configuration item
     * @function Configuration#set
     * @param {string} name - the name of the item to set
     * @param {*} value - the value to be set
     * @return {Configuration}
     *
     */
    set(name, value) {
        // @ts-ignore
        this.configuration[name] = value;
        return this;
    }
    /**
     * Get the value of a configuration item
     * @function Configuration#get
     * @param {string} name - the name of the item to set
     * @return {*} the configuration item
     */
    get(name) {
        return this.configuration[name];
    }
    merge(config) {
        Object.assign(this.configuration, (0,_internal_utils_cloneDeep_js__WEBPACK_IMPORTED_MODULE_0__.cloneDeep)(config));
        return this;
    }
    /**
     * Initialize Cloudinary from HTML meta tags.
     * @function Configuration#fromDocument
     * @return {Configuration}
     * @example <meta name="cloudinary_cloud_name" content="mycloud">
     *
     */
    fromDocument() {
        var el, i, len, meta_elements;
        meta_elements = typeof document !== "undefined" && document !== null ? document.querySelectorAll('meta[name^="cloudinary_"]') : void 0;
        if (meta_elements) {
            for (i = 0, len = meta_elements.length; i < len; i++) {
                el = meta_elements[i];
                this.configuration[el.getAttribute('name').replace('cloudinary_', '')] = el.getAttribute('content');
            }
        }
        return this;
    }
    /**
     * Initialize Cloudinary from the `CLOUDINARY_URL` environment variable.
     *
     * This function will only run under Node.js environment.
     * @function Configuration#fromEnvironment
     * @requires Node.js
     */
    fromEnvironment() {
        var cloudinary_url, query, uri, uriRegex;
        if (typeof process !== "undefined" && process !== null && process.env && process.env.CLOUDINARY_URL) {
            cloudinary_url = process.env.CLOUDINARY_URL;
            uriRegex = /cloudinary:\/\/(?:(\w+)(?:\:([\w-]+))?@)?([\w\.-]+)(?:\/([^?]*))?(?:\?(.+))?/;
            uri = uriRegex.exec(cloudinary_url);
            if (uri) {
                if (uri[3] != null) {
                    this.configuration['cloud_name'] = uri[3];
                }
                if (uri[1] != null) {
                    this.configuration['api_key'] = uri[1];
                }
                if (uri[2] != null) {
                    this.configuration['api_secret'] = uri[2];
                }
                if (uri[4] != null) {
                    this.configuration['private_cdn'] = uri[4] != null;
                }
                if (uri[4] != null) {
                    this.configuration['secure_distribution'] = uri[4];
                }
                query = uri[5];
                if (query != null) {
                    query.split('&').forEach(value => {
                        let [k, v] = value.split('=');
                        if (v == null) {
                            // @ts-ignore
                            v = true;
                        }
                        this.configuration[k] = v;
                    });
                }
            }
        }
        return this;
    }
    /**
     * Create or modify the Cloudinary client configuration
     *
     * Warning: `config()` returns the actual internal configuration object. modifying it will change the configuration.
     *
     * This is a backward compatibility method. For new code, use get(), merge() etc.
     * @function Configuration#config
     * @param {hash|string|boolean} new_config
     * @param {string} new_value
     * @returns {*} configuration, or value
     *
     * @see {@link fromEnvironment} for initialization using environment variables
     * @see {@link fromDocument} for initialization using HTML meta tags
     */
    config(new_config, new_value) {
        switch (false) {
            case new_value === void 0:
                this.set(new_config, new_value);
                return this.configuration;
            case typeof new_config != 'string':
                return this.get(new_config);
            case !(0,_utils_isObject_js__WEBPACK_IMPORTED_MODULE_1__.isObject)(new_config):
                this.merge(new_config);
                return this.configuration;
            default:
                // Backward compatibility - return the internal object
                return this.configuration;
        }
    }
    /**
     * Returns a copy of the configuration parameters
     * @function Configuration#toOptions
     * @returns {Object} a key:value collection of the configuration parameters
     */
    toOptions() {
        return (0,_internal_utils_cloneDeep_js__WEBPACK_IMPORTED_MODULE_0__.cloneDeep)(this.configuration);
    }
}
const DEFAULT_CONFIGURATION_PARAMS = {
    responsive_class: 'cld-responsive',
    responsive_use_breakpoints: true,
    round_dpr: true,
    secure: (typeof window !== "undefined" && window !== null ? window.location ? window.location.protocol : void 0 : void 0) === 'https:'
};
const CONFIG_PARAMS = [
    "api_key",
    "api_secret",
    "callback",
    "cdn_subdomain",
    "cloud_name",
    "cname",
    "private_cdn",
    "protocol",
    "resource_type",
    "responsive",
    "responsive_class",
    "responsive_use_breakpoints",
    "responsive_width",
    "round_dpr",
    "secure",
    "secure_cdn_subdomain",
    "secure_distribution",
    "shorten",
    "type",
    "upload_preset",
    "url_suffix",
    "use_root_path",
    "version",
    "externalLibraries",
    "max_timeout_ms"
];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Configuration);


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/consts.js":
/*!***************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/consts.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AKAMAI_SHARED_CDN": () => (/* binding */ AKAMAI_SHARED_CDN),
/* harmony export */   "CF_SHARED_CDN": () => (/* binding */ CF_SHARED_CDN),
/* harmony export */   "LAYER_KEYWORD_PARAMS": () => (/* binding */ LAYER_KEYWORD_PARAMS),
/* harmony export */   "LEGACY_CONDITIONAL_OPERATORS": () => (/* binding */ LEGACY_CONDITIONAL_OPERATORS),
/* harmony export */   "LEGACY_PREDEFINED_VARS": () => (/* binding */ LEGACY_PREDEFINED_VARS),
/* harmony export */   "NUMBER_PATTERN": () => (/* binding */ NUMBER_PATTERN),
/* harmony export */   "OFFSET_ANY_PATTERN": () => (/* binding */ OFFSET_ANY_PATTERN),
/* harmony export */   "OFFSET_ANY_PATTERN_RE": () => (/* binding */ OFFSET_ANY_PATTERN_RE),
/* harmony export */   "OLD_AKAMAI_SHARED_CDN": () => (/* binding */ OLD_AKAMAI_SHARED_CDN),
/* harmony export */   "RANGE_VALUE_RE": () => (/* binding */ RANGE_VALUE_RE),
/* harmony export */   "SHARED_CDN": () => (/* binding */ SHARED_CDN)
/* harmony export */ });
const LEGACY_CONDITIONAL_OPERATORS = {
    "=": 'eq',
    "!=": 'ne',
    "<": 'lt',
    ">": 'gt',
    "<=": 'lte',
    ">=": 'gte',
    "&&": 'and',
    "||": 'or',
    "*": "mul",
    "/": "div",
    "+": "add",
    "-": "sub",
    "^": "pow"
};
const CF_SHARED_CDN = "d3jpl91pxevbkh.cloudfront.net";
const OLD_AKAMAI_SHARED_CDN = "cloudinary-a.akamaihd.net";
const AKAMAI_SHARED_CDN = "res.cloudinary.com";
const SHARED_CDN = AKAMAI_SHARED_CDN;
const LEGACY_PREDEFINED_VARS = {
    "aspect_ratio": "ar",
    "aspectRatio": "ar",
    "current_page": "cp",
    "currentPage": "cp",
    "duration": "du",
    "face_count": "fc",
    "faceCount": "fc",
    "height": "h",
    "initial_aspect_ratio": "iar",
    "initial_height": "ih",
    "initial_width": "iw",
    "initialAspectRatio": "iar",
    "initialHeight": "ih",
    "initialWidth": "iw",
    "initial_duration": "idu",
    "initialDuration": "idu",
    "page_count": "pc",
    "page_x": "px",
    "page_y": "py",
    "pageCount": "pc",
    "pageX": "px",
    "pageY": "py",
    "tags": "tags",
    "width": "w"
};
const NUMBER_PATTERN = "([0-9]*)\\.([0-9]+)|([0-9]+)";
const OFFSET_ANY_PATTERN = `(${NUMBER_PATTERN})([%pP])?`;
const RANGE_VALUE_RE = RegExp(`^${OFFSET_ANY_PATTERN}$`);
const OFFSET_ANY_PATTERN_RE = RegExp(`(${OFFSET_ANY_PATTERN})\\.\\.(${OFFSET_ANY_PATTERN})`);
const LAYER_KEYWORD_PARAMS = {
    font_weight: "normal",
    font_style: "normal",
    text_decoration: "none",
    text_align: '',
    stroke: "none"
};


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/createCloudinaryLegacyURL.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/createCloudinaryLegacyURL.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createCloudinaryLegacyURL": () => (/* binding */ createCloudinaryLegacyURL)
/* harmony export */ });
/* harmony import */ var _generateTransformationString_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./generateTransformationString.js */ "../node_modules/@cloudinary/url-gen/backwards/generateTransformationString.js");
/* harmony import */ var _utils_finalizeResourceType_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/finalizeResourceType.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/finalizeResourceType.js");
/* harmony import */ var _utils_finalize_source_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/finalize_source.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/finalize_source.js");
/* harmony import */ var _utils_unsigned_url_prefix_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/unsigned_url_prefix.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/unsigned_url_prefix.js");
/* harmony import */ var _internal_utils_cloneDeep_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../internal/utils/cloneDeep.js */ "../node_modules/@cloudinary/url-gen/internal/utils/cloneDeep.js");





function createCloudinaryLegacyURL(public_id, transformationOptions) {
    // Path format
    if (transformationOptions.type === "fetch") {
        if (transformationOptions.fetch_format == null) {
            transformationOptions.fetch_format = transformationOptions.format;
        }
    }
    let source_to_sign;
    let type = transformationOptions.type;
    let resource_type = transformationOptions.resource_type || 'image';
    let version = transformationOptions.version;
    const force_version = typeof transformationOptions.force_version === 'boolean' ? transformationOptions.force_version : true;
    const long_url_signature = !!transformationOptions.long_url_signature;
    const format = transformationOptions.format;
    const cloud_name = transformationOptions.cloud_name;
    if (!cloud_name) {
        throw "cloud_name must be provided in the configuration";
    }
    const private_cdn = transformationOptions.private_cdn;
    const secure_distribution = transformationOptions.secure_distribution;
    const secure = transformationOptions.secure;
    const cdn_subdomain = transformationOptions.cdn_subdomain;
    const secure_cdn_subdomain = transformationOptions.secure_cdn_subdomain;
    const cname = transformationOptions.cname;
    const shorten = transformationOptions.shorten;
    const sign_url = transformationOptions.sign_url;
    const api_secret = transformationOptions.api_secret;
    const url_suffix = transformationOptions.url_suffix;
    const use_root_path = transformationOptions.use_root_path;
    const auth_token = transformationOptions.auth_token;
    const preloaded = /^(image|raw)\/([a-z0-9_]+)\/v(\d+)\/([^#]+)$/.exec(public_id);
    if (preloaded) {
        resource_type = preloaded[1];
        type = preloaded[2];
        version = preloaded[3];
        public_id = preloaded[4];
    }
    const original_source = public_id;
    if (public_id == null) {
        return original_source;
    }
    public_id = public_id.toString();
    if (type === null && public_id.match(/^https?:\//i)) {
        return original_source;
    }
    [resource_type, type] = (0,_utils_finalizeResourceType_js__WEBPACK_IMPORTED_MODULE_0__.finalize_resource_type)(resource_type, type, url_suffix, use_root_path, shorten);
    [public_id, source_to_sign] = (0,_utils_finalize_source_js__WEBPACK_IMPORTED_MODULE_1__.finalize_source)(public_id, format, url_suffix);
    if (version == null && force_version && source_to_sign.indexOf("/") >= 0 && !source_to_sign.match(/^v[0-9]+/) && !source_to_sign.match(/^https?:\//)) {
        version = 1;
    }
    if (version != null) {
        version = `v${version}`;
    }
    else {
        version = null;
    }
    const transformation = (0,_generateTransformationString_js__WEBPACK_IMPORTED_MODULE_2__.generateTransformationString)((0,_internal_utils_cloneDeep_js__WEBPACK_IMPORTED_MODULE_3__.cloneDeep)(transformationOptions)).replace(/([^:])\/\//g, '$1/');
    ;
    if (sign_url && !auth_token) {
        let to_sign = [transformation, source_to_sign].filter(function (part) {
            return (part != null) && part !== '';
        }).join('/');
        try {
            for (let i = 0; to_sign !== decodeURIComponent(to_sign) && i < 10; i++) {
                to_sign = decodeURIComponent(to_sign);
            }
            // eslint-disable-next-line no-empty
        }
        catch (error) {
        }
        // No support for Auth Token
        // const shasum = crypto.createHash(long_url_signature ? 'sha256' : 'sha1');
        // shasum.update(utf8_encode(to_sign + api_secret), 'binary');
        // signature = shasum.digest('base64').replace(/\//g, '_').replace(/\+/g, '-').substring(0, long_url_signature ? 32 : 8);
        // signature = `s--${signature}--`;
    }
    const prefix = (0,_utils_unsigned_url_prefix_js__WEBPACK_IMPORTED_MODULE_4__.unsigned_url_prefix)(public_id, cloud_name, private_cdn, cdn_subdomain, secure_cdn_subdomain, cname, secure, secure_distribution);
    const resultUrl = [prefix, resource_type, type, transformation, version, public_id].filter(function (part) {
        return (part != null) && part !== '';
    }).join('/').replace(' ', '%20');
    return resultUrl;
}


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/expression.js":
/*!*******************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/expression.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Represents a transformation expression.
 * @param {string} expressionStr - An expression in string format.
 * @class Expression
 *
 */
class Expression {
    constructor(expressionStr) {
        /**
         * @protected
         * @inner Expression-expressions
         */
        this.expressions = [];
        if (expressionStr != null) {
            this.expressions.push(Expression.normalize(expressionStr));
        }
    }
    /**
     * Convenience constructor method
     * @function Expression.new
     */
    static new(expressionStr) {
        return new this(expressionStr);
    }
    /**
     * Normalize a string expression
     * @function Cloudinary#normalize
     * @param {string} expression a expression, e.g. "w gt 100", "width_gt_100", "width > 100"
     * @return {string} the normalized form of the value expression, e.g. "w_gt_100"
     */
    static normalize(expression) {
        var operators, operatorsPattern, operatorsReplaceRE, predefinedVarsPattern, predefinedVarsReplaceRE;
        if (expression == null) {
            return expression;
        }
        expression = String(expression);
        operators = "\\|\\||>=|<=|&&|!=|>|=|<|/|-|\\+|\\*|\\^";
        // operators
        operatorsPattern = "((" + operators + ")(?=[ _]))";
        operatorsReplaceRE = new RegExp(operatorsPattern, "g");
        // @ts-ignore
        expression = expression.replace(operatorsReplaceRE, match => OPERATORS[match]);
        // predefined variables
        predefinedVarsPattern = "(" + Object.keys(PREDEFINED_VARS).join("|") + ")";
        predefinedVarsReplaceRE = new RegExp(predefinedVarsPattern, "g");
        // @ts-ignore
        expression = expression.replace(predefinedVarsReplaceRE, (match, p1, offset) => (expression[offset - 1] === '$' ? match : PREDEFINED_VARS[match]));
        return expression.replace(/[ _]+/g, '_');
    }
    /**
     * Serialize the expression
     * @return {string} the expression as a string
     */
    serialize() {
        return Expression.normalize(this.expressions.join("_"));
    }
    toString() {
        return this.serialize();
    }
    /**
     * Get the parent transformation of this expression
     * @return Transformation
     */
    getParent() {
        return this.parent;
    }
    /**
     * Set the parent transformation of this expression
     * @param {Transformation} the parent transformation
     * @return {Expression} this expression
     */
    setParent(parent) {
        this.parent = parent;
        return this;
    }
    /**
     * Add a expression
     * @function Expression#predicate
     * @internal
     */
    predicate(name, operator, value) {
        // @ts-ignore
        if (OPERATORS[operator] != null) {
            // @ts-ignore
            operator = OPERATORS[operator];
        }
        this.expressions.push(`${name}_${operator}_${value}`);
        return this;
    }
    /**
     * @function Expression#and
     */
    and() {
        this.expressions.push("and");
        return this;
    }
    /**
     * @function Expression#or
     */
    or() {
        this.expressions.push("or");
        return this;
    }
    /**
     * Conclude expression
     * @function Expression#then
     * @return {Transformation} the transformation this expression is defined for
     */
    then() {
        return this.getParent().if(this.toString());
    }
    /**
     * @function Expression#height
     * @param {string} operator the comparison operator (e.g. "<", "lt")
     * @param {string|number} value the right hand side value
     * @return {Expression} this expression
     */
    height(operator, value) {
        return this.predicate("h", operator, value);
    }
    /**
     * @function Expression#width
     * @param {string} operator the comparison operator (e.g. "<", "lt")
     * @param {string|number} value the right hand side value
     * @return {Expression} this expression
     */
    width(operator, value) {
        return this.predicate("w", operator, value);
    }
    /**
     * @function Expression#aspectRatio
     * @param {string} operator the comparison operator (e.g. "<", "lt")
     * @param {string|number} value the right hand side value
     * @return {Expression} this expression
     */
    aspectRatio(operator, value) {
        return this.predicate("ar", operator, value);
    }
    /**
     * @function Expression#pages
     * @param {string} operator the comparison operator (e.g. "<", "lt")
     * @param {string|number} value the right hand side value
     * @return {Expression} this expression
     */
    pageCount(operator, value) {
        return this.predicate("pc", operator, value);
    }
    /**
     * @function Expression#faces
     * @param {string} operator the comparison operator (e.g. "<", "lt")
     * @param {string|number} value the right hand side value
     * @return {Expression} this expression
     */
    faceCount(operator, value) {
        return this.predicate("fc", operator, value);
    }
    value(value) {
        this.expressions.push(value);
        return this;
    }
    /**
     */
    static variable(name, value) {
        return new this(name).value(value);
    }
    /**
     * @returns Expression a new expression with the predefined variable "width"
     * @function Expression.width
     */
    static width() {
        return new this("width");
    }
    /**
     * @returns Expression a new expression with the predefined variable "height"
     * @function Expression.height
     */
    static height() {
        return new this("height");
    }
    /**
     * @returns Expression a new expression with the predefined variable "initialWidth"
     * @function Expression.initialWidth
     */
    static initialWidth() {
        return new this("initialWidth");
    }
    /**
     * @returns Expression a new expression with the predefined variable "initialHeight"
     * @function Expression.initialHeight
     */
    static initialHeight() {
        return new this("initialHeight");
    }
    /**
     * @returns Expression a new expression with the predefined variable "aspectRatio"
     * @function Expression.aspectRatio
     */
    static aspectRatio() {
        return new this("aspectRatio");
    }
    /**
     * @returns Expression a new expression with the predefined variable "initialAspectRatio"
     * @function Expression.initialAspectRatio
     */
    static initialAspectRatio() {
        return new this("initialAspectRatio");
    }
    /**
     * @returns Expression a new expression with the predefined variable "pageCount"
     * @function Expression.pageCount
     */
    static pageCount() {
        return new this("pageCount");
    }
    /**
     * @returns Expression new expression with the predefined variable "faceCount"
     * @function Expression.faceCount
     */
    static faceCount() {
        return new this("faceCount");
    }
    /**
     * @returns Expression a new expression with the predefined variable "currentPage"
     * @function Expression.currentPage
     */
    static currentPage() {
        return new this("currentPage");
    }
    /**
     * @returns Expression a new expression with the predefined variable "tags"
     * @function Expression.tags
     */
    static tags() {
        return new this("tags");
    }
    /**
     * @returns Expression a new expression with the predefined variable "pageX"
     * @function Expression.pageX
     */
    static pageX() {
        return new this("pageX");
    }
    /**
     * @returns Expression a new expression with the predefined variable "pageY"
     * @function Expression.pageY
     */
    static pageY() {
        return new this("pageY");
    }
}
/**
 * @internal
 */
const OPERATORS = {
    "=": 'eq',
    "!=": 'ne',
    "<": 'lt',
    ">": 'gt',
    "<=": 'lte',
    ">=": 'gte',
    "&&": 'and',
    "||": 'or',
    "*": "mul",
    "/": "div",
    "+": "add",
    "-": "sub",
    "^": "pow",
};
/**
 * @internal
 */
const PREDEFINED_VARS = {
    "aspect_ratio": "ar",
    "aspectRatio": "ar",
    "current_page": "cp",
    "currentPage": "cp",
    "preview:duration": "preview:duration",
    "duration": "du",
    "face_count": "fc",
    "faceCount": "fc",
    "height": "h",
    "initial_aspect_ratio": "iar",
    "initial_duration": "idu",
    "initial_height": "ih",
    "initial_width": "iw",
    "initialAspectRatio": "iar",
    "initialDuration": "idu",
    "initialHeight": "ih",
    "initialWidth": "iw",
    "page_count": "pc",
    "page_x": "px",
    "page_y": "py",
    "pageCount": "pc",
    "pageX": "px",
    "pageY": "py",
    "tags": "tags",
    "width": "w"
};
/**
 * @internal
 */
const BOUNDRY = "[ _]+";
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Expression);


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/generateTransformationString.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/generateTransformationString.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "generateTransformationString": () => (/* binding */ generateTransformationString)
/* harmony export */ });
/* harmony import */ var _transformationProcessing_processLayer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transformationProcessing/processLayer.js */ "../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processLayer.js");
/* harmony import */ var _transformationProcessing_processIf_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./transformationProcessing/processIf.js */ "../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processIf.js");
/* harmony import */ var _utils_toArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/toArray.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/toArray.js");
/* harmony import */ var _transformationProcessing_processRadius_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./transformationProcessing/processRadius.js */ "../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processRadius.js");
/* harmony import */ var _utils_isObject_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/isObject.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/isObject.js");
/* harmony import */ var _transformationProcessing_processCustomFunction_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./transformationProcessing/processCustomFunction.js */ "../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processCustomFunction.js");
/* harmony import */ var _transformationProcessing_processCustomPreFunction_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./transformationProcessing/processCustomPreFunction.js */ "../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processCustomPreFunction.js");
/* harmony import */ var _utils_splitRange_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/splitRange.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/splitRange.js");
/* harmony import */ var _utils_legacyNormalizeExpression_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/legacyNormalizeExpression.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/legacyNormalizeExpression.js");
/* harmony import */ var _utils_norm_range_values_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/norm_range_values.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/norm_range_values.js");
/* harmony import */ var _transformationProcessing_processVideoParams_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./transformationProcessing/processVideoParams.js */ "../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processVideoParams.js");
/* harmony import */ var _transformation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transformation.js */ "../node_modules/@cloudinary/url-gen/backwards/transformation.js");
/* harmony import */ var _transformationProcessing_processDpr_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transformationProcessing/processDpr.js */ "../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processDpr.js");
/* harmony import */ var _utils_isNumberLike_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/isNumberLike.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/isNumberLike.js");














/**
 * Things dropped
 * - responsive_width
 * - config().dpr
 * - SSL Detected
 * - Provisioning API
 * - Magical configuration auto-mapping (everything has to be explicit)
 * - Signatures
 * - Secure is default true
 * @param transformationOptions
 */
function generateTransformationString(transformationOptions) {
    if (typeof transformationOptions === 'string') {
        return transformationOptions;
    }
    if (transformationOptions instanceof _transformation_js__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        return transformationOptions.toString();
    }
    if (Array.isArray(transformationOptions)) {
        return transformationOptions
            .map((singleTransformation) => {
            return generateTransformationString(singleTransformation);
        }).filter((a) => { return a; }).join('/');
    }
    // let responsive_width = consumeOption(transformationOptions, "responsive_width", config().responsive_width);
    let width;
    let height;
    const size = transformationOptions.size;
    const hasLayer = transformationOptions.overlay || transformationOptions.underlay;
    const crop = transformationOptions.crop;
    const angle = (0,_utils_toArray_js__WEBPACK_IMPORTED_MODULE_1__.toArray)(transformationOptions.angle).join(".");
    const background = (transformationOptions.background || '').replace(/^#/, "rgb:");
    const color = (transformationOptions.color || '').replace(/^#/, "rgb:");
    const flags = ((0,_utils_toArray_js__WEBPACK_IMPORTED_MODULE_1__.toArray)(transformationOptions.flags || [])).join('.');
    const dpr = transformationOptions.dpr === undefined ? transformationOptions.dpr : (0,_transformationProcessing_processDpr_js__WEBPACK_IMPORTED_MODULE_2__.processDpr)(transformationOptions.dpr);
    const overlay = (0,_transformationProcessing_processLayer_js__WEBPACK_IMPORTED_MODULE_3__.processLayer)(transformationOptions.overlay);
    const radius = (0,_transformationProcessing_processRadius_js__WEBPACK_IMPORTED_MODULE_4__.processRadius)(transformationOptions.radius);
    const underlay = (0,_transformationProcessing_processLayer_js__WEBPACK_IMPORTED_MODULE_3__.processLayer)(transformationOptions.underlay);
    const ifValue = (0,_transformationProcessing_processIf_js__WEBPACK_IMPORTED_MODULE_5__.process_if)(transformationOptions.if);
    const custom_function = (0,_transformationProcessing_processCustomFunction_js__WEBPACK_IMPORTED_MODULE_6__.processCustomFunction)(transformationOptions.custom_function);
    const custom_pre_function = (0,_transformationProcessing_processCustomPreFunction_js__WEBPACK_IMPORTED_MODULE_7__.processCustomPreFunction)(transformationOptions.custom_pre_function);
    // These will change down the line, heads up!
    let fps = transformationOptions.fps;
    let namedTransformations = [];
    let childTransformations = (0,_utils_toArray_js__WEBPACK_IMPORTED_MODULE_1__.toArray)(transformationOptions.transformation || []);
    let effect = transformationOptions.effect;
    // TODO, Do we need this?
    const no_html_sizes = hasLayer || angle || crop === "fit" || crop === "limit";
    if (size) {
        const [sizeWidth, sizeHeight] = size.split("x");
        width = sizeWidth;
        height = sizeHeight;
    }
    else {
        width = transformationOptions.width;
        height = transformationOptions.height;
    }
    if (width && (width.toString().indexOf("auto") === 0 || no_html_sizes || parseFloat(width.toString()) < 1)) {
        delete transformationOptions.width;
    }
    if (height && (no_html_sizes || parseFloat(height.toString()) < 1)) {
        delete transformationOptions.height;
    }
    // Is any child transformation an object?
    const isAnyChildAnObject = childTransformations.some((transformation) => typeof transformation === 'object');
    // If array of objects, or array of strings?
    if (isAnyChildAnObject) {
        childTransformations = childTransformations.map((transformation) => {
            if ((0,_utils_isObject_js__WEBPACK_IMPORTED_MODULE_8__.isObject)(transformation)) {
                return generateTransformationString(transformation);
            }
            else {
                return generateTransformationString({ transformation });
            }
        }).filter((a) => a);
    }
    else {
        namedTransformations = childTransformations.join(".");
        childTransformations = []; // Reset child transfomrations
    }
    if (Array.isArray(effect)) {
        effect = effect.join(":");
    }
    else if ((0,_utils_isObject_js__WEBPACK_IMPORTED_MODULE_8__.isObject)(effect)) {
        effect = Object.entries(effect).map(([key, value]) => `${key}:${value}`);
    }
    let border = transformationOptions.border;
    if ((0,_utils_isObject_js__WEBPACK_IMPORTED_MODULE_8__.isObject)(border)) {
        border = `${border.width != null ? border.width : 2}px_solid_${(border.color != null ? border.color : "black").replace(/^#/, 'rgb:')}`;
    }
    else {
        // @ts-ignore
        if (/^\d+$/.exec(border)) { // fallback to html border attributes
            transformationOptions.border = border;
            border = void 0;
        }
    }
    if (Array.isArray(fps)) {
        fps = fps.join('-');
    }
    // ocr(value) {
    //   return this.param(value, "ocr", "ocr");
    // }
    const urlParams = {
        a: (0,_utils_legacyNormalizeExpression_js__WEBPACK_IMPORTED_MODULE_9__.legacyNormalizeExpression)(angle),
        ar: (0,_utils_legacyNormalizeExpression_js__WEBPACK_IMPORTED_MODULE_9__.legacyNormalizeExpression)(transformationOptions.aspect_ratio),
        b: background,
        bo: border,
        c: crop,
        co: color,
        dpr: (0,_utils_legacyNormalizeExpression_js__WEBPACK_IMPORTED_MODULE_9__.legacyNormalizeExpression)(dpr),
        e: (0,_utils_legacyNormalizeExpression_js__WEBPACK_IMPORTED_MODULE_9__.legacyNormalizeExpression)(effect),
        fl: flags,
        fn: custom_function || custom_pre_function,
        fps: fps,
        h: (0,_utils_legacyNormalizeExpression_js__WEBPACK_IMPORTED_MODULE_9__.legacyNormalizeExpression)(height),
        ki: (0,_utils_legacyNormalizeExpression_js__WEBPACK_IMPORTED_MODULE_9__.legacyNormalizeExpression)(transformationOptions.keyframe_interval),
        l: overlay,
        o: (0,_utils_legacyNormalizeExpression_js__WEBPACK_IMPORTED_MODULE_9__.legacyNormalizeExpression)(transformationOptions.opacity),
        q: (0,_utils_legacyNormalizeExpression_js__WEBPACK_IMPORTED_MODULE_9__.legacyNormalizeExpression)(transformationOptions.quality),
        r: radius,
        t: namedTransformations,
        u: underlay,
        w: (0,_utils_legacyNormalizeExpression_js__WEBPACK_IMPORTED_MODULE_9__.legacyNormalizeExpression)(width),
        x: (0,_utils_legacyNormalizeExpression_js__WEBPACK_IMPORTED_MODULE_9__.legacyNormalizeExpression)(transformationOptions.x),
        y: (0,_utils_legacyNormalizeExpression_js__WEBPACK_IMPORTED_MODULE_9__.legacyNormalizeExpression)(transformationOptions.y),
        z: (0,_utils_legacyNormalizeExpression_js__WEBPACK_IMPORTED_MODULE_9__.legacyNormalizeExpression)(transformationOptions.zoom),
        ac: transformationOptions.audio_codec,
        af: transformationOptions.audio_frequency,
        br: transformationOptions.bit_rate,
        cs: transformationOptions.color_space,
        d: transformationOptions.default_image,
        dl: transformationOptions.delay,
        dn: transformationOptions.density,
        du: (0,_utils_norm_range_values_js__WEBPACK_IMPORTED_MODULE_10__.normRangeValues)(transformationOptions.duration),
        eo: (0,_utils_norm_range_values_js__WEBPACK_IMPORTED_MODULE_10__.normRangeValues)(transformationOptions.end_offset || (0,_utils_isNumberLike_js__WEBPACK_IMPORTED_MODULE_11__.isNumberLike)(transformationOptions.end_offset) ? transformationOptions.end_offset : (0,_utils_splitRange_js__WEBPACK_IMPORTED_MODULE_12__.splitRange)(transformationOptions.offset)[1]),
        f: transformationOptions.fetch_format,
        g: transformationOptions.gravity,
        pg: transformationOptions.page,
        p: transformationOptions.prefix,
        so: (0,_utils_norm_range_values_js__WEBPACK_IMPORTED_MODULE_10__.normRangeValues)(transformationOptions.start_offset || (0,_utils_isNumberLike_js__WEBPACK_IMPORTED_MODULE_11__.isNumberLike)(transformationOptions.start_offset) ? transformationOptions.start_offset : (0,_utils_splitRange_js__WEBPACK_IMPORTED_MODULE_12__.splitRange)(transformationOptions.offset)[0]),
        sp: transformationOptions.streaming_profile,
        vc: (0,_transformationProcessing_processVideoParams_js__WEBPACK_IMPORTED_MODULE_13__.processVideoParams)(transformationOptions.video_codec),
        vs: transformationOptions.video_sampling
    };
    // We can accept variables in here transformationOptions, or in here transformationOptions.variables
    const variables = Object.entries(transformationOptions)
        .filter(([key, value]) => key.startsWith('$'))
        .map(([key, value]) => {
        // delete transformationOptions[key]; // Delete the variables, so we don't add them twice
        return `${key}_${(0,_utils_legacyNormalizeExpression_js__WEBPACK_IMPORTED_MODULE_9__.legacyNormalizeExpression)(value)}`;
    }).sort().concat(
    // @ts-ignore
    (transformationOptions.variables || []).map(([name, value]) => `${name}_${(0,_utils_legacyNormalizeExpression_js__WEBPACK_IMPORTED_MODULE_9__.legacyNormalizeExpression)(value)}`)).join(',');
    // Clean up!
    const urlImageTransfomrations = Object.entries(urlParams)
        .filter(([key, value]) => {
        if (typeof value === 'undefined' || value === null) {
            return false;
        }
        if (typeof value === 'string' && value.length === 0) {
            return false;
        }
        if (Array.isArray(value) && value.length === 0) {
            return false;
        }
        return true;
    })
        .map(([key, value]) => `${key}_${value}`)
        .sort()
        .join(',');
    const finalTransformationString = [
        ifValue,
        variables,
        urlImageTransfomrations,
        transformationOptions.raw_transformation
    ].filter((a) => a).join(",");
    if (finalTransformationString) {
        childTransformations.push(finalTransformationString);
    }
    // console.log(childTransformations);
    return childTransformations.join("/");
}


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/legacyLayer/fetchlayer.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/legacyLayer/fetchlayer.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _layer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./layer.js */ "../node_modules/@cloudinary/url-gen/backwards/legacyLayer/layer.js");
/* harmony import */ var _internal_utils_dataStructureUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../internal/utils/dataStructureUtils.js */ "../node_modules/@cloudinary/url-gen/internal/utils/dataStructureUtils.js");
/* harmony import */ var _internal_utils_base64Encode_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../internal/utils/base64Encode.js */ "../node_modules/@cloudinary/url-gen/internal/utils/base64Encode.js");



class FetchLayer extends _layer_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    /**
     * @class FetchLayer
     * @classdesc Creates an image layer using a remote URL.
     * @param {Object|string} options - layer parameters or a url
     * @param {string} options.url the url of the image to fetch
     */
    constructor(options) {
        super(options);
        if ((0,_internal_utils_dataStructureUtils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(options)) {
            this.options.url = options;
        }
        else if (options != null ? options.url : void 0) {
            this.options.url = options.url;
        }
    }
    url(url) {
        this.options.url = url;
        return this;
    }
    /**
     * generate the string representation of the layer
     * @function FetchLayer#toString
     * @return {String}
     */
    toString() {
        return `fetch:${(0,_internal_utils_base64Encode_js__WEBPACK_IMPORTED_MODULE_2__.base64Encode)(this.options.url)}`;
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FetchLayer);


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/legacyLayer/layer.js":
/*!**************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/legacyLayer/layer.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_snakeCase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/snakeCase.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/snakeCase.js");

class Layer {
    /**
     * Layer
     * @constructor Layer
     * @param {Object} options - layer parameters
     */
    constructor(options) {
        this.options = {};
        if (options != null) {
            ["resourceType", "type", "publicId", "format"].forEach((key) => {
                var ref;
                // @ts-ignore
                return this.options[key] = (ref = options[key]) != null ? ref : options[(0,_utils_snakeCase_js__WEBPACK_IMPORTED_MODULE_0__.snakeCase)(key)];
            });
        }
    }
    resourceType(value) {
        this.options.resourceType = value;
        return this;
    }
    type(value) {
        this.options.type = value;
        return this;
    }
    publicId(value) {
        this.options.publicId = value;
        return this;
    }
    /**
     * Get the public ID, formatted for layer parameter
     * @function Layer#getPublicId
     * @return {String} public ID
     */
    getPublicId() {
        var ref;
        return (ref = this.options.publicId) != null ? ref.replace(/\//g, ":") : void 0;
    }
    /**
     * Get the public ID, with format if present
     * @function Layer#getFullPublicId
     * @return {String} public ID
     */
    getFullPublicId() {
        if (this.options.format != null) {
            return this.getPublicId() + "." + this.options.format;
        }
        else {
            return this.getPublicId();
        }
    }
    format(value) {
        this.options.format = value;
        return this;
    }
    /**
     * generate the string representation of the layer
     * @function Layer#toString
     */
    toString() {
        let components = [];
        if (this.options.publicId == null) {
            throw "Must supply publicId";
        }
        if (!(this.options.resourceType === "image")) {
            components.push(this.options.resourceType);
        }
        if (!(this.options.type === "upload")) {
            components.push(this.options.type);
        }
        components.push(this.getFullPublicId());
        return components.filter(x => !!x).join(":");
    }
    clone() {
        return new Layer(this.options);
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Layer);


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/legacyLayer/subtitleslayer.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/legacyLayer/subtitleslayer.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _textlayer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./textlayer.js */ "../node_modules/@cloudinary/url-gen/backwards/legacyLayer/textlayer.js");

class SubtitlesLayer extends _textlayer_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    /**
     * Represent a subtitles layer
     * @constructor SubtitlesLayer
     * @param {Object} options - layer parameters
     */
    constructor(options) {
        super(options);
        this.options.resourceType = "subtitles";
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SubtitlesLayer);


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/legacyLayer/textlayer.js":
/*!******************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/legacyLayer/textlayer.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _layer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./layer.js */ "../node_modules/@cloudinary/url-gen/backwards/legacyLayer/layer.js");
/* harmony import */ var _utils_snakeCase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/snakeCase.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/snakeCase.js");
/* harmony import */ var _utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/isEmpty.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/isEmpty.js");
/* harmony import */ var _utils_smartEscape_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/smartEscape.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/smartEscape.js");
/* harmony import */ var _utils_isNumberLike_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/isNumberLike.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/isNumberLike.js");





class TextLayer extends _layer_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    /**
     * @constructor TextLayer
     * @param {Object} options - layer parameters
     */
    constructor(options) {
        let keys;
        super(options);
        keys = ["resourceType", "resourceType", "fontFamily", "fontSize", "fontWeight", "fontStyle", "textDecoration", "textAlign", "stroke", "letterSpacing", "lineSpacing", "fontHinting", "fontAntialiasing", "text"];
        if (options != null) {
            keys.forEach((key) => {
                var ref;
                // @ts-ignore
                return this.options[key] = (ref = options[key]) != null ? ref : options[(0,_utils_snakeCase_js__WEBPACK_IMPORTED_MODULE_1__.snakeCase)(key)];
            });
        }
        this.options.resourceType = "text";
    }
    //@ts-ignore
    resourceType(resourceType) {
        throw "Cannot modify resourceType for text layers";
    }
    //@ts-ignore
    type(type) {
        throw "Cannot modify type for text layers";
    }
    format(format) {
        throw "Cannot modify format for text layers";
    }
    fontFamily(fontFamily) {
        this.options.fontFamily = fontFamily;
        return this;
    }
    fontSize(fontSize) {
        this.options.fontSize = fontSize;
        return this;
    }
    fontWeight(fontWeight) {
        this.options.fontWeight = fontWeight;
        return this;
    }
    fontStyle(fontStyle) {
        this.options.fontStyle = fontStyle;
        return this;
    }
    textDecoration(textDecoration) {
        this.options.textDecoration = textDecoration;
        return this;
    }
    textAlign(textAlign) {
        this.options.textAlign = textAlign;
        return this;
    }
    stroke(stroke) {
        this.options.stroke = stroke;
        return this;
    }
    letterSpacing(letterSpacing) {
        this.options.letterSpacing = letterSpacing;
        return this;
    }
    lineSpacing(lineSpacing) {
        this.options.lineSpacing = lineSpacing;
        return this;
    }
    fontHinting(fontHinting) {
        this.options.fontHinting = fontHinting;
        return this;
    }
    fontAntialiasing(fontAntialiasing) {
        this.options.fontAntialiasing = fontAntialiasing;
        return this;
    }
    text(text) {
        this.options.text = text;
        return this;
    }
    /**
     * generate the string representation of the layer
     * @function TextLayer#toString
     * @return {String}
     */
    toString() {
        var components, hasPublicId, hasStyle, publicId, re, res, start, style, text, textSource;
        style = this.textStyleIdentifier();
        if (this.options.publicId != null) {
            publicId = this.getFullPublicId();
        }
        if (this.options.text != null) {
            hasPublicId = !(0,_utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_2__.isEmpty)(publicId);
            hasStyle = !(0,_utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_2__.isEmpty)(style);
            if (hasPublicId && hasStyle || !hasPublicId && !hasStyle) {
                throw "Must supply either style parameters or a public_id when providing text parameter in a text overlay/underlay, but not both!";
            }
            re = /\$\([a-zA-Z]\w*\)/g;
            start = 0;
            //        textSource = text.replace(new RegExp("[,/]", 'g'), (c)-> "%#{c.charCodeAt(0).toString(16).toUpperCase()}")
            textSource = (0,_utils_smartEscape_js__WEBPACK_IMPORTED_MODULE_3__.smartEscape)(this.options.text, /[,\/]/g);
            text = "";
            while (res = re.exec(textSource)) {
                text += (0,_utils_smartEscape_js__WEBPACK_IMPORTED_MODULE_3__.smartEscape)(textSource.slice(start, res.index));
                text += res[0];
                start = res.index + res[0].length;
            }
            text += (0,_utils_smartEscape_js__WEBPACK_IMPORTED_MODULE_3__.smartEscape)(textSource.slice(start));
        }
        components = [this.options.resourceType, style, publicId, text];
        return (components).filter(x => !!x).join(":");
    }
    textStyleIdentifier() {
        var components;
        components = [];
        if (this.options.fontWeight !== "normal") {
            components.push(this.options.fontWeight);
        }
        if (this.options.fontStyle !== "normal") {
            components.push(this.options.fontStyle);
        }
        if (this.options.textDecoration !== "none") {
            components.push(this.options.textDecoration);
        }
        components.push(this.options.textAlign);
        if (this.options.stroke !== "none") {
            components.push(this.options.stroke);
        }
        if (!((0,_utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_2__.isEmpty)(this.options.letterSpacing) && !(0,_utils_isNumberLike_js__WEBPACK_IMPORTED_MODULE_4__.isNumberLike)(this.options.letterSpacing))) {
            components.push("letter_spacing_" + this.options.letterSpacing);
        }
        if (!((0,_utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_2__.isEmpty)(this.options.lineSpacing) && !(0,_utils_isNumberLike_js__WEBPACK_IMPORTED_MODULE_4__.isNumberLike)(this.options.lineSpacing))) {
            components.push("line_spacing_" + this.options.lineSpacing);
        }
        if (!((0,_utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_2__.isEmpty)(this.options.fontAntialiasing))) {
            components.push("antialias_" + this.options.fontAntialiasing);
        }
        if (!((0,_utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_2__.isEmpty)(this.options.fontHinting))) {
            components.push("hinting_" + this.options.fontHinting);
        }
        if (!(0,_utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_2__.isEmpty)(components.filter(x => !!x))) {
            if ((0,_utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_2__.isEmpty)(this.options.fontFamily)) {
                throw `Must supply fontFamily. ${components}`;
            }
            if ((0,_utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_2__.isEmpty)(this.options.fontSize) && !(0,_utils_isNumberLike_js__WEBPACK_IMPORTED_MODULE_4__.isNumberLike)(this.options.fontSize)) {
                throw "Must supply fontSize.";
            }
        }
        components.unshift(this.options.fontFamily, this.options.fontSize);
        components = components.filter(x => !!x).join("_");
        return components;
    }
}
;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TextLayer);


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/transformation.js":
/*!***********************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/transformation.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "URL_KEYS": () => (/* binding */ URL_KEYS),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _condition_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./condition.js */ "../node_modules/@cloudinary/url-gen/backwards/condition.js");
/* harmony import */ var _configuration_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./configuration.js */ "../node_modules/@cloudinary/url-gen/backwards/configuration.js");
/* harmony import */ var _internal_utils_cloneDeep_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../internal/utils/cloneDeep.js */ "../node_modules/@cloudinary/url-gen/internal/utils/cloneDeep.js");
/* harmony import */ var _utils_legacyBaseUtil_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/legacyBaseUtil.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/legacyBaseUtil.js");
/* harmony import */ var _utils_snakeCase_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/snakeCase.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/snakeCase.js");
/* harmony import */ var _expression_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./expression.js */ "../node_modules/@cloudinary/url-gen/backwards/expression.js");
/* harmony import */ var _legacyLayer_layer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./legacyLayer/layer.js */ "../node_modules/@cloudinary/url-gen/backwards/legacyLayer/layer.js");
/* harmony import */ var _legacyLayer_textlayer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./legacyLayer/textlayer.js */ "../node_modules/@cloudinary/url-gen/backwards/legacyLayer/textlayer.js");
/* harmony import */ var _legacyLayer_subtitleslayer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./legacyLayer/subtitleslayer.js */ "../node_modules/@cloudinary/url-gen/backwards/legacyLayer/subtitleslayer.js");
/* harmony import */ var _legacyLayer_fetchlayer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./legacyLayer/fetchlayer.js */ "../node_modules/@cloudinary/url-gen/backwards/legacyLayer/fetchlayer.js");
/* harmony import */ var _utils_isObject_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/isObject.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/isObject.js");
/* harmony import */ var _internal_utils_dataStructureUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/utils/dataStructureUtils.js */ "../node_modules/@cloudinary/url-gen/internal/utils/dataStructureUtils.js");
/* harmony import */ var _utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/isEmpty.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/isEmpty.js");
/* harmony import */ var _utils_isFunction_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/isFunction.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/isFunction.js");















/**
 * A list of keys used by the url() function.
 * @private
 */
const URL_KEYS = [
    'accessibility',
    'api_secret',
    'auth_token',
    'cdn_subdomain',
    'cloud_name',
    'cname',
    'format',
    'placeholder',
    'private_cdn',
    'resource_type',
    'secure',
    'secure_cdn_subdomain',
    'secure_distribution',
    'shorten',
    'sign_url',
    'signature',
    'ssl_detected',
    'type',
    'url_suffix',
    'use_root_path',
    'version'
];
/**
 * Assign key, value to target, when value is not null.<br>
 *   This function mutates the target!
 * @param {object} target the object to assign the values to
 * @param {object} sources one or more objects to get values from
 * @returns {object} the target after the assignment
 */
function assignNotNull(target, ...sources) {
    sources.forEach(source => {
        Object.keys(source).forEach(key => {
            // @ts-ignore
            if (source[key] != null) {
                // @ts-ignore
                target[key] = source[key];
            }
        });
    });
    return target;
}
/**
 * Return true if all items in list are strings
 * @function Util.allString
 * @param {Array} list - an array of items
 */
const allStrings = function (list) {
    return list.length && list.every(_internal_utils_dataStructureUtils_js__WEBPACK_IMPORTED_MODULE_0__.isString);
};
/**
 * Transformation parameters
 * Depends on 'util', 'transformation'
 */
class Param {
    /**
     * Represents a single parameter.
     * @class Param
     * @param {string} name - The name of the parameter in snake_case
     * @param {string} shortName - The name of the serialized form of the parameter.
     *                         If a value is not provided, the parameter will not be serialized.
     * @param {function} [process=Util.identity ] - Manipulate origValue when value is called
     * @ignore
     */
    constructor(name, shortName, process = _utils_legacyBaseUtil_js__WEBPACK_IMPORTED_MODULE_1__.identity) {
        /**
         * The name of the parameter in snake_case
         * @member {string} Param#name
         */
        this.name = name;
        /**
         * The name of the serialized form of the parameter
         * @member {string} Param#shortName
         */
        this.shortName = shortName;
        /**
         * Manipulate origValue when value is called
         * @member {function} Param#process
         */
        this.process = process;
    }
    /**
     * Set a (unprocessed) value for this parameter
     * @function Param#set
     * @param {*} origValue - the value of the parameter
     * @return {Param} self for chaining
     */
    set(origValue) {
        this.origValue = origValue;
        return this;
    }
    /**
     * Generate the serialized form of the parameter
     * @function Param#serialize
     * @return {string} the serialized form of the parameter
     */
    serialize() {
        var val, valid;
        val = this.value();
        valid = Array.isArray(val) || (0,_utils_isObject_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(val) || (0,_internal_utils_dataStructureUtils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(val) ? !(0,_utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_3__.isEmpty)(val) : val != null;
        if ((this.shortName != null) && valid) {
            return `${this.shortName}_${val}`;
        }
        else {
            return '';
        }
    }
    /**
     * Return the processed value of the parameter
     * @function Param#value
     */
    value() {
        return this.process(this.origValue);
    }
    static norm_color(value) {
        return value != null ? value.replace(/^#/, 'rgb:') : void 0;
    }
    static build_array(arg) {
        if (arg == null) {
            return [];
        }
        else if (Array.isArray(arg)) {
            return arg;
        }
        else {
            return [arg];
        }
    }
    /**
     * Covert value to video codec string.
     *
     * If the parameter is an object,
     * @param {(string|Object)} param - the video codec as either a String or a Hash
     * @return {string} the video codec string in the format codec:profile:level
     * @example
     * vc_[ :profile : [level]]
     * or
     { codec: 'h264', profile: 'basic', level: '3.1' }
     * @ignore
     */
    static process_video_params(param) {
        var video;
        switch (param.constructor) {
            case Object:
                video = "";
                if ('codec' in param) {
                    video = param.codec;
                    if ('profile' in param) {
                        video += ":" + param.profile;
                        if ('level' in param) {
                            video += ":" + param.level;
                        }
                    }
                }
                return video;
            case String:
                return param;
            default:
                return null;
        }
    }
}
class ArrayParam extends Param {
    /**
     * A parameter that represents an array.
     * @param {string} name - The name of the parameter in snake_case.
     * @param {string} shortName - The name of the serialized form of the parameter
     *                         If a value is not provided, the parameter will not be serialized.
     * @param {string} [sep='.'] - The separator to use when joining the array elements together
     * @param {function} [process=Util.identity ] - Manipulate origValue when value is called
     * @class ArrayParam
     * @extends Param
     * @ignore
     */
    constructor(name, shortName, sep = '.', process = undefined) {
        super(name, shortName, process);
        this.sep = sep;
    }
    serialize() {
        if (this.shortName != null) {
            let arrayValue = this.value();
            if ((0,_utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_3__.isEmpty)(arrayValue)) {
                return '';
            }
            else if ((0,_internal_utils_dataStructureUtils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(arrayValue)) {
                return `${this.shortName}_${arrayValue}`;
            }
            else {
                let flat = arrayValue.map((t) => (0,_utils_isFunction_js__WEBPACK_IMPORTED_MODULE_4__.isFunction)(t.serialize) ? t.serialize() : t).join(this.sep);
                return `${this.shortName}_${flat}`;
            }
        }
        else {
            return '';
        }
    }
    value() {
        if (Array.isArray(this.origValue)) {
            return this.origValue.map(v => this.process(v));
        }
        else {
            return this.process(this.origValue);
        }
    }
    set(origValue) {
        if ((origValue == null) || Array.isArray(origValue)) {
            return super.set(origValue);
        }
        else {
            return super.set([origValue]);
        }
    }
}
class TransformationParam extends Param {
    /**
     * A parameter that represents a transformation
     * @param {string} name - The name of the parameter in snake_case
     * @param {string} [shortName='t'] - The name of the serialized form of the parameter
     * @param {string} [sep='.'] - The separator to use when joining the array elements together
     * @param {function} [process=Util.identity ] - Manipulate origValue when value is called
     * @class TransformationParam
     * @extends Param
     * @ignore
     */
    constructor(name, shortName = "t", sep = '.', process = undefined) {
        super(name, shortName, process);
        this.sep = sep;
    }
    /**
     * Generate string representations of the transformation.
     * @returns {*} Returns either the transformation as a string, or an array of string representations.
     */
    serialize() {
        let result = '';
        const val = this.value();
        if ((0,_utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_3__.isEmpty)(val)) {
            return result;
        }
        // val is an array of strings so join them
        if (allStrings(val)) {
            const joined = val.join(this.sep); // creates t1.t2.t3 in case multiple named transformations were configured
            if (!(0,_utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_3__.isEmpty)(joined)) {
                // in case options.transformation was not set with an empty string (val != ['']);
                result = `${this.shortName}_${joined}`;
            }
        }
        else { // Convert val to an array of strings
            result = val.map((t) => {
                if ((0,_internal_utils_dataStructureUtils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(t) && !(0,_utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_3__.isEmpty)(t)) {
                    return `${this.shortName}_${t}`;
                }
                if ((0,_utils_isFunction_js__WEBPACK_IMPORTED_MODULE_4__.isFunction)(t.serialize)) {
                    return t.serialize();
                }
                if ((0,_utils_isObject_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(t) && !(0,_utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_3__.isEmpty)(t)) {
                    return new Transformation(t).serialize();
                }
                return undefined;
            }).filter((t) => t);
        }
        return result;
    }
    set(origValue1) {
        this.origValue = origValue1;
        if (Array.isArray(this.origValue)) {
            return super.set(this.origValue);
        }
        else {
            return super.set([this.origValue]);
        }
    }
}
const number_pattern = "([0-9]*)\\.([0-9]+)|([0-9]+)";
const offset_any_pattern = "(" + number_pattern + ")([%pP])?";
class RangeParam extends Param {
    /**
     * A parameter that represents a range
     * @param {string} name - The name of the parameter in snake_case
     * @param {string} shortName - The name of the serialized form of the parameter
     *                         If a value is not provided, the parameter will not be serialized.
     * @param {function} [process=norm_range_value ] - Manipulate origValue when value is called
     * @class RangeParam
     * @extends Param
     * @ignore
     */
    constructor(name, shortName, process = RangeParam.norm_range_value) {
        super(name, shortName, process);
    }
    static norm_range_value(value) {
        let offset = String(value).match(new RegExp('^' + offset_any_pattern + '$'));
        if (offset) {
            let modifier = offset[5] != null ? 'p' : '';
            value = (offset[1] || offset[4]) + modifier;
        }
        return value;
    }
}
class RawParam extends Param {
    constructor(name, shortName, process = _utils_legacyBaseUtil_js__WEBPACK_IMPORTED_MODULE_1__.identity) {
        super(name, shortName, process);
    }
    serialize() {
        return this.value();
    }
}
class LayerParam extends Param {
    // Parse layer options
    // @return [string] layer transformation string
    // @private
    value() {
        if (this.origValue == null) {
            return '';
        }
        let result;
        if (this.origValue instanceof _legacyLayer_layer_js__WEBPACK_IMPORTED_MODULE_5__["default"]) {
            result = this.origValue;
        }
        else if ((0,_utils_isObject_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(this.origValue)) {
            let layerOptions = (0,_utils_legacyBaseUtil_js__WEBPACK_IMPORTED_MODULE_1__.withCamelCaseKeys)(this.origValue);
            // @ts-ignore
            if (layerOptions.resourceType === "text" || (layerOptions.text != null)) {
                result = new _legacyLayer_textlayer_js__WEBPACK_IMPORTED_MODULE_6__["default"](layerOptions);
            }
            else { // @ts-ignore
                if (layerOptions.resourceType === "subtitles") {
                    result = new _legacyLayer_subtitleslayer_js__WEBPACK_IMPORTED_MODULE_7__["default"](layerOptions);
                }
                else { // @ts-ignore
                    if (layerOptions.resourceType === "fetch" || (layerOptions.url != null)) {
                        result = new _legacyLayer_fetchlayer_js__WEBPACK_IMPORTED_MODULE_8__["default"](layerOptions);
                    }
                    else {
                        result = new _legacyLayer_layer_js__WEBPACK_IMPORTED_MODULE_5__["default"](layerOptions);
                    }
                }
            }
        }
        else if ((0,_internal_utils_dataStructureUtils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(this.origValue)) {
            if (/^fetch:.+/.test(this.origValue)) {
                result = new _legacyLayer_fetchlayer_js__WEBPACK_IMPORTED_MODULE_8__["default"](this.origValue.substr(6));
            }
            else {
                result = this.origValue;
            }
        }
        else {
            result = '';
        }
        return result.toString();
    }
    static textStyle(layer) {
        return (new _legacyLayer_textlayer_js__WEBPACK_IMPORTED_MODULE_6__["default"](layer)).textStyleIdentifier();
    }
}
/**
 * TransformationBase
 * Depends on 'configuration', 'parameters','util'
 * @internal
 */
class TransformationBase {
    /**
     * The base class for transformations.
     * Members of this class are documented as belonging to the {@link Transformation} class for convenience.
     * @class TransformationBase
     */
    constructor(options) {
        /** @private */
        /** @private */
        let parent;
        let trans;
        parent = void 0;
        trans = {};
        /**
         * Return an options object that can be used to create an identical Transformation
         * @function Transformation#toOptions
         * @return {Object} Returns a plain object representing this transformation
         */
        this.toOptions = (withChain) => {
            let opt = {};
            if (withChain == null) {
                withChain = true;
            }
            // @ts-ignore
            Object.keys(trans).forEach(key => opt[key] = trans[key].origValue);
            assignNotNull(opt, this.otherOptions);
            if (withChain && !(0,_utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_3__.isEmpty)(this.chained)) {
                let list = this.chained.map((tr) => tr.toOptions());
                list.push(opt);
                opt = {};
                assignNotNull(opt, this.otherOptions);
                // @ts-ignore
                opt.transformation = list;
            }
            return opt;
        };
        /**
         * Set a parent for this object for chaining purposes.
         *
         * @function Transformation#setParent
         * @param {Object} object - the parent to be assigned to
         * @returns {Transformation} Returns this instance for chaining purposes.
         */
        this.setParent = (object) => {
            parent = object;
            if (object != null) {
                // @ts-ignore
                this.fromOptions(typeof object.toOptions === "function" ? object.toOptions() : void 0);
            }
            return this;
        };
        /**
         * Returns the parent of this object in the chain
         * @function Transformation#getParent
         * @protected
         * @return {Object} Returns the parent of this object if there is any
         */
        this.getParent = () => {
            return parent;
        };
        // Helper methods to create parameter methods
        // These methods are defined here because they access `trans` which is
        // a private member of `TransformationBase`
        /** @protected */
        this.param = (value, name, abbr, defaultValue, process) => {
            if (process == null) {
                if ((0,_utils_isFunction_js__WEBPACK_IMPORTED_MODULE_4__.isFunction)(defaultValue)) {
                    process = defaultValue;
                }
                else {
                    process = _utils_legacyBaseUtil_js__WEBPACK_IMPORTED_MODULE_1__.identity;
                }
            }
            // @ts-ignore
            trans[name] = new Param(name, abbr, process).set(value);
            return this;
        };
        /** @protected */
        this.rawParam = function (value, name, abbr, defaultValue, process) {
            process = lastArgCallback(arguments);
            // @ts-ignore
            trans[name] = new RawParam(name, abbr, process).set(value);
            return this;
        };
        /** @protected */
        this.rangeParam = function (value, name, abbr, defaultValue, process) {
            process = lastArgCallback(arguments);
            // @ts-ignore
            trans[name] = new RangeParam(name, abbr, process).set(value);
            return this;
        };
        /** @protected */
        this.arrayParam = function (value, name, abbr, sep = ":", defaultValue = [], process = undefined) {
            process = lastArgCallback(arguments);
            // @ts-ignore
            trans[name] = new ArrayParam(name, abbr, sep, process).set(value);
            return this;
        };
        /** @protected */
        this.transformationParam = function (value, name, abbr, sep = ".", defaultValue = undefined, process = undefined) {
            process = lastArgCallback(arguments);
            // @ts-ignore
            trans[name] = new TransformationParam(name, abbr, sep, process).set(value);
            return this;
        };
        this.layerParam = function (value, name, abbr) {
            // @ts-ignore
            trans[name] = new LayerParam(name, abbr).set(value);
            return this;
        };
        // End Helper methods
        /**
         * Get the value associated with the given name.
         * Get the value associated with the given name.
         * @function Transformation#getValue
         * @param {string} name - the name of the parameter
         * @return {*} the processed value associated with the given name
         * @description Use {@link get}.origValue for the value originally provided for the parameter
         */
        this.getValue = function (name) {
            // @ts-ignore
            let value = trans[name] && trans[name].value();
            return value != null ? value : this.otherOptions[name];
        };
        /**
         * Get the parameter object for the given parameter name
         * @function Transformation#get
         * @param {string} name the name of the transformation parameter
         * @returns {Param} the param object for the given name, or undefined
         */
        this.get = function (name) {
            // @ts-ignore
            return trans[name];
        };
        /**
         * Remove a transformation option from the transformation.
         * @function Transformation#remove
         * @param {string} name - the name of the option to remove
         * @return {*} Returns the option that was removed or null if no option by that name was found. The type of the
         *              returned value depends on the value.
         */
        this.remove = function (name) {
            var temp;
            switch (false) {
                // @ts-ignore
                case trans[name] == null:
                    // @ts-ignore
                    temp = trans[name];
                    // @ts-ignore
                    delete trans[name];
                    return temp.origValue;
                case this.otherOptions[name] == null:
                    temp = this.otherOptions[name];
                    delete this.otherOptions[name];
                    return temp;
                default:
                    return null;
            }
        };
        /**
         * Return an array of all the keys (option names) in the transformation.
         * @return {Array<string>} the keys in snakeCase format
         */
        this.keys = function () {
            var key;
            return ((function () {
                var results;
                results = [];
                for (key in trans) {
                    if (key != null) {
                        results.push(key.match(VAR_NAME_RE) ? key : (0,_utils_snakeCase_js__WEBPACK_IMPORTED_MODULE_9__.snakeCase)(key));
                    }
                }
                return results;
            })()).sort();
        };
        /**
         * Returns a plain object representation of the transformation. Values are processed.
         * @function Transformation#toPlainObject
         * @return {Object} the transformation options as plain object
         */
        this.toPlainObject = function () {
            var hash, key, list;
            hash = {};
            for (key in trans) {
                // @ts-ignore
                hash[key] = trans[key].value();
                // @ts-ignore
                if ((0,_utils_isObject_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(hash[key])) {
                    // @ts-ignore
                    hash[key] = (0,_internal_utils_cloneDeep_js__WEBPACK_IMPORTED_MODULE_10__.cloneDeep)(hash[key]);
                }
            }
            if (!(0,_utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_3__.isEmpty)(this.chained)) {
                list = this.chained.map((tr) => tr.toPlainObject());
                list.push(hash);
                hash = {
                    transformation: list
                };
            }
            return hash;
        };
        /**
         * Complete the current transformation and chain to a new one.
         * In the URL, transformations are chained together by slashes.
         * @function Transformation#chain
         * @return {Transformation} Returns this transformation for chaining
         * @example
         * var tr = cloudinary.Transformation.new();
         * tr.width(10).crop('fit').chain().angle(15).serialize()
         * // produces "c_fit,w_10/a_15"
         */
        this.chain = function () {
            var names, tr;
            names = Object.getOwnPropertyNames(trans);
            if (names.length !== 0) {
                tr = new this.constructor(this.toOptions(false));
                this.resetTransformations();
                this.chained.push(tr);
            }
            return this;
        };
        this.resetTransformations = function () {
            trans = {};
            return this;
        };
        this.otherOptions = {};
        this.chained = [];
        this.fromOptions(options);
    }
    /**
     * Merge the provided options with own's options
     * @param {Object} [options={}] key-value list of options
     * @returns {Transformation} Returns this instance for chaining
     */
    fromOptions(options = {}) {
        if (options instanceof TransformationBase) {
            this.fromTransformation(options);
        }
        else {
            if ((0,_internal_utils_dataStructureUtils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(options) || Array.isArray(options)) {
                options = {
                    transformation: options
                };
            }
            options = (0,_internal_utils_cloneDeep_js__WEBPACK_IMPORTED_MODULE_10__.cloneDeep)(options);
            // Handling of "if" statements precedes other options as it creates a chained transformation
            // @ts-ignore
            if (options["if"]) {
                // @ts-ignore
                this.set("if", options["if"]);
                // @ts-ignore
                delete options["if"];
            }
            for (let key in options) {
                // @ts-ignore
                let opt = options[key];
                if (opt != null) {
                    if (key.match(VAR_NAME_RE)) {
                        if (key !== '$attr') {
                            this.set('variable', key, opt);
                        }
                    }
                    else {
                        this.set(key, opt);
                    }
                }
            }
        }
        return this;
    }
    fromTransformation(other) {
        if (other instanceof TransformationBase) {
            other.keys().forEach(key => this.set(key, other.get(key).origValue));
        }
        return this;
    }
    /**
     * Set a parameter.
     * The parameter name `key` is converted to
     * @param {string} key - the name of the parameter
     * @param {*} values - the value of the parameter
     * @returns {Transformation} Returns this instance for chaining
     */
    set(key, ...values) {
        let camelKey;
        camelKey = (0,_utils_legacyBaseUtil_js__WEBPACK_IMPORTED_MODULE_1__.camelCase)(key);
        if ((0,_utils_legacyBaseUtil_js__WEBPACK_IMPORTED_MODULE_1__.contains)(methods, camelKey)) {
            // @ts-ignore
            this[camelKey].apply(this, values);
        }
        else {
            this.otherOptions[key] = values[0];
        }
        return this;
    }
    hasLayer() {
        return this.getValue("overlay") || this.getValue("underlay");
    }
    /**
     * Generate a string representation of the transformation.
     * @function Transformation#serialize
     * @return {string} Returns the transformation as a string
     */
    serialize() {
        var ifParam, j, len, paramList, ref, ref1, ref2, ref3, ref4, resultArray, t, transformationList, transformationString, transformations, value, variables, vars;
        resultArray = this.chained.map((tr) => tr.serialize());
        paramList = this.keys();
        transformations = (ref = this.get("transformation")) != null ? ref.serialize() : void 0;
        ifParam = (ref1 = this.get("if")) != null ? ref1.serialize() : void 0;
        variables = processVar((ref2 = this.get("variables")) != null ? ref2.value() : void 0);
        paramList = (0,_utils_legacyBaseUtil_js__WEBPACK_IMPORTED_MODULE_1__.difference)(paramList, ["transformation", "if", "variables"]);
        vars = [];
        transformationList = [];
        for (j = 0, len = paramList.length; j < len; j++) {
            t = paramList[j];
            if (t.match(VAR_NAME_RE)) {
                vars.push(t + "_" + _expression_js__WEBPACK_IMPORTED_MODULE_11__["default"].normalize((ref3 = this.get(t)) != null ? ref3.value() : void 0));
            }
            else {
                transformationList.push((ref4 = this.get(t)) != null ? ref4.serialize() : void 0);
            }
        }
        switch (false) {
            case !(0,_internal_utils_dataStructureUtils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(transformations):
                transformationList.push(transformations);
                break;
            case !Array.isArray(transformations):
                resultArray = resultArray.concat(transformations);
        }
        transformationList = (function () {
            var k, len1, results;
            results = [];
            for (k = 0, len1 = transformationList.length; k < len1; k++) {
                value = transformationList[k];
                if (Array.isArray(value) && !(0,_utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_3__.isEmpty)(value) || !Array.isArray(value) && value) {
                    results.push(value);
                }
            }
            return results;
        })();
        transformationList = vars.sort().concat(variables).concat(transformationList.sort());
        if (ifParam === "if_end") {
            transformationList.push(ifParam);
        }
        else if (!(0,_utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_3__.isEmpty)(ifParam)) {
            transformationList.unshift(ifParam);
        }
        transformationString = (transformationList).filter(x => !!x).join(param_separator);
        if (!(0,_utils_isEmpty_js__WEBPACK_IMPORTED_MODULE_3__.isEmpty)(transformationString)) {
            resultArray.push(transformationString);
        }
        return (resultArray).filter((x) => !!x).join(trans_separator);
    }
    /**
     * Provide a list of all the valid transformation option names
     * @function Transformation#listNames
     * @private
     * @return {Array<string>} a array of all the valid option names
     */
    static listNames() {
        return methods;
    }
    /**
     * Returns the attributes for an HTML tag.
     * @function Cloudinary.toHtmlAttributes
     * @return PlainObject
     */
    toHtmlAttributes() {
        let attrName, height, options, ref2, ref3, value, width;
        options = {};
        let snakeCaseKey;
        Object.keys(this.otherOptions).forEach(key => {
            value = this.otherOptions[key];
            snakeCaseKey = (0,_utils_snakeCase_js__WEBPACK_IMPORTED_MODULE_9__.snakeCase)(key);
            if (!(0,_utils_legacyBaseUtil_js__WEBPACK_IMPORTED_MODULE_1__.contains)(PARAM_NAMES, snakeCaseKey) && !(0,_utils_legacyBaseUtil_js__WEBPACK_IMPORTED_MODULE_1__.contains)(URL_KEYS, snakeCaseKey)) {
                attrName = /^html_/.test(key) ? key.slice(5) : key;
                options[attrName] = value;
            }
        });
        // convert all "html_key" to "key" with the same value
        this.keys().forEach(key => {
            if (/^html_/.test(key)) {
                options[(0,_utils_legacyBaseUtil_js__WEBPACK_IMPORTED_MODULE_1__.camelCase)(key.slice(5))] = this.getValue(key);
            }
        });
        if (!(this.hasLayer() || this.getValue("angle") || (0,_utils_legacyBaseUtil_js__WEBPACK_IMPORTED_MODULE_1__.contains)(["fit", "limit", "lfill"], this.getValue("crop")))) {
            width = (ref2 = this.get("width")) != null ? ref2.origValue : void 0;
            height = (ref3 = this.get("height")) != null ? ref3.origValue : void 0;
            if (parseFloat(width) >= 1.0) {
                if (options.width == null) {
                    options.width = width;
                }
            }
            if (parseFloat(height) >= 1.0) {
                if (options.height == null) {
                    options.height = height;
                }
            }
        }
        return options;
    }
    static isValidParamName(name) {
        return methods.indexOf((0,_utils_legacyBaseUtil_js__WEBPACK_IMPORTED_MODULE_1__.camelCase)(name)) >= 0;
    }
    /**
     * Delegate to the parent (up the call chain) to produce HTML
     * @function Transformation#toHtml
     * @return {string} HTML representation of the parent if possible.
     * @example
     * tag = cloudinary.ImageTag.new("sample", {cloud_name: "demo"})
     * // ImageTag {name: "img", publicId: "sample"}
     * tag.toHtml()
     * // <img src="http://res.cloudinary.com/demo/image/upload/sample">
     * tag.transformation().crop("fit").width(300).toHtml()
     * // <img src="http://res.cloudinary.com/demo/image/upload/c_fit,w_300/sample">
     */
    toHtml() {
        var ref;
        return (ref = this.getParent()) != null ? typeof ref.toHtml === "function" ? ref.toHtml() : void 0 : void 0;
    }
    toString() {
        return this.serialize();
    }
    clone() {
        return new TransformationBase(this.toOptions(true));
    }
}
const VAR_NAME_RE = /^\$[a-zA-Z0-9]+$/;
const trans_separator = '/';
const param_separator = ',';
function lastArgCallback(args) {
    var callback;
    callback = args != null ? args[args.length - 1] : void 0;
    if ((0,_utils_isFunction_js__WEBPACK_IMPORTED_MODULE_4__.isFunction)(callback)) {
        return callback;
    }
    else {
        return void 0;
    }
}
function processVar(varArray) {
    var j, len, name, results, v;
    if (Array.isArray(varArray)) {
        results = [];
        for (j = 0, len = varArray.length; j < len; j++) {
            [name, v] = varArray[j];
            results.push(`${name}_${_expression_js__WEBPACK_IMPORTED_MODULE_11__["default"].normalize(v)}`);
        }
        return results;
    }
    else {
        return varArray;
    }
}
// @ts-ignore
function processCustomFunction({ function_type, source }) {
    if (function_type === 'remote') {
        return [function_type, btoa(source)].join(":");
    }
    else if (function_type === 'wasm') {
        return [function_type, source].join(":");
    }
}
/**
 * Transformation Class methods.
 * This is a list of the parameters defined in Transformation.
 * Values are camelCased.
 * @const Transformation.methods
 * @private
 * @ignore
 * @type {Array<string>}
 */
/**
 * Parameters that are filtered out before passing the options to an HTML tag.
 *
 * The list of parameters is a combination of `Transformation::methods` and `Configuration::CONFIG_PARAMS`
 * @const {Array<string>} Transformation.PARAM_NAMES
 * @private
 * @ignore
 * @see toHtmlAttributes
 */
class Transformation extends TransformationBase {
    /**
     * Represents a single transformation.
     * @class Transformation
     * @example
     * t = new cloudinary.Transformation();
     * t.angle(20).crop("scale").width("auto");
     *
     * // or
     *
     * t = new cloudinary.Transformation( {angle: 20, crop: "scale", width: "auto"});
     * @see <a href="https://cloudinary.com/documentation/image_transformation_reference"
     *  target="_blank">Available image transformations</a>
     * @see <a href="https://cloudinary.com/documentation/video_transformation_reference"
     *  target="_blank">Available video transformations</a>
     */
    constructor(options) {
        super(options);
    }
    /**
     * Convenience constructor
     * @param {Object} options
     * @return {Transformation}
     * @example cl = cloudinary.Transformation.new( {angle: 20, crop: "scale", width: "auto"})
     */
    static new(options) {
        return new Transformation(options);
    }
    /*
      Transformation Parameters
    */
    angle(value) {
        this.arrayParam(value, "angle", "a", ".", _expression_js__WEBPACK_IMPORTED_MODULE_11__["default"].normalize);
        return this;
    }
    audioCodec(value) {
        this.param(value, "audio_codec", "ac");
        return this;
    }
    audioFrequency(value) {
        this.param(value, "audio_frequency", "af");
        return this;
    }
    aspectRatio(value) {
        this.param(value, "aspect_ratio", "ar", _expression_js__WEBPACK_IMPORTED_MODULE_11__["default"].normalize);
        return this;
    }
    background(value) {
        this.param(value, "background", "b", Param.norm_color);
        return this;
    }
    bitRate(value) {
        this.param(value, "bit_rate", "br");
        return this;
    }
    border(value) {
        return this.param(value, "border", "bo", (border) => {
            if ((0,_utils_isObject_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(border)) {
                border = Object.assign({}, {
                    color: "black",
                    width: 2
                }, border);
                return `${border.width}px_solid_${Param.norm_color(border.color)}`;
            }
            else {
                return border;
            }
        });
    }
    color(value) {
        this.param(value, "color", "co", Param.norm_color);
        return this;
    }
    colorSpace(value) {
        this.param(value, "color_space", "cs");
        return this;
    }
    crop(value) {
        this.param(value, "crop", "c");
        return this;
    }
    customFunction(value) {
        return this.param(value, "custom_function", "fn", () => {
            return processCustomFunction(value);
        });
    }
    customPreFunction(value) {
        if (this.get('custom_function')) {
            return;
        }
        return this.rawParam(value, "custom_function", "", () => {
            value = processCustomFunction(value);
            return value ? `fn_pre:${value}` : value;
        });
    }
    defaultImage(value) {
        this.param(value, "default_image", "d");
        return this;
    }
    delay(value) {
        this.param(value, "delay", "dl");
        return this;
    }
    density(value) {
        this.param(value, "density", "dn");
        return this;
    }
    duration(value) {
        this.rangeParam(value, "duration", "du");
        return this;
    }
    dpr(value) {
        return this.param(value, "dpr", "dpr", (dpr) => {
            dpr = dpr.toString();
            if (dpr != null ? dpr.match(/^\d+$/) : void 0) {
                return dpr + ".0";
            }
            else {
                return _expression_js__WEBPACK_IMPORTED_MODULE_11__["default"].normalize(dpr);
            }
        });
    }
    effect(value) {
        this.arrayParam(value, "effect", "e", ":", _expression_js__WEBPACK_IMPORTED_MODULE_11__["default"].normalize);
        return this;
    }
    else() {
        return this.if('else');
    }
    endIf() {
        return this.if('end');
    }
    endOffset(value) {
        this.rangeParam(value, "end_offset", "eo");
        return this;
    }
    fallbackContent(value) {
        this.param(value, "fallback_content");
        return this;
    }
    fetchFormat(value) {
        this.param(value, "fetch_format", "f");
        return this;
    }
    format(value) {
        this.param(value, "format");
        return this;
    }
    flags(value) {
        this.arrayParam(value, "flags", "fl", ".");
        return this;
    }
    gravity(value) {
        this.param(value, "gravity", "g");
        return this;
    }
    fps(value) {
        return this.param(value, "fps", "fps", (fps) => {
            if ((0,_internal_utils_dataStructureUtils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(fps)) {
                return fps;
            }
            else if (Array.isArray(fps)) {
                return fps.join("-");
            }
            else {
                return fps;
            }
        });
    }
    height(value) {
        return this.param(value, "height", "h", () => {
            if (this.getValue("crop") || this.getValue("overlay") || this.getValue("underlay")) {
                return _expression_js__WEBPACK_IMPORTED_MODULE_11__["default"].normalize(value);
            }
            else {
                return null;
            }
        });
    }
    htmlHeight(value) {
        this.param(value, "html_height");
        return this;
    }
    htmlWidth(value) {
        this.param(value, "html_width");
        return this;
    }
    if(value = "") {
        var i, ifVal, j, ref, trIf, trRest;
        switch (value) {
            case "else":
                this.chain();
                return this.param(value, "if", "if");
            case "end":
                this.chain();
                for (i = j = ref = this.chained.length - 1; j >= 0; i = j += -1) {
                    ifVal = this.chained[i].getValue("if");
                    if (ifVal === "end") {
                        break;
                    }
                    else if (ifVal != null) {
                        trIf = Transformation.new().if(ifVal);
                        this.chained[i].remove("if");
                        trRest = this.chained[i];
                        this.chained[i] = Transformation.new().transformation([trIf, trRest]);
                        if (ifVal !== "else") {
                            break;
                        }
                    }
                }
                return this.param(value, "if", "if");
            case "":
                return _condition_js__WEBPACK_IMPORTED_MODULE_12__["default"]["new"]().setParent(this);
            default:
                return this.param(value, "if", "if", (value) => {
                    return _condition_js__WEBPACK_IMPORTED_MODULE_12__["default"]["new"](value).toString();
                });
        }
    }
    keyframeInterval(value) {
        this.param(value, "keyframe_interval", "ki");
        return this;
    }
    ocr(value) {
        this.param(value, "ocr", "ocr");
        return this;
    }
    offset(value) {
        var end_o, start_o;
        [start_o, end_o] = ((0,_utils_isFunction_js__WEBPACK_IMPORTED_MODULE_4__.isFunction)(value != null ? value.split : void 0)) ? value.split('..') : Array.isArray(value) ? value : [null, null];
        if (start_o != null) {
            this.startOffset(start_o);
        }
        if (end_o != null) {
            return this.endOffset(end_o);
        }
    }
    opacity(value) {
        this.param(value, "opacity", "o", _expression_js__WEBPACK_IMPORTED_MODULE_11__["default"].normalize);
        return this;
    }
    overlay(value) {
        this.layerParam(value, "overlay", "l");
        return this;
    }
    page(value) {
        this.param(value, "page", "pg");
        return this;
    }
    poster(value) {
        this.param(value, "poster");
        return this;
    }
    prefix(value) {
        this.param(value, "prefix", "p");
        return this;
    }
    quality(value) {
        this.param(value, "quality", "q", _expression_js__WEBPACK_IMPORTED_MODULE_11__["default"].normalize);
        return this;
    }
    radius(value) {
        this.arrayParam(value, "radius", "r", ":", _expression_js__WEBPACK_IMPORTED_MODULE_11__["default"].normalize);
        return this;
    }
    rawTransformation(value) {
        this.rawParam(value, "raw_transformation");
        return this;
    }
    size(value) {
        let height, width;
        if ((0,_utils_isFunction_js__WEBPACK_IMPORTED_MODULE_4__.isFunction)(value != null ? value.split : void 0)) {
            [width, height] = value.split('x');
            this.width(width);
            return this.height(height);
        }
    }
    sourceTypes(value) {
        this.param(value, "source_types");
        return this;
    }
    sourceTransformation(value) {
        return this.param(value, "source_transformation");
    }
    startOffset(value) {
        this.rangeParam(value, "start_offset", "so");
        return this;
    }
    streamingProfile(value) {
        this.param(value, "streaming_profile", "sp");
        return this;
    }
    transformation(value) {
        this.transformationParam(value, "transformation", "t");
        return this;
    }
    underlay(value) {
        this.layerParam(value, "underlay", "u");
        return this;
    }
    variable(name, value) {
        this.param(value, name, name);
        return this;
    }
    variables(values) {
        this.arrayParam(values, "variables");
        return this;
    }
    videoCodec(value) {
        this.param(value, "video_codec", "vc", Param.process_video_params);
        return this;
    }
    videoSampling(value) {
        this.param(value, "video_sampling", "vs");
        return this;
    }
    width(value) {
        this.param(value, "width", "w", () => {
            if (this.getValue("crop") || this.getValue("overlay") || this.getValue("underlay")) {
                return _expression_js__WEBPACK_IMPORTED_MODULE_11__["default"].normalize(value);
            }
            else {
                return null;
            }
        });
        return this;
    }
    x(value) {
        this.param(value, "x", "x", _expression_js__WEBPACK_IMPORTED_MODULE_11__["default"].normalize);
        return this;
    }
    y(value) {
        this.param(value, "y", "y", _expression_js__WEBPACK_IMPORTED_MODULE_11__["default"].normalize);
        return this;
    }
    zoom(value) {
        this.param(value, "zoom", "z", _expression_js__WEBPACK_IMPORTED_MODULE_11__["default"].normalize);
        return this;
    }
}
/**
 * Transformation Class methods.
 * This is a list of the parameters defined in Transformation.
 * Values are camelCased.
 */
const methods = [
    "angle",
    "audioCodec",
    "audioFrequency",
    "aspectRatio",
    "background",
    "bitRate",
    "border",
    "color",
    "colorSpace",
    "crop",
    "customFunction",
    "customPreFunction",
    "defaultImage",
    "delay",
    "density",
    "duration",
    "dpr",
    "effect",
    "else",
    "endIf",
    "endOffset",
    "fallbackContent",
    "fetchFormat",
    "format",
    "flags",
    "gravity",
    "fps",
    "height",
    "htmlHeight",
    "htmlWidth",
    "if",
    "keyframeInterval",
    "ocr",
    "offset",
    "opacity",
    "overlay",
    "page",
    "poster",
    "prefix",
    "quality",
    "radius",
    "rawTransformation",
    "size",
    "sourceTypes",
    "sourceTransformation",
    "startOffset",
    "streamingProfile",
    "transformation",
    "underlay",
    "variable",
    "variables",
    "videoCodec",
    "videoSampling",
    "width",
    "x",
    "y",
    "zoom"
];
/**
 * Parameters that are filtered out before passing the options to an HTML tag.
 *
 * The list of parameters is a combination of `Transformation::methods` and `Configuration::CONFIG_PARAMS`
 */
const PARAM_NAMES = methods.map(_utils_snakeCase_js__WEBPACK_IMPORTED_MODULE_9__.snakeCase).concat(_configuration_js__WEBPACK_IMPORTED_MODULE_13__.CONFIG_PARAMS);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Transformation);


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processCustomFunction.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processCustomFunction.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "processCustomFunction": () => (/* binding */ processCustomFunction)
/* harmony export */ });
/* harmony import */ var _internal_utils_base64Encode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../internal/utils/base64Encode.js */ "../node_modules/@cloudinary/url-gen/internal/utils/base64Encode.js");
/* harmony import */ var _utils_isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/isObject.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/isObject.js");


/**
 * Parse custom_function options
 * @private
 * @param {object|*} customFunction a custom function object containing function_type and source values
 * @return {string|*} custom_function transformation string
 */
function processCustomFunction(customFunction) {
    if (!(0,_utils_isObject_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(customFunction)) {
        return customFunction;
    }
    if (customFunction.function_type === "remote") {
        const encodedSource = (0,_internal_utils_base64Encode_js__WEBPACK_IMPORTED_MODULE_1__.base64Encode)(customFunction.source)
            .replace(/\+/g, '-') // Convert '+' to '-'
            .replace(/\//g, '_') // Convert '/' to '_'
            .replace(/=+$/, ''); // Remove ending '='
        return [customFunction.function_type, encodedSource].join(":");
    }
    return [customFunction.function_type, customFunction.source].join(":");
}


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processCustomPreFunction.js":
/*!**********************************************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processCustomPreFunction.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "processCustomPreFunction": () => (/* binding */ processCustomPreFunction)
/* harmony export */ });
/* harmony import */ var _processCustomFunction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./processCustomFunction.js */ "../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processCustomFunction.js");

/**
 * Parse custom_pre_function options
 * @private
 * @param {object|*} customPreFunction a custom function object containing function_type and source values
 * @return {string|*} custom_pre_function transformation string
 */
function processCustomPreFunction(customPreFunction) {
    const result = (0,_processCustomFunction_js__WEBPACK_IMPORTED_MODULE_0__.processCustomFunction)(customPreFunction);
    return typeof result === 'string' ? `pre:${result}` : null;
}


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processDpr.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processDpr.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "processDpr": () => (/* binding */ processDpr)
/* harmony export */ });
/* harmony import */ var _expression_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../expression.js */ "../node_modules/@cloudinary/url-gen/backwards/expression.js");

/**
 * Process DPR value. If input is 1 returns 1.0
 * @param value
 */
function processDpr(value) {
    let dpr = value.toString();
    if (dpr != null ? dpr.match(/^\d+$/) : void 0) {
        return dpr + ".0";
    }
    else {
        return _expression_js__WEBPACK_IMPORTED_MODULE_0__["default"].normalize(dpr);
    }
}


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processIf.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processIf.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "process_if": () => (/* binding */ process_if)
/* harmony export */ });
/* harmony import */ var _utils_legacyNormalizeExpression_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/legacyNormalizeExpression.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/legacyNormalizeExpression.js");

/**
 * Parse "if" parameter
 * Translates the condition if provided.
 * @private
 * @return {string} "if_" + ifValue
 */
function process_if(ifValue) {
    return ifValue ? "if_" + (0,_utils_legacyNormalizeExpression_js__WEBPACK_IMPORTED_MODULE_0__.legacyNormalizeExpression)(ifValue) : ifValue;
}


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processLayer.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processLayer.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "processLayer": () => (/* binding */ processLayer),
/* harmony export */   "textStyle": () => (/* binding */ textStyle)
/* harmony export */ });
/* harmony import */ var _utils_isObject_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/isObject.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/isObject.js");
/* harmony import */ var _internal_utils_base64Encode_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../internal/utils/base64Encode.js */ "../node_modules/@cloudinary/url-gen/internal/utils/base64Encode.js");
/* harmony import */ var _consts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../consts.js */ "../node_modules/@cloudinary/url-gen/backwards/consts.js");
/* harmony import */ var _utils_smartEscape_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/smartEscape.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/smartEscape.js");
/* harmony import */ var _legacyLayer_textlayer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../legacyLayer/textlayer.js */ "../node_modules/@cloudinary/url-gen/backwards/legacyLayer/textlayer.js");
/* harmony import */ var _legacyLayer_layer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../legacyLayer/layer.js */ "../node_modules/@cloudinary/url-gen/backwards/legacyLayer/layer.js");
/**
 * Parse layer options
 * @private
 * @param {object|*} layer The layer to parse.
 * @return {string} layer transformation string
 */






function textStyle(layer) {
    const keywords = [];
    let style = "";
    Object.keys(_consts_js__WEBPACK_IMPORTED_MODULE_0__.LAYER_KEYWORD_PARAMS).forEach((attr) => {
        let default_value = _consts_js__WEBPACK_IMPORTED_MODULE_0__.LAYER_KEYWORD_PARAMS[attr];
        let attr_value = layer[attr] || default_value;
        if (attr_value !== default_value) {
            keywords.push(attr_value);
        }
    });
    Object.keys(layer).forEach((attr) => {
        if (attr === "letter_spacing" || attr === "line_spacing") {
            keywords.push(`${attr}_${layer[attr]}`);
        }
        if (attr === "font_hinting") {
            keywords.push(`${attr.split("_").pop()}_${layer[attr]}`);
        }
        if (attr === "font_antialiasing") {
            keywords.push(`antialias_${layer[attr]}`);
        }
    });
    if (layer.hasOwnProperty("font_size" || 0) || !keywords || keywords.length === 0) {
        if (!layer.font_size)
            throw `Must supply font_size for text in overlay/underlay`;
        if (!layer.font_family)
            throw `Must supply font_family for text in overlay/underlay`;
        keywords.unshift(layer.font_size);
        keywords.unshift(layer.font_family);
        style = keywords.filter((a) => a).join("_");
    }
    return style;
}
function processLayer(layer) {
    if (layer instanceof _legacyLayer_textlayer_js__WEBPACK_IMPORTED_MODULE_1__["default"] || layer instanceof _legacyLayer_layer_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
        return layer.toString();
    }
    let result = '';
    if ((0,_utils_isObject_js__WEBPACK_IMPORTED_MODULE_3__.isObject)(layer)) {
        if (layer.resource_type === "fetch" || (layer.url != null)) {
            result = `fetch:${(0,_internal_utils_base64Encode_js__WEBPACK_IMPORTED_MODULE_4__.base64Encode)(layer.url)}`;
        }
        else {
            let public_id = layer.public_id;
            let format = layer.format;
            let resource_type = layer.resource_type || "image";
            let type = layer.type || "upload";
            let text = layer.text;
            let style = null;
            let components = [];
            const noPublicId = !public_id || public_id.length === 0;
            if (!noPublicId) {
                public_id = public_id.replace(new RegExp("/", 'g'), ":");
                if (format != null) {
                    public_id = `${public_id}.${format}`;
                }
            }
            if ((!text || text.length === 0) && resource_type !== "text") {
                if (noPublicId) {
                    throw "Must supply public_id for resource_type layer_parameter";
                }
                if (resource_type === "subtitles") {
                    style = textStyle(layer);
                }
            }
            else {
                resource_type = "text";
                type = null;
                // type is ignored for text layers
                style = textStyle(layer);
                if (text && text.length >= 0) {
                    const noStyle = !style;
                    if (!(noPublicId || noStyle) || (noPublicId && noStyle)) {
                        throw "Must supply either style parameters or a public_id when providing text parameter in a text overlay/underlay";
                    }
                    let re = /\$\([a-zA-Z]\w*\)/g;
                    let start = 0;
                    let textSource = (0,_utils_smartEscape_js__WEBPACK_IMPORTED_MODULE_5__.smartEscape)(decodeURIComponent(text), /[,\/]/g);
                    text = "";
                    for (let res = re.exec(textSource); res; res = re.exec(textSource)) {
                        text += (0,_utils_smartEscape_js__WEBPACK_IMPORTED_MODULE_5__.smartEscape)(textSource.slice(start, res.index));
                        text += res[0];
                        start = res.index + res[0].length;
                    }
                    text += encodeURIComponent(textSource.slice(start));
                }
            }
            if (resource_type !== "image") {
                components.push(resource_type);
            }
            if (type !== "upload") {
                components.push(type);
            }
            components.push(style);
            components.push(public_id);
            components.push(text);
            result = components.filter((a) => a).join(":");
        }
    }
    else if (/^fetch:.+/.test(layer)) {
        result = `fetch:${(0,_internal_utils_base64Encode_js__WEBPACK_IMPORTED_MODULE_4__.base64Encode)(layer.substr(6))}`;
    }
    else {
        result = layer;
    }
    return result;
}


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processRadius.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processRadius.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "processRadius": () => (/* binding */ processRadius)
/* harmony export */ });
/* harmony import */ var _utils_legacyNormalizeExpression_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/legacyNormalizeExpression.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/legacyNormalizeExpression.js");

/**
 * Parse radius options
 * @private
 * @param {Array<string|number>|string|number} _radius The radius to parse
 * @return {string} radius transformation string
 */
function processRadius(_radius) {
    let radius = _radius;
    if (!radius) {
        return radius;
    }
    if (!Array.isArray(radius)) {
        radius = [radius];
    }
    if (radius.length === 0 || radius.length > 4) {
        throw new Error("Radius array should contain between 1 and 4 values");
    }
    if (radius.findIndex((x) => x === null) >= 0) {
        throw new Error("Corner: Cannot be null");
    }
    return radius.map(_utils_legacyNormalizeExpression_js__WEBPACK_IMPORTED_MODULE_0__.legacyNormalizeExpression).join(':');
}


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processVideoParams.js":
/*!****************************************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processVideoParams.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "processVideoParams": () => (/* binding */ processVideoParams)
/* harmony export */ });
/**
 * A video codec parameter can be either a String or a Hash.
 * @param {Object} param <code>vc_<codec>[ : <profile> : [<level>]]</code>
 *                       or <code>{ codec: 'h264', profile: 'basic', level: '3.1' }</code>
 * @return {String} <code><codec> : <profile> : [<level>]]</code> if a Hash was provided
 *                   or the param if a String was provided.
 *                   Returns null if param is not a Hash or String
 */
function processVideoParams(param) {
    switch (param && param.constructor) {
        case Object: {
            let video = "";
            if ('codec' in param) {
                video = param.codec;
                if ('profile' in param) {
                    video += ":" + param.profile;
                    if ('level' in param) {
                        video += ":" + param.level;
                    }
                }
            }
            return video;
        }
        case String:
            return param;
        default:
            return null;
    }
}


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/utils/finalizeResourceType.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/utils/finalizeResourceType.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "finalize_resource_type": () => (/* binding */ finalize_resource_type)
/* harmony export */ });
function finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten) {
    if (type == null) {
        type = 'upload';
    }
    if (url_suffix != null) {
        if (resource_type === 'image' && type === 'upload') {
            resource_type = "images";
            type = null;
        }
        else if (resource_type === 'image' && type === 'private') {
            resource_type = 'private_images';
            type = null;
        }
        else if (resource_type === 'image' && type === 'authenticated') {
            resource_type = 'authenticated_images';
            type = null;
        }
        else if (resource_type === 'raw' && type === 'upload') {
            resource_type = 'files';
            type = null;
        }
        else if (resource_type === 'video' && type === 'upload') {
            resource_type = 'videos';
            type = null;
        }
        else {
            throw new Error("URL Suffix only supported for image/upload, image/private, image/authenticated, video/upload and raw/upload");
        }
    }
    if (use_root_path) {
        if ((resource_type === 'image' && type === 'upload') || (resource_type === 'images' && (type == null))) {
            resource_type = null;
            type = null;
        }
        else {
            throw new Error("Root path only supported for image/upload");
        }
    }
    if (shorten && resource_type === 'image' && type === 'upload') {
        resource_type = 'iu';
        type = null;
    }
    return [resource_type, type];
}


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/utils/finalize_source.js":
/*!******************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/utils/finalize_source.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "finalize_source": () => (/* binding */ finalize_source)
/* harmony export */ });
/* harmony import */ var _smartEscape_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./smartEscape.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/smartEscape.js");

function finalize_source(source, format, url_suffix) {
    let source_to_sign;
    source = source.replace(/([^:])\/\//g, '$1/');
    if (source.match(/^https?:\//i)) {
        source = (0,_smartEscape_js__WEBPACK_IMPORTED_MODULE_0__.smartEscape)(source);
        source_to_sign = source;
    }
    else {
        source = encodeURIComponent(decodeURIComponent(source)).replace(/%3A/g, ":").replace(/%2F/g, "/");
        source_to_sign = source;
        if (url_suffix) {
            if (url_suffix.match(/[\.\/]/)) {
                throw new Error('url_suffix should not include . or /');
            }
            source = source + '/' + url_suffix;
        }
        if (format != null) {
            source = source + '.' + format;
            source_to_sign = source_to_sign + '.' + format;
        }
    }
    return [source, source_to_sign];
}


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/utils/isEmpty.js":
/*!**********************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/utils/isEmpty.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isEmpty": () => (/* binding */ isEmpty)
/* harmony export */ });
function isEmpty(value) {
    return value === undefined ||
        value === null ||
        (typeof value === "object" && Object.keys(value).length === 0) ||
        (typeof value === "string" && value.trim().length === 0);
}


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/utils/isFunction.js":
/*!*************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/utils/isFunction.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isFunction": () => (/* binding */ isFunction)
/* harmony export */ });
/**
 * Simple Is Function check
 *
 * @param variableToCheck
 * @returns {boolean}
 */
function isFunction(variableToCheck) {
    return variableToCheck instanceof Function;
}


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/utils/isNumberLike.js":
/*!***************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/utils/isNumberLike.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNumberLike": () => (/* binding */ isNumberLike)
/* harmony export */ });
/**
 * Return true is value is a number or a string representation of a number.
 * @function Util.isNumberLike
 * @param {*} value
 * @returns {boolean} true if value is a number
 * @example
 *    Util.isNumber(0) // true
 *    Util.isNumber("1.3") // true
 *    Util.isNumber("") // false
 *    Util.isNumber(undefined) // false
 */
const isNumberLike = function (value) {
    return (value != null) && !isNaN(parseFloat(value));
};


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/utils/isObject.js":
/*!***********************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/utils/isObject.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isObject": () => (/* binding */ isObject)
/* harmony export */ });
/**
 *
 * @param a
 */
function isObject(a) {
    return typeof a === 'object' && a !== null;
}


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/utils/legacyBaseUtil.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/utils/legacyBaseUtil.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "camelCase": () => (/* binding */ camelCase),
/* harmony export */   "contains": () => (/* binding */ contains),
/* harmony export */   "convertKeys": () => (/* binding */ convertKeys),
/* harmony export */   "difference": () => (/* binding */ difference),
/* harmony export */   "identity": () => (/* binding */ identity),
/* harmony export */   "reWords": () => (/* binding */ reWords),
/* harmony export */   "withCamelCaseKeys": () => (/* binding */ withCamelCaseKeys)
/* harmony export */ });
/* harmony import */ var _isEmpty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isEmpty.js */ "../node_modules/@cloudinary/url-gen/backwards/utils/isEmpty.js");
/**
 * Create a copy of the source object with all keys in camelCase
 * @function Util.withCamelCaseKeys
 * @return {Object} a new object
 * @param source
 */

const withCamelCaseKeys = function (source) {
    return convertKeys(source, camelCase);
};
/**
 * Convert string to camelCase
 * @function Util.camelCase
 * @param {string} source - the string to convert
 * @return {string} in camelCase format
 */
const camelCase = function (source) {
    let words = source.match(reWords);
    words = words.map(word => word.charAt(0).toLocaleUpperCase() + word.slice(1).toLocaleLowerCase());
    words[0] = words[0].toLocaleLowerCase();
    return words.join('');
};
/**
 * Creates a new object from source, with the keys transformed using the converter.
 * @param {object} source
 * @param {function|null} converter
 * @returns {object}
 */
var convertKeys = function (source, converter) {
    var result, value;
    result = {};
    for (let key in source) {
        value = source[key];
        if (converter) {
            key = converter(key);
        }
        if (!(0,_isEmpty_js__WEBPACK_IMPORTED_MODULE_0__.isEmpty)(key)) {
            // @ts-ignore
            result[key] = value;
        }
    }
    return result;
};
var reWords = (function () {
    var lower, upper;
    upper = '[A-Z]';
    lower = '[a-z]+';
    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
})();
function identity(x) {
    return x;
}
function contains(a, obj) {
    for (let i = 0; i < a.length; i++) {
        if (a[i] === obj) {
            return true;
        }
    }
    return false;
}
function difference(arr1, arr2) {
    return arr1.filter(x => !arr2.includes(x));
}


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/utils/legacyNormalizeExpression.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/utils/legacyNormalizeExpression.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "legacyNormalizeExpression": () => (/* binding */ legacyNormalizeExpression)
/* harmony export */ });
/* harmony import */ var _consts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../consts.js */ "../node_modules/@cloudinary/url-gen/backwards/consts.js");

/**
 * Normalize an offset value
 * @param {String} expression a decimal value which may have a 'p' or '%' postfix. E.g. '35%', '0.4p'
 * @return {Object|String} a normalized String of the input value if possible otherwise the value itself
 */
function legacyNormalizeExpression(expression) {
    if (typeof expression !== 'string' || expression.length === 0 || expression.match(/^!.+!$/)) {
        if (expression) {
            return expression.toString();
        }
        else {
            return expression;
        }
    }
    expression = String(expression);
    const operators = "\\|\\||>=|<=|&&|!=|>|=|<|/|-|\\+|\\*|\\^";
    // operators
    const operatorsPattern = "((" + operators + ")(?=[ _]))";
    const operatorsReplaceRE = new RegExp(operatorsPattern, "g");
    expression = expression.replace(operatorsReplaceRE, (match) => {
        return _consts_js__WEBPACK_IMPORTED_MODULE_0__.LEGACY_CONDITIONAL_OPERATORS[match];
    });
    // predefined variables
    const predefinedVarsPattern = "(" + Object.keys(_consts_js__WEBPACK_IMPORTED_MODULE_0__.LEGACY_PREDEFINED_VARS).join("|") + ")";
    const userVariablePattern = '(\\$_*[^_ ]+)';
    const variablesReplaceRE = new RegExp(`${userVariablePattern}|${predefinedVarsPattern}`, "g");
    // @ts-ignore
    expression = expression.replace(variablesReplaceRE, (match) => (_consts_js__WEBPACK_IMPORTED_MODULE_0__.LEGACY_PREDEFINED_VARS[match] || match));
    return expression.replace(/[ _]+/g, '_');
}


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/utils/norm_range_values.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/utils/norm_range_values.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "normRangeValues": () => (/* binding */ normRangeValues)
/* harmony export */ });
/* harmony import */ var _consts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../consts.js */ "../node_modules/@cloudinary/url-gen/backwards/consts.js");

/**
 *
 * @param value
 */
function normRangeValues(value) {
    const offset = String(value).match(_consts_js__WEBPACK_IMPORTED_MODULE_0__.RANGE_VALUE_RE);
    if (offset) {
        const modifier = offset[5] ? 'p' : '';
        return `${offset[1] || offset[4]}${modifier}`;
    }
    else {
        return value;
    }
}


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/utils/smartEscape.js":
/*!**************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/utils/smartEscape.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "smartEscape": () => (/* binding */ smartEscape)
/* harmony export */ });
// Based on CGI::unescape. In addition does not escape / :
// smart_escape = (string)->
//  encodeURIComponent(string).replace(/%3A/g, ":").replace(/%2F/g, "/")
function smartEscape(string, unsafe = /([^a-zA-Z0-9_.\-\/:]+)/g) {
    return string.replace(unsafe, function (match) {
        return match.split("").map(function (c) {
            return "%" + c.charCodeAt(0).toString(16).toUpperCase();
        }).join("");
    });
}


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/utils/snakeCase.js":
/*!************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/utils/snakeCase.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "snakeCase": () => (/* binding */ snakeCase)
/* harmony export */ });
/**
 * Converts string to snake case
 * @param {string} str
 */
const snakeCase = (str) => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/utils/splitRange.js":
/*!*************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/utils/splitRange.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "splitRange": () => (/* binding */ splitRange)
/* harmony export */ });
/* harmony import */ var _consts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../consts.js */ "../node_modules/@cloudinary/url-gen/backwards/consts.js");
/**
 * Split a range into the start and end values
 * @param range
 */

function splitRange(range) {
    switch (range && range.constructor) {
        case String:
            if (!_consts_js__WEBPACK_IMPORTED_MODULE_0__.OFFSET_ANY_PATTERN_RE.test(range)) {
                return range;
            }
            return range.split("..");
        case Array:
            return [[range], range[range.length - 1]];
        default:
            return [null, null];
    }
}


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/utils/toArray.js":
/*!**********************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/utils/toArray.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toArray": () => (/* binding */ toArray)
/* harmony export */ });
/**
 *
 * @param arg
 */
function toArray(arg) {
    switch (true) {
        case arg == null:
            return [];
        case Array.isArray(arg):
            return arg;
        default:
            return [arg];
    }
}


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/backwards/utils/unsigned_url_prefix.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/backwards/utils/unsigned_url_prefix.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unsigned_url_prefix": () => (/* binding */ unsigned_url_prefix)
/* harmony export */ });
/* harmony import */ var _consts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../consts.js */ "../node_modules/@cloudinary/url-gen/backwards/consts.js");

function unsigned_url_prefix(source, cloud_name, private_cdn, cdn_subdomain, secure_cdn_subdomain, cname, secure, secure_distribution) {
    let prefix;
    if (cloud_name.indexOf("/") === 0) {
        return '/res' + cloud_name;
    }
    let shared_domain = !private_cdn;
    if (secure) {
        if ((secure_distribution == null) || secure_distribution === _consts_js__WEBPACK_IMPORTED_MODULE_0__.OLD_AKAMAI_SHARED_CDN) {
            secure_distribution = private_cdn ? cloud_name + "-res.cloudinary.com" : _consts_js__WEBPACK_IMPORTED_MODULE_0__.SHARED_CDN;
        }
        if (shared_domain == null) {
            shared_domain = secure_distribution === _consts_js__WEBPACK_IMPORTED_MODULE_0__.SHARED_CDN;
        }
        prefix = 'https://' + secure_distribution;
    }
    else if (cname) {
        // let subdomain = cdn_subdomain ? 'a' + ((crc32(source) % 5) + 1) + '.' : '';
        prefix = 'http://' + cname;
    }
    else {
        let cdn_part = private_cdn ? cloud_name + '-' : '';
        let host = [cdn_part, 'res', '.cloudinary.com'].join('');
        prefix = 'http://' + host;
    }
    if (shared_domain) {
        prefix += '/' + cloud_name;
    }
    return prefix;
}


/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/internal/utils/base64Encode.js":
/*!**************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/internal/utils/base64Encode.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "base64Encode": () => (/* binding */ base64Encode)
/* harmony export */ });
/**
 *
 * @private
 * @description An isomorphic Base64 function, provides browser and server support.
 * @param {string} input - A string to encode with base64
 */
function base64Encode(input) {
    // Browser
    let encodedResult = '';
    if (typeof window !== 'undefined') {
        // encodeURI the input to support unicode characters
        // Since the URI might be encoded already, we try to decode it once before
        encodedResult = btoa(encodeURI(decodeURI(input)));
    }
    else {
        // NodeJS support
        encodedResult = global.Buffer.from(input).toString('base64');
    }
    return encodedResult
        .replace(/\+/g, '-') // Convert '+' to '-'
        .replace(/\//g, '_'); // Convert '/' to '_';
}



/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/internal/utils/cloneDeep.js":
/*!***********************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/internal/utils/cloneDeep.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cloneDeep": () => (/* binding */ cloneDeep)
/* harmony export */ });
/* eslint-disable */
// @ts-nocheck
// This file is a direct copy from lodash.clonedeep
// Lodash.clonedeep has problems with the module exports, thus a copy was the shortest and cleanest solution
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;
/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';
/** Used as references for constious `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;
/** `Object#toString` result references. */
var argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', promiseTag = '[object Promise]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]', weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;
/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;
/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
    cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
        cloneableTags[boolTag] = cloneableTags[dateTag] =
            cloneableTags[float32Tag] = cloneableTags[float64Tag] =
                cloneableTags[int8Tag] = cloneableTags[int16Tag] =
                    cloneableTags[int32Tag] = cloneableTags[mapTag] =
                        cloneableTags[numberTag] = cloneableTags[objectTag] =
                            cloneableTags[regexpTag] = cloneableTags[setTag] =
                                cloneableTags[stringTag] = cloneableTags[symbolTag] =
                                    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
                                        cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
    cloneableTags[weakMapTag] = false;
/** Detect free constiable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
/** Detect free constiable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();
/** Detect free constiable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free constiable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;
/**
 * Adds the key-value `pair` to `map`.
 *
 * @private
 * @param {Object} map The map to modify.
 * @param {Array} pair The key-value pair to add.
 * @returns {Object} Returns `map`.
 */
function addMapEntry(map, pair) {
    // Don't return `map.set` because it's not chainable in IE 11.
    map.set(pair[0], pair[1]);
    return map;
}
/**
 * Adds `value` to `set`.
 *
 * @private
 * @param {Object} set The set to modify.
 * @param {*} value The value to add.
 * @returns {Object} Returns `set`.
 */
function addSetEntry(set, value) {
    // Don't return `set.add` because it's not chainable in IE 11.
    set.add(value);
    return set;
}
/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
    var index = -1, length = array ? array.length : 0;
    while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
            break;
        }
    }
    return array;
}
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while (++index < length) {
        array[offset + index] = values[index];
    }
    return array;
}
/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1, length = array ? array.length : 0;
    if (initAccum && length) {
        accumulator = array[++index];
    }
    while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
}
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while (++index < n) {
        result[index] = iteratee(index);
    }
    return result;
}
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
    return object == null ? undefined : object[key];
}
/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
    // Many host objects are `Object` objects that can coerce to strings
    // despite having improperly defined `toString` methods.
    var result = false;
    if (value != null && typeof value.toString != 'function') {
        try {
            result = !!(`${value}`);
        }
        catch (e) {
        }
    }
    return result;
}
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
    var index = -1, result = Array(map.size);
    map.forEach(function (value, key) {
        result[++index] = [key, value];
    });
    return result;
}
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
    return function (arg) {
        return func(transform(arg));
    };
}
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
    var index = -1, result = Array(set.size);
    set.forEach(function (value) {
        result[++index] = value;
    });
    return result;
}
/** Used for built-in method references. */
var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];
/** Used to detect methods masquerading as native. */
var maskSrcKey = (function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? (`Symbol(src)_1.${uid}`) : '';
}());
/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;
/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;
/** Used to detect if a method is native. */
var reIsNative = RegExp(`^${funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?')}$`);
/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined, Symbol = root.Symbol, Uint8Array = root.Uint8Array, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice;
/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined, nativeKeys = overArg(Object.keys, Object);
/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'), Map = getNative(root, 'Map'), Promise = getNative(root, 'Promise'), Set = getNative(root, 'Set'), WeakMap = getNative(root, 'WeakMap'), nativeCreate = getNative(Object, 'create');
/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
}
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
}
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
}
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
    var data = this.__data__;
    data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
    return this;
}
// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype.delete = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
    this.__data__ = [];
}
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
        return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
        data.pop();
    }
    else {
        splice.call(data, index, 1);
    }
    return true;
}
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
}
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
}
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
        data.push([key, value]);
    }
    else {
        data[index][1] = value;
    }
    return this;
}
// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype.delete = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
    this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
    };
}
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
    return getMapData(this, key).delete(key);
}
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
    return getMapData(this, key).get(key);
}
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
    return getMapData(this, key).has(key);
}
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
    getMapData(this, key).set(key, value);
    return this;
}
// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype.delete = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
    this.__data__ = new ListCache(entries);
}
/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
    this.__data__ = new ListCache;
}
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
    return this.__data__.delete(key);
}
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
    return this.__data__.get(key);
}
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
    return this.__data__.has(key);
}
/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
    var cache = this.__data__;
    if (cache instanceof ListCache) {
        var pairs = cache.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
            pairs.push([key, value]);
            return this;
        }
        cache = this.__data__ = new MapCache(pairs);
    }
    cache.set(key, value);
    return this;
}
// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype.delete = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
    // Safari 9 makes `arguments.length` enumerable in strict mode.
    var result = (isArray(value) || isArguments(value))
        ? baseTimes(value.length, String)
        : [];
    var length = result.length, skipIndexes = !!length;
    for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
            result.push(key);
        }
    }
    return result;
}
/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
        (value === undefined && !(key in object))) {
        object[key] = value;
    }
}
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
        if (eq(array[length][0], key)) {
            return length;
        }
    }
    return -1;
}
/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
    return object && copyObject(source, keys(source), object);
}
/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @param {boolean} [isFull] Specify a clone including symbols.
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
    var result;
    if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== undefined) {
        return result;
    }
    if (!isObject(value)) {
        return value;
    }
    var isArr = isArray(value);
    if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
            return copyArray(value, result);
        }
    }
    else {
        var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
            if (isHostObject(value)) {
                return object ? value : {};
            }
            result = initCloneObject(isFunc ? {} : value);
            if (!isDeep) {
                return copySymbols(value, baseAssign(result, value));
            }
        }
        else {
            if (!cloneableTags[tag]) {
                return object ? value : {};
            }
            result = initCloneByTag(value, tag, baseClone, isDeep);
        }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new Stack);
    var stacked = stack.get(value);
    if (stacked) {
        return stacked;
    }
    stack.set(value, result);
    if (!isArr) {
        var props = isFull ? getAllKeys(value) : keys(value);
    }
    arrayEach(props || value, function (subValue, key) {
        if (props) {
            key = subValue;
            subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
    });
    return result;
}
/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} prototype The object to inherit from.
 * @returns {Object} Returns the new object.
 */
function baseCreate(proto) {
    return isObject(proto) ? objectCreate(proto) : {};
}
/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}
/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
    return objectToString.call(value);
}
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
        return false;
    }
    var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
}
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
    if (!isPrototype(object)) {
        return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
            result.push(key);
        }
    }
    return result;
}
/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
        return buffer.slice();
    }
    var result = new buffer.constructor(buffer.length);
    buffer.copy(result);
    return result;
}
/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
}
/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
/**
 * Creates a clone of `map`.
 *
 * @private
 * @param {Object} map The map to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned map.
 */
function cloneMap(map, isDeep, cloneFunc) {
    var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
    return arrayReduce(array, addMapEntry, new map.constructor);
}
/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
}
/**
 * Creates a clone of `set`.
 *
 * @private
 * @param {Object} set The set to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned set.
 */
function cloneSet(set, isDeep, cloneFunc) {
    var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
    return arrayReduce(array, addSetEntry, new set.constructor);
}
/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}
/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
    var index = -1, length = source.length;
    array || (array = Array(length));
    while (++index < length) {
        array[index] = source[index];
    }
    return array;
}
/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
    object || (object = {});
    var index = -1, length = props.length;
    while (++index < length) {
        var key = props[index];
        var newValue = customizer
            ? customizer(object[key], source[key], key, object, source)
            : undefined;
        assignValue(object, key, newValue === undefined ? source[key] : newValue);
    }
    return object;
}
/**
 * Copies own symbol properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
    return copyObject(source, getSymbols(source), object);
}
/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
}
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
}
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
}
/**
 * Creates an array of the own enumerable symbol properties of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;
// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
    getTag = function (value) {
        var result = objectToString.call(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : undefined;
        if (ctorString) {
            switch (ctorString) {
                case dataViewCtorString:
                    return dataViewTag;
                case mapCtorString:
                    return mapTag;
                case promiseCtorString:
                    return promiseTag;
                case setCtorString:
                    return setTag;
                case weakMapCtorString:
                    return weakMapTag;
            }
        }
        return result;
    };
}
/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
    var length = array.length, result = array.constructor(length);
    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
    }
    return result;
}
/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
    return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
}
/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, cloneFunc, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
        case arrayBufferTag:
            return cloneArrayBuffer(object);
        case boolTag:
        case dateTag:
            return new Ctor(+object);
        case dataViewTag:
            return cloneDataView(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
            return cloneTypedArray(object, isDeep);
        case mapTag:
            return cloneMap(object, isDeep, cloneFunc);
        case numberTag:
        case stringTag:
            return new Ctor(object);
        case regexpTag:
            return cloneRegExp(object);
        case setTag:
            return cloneSet(object, isDeep, cloneFunc);
        case symbolTag:
            return cloneSymbol(object);
    }
}
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length &&
        (typeof value == 'number' || reIsUint.test(value)) &&
        (value > -1 && value % 1 == 0 && value < length);
}
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
    var type = typeof value;
    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
}
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
    return !!maskSrcKey && (maskSrcKey in func);
}
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
    var Ctor = value && value.constructor, proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
    return value === proto;
}
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
    if (func != null) {
        try {
            return funcToString.call(func);
        }
        catch (e) {
        }
        try {
            return (`${func}`);
        }
        catch (e) {
        }
    }
    return '';
}
/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
    return baseClone(value, true, true);
}
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
    return value === other || (value !== value && other !== other);
}
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
}
/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
}
/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 8-9 which returns 'object' for typed array and other constructors.
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
}
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
    return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
    return !!value && typeof value == 'object';
}
/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
    return [];
}
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
    return false;
}



/***/ }),

/***/ "../node_modules/@cloudinary/url-gen/internal/utils/dataStructureUtils.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@cloudinary/url-gen/internal/utils/dataStructureUtils.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isString": () => (/* binding */ isString),
/* harmony export */   "mapToSortedArray": () => (/* binding */ mapToSortedArray)
/* harmony export */ });
/**
 * Sort a map by key
 * @private
 * @param map <string, any>
 * @Return array of map's values sorted by key
 */
function mapToSortedArray(map, flags) {
    const array = Array.from(map.entries());
    // objects from the Array.from() method above are stored in array of arrays:
    // [[qualifierKey, QualifierObj], [qualifierKey, QualifierObj]]
    // Flags is an array of FlagQualifierObj
    // We need to convert it to the same form: [flagQualifier] =>  ['fl', flagQualifier]
    flags.forEach((flag) => {
        array.push(['fl', flag]); // push ['fl', flagQualifier]
    });
    return array.sort().map((v) => v[1]);
}
/**
 * Checks if `value` is a string.
 * @private
 * @param {*} value The value to check.
 * @return {boolean} `true` if `value` is a string, else `false`.
 */
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}



/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!******************!*\
  !*** ./index.js ***!
  \******************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "videoPlayer": () => (/* binding */ videoPlayer),
/* harmony export */   "videoPlayers": () => (/* binding */ videoPlayers)
/* harmony export */ });
/* harmony import */ var assets_styles_main_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! assets/styles/main.scss */ "./assets/styles/main.scss");
/* harmony import */ var _video_player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./video-player */ "./video-player.js");
/* harmony import */ var utils_assign__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/assign */ "./utils/assign.js");
/* harmony import */ var _utils_object__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/object */ "./utils/object.js");
/* harmony import */ var _video_player_const__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./video-player.const */ "./video-player.const.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }





if (window.cloudinary && window.cloudinary.Cloudinary) {
  console.warn('For version 1.9.0 and above, cloudinary-core is not needed for using the Cloudinary Video Player');
}
var getConfig = function getConfig() {
  var playerOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var cloudinaryConfig = arguments.length > 1 ? arguments[1] : undefined;
  var snakeCaseCloudinaryConfig = (0,_utils_object__WEBPACK_IMPORTED_MODULE_3__.pick)((0,_utils_object__WEBPACK_IMPORTED_MODULE_3__.convertKeysToSnakeCase)(playerOptions), _video_player_const__WEBPACK_IMPORTED_MODULE_4__.CLOUDINARY_CONFIG_PARAM);

  // pick cld-configurations and assign them to cloudinaryConfig
  return (0,utils_assign__WEBPACK_IMPORTED_MODULE_2__.assign)(playerOptions, {
    cloudinaryConfig: cloudinaryConfig || snakeCaseCloudinaryConfig
  });
};
var getVideoPlayer = function getVideoPlayer(config) {
  return function (id, playerOptions, ready) {
    return new _video_player__WEBPACK_IMPORTED_MODULE_1__["default"](id, getConfig(playerOptions, config), ready);
  };
};
var getVideoPlayers = function getVideoPlayers(config) {
  return function (selector, playerOptions, ready) {
    return _video_player__WEBPACK_IMPORTED_MODULE_1__["default"].all(selector, getConfig(playerOptions, config), ready);
  };
};
var cloudinaryVideoPlayerConfig = function cloudinaryVideoPlayerConfig(config) {
  return {
    videoPlayer: getVideoPlayer(config),
    videoPlayers: getVideoPlayers(config)
  };
};
var videoPlayer = getVideoPlayer();
var videoPlayers = getVideoPlayers();
var cloudinary = _objectSpread(_objectSpread({}, window.cloudinary || {}), {}, {
  videoPlayer: videoPlayer,
  videoPlayers: videoPlayers,
  Cloudinary: {
    // Backwards compatibility with SDK v1
    "new": cloudinaryVideoPlayerConfig
  }
});
window.cloudinary = cloudinary;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (cloudinary);
})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=cld-video-player.light.js.map